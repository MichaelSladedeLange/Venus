
Venus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016650  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f70  08016710  08016710  00026710  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017680  08017680  000301e8  2**0
                  CONTENTS
  4 .ARM          00000000  08017680  08017680  000301e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08017680  08017680  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017680  08017680  00027680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017684  08017684  00027684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08017688  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002bb4  200001e8  08017870  000301e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002d9c  08017870  00032d9c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fcaa  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043f9  00000000  00000000  0004feba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001920  00000000  00000000  000542b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017d0  00000000  00000000  00055bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016136  00000000  00000000  000573a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022d4f  00000000  00000000  0006d4de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007d8a7  00000000  00000000  0009022d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010dad4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071a8  00000000  00000000  0010db24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e8 	.word	0x200001e8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080166f8 	.word	0x080166f8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001ec 	.word	0x200001ec
 8000104:	080166f8 	.word	0x080166f8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f8f7 	bl	8001630 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f847 	bl	80014e0 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f8e9 	bl	8001630 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f8df 	bl	8001630 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f86f 	bl	8001564 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f865 	bl	8001564 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 f90f 	bl	80006d4 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 f89b 	bl	80005fc <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 f901 	bl	80006d4 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 f8f7 	bl	80006d4 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 f8a7 	bl	8000648 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 f89d 	bl	8000648 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_d2uiz>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	2200      	movs	r2, #0
 8000520:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <__aeabi_d2uiz+0x38>)
 8000522:	0004      	movs	r4, r0
 8000524:	000d      	movs	r5, r1
 8000526:	f7ff ffb5 	bl	8000494 <__aeabi_dcmpge>
 800052a:	2800      	cmp	r0, #0
 800052c:	d104      	bne.n	8000538 <__aeabi_d2uiz+0x1c>
 800052e:	0020      	movs	r0, r4
 8000530:	0029      	movs	r1, r5
 8000532:	f001 fefd 	bl	8002330 <__aeabi_d2iz>
 8000536:	bd70      	pop	{r4, r5, r6, pc}
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <__aeabi_d2uiz+0x38>)
 800053a:	2200      	movs	r2, #0
 800053c:	0020      	movs	r0, r4
 800053e:	0029      	movs	r1, r5
 8000540:	f001 fb46 	bl	8001bd0 <__aeabi_dsub>
 8000544:	f001 fef4 	bl	8002330 <__aeabi_d2iz>
 8000548:	2380      	movs	r3, #128	; 0x80
 800054a:	061b      	lsls	r3, r3, #24
 800054c:	469c      	mov	ip, r3
 800054e:	4460      	add	r0, ip
 8000550:	e7f1      	b.n	8000536 <__aeabi_d2uiz+0x1a>
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	41e00000 	.word	0x41e00000

08000558 <__aeabi_d2lz>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	0005      	movs	r5, r0
 800055c:	000c      	movs	r4, r1
 800055e:	2200      	movs	r2, #0
 8000560:	2300      	movs	r3, #0
 8000562:	0028      	movs	r0, r5
 8000564:	0021      	movs	r1, r4
 8000566:	f7ff ff77 	bl	8000458 <__aeabi_dcmplt>
 800056a:	2800      	cmp	r0, #0
 800056c:	d108      	bne.n	8000580 <__aeabi_d2lz+0x28>
 800056e:	0028      	movs	r0, r5
 8000570:	0021      	movs	r1, r4
 8000572:	f000 f80f 	bl	8000594 <__aeabi_d2ulz>
 8000576:	0002      	movs	r2, r0
 8000578:	000b      	movs	r3, r1
 800057a:	0010      	movs	r0, r2
 800057c:	0019      	movs	r1, r3
 800057e:	bd70      	pop	{r4, r5, r6, pc}
 8000580:	2380      	movs	r3, #128	; 0x80
 8000582:	061b      	lsls	r3, r3, #24
 8000584:	18e1      	adds	r1, r4, r3
 8000586:	0028      	movs	r0, r5
 8000588:	f000 f804 	bl	8000594 <__aeabi_d2ulz>
 800058c:	2300      	movs	r3, #0
 800058e:	4242      	negs	r2, r0
 8000590:	418b      	sbcs	r3, r1
 8000592:	e7f2      	b.n	800057a <__aeabi_d2lz+0x22>

08000594 <__aeabi_d2ulz>:
 8000594:	b570      	push	{r4, r5, r6, lr}
 8000596:	2200      	movs	r2, #0
 8000598:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <__aeabi_d2ulz+0x34>)
 800059a:	000d      	movs	r5, r1
 800059c:	0004      	movs	r4, r0
 800059e:	f001 f8ab 	bl	80016f8 <__aeabi_dmul>
 80005a2:	f7ff ffbb 	bl	800051c <__aeabi_d2uiz>
 80005a6:	0006      	movs	r6, r0
 80005a8:	f001 ff28 	bl	80023fc <__aeabi_ui2d>
 80005ac:	2200      	movs	r2, #0
 80005ae:	4b07      	ldr	r3, [pc, #28]	; (80005cc <__aeabi_d2ulz+0x38>)
 80005b0:	f001 f8a2 	bl	80016f8 <__aeabi_dmul>
 80005b4:	0002      	movs	r2, r0
 80005b6:	000b      	movs	r3, r1
 80005b8:	0020      	movs	r0, r4
 80005ba:	0029      	movs	r1, r5
 80005bc:	f001 fb08 	bl	8001bd0 <__aeabi_dsub>
 80005c0:	f7ff ffac 	bl	800051c <__aeabi_d2uiz>
 80005c4:	0031      	movs	r1, r6
 80005c6:	bd70      	pop	{r4, r5, r6, pc}
 80005c8:	3df00000 	.word	0x3df00000
 80005cc:	41f00000 	.word	0x41f00000

080005d0 <__aeabi_l2d>:
 80005d0:	b570      	push	{r4, r5, r6, lr}
 80005d2:	0006      	movs	r6, r0
 80005d4:	0008      	movs	r0, r1
 80005d6:	f001 fee1 	bl	800239c <__aeabi_i2d>
 80005da:	2200      	movs	r2, #0
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <__aeabi_l2d+0x28>)
 80005de:	f001 f88b 	bl	80016f8 <__aeabi_dmul>
 80005e2:	000d      	movs	r5, r1
 80005e4:	0004      	movs	r4, r0
 80005e6:	0030      	movs	r0, r6
 80005e8:	f001 ff08 	bl	80023fc <__aeabi_ui2d>
 80005ec:	002b      	movs	r3, r5
 80005ee:	0022      	movs	r2, r4
 80005f0:	f000 f944 	bl	800087c <__aeabi_dadd>
 80005f4:	bd70      	pop	{r4, r5, r6, pc}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	41f00000 	.word	0x41f00000

080005fc <__eqsf2>:
 80005fc:	b570      	push	{r4, r5, r6, lr}
 80005fe:	0042      	lsls	r2, r0, #1
 8000600:	0245      	lsls	r5, r0, #9
 8000602:	024e      	lsls	r6, r1, #9
 8000604:	004c      	lsls	r4, r1, #1
 8000606:	0fc3      	lsrs	r3, r0, #31
 8000608:	0a6d      	lsrs	r5, r5, #9
 800060a:	2001      	movs	r0, #1
 800060c:	0e12      	lsrs	r2, r2, #24
 800060e:	0a76      	lsrs	r6, r6, #9
 8000610:	0e24      	lsrs	r4, r4, #24
 8000612:	0fc9      	lsrs	r1, r1, #31
 8000614:	2aff      	cmp	r2, #255	; 0xff
 8000616:	d006      	beq.n	8000626 <__eqsf2+0x2a>
 8000618:	2cff      	cmp	r4, #255	; 0xff
 800061a:	d003      	beq.n	8000624 <__eqsf2+0x28>
 800061c:	42a2      	cmp	r2, r4
 800061e:	d101      	bne.n	8000624 <__eqsf2+0x28>
 8000620:	42b5      	cmp	r5, r6
 8000622:	d006      	beq.n	8000632 <__eqsf2+0x36>
 8000624:	bd70      	pop	{r4, r5, r6, pc}
 8000626:	2d00      	cmp	r5, #0
 8000628:	d1fc      	bne.n	8000624 <__eqsf2+0x28>
 800062a:	2cff      	cmp	r4, #255	; 0xff
 800062c:	d1fa      	bne.n	8000624 <__eqsf2+0x28>
 800062e:	2e00      	cmp	r6, #0
 8000630:	d1f8      	bne.n	8000624 <__eqsf2+0x28>
 8000632:	428b      	cmp	r3, r1
 8000634:	d006      	beq.n	8000644 <__eqsf2+0x48>
 8000636:	2001      	movs	r0, #1
 8000638:	2a00      	cmp	r2, #0
 800063a:	d1f3      	bne.n	8000624 <__eqsf2+0x28>
 800063c:	0028      	movs	r0, r5
 800063e:	1e43      	subs	r3, r0, #1
 8000640:	4198      	sbcs	r0, r3
 8000642:	e7ef      	b.n	8000624 <__eqsf2+0x28>
 8000644:	2000      	movs	r0, #0
 8000646:	e7ed      	b.n	8000624 <__eqsf2+0x28>

08000648 <__gesf2>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	0042      	lsls	r2, r0, #1
 800064c:	0245      	lsls	r5, r0, #9
 800064e:	024e      	lsls	r6, r1, #9
 8000650:	004c      	lsls	r4, r1, #1
 8000652:	0fc3      	lsrs	r3, r0, #31
 8000654:	0a6d      	lsrs	r5, r5, #9
 8000656:	0e12      	lsrs	r2, r2, #24
 8000658:	0a76      	lsrs	r6, r6, #9
 800065a:	0e24      	lsrs	r4, r4, #24
 800065c:	0fc8      	lsrs	r0, r1, #31
 800065e:	2aff      	cmp	r2, #255	; 0xff
 8000660:	d01b      	beq.n	800069a <__gesf2+0x52>
 8000662:	2cff      	cmp	r4, #255	; 0xff
 8000664:	d00e      	beq.n	8000684 <__gesf2+0x3c>
 8000666:	2a00      	cmp	r2, #0
 8000668:	d11b      	bne.n	80006a2 <__gesf2+0x5a>
 800066a:	2c00      	cmp	r4, #0
 800066c:	d101      	bne.n	8000672 <__gesf2+0x2a>
 800066e:	2e00      	cmp	r6, #0
 8000670:	d01c      	beq.n	80006ac <__gesf2+0x64>
 8000672:	2d00      	cmp	r5, #0
 8000674:	d00c      	beq.n	8000690 <__gesf2+0x48>
 8000676:	4283      	cmp	r3, r0
 8000678:	d01c      	beq.n	80006b4 <__gesf2+0x6c>
 800067a:	2102      	movs	r1, #2
 800067c:	1e58      	subs	r0, r3, #1
 800067e:	4008      	ands	r0, r1
 8000680:	3801      	subs	r0, #1
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	2e00      	cmp	r6, #0
 8000686:	d122      	bne.n	80006ce <__gesf2+0x86>
 8000688:	2a00      	cmp	r2, #0
 800068a:	d1f4      	bne.n	8000676 <__gesf2+0x2e>
 800068c:	2d00      	cmp	r5, #0
 800068e:	d1f2      	bne.n	8000676 <__gesf2+0x2e>
 8000690:	2800      	cmp	r0, #0
 8000692:	d1f6      	bne.n	8000682 <__gesf2+0x3a>
 8000694:	2001      	movs	r0, #1
 8000696:	4240      	negs	r0, r0
 8000698:	e7f3      	b.n	8000682 <__gesf2+0x3a>
 800069a:	2d00      	cmp	r5, #0
 800069c:	d117      	bne.n	80006ce <__gesf2+0x86>
 800069e:	2cff      	cmp	r4, #255	; 0xff
 80006a0:	d0f0      	beq.n	8000684 <__gesf2+0x3c>
 80006a2:	2c00      	cmp	r4, #0
 80006a4:	d1e7      	bne.n	8000676 <__gesf2+0x2e>
 80006a6:	2e00      	cmp	r6, #0
 80006a8:	d1e5      	bne.n	8000676 <__gesf2+0x2e>
 80006aa:	e7e6      	b.n	800067a <__gesf2+0x32>
 80006ac:	2000      	movs	r0, #0
 80006ae:	2d00      	cmp	r5, #0
 80006b0:	d0e7      	beq.n	8000682 <__gesf2+0x3a>
 80006b2:	e7e2      	b.n	800067a <__gesf2+0x32>
 80006b4:	42a2      	cmp	r2, r4
 80006b6:	dc05      	bgt.n	80006c4 <__gesf2+0x7c>
 80006b8:	dbea      	blt.n	8000690 <__gesf2+0x48>
 80006ba:	42b5      	cmp	r5, r6
 80006bc:	d802      	bhi.n	80006c4 <__gesf2+0x7c>
 80006be:	d3e7      	bcc.n	8000690 <__gesf2+0x48>
 80006c0:	2000      	movs	r0, #0
 80006c2:	e7de      	b.n	8000682 <__gesf2+0x3a>
 80006c4:	4243      	negs	r3, r0
 80006c6:	4158      	adcs	r0, r3
 80006c8:	0040      	lsls	r0, r0, #1
 80006ca:	3801      	subs	r0, #1
 80006cc:	e7d9      	b.n	8000682 <__gesf2+0x3a>
 80006ce:	2002      	movs	r0, #2
 80006d0:	4240      	negs	r0, r0
 80006d2:	e7d6      	b.n	8000682 <__gesf2+0x3a>

080006d4 <__lesf2>:
 80006d4:	b570      	push	{r4, r5, r6, lr}
 80006d6:	0042      	lsls	r2, r0, #1
 80006d8:	0245      	lsls	r5, r0, #9
 80006da:	024e      	lsls	r6, r1, #9
 80006dc:	004c      	lsls	r4, r1, #1
 80006de:	0fc3      	lsrs	r3, r0, #31
 80006e0:	0a6d      	lsrs	r5, r5, #9
 80006e2:	0e12      	lsrs	r2, r2, #24
 80006e4:	0a76      	lsrs	r6, r6, #9
 80006e6:	0e24      	lsrs	r4, r4, #24
 80006e8:	0fc8      	lsrs	r0, r1, #31
 80006ea:	2aff      	cmp	r2, #255	; 0xff
 80006ec:	d00b      	beq.n	8000706 <__lesf2+0x32>
 80006ee:	2cff      	cmp	r4, #255	; 0xff
 80006f0:	d00d      	beq.n	800070e <__lesf2+0x3a>
 80006f2:	2a00      	cmp	r2, #0
 80006f4:	d11f      	bne.n	8000736 <__lesf2+0x62>
 80006f6:	2c00      	cmp	r4, #0
 80006f8:	d116      	bne.n	8000728 <__lesf2+0x54>
 80006fa:	2e00      	cmp	r6, #0
 80006fc:	d114      	bne.n	8000728 <__lesf2+0x54>
 80006fe:	2000      	movs	r0, #0
 8000700:	2d00      	cmp	r5, #0
 8000702:	d010      	beq.n	8000726 <__lesf2+0x52>
 8000704:	e009      	b.n	800071a <__lesf2+0x46>
 8000706:	2d00      	cmp	r5, #0
 8000708:	d10c      	bne.n	8000724 <__lesf2+0x50>
 800070a:	2cff      	cmp	r4, #255	; 0xff
 800070c:	d113      	bne.n	8000736 <__lesf2+0x62>
 800070e:	2e00      	cmp	r6, #0
 8000710:	d108      	bne.n	8000724 <__lesf2+0x50>
 8000712:	2a00      	cmp	r2, #0
 8000714:	d008      	beq.n	8000728 <__lesf2+0x54>
 8000716:	4283      	cmp	r3, r0
 8000718:	d012      	beq.n	8000740 <__lesf2+0x6c>
 800071a:	2102      	movs	r1, #2
 800071c:	1e58      	subs	r0, r3, #1
 800071e:	4008      	ands	r0, r1
 8000720:	3801      	subs	r0, #1
 8000722:	e000      	b.n	8000726 <__lesf2+0x52>
 8000724:	2002      	movs	r0, #2
 8000726:	bd70      	pop	{r4, r5, r6, pc}
 8000728:	2d00      	cmp	r5, #0
 800072a:	d1f4      	bne.n	8000716 <__lesf2+0x42>
 800072c:	2800      	cmp	r0, #0
 800072e:	d1fa      	bne.n	8000726 <__lesf2+0x52>
 8000730:	2001      	movs	r0, #1
 8000732:	4240      	negs	r0, r0
 8000734:	e7f7      	b.n	8000726 <__lesf2+0x52>
 8000736:	2c00      	cmp	r4, #0
 8000738:	d1ed      	bne.n	8000716 <__lesf2+0x42>
 800073a:	2e00      	cmp	r6, #0
 800073c:	d1eb      	bne.n	8000716 <__lesf2+0x42>
 800073e:	e7ec      	b.n	800071a <__lesf2+0x46>
 8000740:	42a2      	cmp	r2, r4
 8000742:	dc05      	bgt.n	8000750 <__lesf2+0x7c>
 8000744:	dbf2      	blt.n	800072c <__lesf2+0x58>
 8000746:	42b5      	cmp	r5, r6
 8000748:	d802      	bhi.n	8000750 <__lesf2+0x7c>
 800074a:	d3ef      	bcc.n	800072c <__lesf2+0x58>
 800074c:	2000      	movs	r0, #0
 800074e:	e7ea      	b.n	8000726 <__lesf2+0x52>
 8000750:	4243      	negs	r3, r0
 8000752:	4158      	adcs	r0, r3
 8000754:	0040      	lsls	r0, r0, #1
 8000756:	3801      	subs	r0, #1
 8000758:	e7e5      	b.n	8000726 <__lesf2+0x52>
 800075a:	46c0      	nop			; (mov r8, r8)

0800075c <__aeabi_i2f>:
 800075c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800075e:	2800      	cmp	r0, #0
 8000760:	d013      	beq.n	800078a <__aeabi_i2f+0x2e>
 8000762:	17c3      	asrs	r3, r0, #31
 8000764:	18c6      	adds	r6, r0, r3
 8000766:	405e      	eors	r6, r3
 8000768:	0fc4      	lsrs	r4, r0, #31
 800076a:	0030      	movs	r0, r6
 800076c:	f001 ff3c 	bl	80025e8 <__clzsi2>
 8000770:	239e      	movs	r3, #158	; 0x9e
 8000772:	0005      	movs	r5, r0
 8000774:	1a1b      	subs	r3, r3, r0
 8000776:	2b96      	cmp	r3, #150	; 0x96
 8000778:	dc0f      	bgt.n	800079a <__aeabi_i2f+0x3e>
 800077a:	2808      	cmp	r0, #8
 800077c:	dd01      	ble.n	8000782 <__aeabi_i2f+0x26>
 800077e:	3d08      	subs	r5, #8
 8000780:	40ae      	lsls	r6, r5
 8000782:	0276      	lsls	r6, r6, #9
 8000784:	0a76      	lsrs	r6, r6, #9
 8000786:	b2d8      	uxtb	r0, r3
 8000788:	e002      	b.n	8000790 <__aeabi_i2f+0x34>
 800078a:	2400      	movs	r4, #0
 800078c:	2000      	movs	r0, #0
 800078e:	2600      	movs	r6, #0
 8000790:	05c0      	lsls	r0, r0, #23
 8000792:	4330      	orrs	r0, r6
 8000794:	07e4      	lsls	r4, r4, #31
 8000796:	4320      	orrs	r0, r4
 8000798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800079a:	2b99      	cmp	r3, #153	; 0x99
 800079c:	dd0c      	ble.n	80007b8 <__aeabi_i2f+0x5c>
 800079e:	2205      	movs	r2, #5
 80007a0:	0031      	movs	r1, r6
 80007a2:	1a12      	subs	r2, r2, r0
 80007a4:	40d1      	lsrs	r1, r2
 80007a6:	000a      	movs	r2, r1
 80007a8:	0001      	movs	r1, r0
 80007aa:	0030      	movs	r0, r6
 80007ac:	311b      	adds	r1, #27
 80007ae:	4088      	lsls	r0, r1
 80007b0:	1e41      	subs	r1, r0, #1
 80007b2:	4188      	sbcs	r0, r1
 80007b4:	4302      	orrs	r2, r0
 80007b6:	0016      	movs	r6, r2
 80007b8:	2d05      	cmp	r5, #5
 80007ba:	dc12      	bgt.n	80007e2 <__aeabi_i2f+0x86>
 80007bc:	0031      	movs	r1, r6
 80007be:	4f0d      	ldr	r7, [pc, #52]	; (80007f4 <__aeabi_i2f+0x98>)
 80007c0:	4039      	ands	r1, r7
 80007c2:	0772      	lsls	r2, r6, #29
 80007c4:	d009      	beq.n	80007da <__aeabi_i2f+0x7e>
 80007c6:	200f      	movs	r0, #15
 80007c8:	4030      	ands	r0, r6
 80007ca:	2804      	cmp	r0, #4
 80007cc:	d005      	beq.n	80007da <__aeabi_i2f+0x7e>
 80007ce:	3104      	adds	r1, #4
 80007d0:	014a      	lsls	r2, r1, #5
 80007d2:	d502      	bpl.n	80007da <__aeabi_i2f+0x7e>
 80007d4:	239f      	movs	r3, #159	; 0x9f
 80007d6:	4039      	ands	r1, r7
 80007d8:	1b5b      	subs	r3, r3, r5
 80007da:	0189      	lsls	r1, r1, #6
 80007dc:	0a4e      	lsrs	r6, r1, #9
 80007de:	b2d8      	uxtb	r0, r3
 80007e0:	e7d6      	b.n	8000790 <__aeabi_i2f+0x34>
 80007e2:	1f6a      	subs	r2, r5, #5
 80007e4:	4096      	lsls	r6, r2
 80007e6:	0031      	movs	r1, r6
 80007e8:	4f02      	ldr	r7, [pc, #8]	; (80007f4 <__aeabi_i2f+0x98>)
 80007ea:	4039      	ands	r1, r7
 80007ec:	0772      	lsls	r2, r6, #29
 80007ee:	d0f4      	beq.n	80007da <__aeabi_i2f+0x7e>
 80007f0:	e7e9      	b.n	80007c6 <__aeabi_i2f+0x6a>
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	fbffffff 	.word	0xfbffffff

080007f8 <__aeabi_ui2f>:
 80007f8:	b570      	push	{r4, r5, r6, lr}
 80007fa:	1e05      	subs	r5, r0, #0
 80007fc:	d00e      	beq.n	800081c <__aeabi_ui2f+0x24>
 80007fe:	f001 fef3 	bl	80025e8 <__clzsi2>
 8000802:	239e      	movs	r3, #158	; 0x9e
 8000804:	0004      	movs	r4, r0
 8000806:	1a1b      	subs	r3, r3, r0
 8000808:	2b96      	cmp	r3, #150	; 0x96
 800080a:	dc0c      	bgt.n	8000826 <__aeabi_ui2f+0x2e>
 800080c:	2808      	cmp	r0, #8
 800080e:	dd01      	ble.n	8000814 <__aeabi_ui2f+0x1c>
 8000810:	3c08      	subs	r4, #8
 8000812:	40a5      	lsls	r5, r4
 8000814:	026d      	lsls	r5, r5, #9
 8000816:	0a6d      	lsrs	r5, r5, #9
 8000818:	b2d8      	uxtb	r0, r3
 800081a:	e001      	b.n	8000820 <__aeabi_ui2f+0x28>
 800081c:	2000      	movs	r0, #0
 800081e:	2500      	movs	r5, #0
 8000820:	05c0      	lsls	r0, r0, #23
 8000822:	4328      	orrs	r0, r5
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	2b99      	cmp	r3, #153	; 0x99
 8000828:	dd09      	ble.n	800083e <__aeabi_ui2f+0x46>
 800082a:	0002      	movs	r2, r0
 800082c:	0029      	movs	r1, r5
 800082e:	321b      	adds	r2, #27
 8000830:	4091      	lsls	r1, r2
 8000832:	1e4a      	subs	r2, r1, #1
 8000834:	4191      	sbcs	r1, r2
 8000836:	2205      	movs	r2, #5
 8000838:	1a12      	subs	r2, r2, r0
 800083a:	40d5      	lsrs	r5, r2
 800083c:	430d      	orrs	r5, r1
 800083e:	2c05      	cmp	r4, #5
 8000840:	dc12      	bgt.n	8000868 <__aeabi_ui2f+0x70>
 8000842:	0029      	movs	r1, r5
 8000844:	4e0c      	ldr	r6, [pc, #48]	; (8000878 <__aeabi_ui2f+0x80>)
 8000846:	4031      	ands	r1, r6
 8000848:	076a      	lsls	r2, r5, #29
 800084a:	d009      	beq.n	8000860 <__aeabi_ui2f+0x68>
 800084c:	200f      	movs	r0, #15
 800084e:	4028      	ands	r0, r5
 8000850:	2804      	cmp	r0, #4
 8000852:	d005      	beq.n	8000860 <__aeabi_ui2f+0x68>
 8000854:	3104      	adds	r1, #4
 8000856:	014a      	lsls	r2, r1, #5
 8000858:	d502      	bpl.n	8000860 <__aeabi_ui2f+0x68>
 800085a:	239f      	movs	r3, #159	; 0x9f
 800085c:	4031      	ands	r1, r6
 800085e:	1b1b      	subs	r3, r3, r4
 8000860:	0189      	lsls	r1, r1, #6
 8000862:	0a4d      	lsrs	r5, r1, #9
 8000864:	b2d8      	uxtb	r0, r3
 8000866:	e7db      	b.n	8000820 <__aeabi_ui2f+0x28>
 8000868:	1f62      	subs	r2, r4, #5
 800086a:	4095      	lsls	r5, r2
 800086c:	0029      	movs	r1, r5
 800086e:	4e02      	ldr	r6, [pc, #8]	; (8000878 <__aeabi_ui2f+0x80>)
 8000870:	4031      	ands	r1, r6
 8000872:	076a      	lsls	r2, r5, #29
 8000874:	d0f4      	beq.n	8000860 <__aeabi_ui2f+0x68>
 8000876:	e7e9      	b.n	800084c <__aeabi_ui2f+0x54>
 8000878:	fbffffff 	.word	0xfbffffff

0800087c <__aeabi_dadd>:
 800087c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800087e:	464f      	mov	r7, r9
 8000880:	4646      	mov	r6, r8
 8000882:	46d6      	mov	lr, sl
 8000884:	000d      	movs	r5, r1
 8000886:	0004      	movs	r4, r0
 8000888:	b5c0      	push	{r6, r7, lr}
 800088a:	001f      	movs	r7, r3
 800088c:	0011      	movs	r1, r2
 800088e:	0328      	lsls	r0, r5, #12
 8000890:	0f62      	lsrs	r2, r4, #29
 8000892:	0a40      	lsrs	r0, r0, #9
 8000894:	4310      	orrs	r0, r2
 8000896:	007a      	lsls	r2, r7, #1
 8000898:	0d52      	lsrs	r2, r2, #21
 800089a:	00e3      	lsls	r3, r4, #3
 800089c:	033c      	lsls	r4, r7, #12
 800089e:	4691      	mov	r9, r2
 80008a0:	0a64      	lsrs	r4, r4, #9
 80008a2:	0ffa      	lsrs	r2, r7, #31
 80008a4:	0f4f      	lsrs	r7, r1, #29
 80008a6:	006e      	lsls	r6, r5, #1
 80008a8:	4327      	orrs	r7, r4
 80008aa:	4692      	mov	sl, r2
 80008ac:	46b8      	mov	r8, r7
 80008ae:	0d76      	lsrs	r6, r6, #21
 80008b0:	0fed      	lsrs	r5, r5, #31
 80008b2:	00c9      	lsls	r1, r1, #3
 80008b4:	4295      	cmp	r5, r2
 80008b6:	d100      	bne.n	80008ba <__aeabi_dadd+0x3e>
 80008b8:	e099      	b.n	80009ee <__aeabi_dadd+0x172>
 80008ba:	464c      	mov	r4, r9
 80008bc:	1b34      	subs	r4, r6, r4
 80008be:	46a4      	mov	ip, r4
 80008c0:	2c00      	cmp	r4, #0
 80008c2:	dc00      	bgt.n	80008c6 <__aeabi_dadd+0x4a>
 80008c4:	e07c      	b.n	80009c0 <__aeabi_dadd+0x144>
 80008c6:	464a      	mov	r2, r9
 80008c8:	2a00      	cmp	r2, #0
 80008ca:	d100      	bne.n	80008ce <__aeabi_dadd+0x52>
 80008cc:	e0b8      	b.n	8000a40 <__aeabi_dadd+0x1c4>
 80008ce:	4ac5      	ldr	r2, [pc, #788]	; (8000be4 <__aeabi_dadd+0x368>)
 80008d0:	4296      	cmp	r6, r2
 80008d2:	d100      	bne.n	80008d6 <__aeabi_dadd+0x5a>
 80008d4:	e11c      	b.n	8000b10 <__aeabi_dadd+0x294>
 80008d6:	2280      	movs	r2, #128	; 0x80
 80008d8:	003c      	movs	r4, r7
 80008da:	0412      	lsls	r2, r2, #16
 80008dc:	4314      	orrs	r4, r2
 80008de:	46a0      	mov	r8, r4
 80008e0:	4662      	mov	r2, ip
 80008e2:	2a38      	cmp	r2, #56	; 0x38
 80008e4:	dd00      	ble.n	80008e8 <__aeabi_dadd+0x6c>
 80008e6:	e161      	b.n	8000bac <__aeabi_dadd+0x330>
 80008e8:	2a1f      	cmp	r2, #31
 80008ea:	dd00      	ble.n	80008ee <__aeabi_dadd+0x72>
 80008ec:	e1cc      	b.n	8000c88 <__aeabi_dadd+0x40c>
 80008ee:	4664      	mov	r4, ip
 80008f0:	2220      	movs	r2, #32
 80008f2:	1b12      	subs	r2, r2, r4
 80008f4:	4644      	mov	r4, r8
 80008f6:	4094      	lsls	r4, r2
 80008f8:	000f      	movs	r7, r1
 80008fa:	46a1      	mov	r9, r4
 80008fc:	4664      	mov	r4, ip
 80008fe:	4091      	lsls	r1, r2
 8000900:	40e7      	lsrs	r7, r4
 8000902:	464c      	mov	r4, r9
 8000904:	1e4a      	subs	r2, r1, #1
 8000906:	4191      	sbcs	r1, r2
 8000908:	433c      	orrs	r4, r7
 800090a:	4642      	mov	r2, r8
 800090c:	4321      	orrs	r1, r4
 800090e:	4664      	mov	r4, ip
 8000910:	40e2      	lsrs	r2, r4
 8000912:	1a80      	subs	r0, r0, r2
 8000914:	1a5c      	subs	r4, r3, r1
 8000916:	42a3      	cmp	r3, r4
 8000918:	419b      	sbcs	r3, r3
 800091a:	425f      	negs	r7, r3
 800091c:	1bc7      	subs	r7, r0, r7
 800091e:	023b      	lsls	r3, r7, #8
 8000920:	d400      	bmi.n	8000924 <__aeabi_dadd+0xa8>
 8000922:	e0d0      	b.n	8000ac6 <__aeabi_dadd+0x24a>
 8000924:	027f      	lsls	r7, r7, #9
 8000926:	0a7f      	lsrs	r7, r7, #9
 8000928:	2f00      	cmp	r7, #0
 800092a:	d100      	bne.n	800092e <__aeabi_dadd+0xb2>
 800092c:	e0ff      	b.n	8000b2e <__aeabi_dadd+0x2b2>
 800092e:	0038      	movs	r0, r7
 8000930:	f001 fe5a 	bl	80025e8 <__clzsi2>
 8000934:	0001      	movs	r1, r0
 8000936:	3908      	subs	r1, #8
 8000938:	2320      	movs	r3, #32
 800093a:	0022      	movs	r2, r4
 800093c:	1a5b      	subs	r3, r3, r1
 800093e:	408f      	lsls	r7, r1
 8000940:	40da      	lsrs	r2, r3
 8000942:	408c      	lsls	r4, r1
 8000944:	4317      	orrs	r7, r2
 8000946:	42b1      	cmp	r1, r6
 8000948:	da00      	bge.n	800094c <__aeabi_dadd+0xd0>
 800094a:	e0ff      	b.n	8000b4c <__aeabi_dadd+0x2d0>
 800094c:	1b89      	subs	r1, r1, r6
 800094e:	1c4b      	adds	r3, r1, #1
 8000950:	2b1f      	cmp	r3, #31
 8000952:	dd00      	ble.n	8000956 <__aeabi_dadd+0xda>
 8000954:	e0a8      	b.n	8000aa8 <__aeabi_dadd+0x22c>
 8000956:	2220      	movs	r2, #32
 8000958:	0039      	movs	r1, r7
 800095a:	1ad2      	subs	r2, r2, r3
 800095c:	0020      	movs	r0, r4
 800095e:	4094      	lsls	r4, r2
 8000960:	4091      	lsls	r1, r2
 8000962:	40d8      	lsrs	r0, r3
 8000964:	1e62      	subs	r2, r4, #1
 8000966:	4194      	sbcs	r4, r2
 8000968:	40df      	lsrs	r7, r3
 800096a:	2600      	movs	r6, #0
 800096c:	4301      	orrs	r1, r0
 800096e:	430c      	orrs	r4, r1
 8000970:	0763      	lsls	r3, r4, #29
 8000972:	d009      	beq.n	8000988 <__aeabi_dadd+0x10c>
 8000974:	230f      	movs	r3, #15
 8000976:	4023      	ands	r3, r4
 8000978:	2b04      	cmp	r3, #4
 800097a:	d005      	beq.n	8000988 <__aeabi_dadd+0x10c>
 800097c:	1d23      	adds	r3, r4, #4
 800097e:	42a3      	cmp	r3, r4
 8000980:	41a4      	sbcs	r4, r4
 8000982:	4264      	negs	r4, r4
 8000984:	193f      	adds	r7, r7, r4
 8000986:	001c      	movs	r4, r3
 8000988:	023b      	lsls	r3, r7, #8
 800098a:	d400      	bmi.n	800098e <__aeabi_dadd+0x112>
 800098c:	e09e      	b.n	8000acc <__aeabi_dadd+0x250>
 800098e:	4b95      	ldr	r3, [pc, #596]	; (8000be4 <__aeabi_dadd+0x368>)
 8000990:	3601      	adds	r6, #1
 8000992:	429e      	cmp	r6, r3
 8000994:	d100      	bne.n	8000998 <__aeabi_dadd+0x11c>
 8000996:	e0b7      	b.n	8000b08 <__aeabi_dadd+0x28c>
 8000998:	4a93      	ldr	r2, [pc, #588]	; (8000be8 <__aeabi_dadd+0x36c>)
 800099a:	08e4      	lsrs	r4, r4, #3
 800099c:	4017      	ands	r7, r2
 800099e:	077b      	lsls	r3, r7, #29
 80009a0:	0571      	lsls	r1, r6, #21
 80009a2:	027f      	lsls	r7, r7, #9
 80009a4:	4323      	orrs	r3, r4
 80009a6:	0b3f      	lsrs	r7, r7, #12
 80009a8:	0d4a      	lsrs	r2, r1, #21
 80009aa:	0512      	lsls	r2, r2, #20
 80009ac:	433a      	orrs	r2, r7
 80009ae:	07ed      	lsls	r5, r5, #31
 80009b0:	432a      	orrs	r2, r5
 80009b2:	0018      	movs	r0, r3
 80009b4:	0011      	movs	r1, r2
 80009b6:	bce0      	pop	{r5, r6, r7}
 80009b8:	46ba      	mov	sl, r7
 80009ba:	46b1      	mov	r9, r6
 80009bc:	46a8      	mov	r8, r5
 80009be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009c0:	2c00      	cmp	r4, #0
 80009c2:	d04b      	beq.n	8000a5c <__aeabi_dadd+0x1e0>
 80009c4:	464c      	mov	r4, r9
 80009c6:	1ba4      	subs	r4, r4, r6
 80009c8:	46a4      	mov	ip, r4
 80009ca:	2e00      	cmp	r6, #0
 80009cc:	d000      	beq.n	80009d0 <__aeabi_dadd+0x154>
 80009ce:	e123      	b.n	8000c18 <__aeabi_dadd+0x39c>
 80009d0:	0004      	movs	r4, r0
 80009d2:	431c      	orrs	r4, r3
 80009d4:	d100      	bne.n	80009d8 <__aeabi_dadd+0x15c>
 80009d6:	e1af      	b.n	8000d38 <__aeabi_dadd+0x4bc>
 80009d8:	4662      	mov	r2, ip
 80009da:	1e54      	subs	r4, r2, #1
 80009dc:	2a01      	cmp	r2, #1
 80009de:	d100      	bne.n	80009e2 <__aeabi_dadd+0x166>
 80009e0:	e215      	b.n	8000e0e <__aeabi_dadd+0x592>
 80009e2:	4d80      	ldr	r5, [pc, #512]	; (8000be4 <__aeabi_dadd+0x368>)
 80009e4:	45ac      	cmp	ip, r5
 80009e6:	d100      	bne.n	80009ea <__aeabi_dadd+0x16e>
 80009e8:	e1c8      	b.n	8000d7c <__aeabi_dadd+0x500>
 80009ea:	46a4      	mov	ip, r4
 80009ec:	e11b      	b.n	8000c26 <__aeabi_dadd+0x3aa>
 80009ee:	464a      	mov	r2, r9
 80009f0:	1ab2      	subs	r2, r6, r2
 80009f2:	4694      	mov	ip, r2
 80009f4:	2a00      	cmp	r2, #0
 80009f6:	dc00      	bgt.n	80009fa <__aeabi_dadd+0x17e>
 80009f8:	e0ac      	b.n	8000b54 <__aeabi_dadd+0x2d8>
 80009fa:	464a      	mov	r2, r9
 80009fc:	2a00      	cmp	r2, #0
 80009fe:	d043      	beq.n	8000a88 <__aeabi_dadd+0x20c>
 8000a00:	4a78      	ldr	r2, [pc, #480]	; (8000be4 <__aeabi_dadd+0x368>)
 8000a02:	4296      	cmp	r6, r2
 8000a04:	d100      	bne.n	8000a08 <__aeabi_dadd+0x18c>
 8000a06:	e1af      	b.n	8000d68 <__aeabi_dadd+0x4ec>
 8000a08:	2280      	movs	r2, #128	; 0x80
 8000a0a:	003c      	movs	r4, r7
 8000a0c:	0412      	lsls	r2, r2, #16
 8000a0e:	4314      	orrs	r4, r2
 8000a10:	46a0      	mov	r8, r4
 8000a12:	4662      	mov	r2, ip
 8000a14:	2a38      	cmp	r2, #56	; 0x38
 8000a16:	dc67      	bgt.n	8000ae8 <__aeabi_dadd+0x26c>
 8000a18:	2a1f      	cmp	r2, #31
 8000a1a:	dc00      	bgt.n	8000a1e <__aeabi_dadd+0x1a2>
 8000a1c:	e15f      	b.n	8000cde <__aeabi_dadd+0x462>
 8000a1e:	4647      	mov	r7, r8
 8000a20:	3a20      	subs	r2, #32
 8000a22:	40d7      	lsrs	r7, r2
 8000a24:	4662      	mov	r2, ip
 8000a26:	2a20      	cmp	r2, #32
 8000a28:	d005      	beq.n	8000a36 <__aeabi_dadd+0x1ba>
 8000a2a:	4664      	mov	r4, ip
 8000a2c:	2240      	movs	r2, #64	; 0x40
 8000a2e:	1b12      	subs	r2, r2, r4
 8000a30:	4644      	mov	r4, r8
 8000a32:	4094      	lsls	r4, r2
 8000a34:	4321      	orrs	r1, r4
 8000a36:	1e4a      	subs	r2, r1, #1
 8000a38:	4191      	sbcs	r1, r2
 8000a3a:	000c      	movs	r4, r1
 8000a3c:	433c      	orrs	r4, r7
 8000a3e:	e057      	b.n	8000af0 <__aeabi_dadd+0x274>
 8000a40:	003a      	movs	r2, r7
 8000a42:	430a      	orrs	r2, r1
 8000a44:	d100      	bne.n	8000a48 <__aeabi_dadd+0x1cc>
 8000a46:	e105      	b.n	8000c54 <__aeabi_dadd+0x3d8>
 8000a48:	0022      	movs	r2, r4
 8000a4a:	3a01      	subs	r2, #1
 8000a4c:	2c01      	cmp	r4, #1
 8000a4e:	d100      	bne.n	8000a52 <__aeabi_dadd+0x1d6>
 8000a50:	e182      	b.n	8000d58 <__aeabi_dadd+0x4dc>
 8000a52:	4c64      	ldr	r4, [pc, #400]	; (8000be4 <__aeabi_dadd+0x368>)
 8000a54:	45a4      	cmp	ip, r4
 8000a56:	d05b      	beq.n	8000b10 <__aeabi_dadd+0x294>
 8000a58:	4694      	mov	ip, r2
 8000a5a:	e741      	b.n	80008e0 <__aeabi_dadd+0x64>
 8000a5c:	4c63      	ldr	r4, [pc, #396]	; (8000bec <__aeabi_dadd+0x370>)
 8000a5e:	1c77      	adds	r7, r6, #1
 8000a60:	4227      	tst	r7, r4
 8000a62:	d000      	beq.n	8000a66 <__aeabi_dadd+0x1ea>
 8000a64:	e0c4      	b.n	8000bf0 <__aeabi_dadd+0x374>
 8000a66:	0004      	movs	r4, r0
 8000a68:	431c      	orrs	r4, r3
 8000a6a:	2e00      	cmp	r6, #0
 8000a6c:	d000      	beq.n	8000a70 <__aeabi_dadd+0x1f4>
 8000a6e:	e169      	b.n	8000d44 <__aeabi_dadd+0x4c8>
 8000a70:	2c00      	cmp	r4, #0
 8000a72:	d100      	bne.n	8000a76 <__aeabi_dadd+0x1fa>
 8000a74:	e1bf      	b.n	8000df6 <__aeabi_dadd+0x57a>
 8000a76:	4644      	mov	r4, r8
 8000a78:	430c      	orrs	r4, r1
 8000a7a:	d000      	beq.n	8000a7e <__aeabi_dadd+0x202>
 8000a7c:	e1d0      	b.n	8000e20 <__aeabi_dadd+0x5a4>
 8000a7e:	0742      	lsls	r2, r0, #29
 8000a80:	08db      	lsrs	r3, r3, #3
 8000a82:	4313      	orrs	r3, r2
 8000a84:	08c0      	lsrs	r0, r0, #3
 8000a86:	e029      	b.n	8000adc <__aeabi_dadd+0x260>
 8000a88:	003a      	movs	r2, r7
 8000a8a:	430a      	orrs	r2, r1
 8000a8c:	d100      	bne.n	8000a90 <__aeabi_dadd+0x214>
 8000a8e:	e170      	b.n	8000d72 <__aeabi_dadd+0x4f6>
 8000a90:	4662      	mov	r2, ip
 8000a92:	4664      	mov	r4, ip
 8000a94:	3a01      	subs	r2, #1
 8000a96:	2c01      	cmp	r4, #1
 8000a98:	d100      	bne.n	8000a9c <__aeabi_dadd+0x220>
 8000a9a:	e0e0      	b.n	8000c5e <__aeabi_dadd+0x3e2>
 8000a9c:	4c51      	ldr	r4, [pc, #324]	; (8000be4 <__aeabi_dadd+0x368>)
 8000a9e:	45a4      	cmp	ip, r4
 8000aa0:	d100      	bne.n	8000aa4 <__aeabi_dadd+0x228>
 8000aa2:	e161      	b.n	8000d68 <__aeabi_dadd+0x4ec>
 8000aa4:	4694      	mov	ip, r2
 8000aa6:	e7b4      	b.n	8000a12 <__aeabi_dadd+0x196>
 8000aa8:	003a      	movs	r2, r7
 8000aaa:	391f      	subs	r1, #31
 8000aac:	40ca      	lsrs	r2, r1
 8000aae:	0011      	movs	r1, r2
 8000ab0:	2b20      	cmp	r3, #32
 8000ab2:	d003      	beq.n	8000abc <__aeabi_dadd+0x240>
 8000ab4:	2240      	movs	r2, #64	; 0x40
 8000ab6:	1ad3      	subs	r3, r2, r3
 8000ab8:	409f      	lsls	r7, r3
 8000aba:	433c      	orrs	r4, r7
 8000abc:	1e63      	subs	r3, r4, #1
 8000abe:	419c      	sbcs	r4, r3
 8000ac0:	2700      	movs	r7, #0
 8000ac2:	2600      	movs	r6, #0
 8000ac4:	430c      	orrs	r4, r1
 8000ac6:	0763      	lsls	r3, r4, #29
 8000ac8:	d000      	beq.n	8000acc <__aeabi_dadd+0x250>
 8000aca:	e753      	b.n	8000974 <__aeabi_dadd+0xf8>
 8000acc:	46b4      	mov	ip, r6
 8000ace:	08e4      	lsrs	r4, r4, #3
 8000ad0:	077b      	lsls	r3, r7, #29
 8000ad2:	4323      	orrs	r3, r4
 8000ad4:	08f8      	lsrs	r0, r7, #3
 8000ad6:	4a43      	ldr	r2, [pc, #268]	; (8000be4 <__aeabi_dadd+0x368>)
 8000ad8:	4594      	cmp	ip, r2
 8000ada:	d01d      	beq.n	8000b18 <__aeabi_dadd+0x29c>
 8000adc:	4662      	mov	r2, ip
 8000ade:	0307      	lsls	r7, r0, #12
 8000ae0:	0552      	lsls	r2, r2, #21
 8000ae2:	0b3f      	lsrs	r7, r7, #12
 8000ae4:	0d52      	lsrs	r2, r2, #21
 8000ae6:	e760      	b.n	80009aa <__aeabi_dadd+0x12e>
 8000ae8:	4644      	mov	r4, r8
 8000aea:	430c      	orrs	r4, r1
 8000aec:	1e62      	subs	r2, r4, #1
 8000aee:	4194      	sbcs	r4, r2
 8000af0:	18e4      	adds	r4, r4, r3
 8000af2:	429c      	cmp	r4, r3
 8000af4:	419b      	sbcs	r3, r3
 8000af6:	425f      	negs	r7, r3
 8000af8:	183f      	adds	r7, r7, r0
 8000afa:	023b      	lsls	r3, r7, #8
 8000afc:	d5e3      	bpl.n	8000ac6 <__aeabi_dadd+0x24a>
 8000afe:	4b39      	ldr	r3, [pc, #228]	; (8000be4 <__aeabi_dadd+0x368>)
 8000b00:	3601      	adds	r6, #1
 8000b02:	429e      	cmp	r6, r3
 8000b04:	d000      	beq.n	8000b08 <__aeabi_dadd+0x28c>
 8000b06:	e0b5      	b.n	8000c74 <__aeabi_dadd+0x3f8>
 8000b08:	0032      	movs	r2, r6
 8000b0a:	2700      	movs	r7, #0
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	e74c      	b.n	80009aa <__aeabi_dadd+0x12e>
 8000b10:	0742      	lsls	r2, r0, #29
 8000b12:	08db      	lsrs	r3, r3, #3
 8000b14:	4313      	orrs	r3, r2
 8000b16:	08c0      	lsrs	r0, r0, #3
 8000b18:	001a      	movs	r2, r3
 8000b1a:	4302      	orrs	r2, r0
 8000b1c:	d100      	bne.n	8000b20 <__aeabi_dadd+0x2a4>
 8000b1e:	e1e1      	b.n	8000ee4 <__aeabi_dadd+0x668>
 8000b20:	2780      	movs	r7, #128	; 0x80
 8000b22:	033f      	lsls	r7, r7, #12
 8000b24:	4307      	orrs	r7, r0
 8000b26:	033f      	lsls	r7, r7, #12
 8000b28:	4a2e      	ldr	r2, [pc, #184]	; (8000be4 <__aeabi_dadd+0x368>)
 8000b2a:	0b3f      	lsrs	r7, r7, #12
 8000b2c:	e73d      	b.n	80009aa <__aeabi_dadd+0x12e>
 8000b2e:	0020      	movs	r0, r4
 8000b30:	f001 fd5a 	bl	80025e8 <__clzsi2>
 8000b34:	0001      	movs	r1, r0
 8000b36:	3118      	adds	r1, #24
 8000b38:	291f      	cmp	r1, #31
 8000b3a:	dc00      	bgt.n	8000b3e <__aeabi_dadd+0x2c2>
 8000b3c:	e6fc      	b.n	8000938 <__aeabi_dadd+0xbc>
 8000b3e:	3808      	subs	r0, #8
 8000b40:	4084      	lsls	r4, r0
 8000b42:	0027      	movs	r7, r4
 8000b44:	2400      	movs	r4, #0
 8000b46:	42b1      	cmp	r1, r6
 8000b48:	db00      	blt.n	8000b4c <__aeabi_dadd+0x2d0>
 8000b4a:	e6ff      	b.n	800094c <__aeabi_dadd+0xd0>
 8000b4c:	4a26      	ldr	r2, [pc, #152]	; (8000be8 <__aeabi_dadd+0x36c>)
 8000b4e:	1a76      	subs	r6, r6, r1
 8000b50:	4017      	ands	r7, r2
 8000b52:	e70d      	b.n	8000970 <__aeabi_dadd+0xf4>
 8000b54:	2a00      	cmp	r2, #0
 8000b56:	d02f      	beq.n	8000bb8 <__aeabi_dadd+0x33c>
 8000b58:	464a      	mov	r2, r9
 8000b5a:	1b92      	subs	r2, r2, r6
 8000b5c:	4694      	mov	ip, r2
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d100      	bne.n	8000b64 <__aeabi_dadd+0x2e8>
 8000b62:	e0ad      	b.n	8000cc0 <__aeabi_dadd+0x444>
 8000b64:	4a1f      	ldr	r2, [pc, #124]	; (8000be4 <__aeabi_dadd+0x368>)
 8000b66:	4591      	cmp	r9, r2
 8000b68:	d100      	bne.n	8000b6c <__aeabi_dadd+0x2f0>
 8000b6a:	e10f      	b.n	8000d8c <__aeabi_dadd+0x510>
 8000b6c:	2280      	movs	r2, #128	; 0x80
 8000b6e:	0412      	lsls	r2, r2, #16
 8000b70:	4310      	orrs	r0, r2
 8000b72:	4662      	mov	r2, ip
 8000b74:	2a38      	cmp	r2, #56	; 0x38
 8000b76:	dd00      	ble.n	8000b7a <__aeabi_dadd+0x2fe>
 8000b78:	e10f      	b.n	8000d9a <__aeabi_dadd+0x51e>
 8000b7a:	2a1f      	cmp	r2, #31
 8000b7c:	dd00      	ble.n	8000b80 <__aeabi_dadd+0x304>
 8000b7e:	e180      	b.n	8000e82 <__aeabi_dadd+0x606>
 8000b80:	4664      	mov	r4, ip
 8000b82:	2220      	movs	r2, #32
 8000b84:	001e      	movs	r6, r3
 8000b86:	1b12      	subs	r2, r2, r4
 8000b88:	4667      	mov	r7, ip
 8000b8a:	0004      	movs	r4, r0
 8000b8c:	4093      	lsls	r3, r2
 8000b8e:	4094      	lsls	r4, r2
 8000b90:	40fe      	lsrs	r6, r7
 8000b92:	1e5a      	subs	r2, r3, #1
 8000b94:	4193      	sbcs	r3, r2
 8000b96:	40f8      	lsrs	r0, r7
 8000b98:	4334      	orrs	r4, r6
 8000b9a:	431c      	orrs	r4, r3
 8000b9c:	4480      	add	r8, r0
 8000b9e:	1864      	adds	r4, r4, r1
 8000ba0:	428c      	cmp	r4, r1
 8000ba2:	41bf      	sbcs	r7, r7
 8000ba4:	427f      	negs	r7, r7
 8000ba6:	464e      	mov	r6, r9
 8000ba8:	4447      	add	r7, r8
 8000baa:	e7a6      	b.n	8000afa <__aeabi_dadd+0x27e>
 8000bac:	4642      	mov	r2, r8
 8000bae:	430a      	orrs	r2, r1
 8000bb0:	0011      	movs	r1, r2
 8000bb2:	1e4a      	subs	r2, r1, #1
 8000bb4:	4191      	sbcs	r1, r2
 8000bb6:	e6ad      	b.n	8000914 <__aeabi_dadd+0x98>
 8000bb8:	4c0c      	ldr	r4, [pc, #48]	; (8000bec <__aeabi_dadd+0x370>)
 8000bba:	1c72      	adds	r2, r6, #1
 8000bbc:	4222      	tst	r2, r4
 8000bbe:	d000      	beq.n	8000bc2 <__aeabi_dadd+0x346>
 8000bc0:	e0a1      	b.n	8000d06 <__aeabi_dadd+0x48a>
 8000bc2:	0002      	movs	r2, r0
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	d000      	beq.n	8000bcc <__aeabi_dadd+0x350>
 8000bca:	e0fa      	b.n	8000dc2 <__aeabi_dadd+0x546>
 8000bcc:	2a00      	cmp	r2, #0
 8000bce:	d100      	bne.n	8000bd2 <__aeabi_dadd+0x356>
 8000bd0:	e145      	b.n	8000e5e <__aeabi_dadd+0x5e2>
 8000bd2:	003a      	movs	r2, r7
 8000bd4:	430a      	orrs	r2, r1
 8000bd6:	d000      	beq.n	8000bda <__aeabi_dadd+0x35e>
 8000bd8:	e146      	b.n	8000e68 <__aeabi_dadd+0x5ec>
 8000bda:	0742      	lsls	r2, r0, #29
 8000bdc:	08db      	lsrs	r3, r3, #3
 8000bde:	4313      	orrs	r3, r2
 8000be0:	08c0      	lsrs	r0, r0, #3
 8000be2:	e77b      	b.n	8000adc <__aeabi_dadd+0x260>
 8000be4:	000007ff 	.word	0x000007ff
 8000be8:	ff7fffff 	.word	0xff7fffff
 8000bec:	000007fe 	.word	0x000007fe
 8000bf0:	4647      	mov	r7, r8
 8000bf2:	1a5c      	subs	r4, r3, r1
 8000bf4:	1bc2      	subs	r2, r0, r7
 8000bf6:	42a3      	cmp	r3, r4
 8000bf8:	41bf      	sbcs	r7, r7
 8000bfa:	427f      	negs	r7, r7
 8000bfc:	46b9      	mov	r9, r7
 8000bfe:	0017      	movs	r7, r2
 8000c00:	464a      	mov	r2, r9
 8000c02:	1abf      	subs	r7, r7, r2
 8000c04:	023a      	lsls	r2, r7, #8
 8000c06:	d500      	bpl.n	8000c0a <__aeabi_dadd+0x38e>
 8000c08:	e08d      	b.n	8000d26 <__aeabi_dadd+0x4aa>
 8000c0a:	0023      	movs	r3, r4
 8000c0c:	433b      	orrs	r3, r7
 8000c0e:	d000      	beq.n	8000c12 <__aeabi_dadd+0x396>
 8000c10:	e68a      	b.n	8000928 <__aeabi_dadd+0xac>
 8000c12:	2000      	movs	r0, #0
 8000c14:	2500      	movs	r5, #0
 8000c16:	e761      	b.n	8000adc <__aeabi_dadd+0x260>
 8000c18:	4cb4      	ldr	r4, [pc, #720]	; (8000eec <__aeabi_dadd+0x670>)
 8000c1a:	45a1      	cmp	r9, r4
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_dadd+0x3a4>
 8000c1e:	e0ad      	b.n	8000d7c <__aeabi_dadd+0x500>
 8000c20:	2480      	movs	r4, #128	; 0x80
 8000c22:	0424      	lsls	r4, r4, #16
 8000c24:	4320      	orrs	r0, r4
 8000c26:	4664      	mov	r4, ip
 8000c28:	2c38      	cmp	r4, #56	; 0x38
 8000c2a:	dc3d      	bgt.n	8000ca8 <__aeabi_dadd+0x42c>
 8000c2c:	4662      	mov	r2, ip
 8000c2e:	2c1f      	cmp	r4, #31
 8000c30:	dd00      	ble.n	8000c34 <__aeabi_dadd+0x3b8>
 8000c32:	e0b7      	b.n	8000da4 <__aeabi_dadd+0x528>
 8000c34:	2520      	movs	r5, #32
 8000c36:	001e      	movs	r6, r3
 8000c38:	1b2d      	subs	r5, r5, r4
 8000c3a:	0004      	movs	r4, r0
 8000c3c:	40ab      	lsls	r3, r5
 8000c3e:	40ac      	lsls	r4, r5
 8000c40:	40d6      	lsrs	r6, r2
 8000c42:	40d0      	lsrs	r0, r2
 8000c44:	4642      	mov	r2, r8
 8000c46:	1e5d      	subs	r5, r3, #1
 8000c48:	41ab      	sbcs	r3, r5
 8000c4a:	4334      	orrs	r4, r6
 8000c4c:	1a12      	subs	r2, r2, r0
 8000c4e:	4690      	mov	r8, r2
 8000c50:	4323      	orrs	r3, r4
 8000c52:	e02c      	b.n	8000cae <__aeabi_dadd+0x432>
 8000c54:	0742      	lsls	r2, r0, #29
 8000c56:	08db      	lsrs	r3, r3, #3
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	08c0      	lsrs	r0, r0, #3
 8000c5c:	e73b      	b.n	8000ad6 <__aeabi_dadd+0x25a>
 8000c5e:	185c      	adds	r4, r3, r1
 8000c60:	429c      	cmp	r4, r3
 8000c62:	419b      	sbcs	r3, r3
 8000c64:	4440      	add	r0, r8
 8000c66:	425b      	negs	r3, r3
 8000c68:	18c7      	adds	r7, r0, r3
 8000c6a:	2601      	movs	r6, #1
 8000c6c:	023b      	lsls	r3, r7, #8
 8000c6e:	d400      	bmi.n	8000c72 <__aeabi_dadd+0x3f6>
 8000c70:	e729      	b.n	8000ac6 <__aeabi_dadd+0x24a>
 8000c72:	2602      	movs	r6, #2
 8000c74:	4a9e      	ldr	r2, [pc, #632]	; (8000ef0 <__aeabi_dadd+0x674>)
 8000c76:	0863      	lsrs	r3, r4, #1
 8000c78:	4017      	ands	r7, r2
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	4014      	ands	r4, r2
 8000c7e:	431c      	orrs	r4, r3
 8000c80:	07fb      	lsls	r3, r7, #31
 8000c82:	431c      	orrs	r4, r3
 8000c84:	087f      	lsrs	r7, r7, #1
 8000c86:	e673      	b.n	8000970 <__aeabi_dadd+0xf4>
 8000c88:	4644      	mov	r4, r8
 8000c8a:	3a20      	subs	r2, #32
 8000c8c:	40d4      	lsrs	r4, r2
 8000c8e:	4662      	mov	r2, ip
 8000c90:	2a20      	cmp	r2, #32
 8000c92:	d005      	beq.n	8000ca0 <__aeabi_dadd+0x424>
 8000c94:	4667      	mov	r7, ip
 8000c96:	2240      	movs	r2, #64	; 0x40
 8000c98:	1bd2      	subs	r2, r2, r7
 8000c9a:	4647      	mov	r7, r8
 8000c9c:	4097      	lsls	r7, r2
 8000c9e:	4339      	orrs	r1, r7
 8000ca0:	1e4a      	subs	r2, r1, #1
 8000ca2:	4191      	sbcs	r1, r2
 8000ca4:	4321      	orrs	r1, r4
 8000ca6:	e635      	b.n	8000914 <__aeabi_dadd+0x98>
 8000ca8:	4303      	orrs	r3, r0
 8000caa:	1e58      	subs	r0, r3, #1
 8000cac:	4183      	sbcs	r3, r0
 8000cae:	1acc      	subs	r4, r1, r3
 8000cb0:	42a1      	cmp	r1, r4
 8000cb2:	41bf      	sbcs	r7, r7
 8000cb4:	4643      	mov	r3, r8
 8000cb6:	427f      	negs	r7, r7
 8000cb8:	4655      	mov	r5, sl
 8000cba:	464e      	mov	r6, r9
 8000cbc:	1bdf      	subs	r7, r3, r7
 8000cbe:	e62e      	b.n	800091e <__aeabi_dadd+0xa2>
 8000cc0:	0002      	movs	r2, r0
 8000cc2:	431a      	orrs	r2, r3
 8000cc4:	d100      	bne.n	8000cc8 <__aeabi_dadd+0x44c>
 8000cc6:	e0bd      	b.n	8000e44 <__aeabi_dadd+0x5c8>
 8000cc8:	4662      	mov	r2, ip
 8000cca:	4664      	mov	r4, ip
 8000ccc:	3a01      	subs	r2, #1
 8000cce:	2c01      	cmp	r4, #1
 8000cd0:	d100      	bne.n	8000cd4 <__aeabi_dadd+0x458>
 8000cd2:	e0e5      	b.n	8000ea0 <__aeabi_dadd+0x624>
 8000cd4:	4c85      	ldr	r4, [pc, #532]	; (8000eec <__aeabi_dadd+0x670>)
 8000cd6:	45a4      	cmp	ip, r4
 8000cd8:	d058      	beq.n	8000d8c <__aeabi_dadd+0x510>
 8000cda:	4694      	mov	ip, r2
 8000cdc:	e749      	b.n	8000b72 <__aeabi_dadd+0x2f6>
 8000cde:	4664      	mov	r4, ip
 8000ce0:	2220      	movs	r2, #32
 8000ce2:	1b12      	subs	r2, r2, r4
 8000ce4:	4644      	mov	r4, r8
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	000f      	movs	r7, r1
 8000cea:	46a1      	mov	r9, r4
 8000cec:	4664      	mov	r4, ip
 8000cee:	4091      	lsls	r1, r2
 8000cf0:	40e7      	lsrs	r7, r4
 8000cf2:	464c      	mov	r4, r9
 8000cf4:	1e4a      	subs	r2, r1, #1
 8000cf6:	4191      	sbcs	r1, r2
 8000cf8:	433c      	orrs	r4, r7
 8000cfa:	4642      	mov	r2, r8
 8000cfc:	430c      	orrs	r4, r1
 8000cfe:	4661      	mov	r1, ip
 8000d00:	40ca      	lsrs	r2, r1
 8000d02:	1880      	adds	r0, r0, r2
 8000d04:	e6f4      	b.n	8000af0 <__aeabi_dadd+0x274>
 8000d06:	4c79      	ldr	r4, [pc, #484]	; (8000eec <__aeabi_dadd+0x670>)
 8000d08:	42a2      	cmp	r2, r4
 8000d0a:	d100      	bne.n	8000d0e <__aeabi_dadd+0x492>
 8000d0c:	e6fd      	b.n	8000b0a <__aeabi_dadd+0x28e>
 8000d0e:	1859      	adds	r1, r3, r1
 8000d10:	4299      	cmp	r1, r3
 8000d12:	419b      	sbcs	r3, r3
 8000d14:	4440      	add	r0, r8
 8000d16:	425f      	negs	r7, r3
 8000d18:	19c7      	adds	r7, r0, r7
 8000d1a:	07fc      	lsls	r4, r7, #31
 8000d1c:	0849      	lsrs	r1, r1, #1
 8000d1e:	0016      	movs	r6, r2
 8000d20:	430c      	orrs	r4, r1
 8000d22:	087f      	lsrs	r7, r7, #1
 8000d24:	e6cf      	b.n	8000ac6 <__aeabi_dadd+0x24a>
 8000d26:	1acc      	subs	r4, r1, r3
 8000d28:	42a1      	cmp	r1, r4
 8000d2a:	41bf      	sbcs	r7, r7
 8000d2c:	4643      	mov	r3, r8
 8000d2e:	427f      	negs	r7, r7
 8000d30:	1a18      	subs	r0, r3, r0
 8000d32:	4655      	mov	r5, sl
 8000d34:	1bc7      	subs	r7, r0, r7
 8000d36:	e5f7      	b.n	8000928 <__aeabi_dadd+0xac>
 8000d38:	08c9      	lsrs	r1, r1, #3
 8000d3a:	077b      	lsls	r3, r7, #29
 8000d3c:	4655      	mov	r5, sl
 8000d3e:	430b      	orrs	r3, r1
 8000d40:	08f8      	lsrs	r0, r7, #3
 8000d42:	e6c8      	b.n	8000ad6 <__aeabi_dadd+0x25a>
 8000d44:	2c00      	cmp	r4, #0
 8000d46:	d000      	beq.n	8000d4a <__aeabi_dadd+0x4ce>
 8000d48:	e081      	b.n	8000e4e <__aeabi_dadd+0x5d2>
 8000d4a:	4643      	mov	r3, r8
 8000d4c:	430b      	orrs	r3, r1
 8000d4e:	d115      	bne.n	8000d7c <__aeabi_dadd+0x500>
 8000d50:	2080      	movs	r0, #128	; 0x80
 8000d52:	2500      	movs	r5, #0
 8000d54:	0300      	lsls	r0, r0, #12
 8000d56:	e6e3      	b.n	8000b20 <__aeabi_dadd+0x2a4>
 8000d58:	1a5c      	subs	r4, r3, r1
 8000d5a:	42a3      	cmp	r3, r4
 8000d5c:	419b      	sbcs	r3, r3
 8000d5e:	1bc7      	subs	r7, r0, r7
 8000d60:	425b      	negs	r3, r3
 8000d62:	2601      	movs	r6, #1
 8000d64:	1aff      	subs	r7, r7, r3
 8000d66:	e5da      	b.n	800091e <__aeabi_dadd+0xa2>
 8000d68:	0742      	lsls	r2, r0, #29
 8000d6a:	08db      	lsrs	r3, r3, #3
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	08c0      	lsrs	r0, r0, #3
 8000d70:	e6d2      	b.n	8000b18 <__aeabi_dadd+0x29c>
 8000d72:	0742      	lsls	r2, r0, #29
 8000d74:	08db      	lsrs	r3, r3, #3
 8000d76:	4313      	orrs	r3, r2
 8000d78:	08c0      	lsrs	r0, r0, #3
 8000d7a:	e6ac      	b.n	8000ad6 <__aeabi_dadd+0x25a>
 8000d7c:	4643      	mov	r3, r8
 8000d7e:	4642      	mov	r2, r8
 8000d80:	08c9      	lsrs	r1, r1, #3
 8000d82:	075b      	lsls	r3, r3, #29
 8000d84:	4655      	mov	r5, sl
 8000d86:	430b      	orrs	r3, r1
 8000d88:	08d0      	lsrs	r0, r2, #3
 8000d8a:	e6c5      	b.n	8000b18 <__aeabi_dadd+0x29c>
 8000d8c:	4643      	mov	r3, r8
 8000d8e:	4642      	mov	r2, r8
 8000d90:	075b      	lsls	r3, r3, #29
 8000d92:	08c9      	lsrs	r1, r1, #3
 8000d94:	430b      	orrs	r3, r1
 8000d96:	08d0      	lsrs	r0, r2, #3
 8000d98:	e6be      	b.n	8000b18 <__aeabi_dadd+0x29c>
 8000d9a:	4303      	orrs	r3, r0
 8000d9c:	001c      	movs	r4, r3
 8000d9e:	1e63      	subs	r3, r4, #1
 8000da0:	419c      	sbcs	r4, r3
 8000da2:	e6fc      	b.n	8000b9e <__aeabi_dadd+0x322>
 8000da4:	0002      	movs	r2, r0
 8000da6:	3c20      	subs	r4, #32
 8000da8:	40e2      	lsrs	r2, r4
 8000daa:	0014      	movs	r4, r2
 8000dac:	4662      	mov	r2, ip
 8000dae:	2a20      	cmp	r2, #32
 8000db0:	d003      	beq.n	8000dba <__aeabi_dadd+0x53e>
 8000db2:	2540      	movs	r5, #64	; 0x40
 8000db4:	1aad      	subs	r5, r5, r2
 8000db6:	40a8      	lsls	r0, r5
 8000db8:	4303      	orrs	r3, r0
 8000dba:	1e58      	subs	r0, r3, #1
 8000dbc:	4183      	sbcs	r3, r0
 8000dbe:	4323      	orrs	r3, r4
 8000dc0:	e775      	b.n	8000cae <__aeabi_dadd+0x432>
 8000dc2:	2a00      	cmp	r2, #0
 8000dc4:	d0e2      	beq.n	8000d8c <__aeabi_dadd+0x510>
 8000dc6:	003a      	movs	r2, r7
 8000dc8:	430a      	orrs	r2, r1
 8000dca:	d0cd      	beq.n	8000d68 <__aeabi_dadd+0x4ec>
 8000dcc:	0742      	lsls	r2, r0, #29
 8000dce:	08db      	lsrs	r3, r3, #3
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	2280      	movs	r2, #128	; 0x80
 8000dd4:	08c0      	lsrs	r0, r0, #3
 8000dd6:	0312      	lsls	r2, r2, #12
 8000dd8:	4210      	tst	r0, r2
 8000dda:	d006      	beq.n	8000dea <__aeabi_dadd+0x56e>
 8000ddc:	08fc      	lsrs	r4, r7, #3
 8000dde:	4214      	tst	r4, r2
 8000de0:	d103      	bne.n	8000dea <__aeabi_dadd+0x56e>
 8000de2:	0020      	movs	r0, r4
 8000de4:	08cb      	lsrs	r3, r1, #3
 8000de6:	077a      	lsls	r2, r7, #29
 8000de8:	4313      	orrs	r3, r2
 8000dea:	0f5a      	lsrs	r2, r3, #29
 8000dec:	00db      	lsls	r3, r3, #3
 8000dee:	0752      	lsls	r2, r2, #29
 8000df0:	08db      	lsrs	r3, r3, #3
 8000df2:	4313      	orrs	r3, r2
 8000df4:	e690      	b.n	8000b18 <__aeabi_dadd+0x29c>
 8000df6:	4643      	mov	r3, r8
 8000df8:	430b      	orrs	r3, r1
 8000dfa:	d100      	bne.n	8000dfe <__aeabi_dadd+0x582>
 8000dfc:	e709      	b.n	8000c12 <__aeabi_dadd+0x396>
 8000dfe:	4643      	mov	r3, r8
 8000e00:	4642      	mov	r2, r8
 8000e02:	08c9      	lsrs	r1, r1, #3
 8000e04:	075b      	lsls	r3, r3, #29
 8000e06:	4655      	mov	r5, sl
 8000e08:	430b      	orrs	r3, r1
 8000e0a:	08d0      	lsrs	r0, r2, #3
 8000e0c:	e666      	b.n	8000adc <__aeabi_dadd+0x260>
 8000e0e:	1acc      	subs	r4, r1, r3
 8000e10:	42a1      	cmp	r1, r4
 8000e12:	4189      	sbcs	r1, r1
 8000e14:	1a3f      	subs	r7, r7, r0
 8000e16:	4249      	negs	r1, r1
 8000e18:	4655      	mov	r5, sl
 8000e1a:	2601      	movs	r6, #1
 8000e1c:	1a7f      	subs	r7, r7, r1
 8000e1e:	e57e      	b.n	800091e <__aeabi_dadd+0xa2>
 8000e20:	4642      	mov	r2, r8
 8000e22:	1a5c      	subs	r4, r3, r1
 8000e24:	1a87      	subs	r7, r0, r2
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	4192      	sbcs	r2, r2
 8000e2a:	4252      	negs	r2, r2
 8000e2c:	1abf      	subs	r7, r7, r2
 8000e2e:	023a      	lsls	r2, r7, #8
 8000e30:	d53d      	bpl.n	8000eae <__aeabi_dadd+0x632>
 8000e32:	1acc      	subs	r4, r1, r3
 8000e34:	42a1      	cmp	r1, r4
 8000e36:	4189      	sbcs	r1, r1
 8000e38:	4643      	mov	r3, r8
 8000e3a:	4249      	negs	r1, r1
 8000e3c:	1a1f      	subs	r7, r3, r0
 8000e3e:	4655      	mov	r5, sl
 8000e40:	1a7f      	subs	r7, r7, r1
 8000e42:	e595      	b.n	8000970 <__aeabi_dadd+0xf4>
 8000e44:	077b      	lsls	r3, r7, #29
 8000e46:	08c9      	lsrs	r1, r1, #3
 8000e48:	430b      	orrs	r3, r1
 8000e4a:	08f8      	lsrs	r0, r7, #3
 8000e4c:	e643      	b.n	8000ad6 <__aeabi_dadd+0x25a>
 8000e4e:	4644      	mov	r4, r8
 8000e50:	08db      	lsrs	r3, r3, #3
 8000e52:	430c      	orrs	r4, r1
 8000e54:	d130      	bne.n	8000eb8 <__aeabi_dadd+0x63c>
 8000e56:	0742      	lsls	r2, r0, #29
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	08c0      	lsrs	r0, r0, #3
 8000e5c:	e65c      	b.n	8000b18 <__aeabi_dadd+0x29c>
 8000e5e:	077b      	lsls	r3, r7, #29
 8000e60:	08c9      	lsrs	r1, r1, #3
 8000e62:	430b      	orrs	r3, r1
 8000e64:	08f8      	lsrs	r0, r7, #3
 8000e66:	e639      	b.n	8000adc <__aeabi_dadd+0x260>
 8000e68:	185c      	adds	r4, r3, r1
 8000e6a:	429c      	cmp	r4, r3
 8000e6c:	419b      	sbcs	r3, r3
 8000e6e:	4440      	add	r0, r8
 8000e70:	425b      	negs	r3, r3
 8000e72:	18c7      	adds	r7, r0, r3
 8000e74:	023b      	lsls	r3, r7, #8
 8000e76:	d400      	bmi.n	8000e7a <__aeabi_dadd+0x5fe>
 8000e78:	e625      	b.n	8000ac6 <__aeabi_dadd+0x24a>
 8000e7a:	4b1d      	ldr	r3, [pc, #116]	; (8000ef0 <__aeabi_dadd+0x674>)
 8000e7c:	2601      	movs	r6, #1
 8000e7e:	401f      	ands	r7, r3
 8000e80:	e621      	b.n	8000ac6 <__aeabi_dadd+0x24a>
 8000e82:	0004      	movs	r4, r0
 8000e84:	3a20      	subs	r2, #32
 8000e86:	40d4      	lsrs	r4, r2
 8000e88:	4662      	mov	r2, ip
 8000e8a:	2a20      	cmp	r2, #32
 8000e8c:	d004      	beq.n	8000e98 <__aeabi_dadd+0x61c>
 8000e8e:	2240      	movs	r2, #64	; 0x40
 8000e90:	4666      	mov	r6, ip
 8000e92:	1b92      	subs	r2, r2, r6
 8000e94:	4090      	lsls	r0, r2
 8000e96:	4303      	orrs	r3, r0
 8000e98:	1e5a      	subs	r2, r3, #1
 8000e9a:	4193      	sbcs	r3, r2
 8000e9c:	431c      	orrs	r4, r3
 8000e9e:	e67e      	b.n	8000b9e <__aeabi_dadd+0x322>
 8000ea0:	185c      	adds	r4, r3, r1
 8000ea2:	428c      	cmp	r4, r1
 8000ea4:	4189      	sbcs	r1, r1
 8000ea6:	4440      	add	r0, r8
 8000ea8:	4249      	negs	r1, r1
 8000eaa:	1847      	adds	r7, r0, r1
 8000eac:	e6dd      	b.n	8000c6a <__aeabi_dadd+0x3ee>
 8000eae:	0023      	movs	r3, r4
 8000eb0:	433b      	orrs	r3, r7
 8000eb2:	d100      	bne.n	8000eb6 <__aeabi_dadd+0x63a>
 8000eb4:	e6ad      	b.n	8000c12 <__aeabi_dadd+0x396>
 8000eb6:	e606      	b.n	8000ac6 <__aeabi_dadd+0x24a>
 8000eb8:	0744      	lsls	r4, r0, #29
 8000eba:	4323      	orrs	r3, r4
 8000ebc:	2480      	movs	r4, #128	; 0x80
 8000ebe:	08c0      	lsrs	r0, r0, #3
 8000ec0:	0324      	lsls	r4, r4, #12
 8000ec2:	4220      	tst	r0, r4
 8000ec4:	d008      	beq.n	8000ed8 <__aeabi_dadd+0x65c>
 8000ec6:	4642      	mov	r2, r8
 8000ec8:	08d6      	lsrs	r6, r2, #3
 8000eca:	4226      	tst	r6, r4
 8000ecc:	d104      	bne.n	8000ed8 <__aeabi_dadd+0x65c>
 8000ece:	4655      	mov	r5, sl
 8000ed0:	0030      	movs	r0, r6
 8000ed2:	08cb      	lsrs	r3, r1, #3
 8000ed4:	0751      	lsls	r1, r2, #29
 8000ed6:	430b      	orrs	r3, r1
 8000ed8:	0f5a      	lsrs	r2, r3, #29
 8000eda:	00db      	lsls	r3, r3, #3
 8000edc:	08db      	lsrs	r3, r3, #3
 8000ede:	0752      	lsls	r2, r2, #29
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	e619      	b.n	8000b18 <__aeabi_dadd+0x29c>
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	4a01      	ldr	r2, [pc, #4]	; (8000eec <__aeabi_dadd+0x670>)
 8000ee8:	001f      	movs	r7, r3
 8000eea:	e55e      	b.n	80009aa <__aeabi_dadd+0x12e>
 8000eec:	000007ff 	.word	0x000007ff
 8000ef0:	ff7fffff 	.word	0xff7fffff

08000ef4 <__aeabi_ddiv>:
 8000ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ef6:	4657      	mov	r7, sl
 8000ef8:	464e      	mov	r6, r9
 8000efa:	4645      	mov	r5, r8
 8000efc:	46de      	mov	lr, fp
 8000efe:	b5e0      	push	{r5, r6, r7, lr}
 8000f00:	4681      	mov	r9, r0
 8000f02:	0005      	movs	r5, r0
 8000f04:	030c      	lsls	r4, r1, #12
 8000f06:	0048      	lsls	r0, r1, #1
 8000f08:	4692      	mov	sl, r2
 8000f0a:	001f      	movs	r7, r3
 8000f0c:	b085      	sub	sp, #20
 8000f0e:	0b24      	lsrs	r4, r4, #12
 8000f10:	0d40      	lsrs	r0, r0, #21
 8000f12:	0fce      	lsrs	r6, r1, #31
 8000f14:	2800      	cmp	r0, #0
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0x26>
 8000f18:	e156      	b.n	80011c8 <__aeabi_ddiv+0x2d4>
 8000f1a:	4bd4      	ldr	r3, [pc, #848]	; (800126c <__aeabi_ddiv+0x378>)
 8000f1c:	4298      	cmp	r0, r3
 8000f1e:	d100      	bne.n	8000f22 <__aeabi_ddiv+0x2e>
 8000f20:	e172      	b.n	8001208 <__aeabi_ddiv+0x314>
 8000f22:	0f6b      	lsrs	r3, r5, #29
 8000f24:	00e4      	lsls	r4, r4, #3
 8000f26:	431c      	orrs	r4, r3
 8000f28:	2380      	movs	r3, #128	; 0x80
 8000f2a:	041b      	lsls	r3, r3, #16
 8000f2c:	4323      	orrs	r3, r4
 8000f2e:	4698      	mov	r8, r3
 8000f30:	4bcf      	ldr	r3, [pc, #828]	; (8001270 <__aeabi_ddiv+0x37c>)
 8000f32:	00ed      	lsls	r5, r5, #3
 8000f34:	469b      	mov	fp, r3
 8000f36:	2300      	movs	r3, #0
 8000f38:	4699      	mov	r9, r3
 8000f3a:	4483      	add	fp, r0
 8000f3c:	9300      	str	r3, [sp, #0]
 8000f3e:	033c      	lsls	r4, r7, #12
 8000f40:	007b      	lsls	r3, r7, #1
 8000f42:	4650      	mov	r0, sl
 8000f44:	0b24      	lsrs	r4, r4, #12
 8000f46:	0d5b      	lsrs	r3, r3, #21
 8000f48:	0fff      	lsrs	r7, r7, #31
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d100      	bne.n	8000f50 <__aeabi_ddiv+0x5c>
 8000f4e:	e11f      	b.n	8001190 <__aeabi_ddiv+0x29c>
 8000f50:	4ac6      	ldr	r2, [pc, #792]	; (800126c <__aeabi_ddiv+0x378>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d100      	bne.n	8000f58 <__aeabi_ddiv+0x64>
 8000f56:	e162      	b.n	800121e <__aeabi_ddiv+0x32a>
 8000f58:	49c5      	ldr	r1, [pc, #788]	; (8001270 <__aeabi_ddiv+0x37c>)
 8000f5a:	0f42      	lsrs	r2, r0, #29
 8000f5c:	468c      	mov	ip, r1
 8000f5e:	00e4      	lsls	r4, r4, #3
 8000f60:	4659      	mov	r1, fp
 8000f62:	4314      	orrs	r4, r2
 8000f64:	2280      	movs	r2, #128	; 0x80
 8000f66:	4463      	add	r3, ip
 8000f68:	0412      	lsls	r2, r2, #16
 8000f6a:	1acb      	subs	r3, r1, r3
 8000f6c:	4314      	orrs	r4, r2
 8000f6e:	469b      	mov	fp, r3
 8000f70:	00c2      	lsls	r2, r0, #3
 8000f72:	2000      	movs	r0, #0
 8000f74:	0033      	movs	r3, r6
 8000f76:	407b      	eors	r3, r7
 8000f78:	469a      	mov	sl, r3
 8000f7a:	464b      	mov	r3, r9
 8000f7c:	2b0f      	cmp	r3, #15
 8000f7e:	d827      	bhi.n	8000fd0 <__aeabi_ddiv+0xdc>
 8000f80:	49bc      	ldr	r1, [pc, #752]	; (8001274 <__aeabi_ddiv+0x380>)
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	58cb      	ldr	r3, [r1, r3]
 8000f86:	469f      	mov	pc, r3
 8000f88:	46b2      	mov	sl, r6
 8000f8a:	9b00      	ldr	r3, [sp, #0]
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d016      	beq.n	8000fbe <__aeabi_ddiv+0xca>
 8000f90:	2b03      	cmp	r3, #3
 8000f92:	d100      	bne.n	8000f96 <__aeabi_ddiv+0xa2>
 8000f94:	e28e      	b.n	80014b4 <__aeabi_ddiv+0x5c0>
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d000      	beq.n	8000f9c <__aeabi_ddiv+0xa8>
 8000f9a:	e0d9      	b.n	8001150 <__aeabi_ddiv+0x25c>
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	2400      	movs	r4, #0
 8000fa0:	2500      	movs	r5, #0
 8000fa2:	4652      	mov	r2, sl
 8000fa4:	051b      	lsls	r3, r3, #20
 8000fa6:	4323      	orrs	r3, r4
 8000fa8:	07d2      	lsls	r2, r2, #31
 8000faa:	4313      	orrs	r3, r2
 8000fac:	0028      	movs	r0, r5
 8000fae:	0019      	movs	r1, r3
 8000fb0:	b005      	add	sp, #20
 8000fb2:	bcf0      	pop	{r4, r5, r6, r7}
 8000fb4:	46bb      	mov	fp, r7
 8000fb6:	46b2      	mov	sl, r6
 8000fb8:	46a9      	mov	r9, r5
 8000fba:	46a0      	mov	r8, r4
 8000fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fbe:	2400      	movs	r4, #0
 8000fc0:	2500      	movs	r5, #0
 8000fc2:	4baa      	ldr	r3, [pc, #680]	; (800126c <__aeabi_ddiv+0x378>)
 8000fc4:	e7ed      	b.n	8000fa2 <__aeabi_ddiv+0xae>
 8000fc6:	46ba      	mov	sl, r7
 8000fc8:	46a0      	mov	r8, r4
 8000fca:	0015      	movs	r5, r2
 8000fcc:	9000      	str	r0, [sp, #0]
 8000fce:	e7dc      	b.n	8000f8a <__aeabi_ddiv+0x96>
 8000fd0:	4544      	cmp	r4, r8
 8000fd2:	d200      	bcs.n	8000fd6 <__aeabi_ddiv+0xe2>
 8000fd4:	e1c7      	b.n	8001366 <__aeabi_ddiv+0x472>
 8000fd6:	d100      	bne.n	8000fda <__aeabi_ddiv+0xe6>
 8000fd8:	e1c2      	b.n	8001360 <__aeabi_ddiv+0x46c>
 8000fda:	2301      	movs	r3, #1
 8000fdc:	425b      	negs	r3, r3
 8000fde:	469c      	mov	ip, r3
 8000fe0:	002e      	movs	r6, r5
 8000fe2:	4640      	mov	r0, r8
 8000fe4:	2500      	movs	r5, #0
 8000fe6:	44e3      	add	fp, ip
 8000fe8:	0223      	lsls	r3, r4, #8
 8000fea:	0e14      	lsrs	r4, r2, #24
 8000fec:	431c      	orrs	r4, r3
 8000fee:	0c1b      	lsrs	r3, r3, #16
 8000ff0:	4699      	mov	r9, r3
 8000ff2:	0423      	lsls	r3, r4, #16
 8000ff4:	0c1f      	lsrs	r7, r3, #16
 8000ff6:	0212      	lsls	r2, r2, #8
 8000ff8:	4649      	mov	r1, r9
 8000ffa:	9200      	str	r2, [sp, #0]
 8000ffc:	9701      	str	r7, [sp, #4]
 8000ffe:	f7ff f925 	bl	800024c <__aeabi_uidivmod>
 8001002:	0002      	movs	r2, r0
 8001004:	437a      	muls	r2, r7
 8001006:	040b      	lsls	r3, r1, #16
 8001008:	0c31      	lsrs	r1, r6, #16
 800100a:	4680      	mov	r8, r0
 800100c:	4319      	orrs	r1, r3
 800100e:	428a      	cmp	r2, r1
 8001010:	d907      	bls.n	8001022 <__aeabi_ddiv+0x12e>
 8001012:	2301      	movs	r3, #1
 8001014:	425b      	negs	r3, r3
 8001016:	469c      	mov	ip, r3
 8001018:	1909      	adds	r1, r1, r4
 800101a:	44e0      	add	r8, ip
 800101c:	428c      	cmp	r4, r1
 800101e:	d800      	bhi.n	8001022 <__aeabi_ddiv+0x12e>
 8001020:	e207      	b.n	8001432 <__aeabi_ddiv+0x53e>
 8001022:	1a88      	subs	r0, r1, r2
 8001024:	4649      	mov	r1, r9
 8001026:	f7ff f911 	bl	800024c <__aeabi_uidivmod>
 800102a:	0409      	lsls	r1, r1, #16
 800102c:	468c      	mov	ip, r1
 800102e:	0431      	lsls	r1, r6, #16
 8001030:	4666      	mov	r6, ip
 8001032:	9a01      	ldr	r2, [sp, #4]
 8001034:	0c09      	lsrs	r1, r1, #16
 8001036:	4342      	muls	r2, r0
 8001038:	0003      	movs	r3, r0
 800103a:	4331      	orrs	r1, r6
 800103c:	428a      	cmp	r2, r1
 800103e:	d904      	bls.n	800104a <__aeabi_ddiv+0x156>
 8001040:	1909      	adds	r1, r1, r4
 8001042:	3b01      	subs	r3, #1
 8001044:	428c      	cmp	r4, r1
 8001046:	d800      	bhi.n	800104a <__aeabi_ddiv+0x156>
 8001048:	e1ed      	b.n	8001426 <__aeabi_ddiv+0x532>
 800104a:	1a88      	subs	r0, r1, r2
 800104c:	4642      	mov	r2, r8
 800104e:	0412      	lsls	r2, r2, #16
 8001050:	431a      	orrs	r2, r3
 8001052:	4690      	mov	r8, r2
 8001054:	4641      	mov	r1, r8
 8001056:	9b00      	ldr	r3, [sp, #0]
 8001058:	040e      	lsls	r6, r1, #16
 800105a:	0c1b      	lsrs	r3, r3, #16
 800105c:	001f      	movs	r7, r3
 800105e:	9302      	str	r3, [sp, #8]
 8001060:	9b00      	ldr	r3, [sp, #0]
 8001062:	0c36      	lsrs	r6, r6, #16
 8001064:	041b      	lsls	r3, r3, #16
 8001066:	0c19      	lsrs	r1, r3, #16
 8001068:	000b      	movs	r3, r1
 800106a:	4373      	muls	r3, r6
 800106c:	0c12      	lsrs	r2, r2, #16
 800106e:	437e      	muls	r6, r7
 8001070:	9103      	str	r1, [sp, #12]
 8001072:	4351      	muls	r1, r2
 8001074:	437a      	muls	r2, r7
 8001076:	0c1f      	lsrs	r7, r3, #16
 8001078:	46bc      	mov	ip, r7
 800107a:	1876      	adds	r6, r6, r1
 800107c:	4466      	add	r6, ip
 800107e:	42b1      	cmp	r1, r6
 8001080:	d903      	bls.n	800108a <__aeabi_ddiv+0x196>
 8001082:	2180      	movs	r1, #128	; 0x80
 8001084:	0249      	lsls	r1, r1, #9
 8001086:	468c      	mov	ip, r1
 8001088:	4462      	add	r2, ip
 800108a:	0c31      	lsrs	r1, r6, #16
 800108c:	188a      	adds	r2, r1, r2
 800108e:	0431      	lsls	r1, r6, #16
 8001090:	041e      	lsls	r6, r3, #16
 8001092:	0c36      	lsrs	r6, r6, #16
 8001094:	198e      	adds	r6, r1, r6
 8001096:	4290      	cmp	r0, r2
 8001098:	d302      	bcc.n	80010a0 <__aeabi_ddiv+0x1ac>
 800109a:	d112      	bne.n	80010c2 <__aeabi_ddiv+0x1ce>
 800109c:	42b5      	cmp	r5, r6
 800109e:	d210      	bcs.n	80010c2 <__aeabi_ddiv+0x1ce>
 80010a0:	4643      	mov	r3, r8
 80010a2:	1e59      	subs	r1, r3, #1
 80010a4:	9b00      	ldr	r3, [sp, #0]
 80010a6:	469c      	mov	ip, r3
 80010a8:	4465      	add	r5, ip
 80010aa:	001f      	movs	r7, r3
 80010ac:	429d      	cmp	r5, r3
 80010ae:	419b      	sbcs	r3, r3
 80010b0:	425b      	negs	r3, r3
 80010b2:	191b      	adds	r3, r3, r4
 80010b4:	18c0      	adds	r0, r0, r3
 80010b6:	4284      	cmp	r4, r0
 80010b8:	d200      	bcs.n	80010bc <__aeabi_ddiv+0x1c8>
 80010ba:	e1a0      	b.n	80013fe <__aeabi_ddiv+0x50a>
 80010bc:	d100      	bne.n	80010c0 <__aeabi_ddiv+0x1cc>
 80010be:	e19b      	b.n	80013f8 <__aeabi_ddiv+0x504>
 80010c0:	4688      	mov	r8, r1
 80010c2:	1bae      	subs	r6, r5, r6
 80010c4:	42b5      	cmp	r5, r6
 80010c6:	41ad      	sbcs	r5, r5
 80010c8:	1a80      	subs	r0, r0, r2
 80010ca:	426d      	negs	r5, r5
 80010cc:	1b40      	subs	r0, r0, r5
 80010ce:	4284      	cmp	r4, r0
 80010d0:	d100      	bne.n	80010d4 <__aeabi_ddiv+0x1e0>
 80010d2:	e1d5      	b.n	8001480 <__aeabi_ddiv+0x58c>
 80010d4:	4649      	mov	r1, r9
 80010d6:	f7ff f8b9 	bl	800024c <__aeabi_uidivmod>
 80010da:	9a01      	ldr	r2, [sp, #4]
 80010dc:	040b      	lsls	r3, r1, #16
 80010de:	4342      	muls	r2, r0
 80010e0:	0c31      	lsrs	r1, r6, #16
 80010e2:	0005      	movs	r5, r0
 80010e4:	4319      	orrs	r1, r3
 80010e6:	428a      	cmp	r2, r1
 80010e8:	d900      	bls.n	80010ec <__aeabi_ddiv+0x1f8>
 80010ea:	e16c      	b.n	80013c6 <__aeabi_ddiv+0x4d2>
 80010ec:	1a88      	subs	r0, r1, r2
 80010ee:	4649      	mov	r1, r9
 80010f0:	f7ff f8ac 	bl	800024c <__aeabi_uidivmod>
 80010f4:	9a01      	ldr	r2, [sp, #4]
 80010f6:	0436      	lsls	r6, r6, #16
 80010f8:	4342      	muls	r2, r0
 80010fa:	0409      	lsls	r1, r1, #16
 80010fc:	0c36      	lsrs	r6, r6, #16
 80010fe:	0003      	movs	r3, r0
 8001100:	430e      	orrs	r6, r1
 8001102:	42b2      	cmp	r2, r6
 8001104:	d900      	bls.n	8001108 <__aeabi_ddiv+0x214>
 8001106:	e153      	b.n	80013b0 <__aeabi_ddiv+0x4bc>
 8001108:	9803      	ldr	r0, [sp, #12]
 800110a:	1ab6      	subs	r6, r6, r2
 800110c:	0002      	movs	r2, r0
 800110e:	042d      	lsls	r5, r5, #16
 8001110:	431d      	orrs	r5, r3
 8001112:	9f02      	ldr	r7, [sp, #8]
 8001114:	042b      	lsls	r3, r5, #16
 8001116:	0c1b      	lsrs	r3, r3, #16
 8001118:	435a      	muls	r2, r3
 800111a:	437b      	muls	r3, r7
 800111c:	469c      	mov	ip, r3
 800111e:	0c29      	lsrs	r1, r5, #16
 8001120:	4348      	muls	r0, r1
 8001122:	0c13      	lsrs	r3, r2, #16
 8001124:	4484      	add	ip, r0
 8001126:	4463      	add	r3, ip
 8001128:	4379      	muls	r1, r7
 800112a:	4298      	cmp	r0, r3
 800112c:	d903      	bls.n	8001136 <__aeabi_ddiv+0x242>
 800112e:	2080      	movs	r0, #128	; 0x80
 8001130:	0240      	lsls	r0, r0, #9
 8001132:	4684      	mov	ip, r0
 8001134:	4461      	add	r1, ip
 8001136:	0c18      	lsrs	r0, r3, #16
 8001138:	0412      	lsls	r2, r2, #16
 800113a:	041b      	lsls	r3, r3, #16
 800113c:	0c12      	lsrs	r2, r2, #16
 800113e:	1841      	adds	r1, r0, r1
 8001140:	189b      	adds	r3, r3, r2
 8001142:	428e      	cmp	r6, r1
 8001144:	d200      	bcs.n	8001148 <__aeabi_ddiv+0x254>
 8001146:	e0ff      	b.n	8001348 <__aeabi_ddiv+0x454>
 8001148:	d100      	bne.n	800114c <__aeabi_ddiv+0x258>
 800114a:	e0fa      	b.n	8001342 <__aeabi_ddiv+0x44e>
 800114c:	2301      	movs	r3, #1
 800114e:	431d      	orrs	r5, r3
 8001150:	4a49      	ldr	r2, [pc, #292]	; (8001278 <__aeabi_ddiv+0x384>)
 8001152:	445a      	add	r2, fp
 8001154:	2a00      	cmp	r2, #0
 8001156:	dc00      	bgt.n	800115a <__aeabi_ddiv+0x266>
 8001158:	e0aa      	b.n	80012b0 <__aeabi_ddiv+0x3bc>
 800115a:	076b      	lsls	r3, r5, #29
 800115c:	d000      	beq.n	8001160 <__aeabi_ddiv+0x26c>
 800115e:	e13d      	b.n	80013dc <__aeabi_ddiv+0x4e8>
 8001160:	08ed      	lsrs	r5, r5, #3
 8001162:	4643      	mov	r3, r8
 8001164:	01db      	lsls	r3, r3, #7
 8001166:	d506      	bpl.n	8001176 <__aeabi_ddiv+0x282>
 8001168:	4642      	mov	r2, r8
 800116a:	4b44      	ldr	r3, [pc, #272]	; (800127c <__aeabi_ddiv+0x388>)
 800116c:	401a      	ands	r2, r3
 800116e:	4690      	mov	r8, r2
 8001170:	2280      	movs	r2, #128	; 0x80
 8001172:	00d2      	lsls	r2, r2, #3
 8001174:	445a      	add	r2, fp
 8001176:	4b42      	ldr	r3, [pc, #264]	; (8001280 <__aeabi_ddiv+0x38c>)
 8001178:	429a      	cmp	r2, r3
 800117a:	dd00      	ble.n	800117e <__aeabi_ddiv+0x28a>
 800117c:	e71f      	b.n	8000fbe <__aeabi_ddiv+0xca>
 800117e:	4643      	mov	r3, r8
 8001180:	075b      	lsls	r3, r3, #29
 8001182:	431d      	orrs	r5, r3
 8001184:	4643      	mov	r3, r8
 8001186:	0552      	lsls	r2, r2, #21
 8001188:	025c      	lsls	r4, r3, #9
 800118a:	0b24      	lsrs	r4, r4, #12
 800118c:	0d53      	lsrs	r3, r2, #21
 800118e:	e708      	b.n	8000fa2 <__aeabi_ddiv+0xae>
 8001190:	4652      	mov	r2, sl
 8001192:	4322      	orrs	r2, r4
 8001194:	d100      	bne.n	8001198 <__aeabi_ddiv+0x2a4>
 8001196:	e07b      	b.n	8001290 <__aeabi_ddiv+0x39c>
 8001198:	2c00      	cmp	r4, #0
 800119a:	d100      	bne.n	800119e <__aeabi_ddiv+0x2aa>
 800119c:	e0fa      	b.n	8001394 <__aeabi_ddiv+0x4a0>
 800119e:	0020      	movs	r0, r4
 80011a0:	f001 fa22 	bl	80025e8 <__clzsi2>
 80011a4:	0002      	movs	r2, r0
 80011a6:	3a0b      	subs	r2, #11
 80011a8:	231d      	movs	r3, #29
 80011aa:	0001      	movs	r1, r0
 80011ac:	1a9b      	subs	r3, r3, r2
 80011ae:	4652      	mov	r2, sl
 80011b0:	3908      	subs	r1, #8
 80011b2:	40da      	lsrs	r2, r3
 80011b4:	408c      	lsls	r4, r1
 80011b6:	4314      	orrs	r4, r2
 80011b8:	4652      	mov	r2, sl
 80011ba:	408a      	lsls	r2, r1
 80011bc:	4b31      	ldr	r3, [pc, #196]	; (8001284 <__aeabi_ddiv+0x390>)
 80011be:	4458      	add	r0, fp
 80011c0:	469b      	mov	fp, r3
 80011c2:	4483      	add	fp, r0
 80011c4:	2000      	movs	r0, #0
 80011c6:	e6d5      	b.n	8000f74 <__aeabi_ddiv+0x80>
 80011c8:	464b      	mov	r3, r9
 80011ca:	4323      	orrs	r3, r4
 80011cc:	4698      	mov	r8, r3
 80011ce:	d044      	beq.n	800125a <__aeabi_ddiv+0x366>
 80011d0:	2c00      	cmp	r4, #0
 80011d2:	d100      	bne.n	80011d6 <__aeabi_ddiv+0x2e2>
 80011d4:	e0ce      	b.n	8001374 <__aeabi_ddiv+0x480>
 80011d6:	0020      	movs	r0, r4
 80011d8:	f001 fa06 	bl	80025e8 <__clzsi2>
 80011dc:	0001      	movs	r1, r0
 80011de:	0002      	movs	r2, r0
 80011e0:	390b      	subs	r1, #11
 80011e2:	231d      	movs	r3, #29
 80011e4:	1a5b      	subs	r3, r3, r1
 80011e6:	4649      	mov	r1, r9
 80011e8:	0010      	movs	r0, r2
 80011ea:	40d9      	lsrs	r1, r3
 80011ec:	3808      	subs	r0, #8
 80011ee:	4084      	lsls	r4, r0
 80011f0:	000b      	movs	r3, r1
 80011f2:	464d      	mov	r5, r9
 80011f4:	4323      	orrs	r3, r4
 80011f6:	4698      	mov	r8, r3
 80011f8:	4085      	lsls	r5, r0
 80011fa:	4823      	ldr	r0, [pc, #140]	; (8001288 <__aeabi_ddiv+0x394>)
 80011fc:	1a83      	subs	r3, r0, r2
 80011fe:	469b      	mov	fp, r3
 8001200:	2300      	movs	r3, #0
 8001202:	4699      	mov	r9, r3
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	e69a      	b.n	8000f3e <__aeabi_ddiv+0x4a>
 8001208:	464b      	mov	r3, r9
 800120a:	4323      	orrs	r3, r4
 800120c:	4698      	mov	r8, r3
 800120e:	d11d      	bne.n	800124c <__aeabi_ddiv+0x358>
 8001210:	2308      	movs	r3, #8
 8001212:	4699      	mov	r9, r3
 8001214:	3b06      	subs	r3, #6
 8001216:	2500      	movs	r5, #0
 8001218:	4683      	mov	fp, r0
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	e68f      	b.n	8000f3e <__aeabi_ddiv+0x4a>
 800121e:	4652      	mov	r2, sl
 8001220:	4322      	orrs	r2, r4
 8001222:	d109      	bne.n	8001238 <__aeabi_ddiv+0x344>
 8001224:	2302      	movs	r3, #2
 8001226:	4649      	mov	r1, r9
 8001228:	4319      	orrs	r1, r3
 800122a:	4b18      	ldr	r3, [pc, #96]	; (800128c <__aeabi_ddiv+0x398>)
 800122c:	4689      	mov	r9, r1
 800122e:	469c      	mov	ip, r3
 8001230:	2400      	movs	r4, #0
 8001232:	2002      	movs	r0, #2
 8001234:	44e3      	add	fp, ip
 8001236:	e69d      	b.n	8000f74 <__aeabi_ddiv+0x80>
 8001238:	2303      	movs	r3, #3
 800123a:	464a      	mov	r2, r9
 800123c:	431a      	orrs	r2, r3
 800123e:	4b13      	ldr	r3, [pc, #76]	; (800128c <__aeabi_ddiv+0x398>)
 8001240:	4691      	mov	r9, r2
 8001242:	469c      	mov	ip, r3
 8001244:	4652      	mov	r2, sl
 8001246:	2003      	movs	r0, #3
 8001248:	44e3      	add	fp, ip
 800124a:	e693      	b.n	8000f74 <__aeabi_ddiv+0x80>
 800124c:	230c      	movs	r3, #12
 800124e:	4699      	mov	r9, r3
 8001250:	3b09      	subs	r3, #9
 8001252:	46a0      	mov	r8, r4
 8001254:	4683      	mov	fp, r0
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	e671      	b.n	8000f3e <__aeabi_ddiv+0x4a>
 800125a:	2304      	movs	r3, #4
 800125c:	4699      	mov	r9, r3
 800125e:	2300      	movs	r3, #0
 8001260:	469b      	mov	fp, r3
 8001262:	3301      	adds	r3, #1
 8001264:	2500      	movs	r5, #0
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	e669      	b.n	8000f3e <__aeabi_ddiv+0x4a>
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	000007ff 	.word	0x000007ff
 8001270:	fffffc01 	.word	0xfffffc01
 8001274:	080170c8 	.word	0x080170c8
 8001278:	000003ff 	.word	0x000003ff
 800127c:	feffffff 	.word	0xfeffffff
 8001280:	000007fe 	.word	0x000007fe
 8001284:	000003f3 	.word	0x000003f3
 8001288:	fffffc0d 	.word	0xfffffc0d
 800128c:	fffff801 	.word	0xfffff801
 8001290:	4649      	mov	r1, r9
 8001292:	2301      	movs	r3, #1
 8001294:	4319      	orrs	r1, r3
 8001296:	4689      	mov	r9, r1
 8001298:	2400      	movs	r4, #0
 800129a:	2001      	movs	r0, #1
 800129c:	e66a      	b.n	8000f74 <__aeabi_ddiv+0x80>
 800129e:	2300      	movs	r3, #0
 80012a0:	2480      	movs	r4, #128	; 0x80
 80012a2:	469a      	mov	sl, r3
 80012a4:	2500      	movs	r5, #0
 80012a6:	4b8a      	ldr	r3, [pc, #552]	; (80014d0 <__aeabi_ddiv+0x5dc>)
 80012a8:	0324      	lsls	r4, r4, #12
 80012aa:	e67a      	b.n	8000fa2 <__aeabi_ddiv+0xae>
 80012ac:	2501      	movs	r5, #1
 80012ae:	426d      	negs	r5, r5
 80012b0:	2301      	movs	r3, #1
 80012b2:	1a9b      	subs	r3, r3, r2
 80012b4:	2b38      	cmp	r3, #56	; 0x38
 80012b6:	dd00      	ble.n	80012ba <__aeabi_ddiv+0x3c6>
 80012b8:	e670      	b.n	8000f9c <__aeabi_ddiv+0xa8>
 80012ba:	2b1f      	cmp	r3, #31
 80012bc:	dc00      	bgt.n	80012c0 <__aeabi_ddiv+0x3cc>
 80012be:	e0bf      	b.n	8001440 <__aeabi_ddiv+0x54c>
 80012c0:	211f      	movs	r1, #31
 80012c2:	4249      	negs	r1, r1
 80012c4:	1a8a      	subs	r2, r1, r2
 80012c6:	4641      	mov	r1, r8
 80012c8:	40d1      	lsrs	r1, r2
 80012ca:	000a      	movs	r2, r1
 80012cc:	2b20      	cmp	r3, #32
 80012ce:	d004      	beq.n	80012da <__aeabi_ddiv+0x3e6>
 80012d0:	4641      	mov	r1, r8
 80012d2:	4b80      	ldr	r3, [pc, #512]	; (80014d4 <__aeabi_ddiv+0x5e0>)
 80012d4:	445b      	add	r3, fp
 80012d6:	4099      	lsls	r1, r3
 80012d8:	430d      	orrs	r5, r1
 80012da:	1e6b      	subs	r3, r5, #1
 80012dc:	419d      	sbcs	r5, r3
 80012de:	2307      	movs	r3, #7
 80012e0:	432a      	orrs	r2, r5
 80012e2:	001d      	movs	r5, r3
 80012e4:	2400      	movs	r4, #0
 80012e6:	4015      	ands	r5, r2
 80012e8:	4213      	tst	r3, r2
 80012ea:	d100      	bne.n	80012ee <__aeabi_ddiv+0x3fa>
 80012ec:	e0d4      	b.n	8001498 <__aeabi_ddiv+0x5a4>
 80012ee:	210f      	movs	r1, #15
 80012f0:	2300      	movs	r3, #0
 80012f2:	4011      	ands	r1, r2
 80012f4:	2904      	cmp	r1, #4
 80012f6:	d100      	bne.n	80012fa <__aeabi_ddiv+0x406>
 80012f8:	e0cb      	b.n	8001492 <__aeabi_ddiv+0x59e>
 80012fa:	1d11      	adds	r1, r2, #4
 80012fc:	4291      	cmp	r1, r2
 80012fe:	4192      	sbcs	r2, r2
 8001300:	4252      	negs	r2, r2
 8001302:	189b      	adds	r3, r3, r2
 8001304:	000a      	movs	r2, r1
 8001306:	0219      	lsls	r1, r3, #8
 8001308:	d400      	bmi.n	800130c <__aeabi_ddiv+0x418>
 800130a:	e0c2      	b.n	8001492 <__aeabi_ddiv+0x59e>
 800130c:	2301      	movs	r3, #1
 800130e:	2400      	movs	r4, #0
 8001310:	2500      	movs	r5, #0
 8001312:	e646      	b.n	8000fa2 <__aeabi_ddiv+0xae>
 8001314:	2380      	movs	r3, #128	; 0x80
 8001316:	4641      	mov	r1, r8
 8001318:	031b      	lsls	r3, r3, #12
 800131a:	4219      	tst	r1, r3
 800131c:	d008      	beq.n	8001330 <__aeabi_ddiv+0x43c>
 800131e:	421c      	tst	r4, r3
 8001320:	d106      	bne.n	8001330 <__aeabi_ddiv+0x43c>
 8001322:	431c      	orrs	r4, r3
 8001324:	0324      	lsls	r4, r4, #12
 8001326:	46ba      	mov	sl, r7
 8001328:	0015      	movs	r5, r2
 800132a:	4b69      	ldr	r3, [pc, #420]	; (80014d0 <__aeabi_ddiv+0x5dc>)
 800132c:	0b24      	lsrs	r4, r4, #12
 800132e:	e638      	b.n	8000fa2 <__aeabi_ddiv+0xae>
 8001330:	2480      	movs	r4, #128	; 0x80
 8001332:	4643      	mov	r3, r8
 8001334:	0324      	lsls	r4, r4, #12
 8001336:	431c      	orrs	r4, r3
 8001338:	0324      	lsls	r4, r4, #12
 800133a:	46b2      	mov	sl, r6
 800133c:	4b64      	ldr	r3, [pc, #400]	; (80014d0 <__aeabi_ddiv+0x5dc>)
 800133e:	0b24      	lsrs	r4, r4, #12
 8001340:	e62f      	b.n	8000fa2 <__aeabi_ddiv+0xae>
 8001342:	2b00      	cmp	r3, #0
 8001344:	d100      	bne.n	8001348 <__aeabi_ddiv+0x454>
 8001346:	e703      	b.n	8001150 <__aeabi_ddiv+0x25c>
 8001348:	19a6      	adds	r6, r4, r6
 800134a:	1e68      	subs	r0, r5, #1
 800134c:	42a6      	cmp	r6, r4
 800134e:	d200      	bcs.n	8001352 <__aeabi_ddiv+0x45e>
 8001350:	e08d      	b.n	800146e <__aeabi_ddiv+0x57a>
 8001352:	428e      	cmp	r6, r1
 8001354:	d200      	bcs.n	8001358 <__aeabi_ddiv+0x464>
 8001356:	e0a3      	b.n	80014a0 <__aeabi_ddiv+0x5ac>
 8001358:	d100      	bne.n	800135c <__aeabi_ddiv+0x468>
 800135a:	e0b3      	b.n	80014c4 <__aeabi_ddiv+0x5d0>
 800135c:	0005      	movs	r5, r0
 800135e:	e6f5      	b.n	800114c <__aeabi_ddiv+0x258>
 8001360:	42aa      	cmp	r2, r5
 8001362:	d900      	bls.n	8001366 <__aeabi_ddiv+0x472>
 8001364:	e639      	b.n	8000fda <__aeabi_ddiv+0xe6>
 8001366:	4643      	mov	r3, r8
 8001368:	07de      	lsls	r6, r3, #31
 800136a:	0858      	lsrs	r0, r3, #1
 800136c:	086b      	lsrs	r3, r5, #1
 800136e:	431e      	orrs	r6, r3
 8001370:	07ed      	lsls	r5, r5, #31
 8001372:	e639      	b.n	8000fe8 <__aeabi_ddiv+0xf4>
 8001374:	4648      	mov	r0, r9
 8001376:	f001 f937 	bl	80025e8 <__clzsi2>
 800137a:	0001      	movs	r1, r0
 800137c:	0002      	movs	r2, r0
 800137e:	3115      	adds	r1, #21
 8001380:	3220      	adds	r2, #32
 8001382:	291c      	cmp	r1, #28
 8001384:	dc00      	bgt.n	8001388 <__aeabi_ddiv+0x494>
 8001386:	e72c      	b.n	80011e2 <__aeabi_ddiv+0x2ee>
 8001388:	464b      	mov	r3, r9
 800138a:	3808      	subs	r0, #8
 800138c:	4083      	lsls	r3, r0
 800138e:	2500      	movs	r5, #0
 8001390:	4698      	mov	r8, r3
 8001392:	e732      	b.n	80011fa <__aeabi_ddiv+0x306>
 8001394:	f001 f928 	bl	80025e8 <__clzsi2>
 8001398:	0003      	movs	r3, r0
 800139a:	001a      	movs	r2, r3
 800139c:	3215      	adds	r2, #21
 800139e:	3020      	adds	r0, #32
 80013a0:	2a1c      	cmp	r2, #28
 80013a2:	dc00      	bgt.n	80013a6 <__aeabi_ddiv+0x4b2>
 80013a4:	e700      	b.n	80011a8 <__aeabi_ddiv+0x2b4>
 80013a6:	4654      	mov	r4, sl
 80013a8:	3b08      	subs	r3, #8
 80013aa:	2200      	movs	r2, #0
 80013ac:	409c      	lsls	r4, r3
 80013ae:	e705      	b.n	80011bc <__aeabi_ddiv+0x2c8>
 80013b0:	1936      	adds	r6, r6, r4
 80013b2:	3b01      	subs	r3, #1
 80013b4:	42b4      	cmp	r4, r6
 80013b6:	d900      	bls.n	80013ba <__aeabi_ddiv+0x4c6>
 80013b8:	e6a6      	b.n	8001108 <__aeabi_ddiv+0x214>
 80013ba:	42b2      	cmp	r2, r6
 80013bc:	d800      	bhi.n	80013c0 <__aeabi_ddiv+0x4cc>
 80013be:	e6a3      	b.n	8001108 <__aeabi_ddiv+0x214>
 80013c0:	1e83      	subs	r3, r0, #2
 80013c2:	1936      	adds	r6, r6, r4
 80013c4:	e6a0      	b.n	8001108 <__aeabi_ddiv+0x214>
 80013c6:	1909      	adds	r1, r1, r4
 80013c8:	3d01      	subs	r5, #1
 80013ca:	428c      	cmp	r4, r1
 80013cc:	d900      	bls.n	80013d0 <__aeabi_ddiv+0x4dc>
 80013ce:	e68d      	b.n	80010ec <__aeabi_ddiv+0x1f8>
 80013d0:	428a      	cmp	r2, r1
 80013d2:	d800      	bhi.n	80013d6 <__aeabi_ddiv+0x4e2>
 80013d4:	e68a      	b.n	80010ec <__aeabi_ddiv+0x1f8>
 80013d6:	1e85      	subs	r5, r0, #2
 80013d8:	1909      	adds	r1, r1, r4
 80013da:	e687      	b.n	80010ec <__aeabi_ddiv+0x1f8>
 80013dc:	230f      	movs	r3, #15
 80013de:	402b      	ands	r3, r5
 80013e0:	2b04      	cmp	r3, #4
 80013e2:	d100      	bne.n	80013e6 <__aeabi_ddiv+0x4f2>
 80013e4:	e6bc      	b.n	8001160 <__aeabi_ddiv+0x26c>
 80013e6:	2305      	movs	r3, #5
 80013e8:	425b      	negs	r3, r3
 80013ea:	42ab      	cmp	r3, r5
 80013ec:	419b      	sbcs	r3, r3
 80013ee:	3504      	adds	r5, #4
 80013f0:	425b      	negs	r3, r3
 80013f2:	08ed      	lsrs	r5, r5, #3
 80013f4:	4498      	add	r8, r3
 80013f6:	e6b4      	b.n	8001162 <__aeabi_ddiv+0x26e>
 80013f8:	42af      	cmp	r7, r5
 80013fa:	d900      	bls.n	80013fe <__aeabi_ddiv+0x50a>
 80013fc:	e660      	b.n	80010c0 <__aeabi_ddiv+0x1cc>
 80013fe:	4282      	cmp	r2, r0
 8001400:	d804      	bhi.n	800140c <__aeabi_ddiv+0x518>
 8001402:	d000      	beq.n	8001406 <__aeabi_ddiv+0x512>
 8001404:	e65c      	b.n	80010c0 <__aeabi_ddiv+0x1cc>
 8001406:	42ae      	cmp	r6, r5
 8001408:	d800      	bhi.n	800140c <__aeabi_ddiv+0x518>
 800140a:	e659      	b.n	80010c0 <__aeabi_ddiv+0x1cc>
 800140c:	2302      	movs	r3, #2
 800140e:	425b      	negs	r3, r3
 8001410:	469c      	mov	ip, r3
 8001412:	9b00      	ldr	r3, [sp, #0]
 8001414:	44e0      	add	r8, ip
 8001416:	469c      	mov	ip, r3
 8001418:	4465      	add	r5, ip
 800141a:	429d      	cmp	r5, r3
 800141c:	419b      	sbcs	r3, r3
 800141e:	425b      	negs	r3, r3
 8001420:	191b      	adds	r3, r3, r4
 8001422:	18c0      	adds	r0, r0, r3
 8001424:	e64d      	b.n	80010c2 <__aeabi_ddiv+0x1ce>
 8001426:	428a      	cmp	r2, r1
 8001428:	d800      	bhi.n	800142c <__aeabi_ddiv+0x538>
 800142a:	e60e      	b.n	800104a <__aeabi_ddiv+0x156>
 800142c:	1e83      	subs	r3, r0, #2
 800142e:	1909      	adds	r1, r1, r4
 8001430:	e60b      	b.n	800104a <__aeabi_ddiv+0x156>
 8001432:	428a      	cmp	r2, r1
 8001434:	d800      	bhi.n	8001438 <__aeabi_ddiv+0x544>
 8001436:	e5f4      	b.n	8001022 <__aeabi_ddiv+0x12e>
 8001438:	1e83      	subs	r3, r0, #2
 800143a:	4698      	mov	r8, r3
 800143c:	1909      	adds	r1, r1, r4
 800143e:	e5f0      	b.n	8001022 <__aeabi_ddiv+0x12e>
 8001440:	4925      	ldr	r1, [pc, #148]	; (80014d8 <__aeabi_ddiv+0x5e4>)
 8001442:	0028      	movs	r0, r5
 8001444:	4459      	add	r1, fp
 8001446:	408d      	lsls	r5, r1
 8001448:	4642      	mov	r2, r8
 800144a:	408a      	lsls	r2, r1
 800144c:	1e69      	subs	r1, r5, #1
 800144e:	418d      	sbcs	r5, r1
 8001450:	4641      	mov	r1, r8
 8001452:	40d8      	lsrs	r0, r3
 8001454:	40d9      	lsrs	r1, r3
 8001456:	4302      	orrs	r2, r0
 8001458:	432a      	orrs	r2, r5
 800145a:	000b      	movs	r3, r1
 800145c:	0751      	lsls	r1, r2, #29
 800145e:	d100      	bne.n	8001462 <__aeabi_ddiv+0x56e>
 8001460:	e751      	b.n	8001306 <__aeabi_ddiv+0x412>
 8001462:	210f      	movs	r1, #15
 8001464:	4011      	ands	r1, r2
 8001466:	2904      	cmp	r1, #4
 8001468:	d000      	beq.n	800146c <__aeabi_ddiv+0x578>
 800146a:	e746      	b.n	80012fa <__aeabi_ddiv+0x406>
 800146c:	e74b      	b.n	8001306 <__aeabi_ddiv+0x412>
 800146e:	0005      	movs	r5, r0
 8001470:	428e      	cmp	r6, r1
 8001472:	d000      	beq.n	8001476 <__aeabi_ddiv+0x582>
 8001474:	e66a      	b.n	800114c <__aeabi_ddiv+0x258>
 8001476:	9a00      	ldr	r2, [sp, #0]
 8001478:	4293      	cmp	r3, r2
 800147a:	d000      	beq.n	800147e <__aeabi_ddiv+0x58a>
 800147c:	e666      	b.n	800114c <__aeabi_ddiv+0x258>
 800147e:	e667      	b.n	8001150 <__aeabi_ddiv+0x25c>
 8001480:	4a16      	ldr	r2, [pc, #88]	; (80014dc <__aeabi_ddiv+0x5e8>)
 8001482:	445a      	add	r2, fp
 8001484:	2a00      	cmp	r2, #0
 8001486:	dc00      	bgt.n	800148a <__aeabi_ddiv+0x596>
 8001488:	e710      	b.n	80012ac <__aeabi_ddiv+0x3b8>
 800148a:	2301      	movs	r3, #1
 800148c:	2500      	movs	r5, #0
 800148e:	4498      	add	r8, r3
 8001490:	e667      	b.n	8001162 <__aeabi_ddiv+0x26e>
 8001492:	075d      	lsls	r5, r3, #29
 8001494:	025b      	lsls	r3, r3, #9
 8001496:	0b1c      	lsrs	r4, r3, #12
 8001498:	08d2      	lsrs	r2, r2, #3
 800149a:	2300      	movs	r3, #0
 800149c:	4315      	orrs	r5, r2
 800149e:	e580      	b.n	8000fa2 <__aeabi_ddiv+0xae>
 80014a0:	9800      	ldr	r0, [sp, #0]
 80014a2:	3d02      	subs	r5, #2
 80014a4:	0042      	lsls	r2, r0, #1
 80014a6:	4282      	cmp	r2, r0
 80014a8:	41bf      	sbcs	r7, r7
 80014aa:	427f      	negs	r7, r7
 80014ac:	193c      	adds	r4, r7, r4
 80014ae:	1936      	adds	r6, r6, r4
 80014b0:	9200      	str	r2, [sp, #0]
 80014b2:	e7dd      	b.n	8001470 <__aeabi_ddiv+0x57c>
 80014b4:	2480      	movs	r4, #128	; 0x80
 80014b6:	4643      	mov	r3, r8
 80014b8:	0324      	lsls	r4, r4, #12
 80014ba:	431c      	orrs	r4, r3
 80014bc:	0324      	lsls	r4, r4, #12
 80014be:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <__aeabi_ddiv+0x5dc>)
 80014c0:	0b24      	lsrs	r4, r4, #12
 80014c2:	e56e      	b.n	8000fa2 <__aeabi_ddiv+0xae>
 80014c4:	9a00      	ldr	r2, [sp, #0]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d3ea      	bcc.n	80014a0 <__aeabi_ddiv+0x5ac>
 80014ca:	0005      	movs	r5, r0
 80014cc:	e7d3      	b.n	8001476 <__aeabi_ddiv+0x582>
 80014ce:	46c0      	nop			; (mov r8, r8)
 80014d0:	000007ff 	.word	0x000007ff
 80014d4:	0000043e 	.word	0x0000043e
 80014d8:	0000041e 	.word	0x0000041e
 80014dc:	000003ff 	.word	0x000003ff

080014e0 <__eqdf2>:
 80014e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014e2:	464e      	mov	r6, r9
 80014e4:	4645      	mov	r5, r8
 80014e6:	46de      	mov	lr, fp
 80014e8:	4657      	mov	r7, sl
 80014ea:	4690      	mov	r8, r2
 80014ec:	b5e0      	push	{r5, r6, r7, lr}
 80014ee:	0017      	movs	r7, r2
 80014f0:	031a      	lsls	r2, r3, #12
 80014f2:	0b12      	lsrs	r2, r2, #12
 80014f4:	0005      	movs	r5, r0
 80014f6:	4684      	mov	ip, r0
 80014f8:	4819      	ldr	r0, [pc, #100]	; (8001560 <__eqdf2+0x80>)
 80014fa:	030e      	lsls	r6, r1, #12
 80014fc:	004c      	lsls	r4, r1, #1
 80014fe:	4691      	mov	r9, r2
 8001500:	005a      	lsls	r2, r3, #1
 8001502:	0fdb      	lsrs	r3, r3, #31
 8001504:	469b      	mov	fp, r3
 8001506:	0b36      	lsrs	r6, r6, #12
 8001508:	0d64      	lsrs	r4, r4, #21
 800150a:	0fc9      	lsrs	r1, r1, #31
 800150c:	0d52      	lsrs	r2, r2, #21
 800150e:	4284      	cmp	r4, r0
 8001510:	d019      	beq.n	8001546 <__eqdf2+0x66>
 8001512:	4282      	cmp	r2, r0
 8001514:	d010      	beq.n	8001538 <__eqdf2+0x58>
 8001516:	2001      	movs	r0, #1
 8001518:	4294      	cmp	r4, r2
 800151a:	d10e      	bne.n	800153a <__eqdf2+0x5a>
 800151c:	454e      	cmp	r6, r9
 800151e:	d10c      	bne.n	800153a <__eqdf2+0x5a>
 8001520:	2001      	movs	r0, #1
 8001522:	45c4      	cmp	ip, r8
 8001524:	d109      	bne.n	800153a <__eqdf2+0x5a>
 8001526:	4559      	cmp	r1, fp
 8001528:	d017      	beq.n	800155a <__eqdf2+0x7a>
 800152a:	2c00      	cmp	r4, #0
 800152c:	d105      	bne.n	800153a <__eqdf2+0x5a>
 800152e:	0030      	movs	r0, r6
 8001530:	4328      	orrs	r0, r5
 8001532:	1e43      	subs	r3, r0, #1
 8001534:	4198      	sbcs	r0, r3
 8001536:	e000      	b.n	800153a <__eqdf2+0x5a>
 8001538:	2001      	movs	r0, #1
 800153a:	bcf0      	pop	{r4, r5, r6, r7}
 800153c:	46bb      	mov	fp, r7
 800153e:	46b2      	mov	sl, r6
 8001540:	46a9      	mov	r9, r5
 8001542:	46a0      	mov	r8, r4
 8001544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001546:	0033      	movs	r3, r6
 8001548:	2001      	movs	r0, #1
 800154a:	432b      	orrs	r3, r5
 800154c:	d1f5      	bne.n	800153a <__eqdf2+0x5a>
 800154e:	42a2      	cmp	r2, r4
 8001550:	d1f3      	bne.n	800153a <__eqdf2+0x5a>
 8001552:	464b      	mov	r3, r9
 8001554:	433b      	orrs	r3, r7
 8001556:	d1f0      	bne.n	800153a <__eqdf2+0x5a>
 8001558:	e7e2      	b.n	8001520 <__eqdf2+0x40>
 800155a:	2000      	movs	r0, #0
 800155c:	e7ed      	b.n	800153a <__eqdf2+0x5a>
 800155e:	46c0      	nop			; (mov r8, r8)
 8001560:	000007ff 	.word	0x000007ff

08001564 <__gedf2>:
 8001564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001566:	4647      	mov	r7, r8
 8001568:	46ce      	mov	lr, r9
 800156a:	0004      	movs	r4, r0
 800156c:	0018      	movs	r0, r3
 800156e:	0016      	movs	r6, r2
 8001570:	031b      	lsls	r3, r3, #12
 8001572:	0b1b      	lsrs	r3, r3, #12
 8001574:	4d2d      	ldr	r5, [pc, #180]	; (800162c <__gedf2+0xc8>)
 8001576:	004a      	lsls	r2, r1, #1
 8001578:	4699      	mov	r9, r3
 800157a:	b580      	push	{r7, lr}
 800157c:	0043      	lsls	r3, r0, #1
 800157e:	030f      	lsls	r7, r1, #12
 8001580:	46a4      	mov	ip, r4
 8001582:	46b0      	mov	r8, r6
 8001584:	0b3f      	lsrs	r7, r7, #12
 8001586:	0d52      	lsrs	r2, r2, #21
 8001588:	0fc9      	lsrs	r1, r1, #31
 800158a:	0d5b      	lsrs	r3, r3, #21
 800158c:	0fc0      	lsrs	r0, r0, #31
 800158e:	42aa      	cmp	r2, r5
 8001590:	d021      	beq.n	80015d6 <__gedf2+0x72>
 8001592:	42ab      	cmp	r3, r5
 8001594:	d013      	beq.n	80015be <__gedf2+0x5a>
 8001596:	2a00      	cmp	r2, #0
 8001598:	d122      	bne.n	80015e0 <__gedf2+0x7c>
 800159a:	433c      	orrs	r4, r7
 800159c:	2b00      	cmp	r3, #0
 800159e:	d102      	bne.n	80015a6 <__gedf2+0x42>
 80015a0:	464d      	mov	r5, r9
 80015a2:	432e      	orrs	r6, r5
 80015a4:	d022      	beq.n	80015ec <__gedf2+0x88>
 80015a6:	2c00      	cmp	r4, #0
 80015a8:	d010      	beq.n	80015cc <__gedf2+0x68>
 80015aa:	4281      	cmp	r1, r0
 80015ac:	d022      	beq.n	80015f4 <__gedf2+0x90>
 80015ae:	2002      	movs	r0, #2
 80015b0:	3901      	subs	r1, #1
 80015b2:	4008      	ands	r0, r1
 80015b4:	3801      	subs	r0, #1
 80015b6:	bcc0      	pop	{r6, r7}
 80015b8:	46b9      	mov	r9, r7
 80015ba:	46b0      	mov	r8, r6
 80015bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015be:	464d      	mov	r5, r9
 80015c0:	432e      	orrs	r6, r5
 80015c2:	d129      	bne.n	8001618 <__gedf2+0xb4>
 80015c4:	2a00      	cmp	r2, #0
 80015c6:	d1f0      	bne.n	80015aa <__gedf2+0x46>
 80015c8:	433c      	orrs	r4, r7
 80015ca:	d1ee      	bne.n	80015aa <__gedf2+0x46>
 80015cc:	2800      	cmp	r0, #0
 80015ce:	d1f2      	bne.n	80015b6 <__gedf2+0x52>
 80015d0:	2001      	movs	r0, #1
 80015d2:	4240      	negs	r0, r0
 80015d4:	e7ef      	b.n	80015b6 <__gedf2+0x52>
 80015d6:	003d      	movs	r5, r7
 80015d8:	4325      	orrs	r5, r4
 80015da:	d11d      	bne.n	8001618 <__gedf2+0xb4>
 80015dc:	4293      	cmp	r3, r2
 80015de:	d0ee      	beq.n	80015be <__gedf2+0x5a>
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1e2      	bne.n	80015aa <__gedf2+0x46>
 80015e4:	464c      	mov	r4, r9
 80015e6:	4326      	orrs	r6, r4
 80015e8:	d1df      	bne.n	80015aa <__gedf2+0x46>
 80015ea:	e7e0      	b.n	80015ae <__gedf2+0x4a>
 80015ec:	2000      	movs	r0, #0
 80015ee:	2c00      	cmp	r4, #0
 80015f0:	d0e1      	beq.n	80015b6 <__gedf2+0x52>
 80015f2:	e7dc      	b.n	80015ae <__gedf2+0x4a>
 80015f4:	429a      	cmp	r2, r3
 80015f6:	dc0a      	bgt.n	800160e <__gedf2+0xaa>
 80015f8:	dbe8      	blt.n	80015cc <__gedf2+0x68>
 80015fa:	454f      	cmp	r7, r9
 80015fc:	d8d7      	bhi.n	80015ae <__gedf2+0x4a>
 80015fe:	d00e      	beq.n	800161e <__gedf2+0xba>
 8001600:	2000      	movs	r0, #0
 8001602:	454f      	cmp	r7, r9
 8001604:	d2d7      	bcs.n	80015b6 <__gedf2+0x52>
 8001606:	2900      	cmp	r1, #0
 8001608:	d0e2      	beq.n	80015d0 <__gedf2+0x6c>
 800160a:	0008      	movs	r0, r1
 800160c:	e7d3      	b.n	80015b6 <__gedf2+0x52>
 800160e:	4243      	negs	r3, r0
 8001610:	4158      	adcs	r0, r3
 8001612:	0040      	lsls	r0, r0, #1
 8001614:	3801      	subs	r0, #1
 8001616:	e7ce      	b.n	80015b6 <__gedf2+0x52>
 8001618:	2002      	movs	r0, #2
 800161a:	4240      	negs	r0, r0
 800161c:	e7cb      	b.n	80015b6 <__gedf2+0x52>
 800161e:	45c4      	cmp	ip, r8
 8001620:	d8c5      	bhi.n	80015ae <__gedf2+0x4a>
 8001622:	2000      	movs	r0, #0
 8001624:	45c4      	cmp	ip, r8
 8001626:	d2c6      	bcs.n	80015b6 <__gedf2+0x52>
 8001628:	e7ed      	b.n	8001606 <__gedf2+0xa2>
 800162a:	46c0      	nop			; (mov r8, r8)
 800162c:	000007ff 	.word	0x000007ff

08001630 <__ledf2>:
 8001630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001632:	4647      	mov	r7, r8
 8001634:	46ce      	mov	lr, r9
 8001636:	0004      	movs	r4, r0
 8001638:	0018      	movs	r0, r3
 800163a:	0016      	movs	r6, r2
 800163c:	031b      	lsls	r3, r3, #12
 800163e:	0b1b      	lsrs	r3, r3, #12
 8001640:	4d2c      	ldr	r5, [pc, #176]	; (80016f4 <__ledf2+0xc4>)
 8001642:	004a      	lsls	r2, r1, #1
 8001644:	4699      	mov	r9, r3
 8001646:	b580      	push	{r7, lr}
 8001648:	0043      	lsls	r3, r0, #1
 800164a:	030f      	lsls	r7, r1, #12
 800164c:	46a4      	mov	ip, r4
 800164e:	46b0      	mov	r8, r6
 8001650:	0b3f      	lsrs	r7, r7, #12
 8001652:	0d52      	lsrs	r2, r2, #21
 8001654:	0fc9      	lsrs	r1, r1, #31
 8001656:	0d5b      	lsrs	r3, r3, #21
 8001658:	0fc0      	lsrs	r0, r0, #31
 800165a:	42aa      	cmp	r2, r5
 800165c:	d00d      	beq.n	800167a <__ledf2+0x4a>
 800165e:	42ab      	cmp	r3, r5
 8001660:	d010      	beq.n	8001684 <__ledf2+0x54>
 8001662:	2a00      	cmp	r2, #0
 8001664:	d127      	bne.n	80016b6 <__ledf2+0x86>
 8001666:	433c      	orrs	r4, r7
 8001668:	2b00      	cmp	r3, #0
 800166a:	d111      	bne.n	8001690 <__ledf2+0x60>
 800166c:	464d      	mov	r5, r9
 800166e:	432e      	orrs	r6, r5
 8001670:	d10e      	bne.n	8001690 <__ledf2+0x60>
 8001672:	2000      	movs	r0, #0
 8001674:	2c00      	cmp	r4, #0
 8001676:	d015      	beq.n	80016a4 <__ledf2+0x74>
 8001678:	e00e      	b.n	8001698 <__ledf2+0x68>
 800167a:	003d      	movs	r5, r7
 800167c:	4325      	orrs	r5, r4
 800167e:	d110      	bne.n	80016a2 <__ledf2+0x72>
 8001680:	4293      	cmp	r3, r2
 8001682:	d118      	bne.n	80016b6 <__ledf2+0x86>
 8001684:	464d      	mov	r5, r9
 8001686:	432e      	orrs	r6, r5
 8001688:	d10b      	bne.n	80016a2 <__ledf2+0x72>
 800168a:	2a00      	cmp	r2, #0
 800168c:	d102      	bne.n	8001694 <__ledf2+0x64>
 800168e:	433c      	orrs	r4, r7
 8001690:	2c00      	cmp	r4, #0
 8001692:	d00b      	beq.n	80016ac <__ledf2+0x7c>
 8001694:	4281      	cmp	r1, r0
 8001696:	d014      	beq.n	80016c2 <__ledf2+0x92>
 8001698:	2002      	movs	r0, #2
 800169a:	3901      	subs	r1, #1
 800169c:	4008      	ands	r0, r1
 800169e:	3801      	subs	r0, #1
 80016a0:	e000      	b.n	80016a4 <__ledf2+0x74>
 80016a2:	2002      	movs	r0, #2
 80016a4:	bcc0      	pop	{r6, r7}
 80016a6:	46b9      	mov	r9, r7
 80016a8:	46b0      	mov	r8, r6
 80016aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016ac:	2800      	cmp	r0, #0
 80016ae:	d1f9      	bne.n	80016a4 <__ledf2+0x74>
 80016b0:	2001      	movs	r0, #1
 80016b2:	4240      	negs	r0, r0
 80016b4:	e7f6      	b.n	80016a4 <__ledf2+0x74>
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1ec      	bne.n	8001694 <__ledf2+0x64>
 80016ba:	464c      	mov	r4, r9
 80016bc:	4326      	orrs	r6, r4
 80016be:	d1e9      	bne.n	8001694 <__ledf2+0x64>
 80016c0:	e7ea      	b.n	8001698 <__ledf2+0x68>
 80016c2:	429a      	cmp	r2, r3
 80016c4:	dd04      	ble.n	80016d0 <__ledf2+0xa0>
 80016c6:	4243      	negs	r3, r0
 80016c8:	4158      	adcs	r0, r3
 80016ca:	0040      	lsls	r0, r0, #1
 80016cc:	3801      	subs	r0, #1
 80016ce:	e7e9      	b.n	80016a4 <__ledf2+0x74>
 80016d0:	429a      	cmp	r2, r3
 80016d2:	dbeb      	blt.n	80016ac <__ledf2+0x7c>
 80016d4:	454f      	cmp	r7, r9
 80016d6:	d8df      	bhi.n	8001698 <__ledf2+0x68>
 80016d8:	d006      	beq.n	80016e8 <__ledf2+0xb8>
 80016da:	2000      	movs	r0, #0
 80016dc:	454f      	cmp	r7, r9
 80016de:	d2e1      	bcs.n	80016a4 <__ledf2+0x74>
 80016e0:	2900      	cmp	r1, #0
 80016e2:	d0e5      	beq.n	80016b0 <__ledf2+0x80>
 80016e4:	0008      	movs	r0, r1
 80016e6:	e7dd      	b.n	80016a4 <__ledf2+0x74>
 80016e8:	45c4      	cmp	ip, r8
 80016ea:	d8d5      	bhi.n	8001698 <__ledf2+0x68>
 80016ec:	2000      	movs	r0, #0
 80016ee:	45c4      	cmp	ip, r8
 80016f0:	d2d8      	bcs.n	80016a4 <__ledf2+0x74>
 80016f2:	e7f5      	b.n	80016e0 <__ledf2+0xb0>
 80016f4:	000007ff 	.word	0x000007ff

080016f8 <__aeabi_dmul>:
 80016f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016fa:	4657      	mov	r7, sl
 80016fc:	464e      	mov	r6, r9
 80016fe:	4645      	mov	r5, r8
 8001700:	46de      	mov	lr, fp
 8001702:	b5e0      	push	{r5, r6, r7, lr}
 8001704:	4698      	mov	r8, r3
 8001706:	030c      	lsls	r4, r1, #12
 8001708:	004b      	lsls	r3, r1, #1
 800170a:	0006      	movs	r6, r0
 800170c:	4692      	mov	sl, r2
 800170e:	b087      	sub	sp, #28
 8001710:	0b24      	lsrs	r4, r4, #12
 8001712:	0d5b      	lsrs	r3, r3, #21
 8001714:	0fcf      	lsrs	r7, r1, #31
 8001716:	2b00      	cmp	r3, #0
 8001718:	d100      	bne.n	800171c <__aeabi_dmul+0x24>
 800171a:	e15c      	b.n	80019d6 <__aeabi_dmul+0x2de>
 800171c:	4ad9      	ldr	r2, [pc, #868]	; (8001a84 <__aeabi_dmul+0x38c>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d100      	bne.n	8001724 <__aeabi_dmul+0x2c>
 8001722:	e175      	b.n	8001a10 <__aeabi_dmul+0x318>
 8001724:	0f42      	lsrs	r2, r0, #29
 8001726:	00e4      	lsls	r4, r4, #3
 8001728:	4314      	orrs	r4, r2
 800172a:	2280      	movs	r2, #128	; 0x80
 800172c:	0412      	lsls	r2, r2, #16
 800172e:	4314      	orrs	r4, r2
 8001730:	4ad5      	ldr	r2, [pc, #852]	; (8001a88 <__aeabi_dmul+0x390>)
 8001732:	00c5      	lsls	r5, r0, #3
 8001734:	4694      	mov	ip, r2
 8001736:	4463      	add	r3, ip
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	2300      	movs	r3, #0
 800173c:	4699      	mov	r9, r3
 800173e:	469b      	mov	fp, r3
 8001740:	4643      	mov	r3, r8
 8001742:	4642      	mov	r2, r8
 8001744:	031e      	lsls	r6, r3, #12
 8001746:	0fd2      	lsrs	r2, r2, #31
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	4650      	mov	r0, sl
 800174c:	4690      	mov	r8, r2
 800174e:	0b36      	lsrs	r6, r6, #12
 8001750:	0d5b      	lsrs	r3, r3, #21
 8001752:	d100      	bne.n	8001756 <__aeabi_dmul+0x5e>
 8001754:	e120      	b.n	8001998 <__aeabi_dmul+0x2a0>
 8001756:	4acb      	ldr	r2, [pc, #812]	; (8001a84 <__aeabi_dmul+0x38c>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d100      	bne.n	800175e <__aeabi_dmul+0x66>
 800175c:	e162      	b.n	8001a24 <__aeabi_dmul+0x32c>
 800175e:	49ca      	ldr	r1, [pc, #808]	; (8001a88 <__aeabi_dmul+0x390>)
 8001760:	0f42      	lsrs	r2, r0, #29
 8001762:	468c      	mov	ip, r1
 8001764:	9900      	ldr	r1, [sp, #0]
 8001766:	4463      	add	r3, ip
 8001768:	00f6      	lsls	r6, r6, #3
 800176a:	468c      	mov	ip, r1
 800176c:	4316      	orrs	r6, r2
 800176e:	2280      	movs	r2, #128	; 0x80
 8001770:	449c      	add	ip, r3
 8001772:	0412      	lsls	r2, r2, #16
 8001774:	4663      	mov	r3, ip
 8001776:	4316      	orrs	r6, r2
 8001778:	00c2      	lsls	r2, r0, #3
 800177a:	2000      	movs	r0, #0
 800177c:	9300      	str	r3, [sp, #0]
 800177e:	9900      	ldr	r1, [sp, #0]
 8001780:	4643      	mov	r3, r8
 8001782:	3101      	adds	r1, #1
 8001784:	468c      	mov	ip, r1
 8001786:	4649      	mov	r1, r9
 8001788:	407b      	eors	r3, r7
 800178a:	9301      	str	r3, [sp, #4]
 800178c:	290f      	cmp	r1, #15
 800178e:	d826      	bhi.n	80017de <__aeabi_dmul+0xe6>
 8001790:	4bbe      	ldr	r3, [pc, #760]	; (8001a8c <__aeabi_dmul+0x394>)
 8001792:	0089      	lsls	r1, r1, #2
 8001794:	5859      	ldr	r1, [r3, r1]
 8001796:	468f      	mov	pc, r1
 8001798:	4643      	mov	r3, r8
 800179a:	9301      	str	r3, [sp, #4]
 800179c:	0034      	movs	r4, r6
 800179e:	0015      	movs	r5, r2
 80017a0:	4683      	mov	fp, r0
 80017a2:	465b      	mov	r3, fp
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d016      	beq.n	80017d6 <__aeabi_dmul+0xde>
 80017a8:	2b03      	cmp	r3, #3
 80017aa:	d100      	bne.n	80017ae <__aeabi_dmul+0xb6>
 80017ac:	e203      	b.n	8001bb6 <__aeabi_dmul+0x4be>
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d000      	beq.n	80017b4 <__aeabi_dmul+0xbc>
 80017b2:	e0cd      	b.n	8001950 <__aeabi_dmul+0x258>
 80017b4:	2200      	movs	r2, #0
 80017b6:	2400      	movs	r4, #0
 80017b8:	2500      	movs	r5, #0
 80017ba:	9b01      	ldr	r3, [sp, #4]
 80017bc:	0512      	lsls	r2, r2, #20
 80017be:	4322      	orrs	r2, r4
 80017c0:	07db      	lsls	r3, r3, #31
 80017c2:	431a      	orrs	r2, r3
 80017c4:	0028      	movs	r0, r5
 80017c6:	0011      	movs	r1, r2
 80017c8:	b007      	add	sp, #28
 80017ca:	bcf0      	pop	{r4, r5, r6, r7}
 80017cc:	46bb      	mov	fp, r7
 80017ce:	46b2      	mov	sl, r6
 80017d0:	46a9      	mov	r9, r5
 80017d2:	46a0      	mov	r8, r4
 80017d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017d6:	2400      	movs	r4, #0
 80017d8:	2500      	movs	r5, #0
 80017da:	4aaa      	ldr	r2, [pc, #680]	; (8001a84 <__aeabi_dmul+0x38c>)
 80017dc:	e7ed      	b.n	80017ba <__aeabi_dmul+0xc2>
 80017de:	0c28      	lsrs	r0, r5, #16
 80017e0:	042d      	lsls	r5, r5, #16
 80017e2:	0c2d      	lsrs	r5, r5, #16
 80017e4:	002b      	movs	r3, r5
 80017e6:	0c11      	lsrs	r1, r2, #16
 80017e8:	0412      	lsls	r2, r2, #16
 80017ea:	0c12      	lsrs	r2, r2, #16
 80017ec:	4353      	muls	r3, r2
 80017ee:	4698      	mov	r8, r3
 80017f0:	0013      	movs	r3, r2
 80017f2:	002f      	movs	r7, r5
 80017f4:	4343      	muls	r3, r0
 80017f6:	4699      	mov	r9, r3
 80017f8:	434f      	muls	r7, r1
 80017fa:	444f      	add	r7, r9
 80017fc:	46bb      	mov	fp, r7
 80017fe:	4647      	mov	r7, r8
 8001800:	000b      	movs	r3, r1
 8001802:	0c3f      	lsrs	r7, r7, #16
 8001804:	46ba      	mov	sl, r7
 8001806:	4343      	muls	r3, r0
 8001808:	44da      	add	sl, fp
 800180a:	9302      	str	r3, [sp, #8]
 800180c:	45d1      	cmp	r9, sl
 800180e:	d904      	bls.n	800181a <__aeabi_dmul+0x122>
 8001810:	2780      	movs	r7, #128	; 0x80
 8001812:	027f      	lsls	r7, r7, #9
 8001814:	46b9      	mov	r9, r7
 8001816:	444b      	add	r3, r9
 8001818:	9302      	str	r3, [sp, #8]
 800181a:	4653      	mov	r3, sl
 800181c:	0c1b      	lsrs	r3, r3, #16
 800181e:	469b      	mov	fp, r3
 8001820:	4653      	mov	r3, sl
 8001822:	041f      	lsls	r7, r3, #16
 8001824:	4643      	mov	r3, r8
 8001826:	041b      	lsls	r3, r3, #16
 8001828:	0c1b      	lsrs	r3, r3, #16
 800182a:	4698      	mov	r8, r3
 800182c:	003b      	movs	r3, r7
 800182e:	4443      	add	r3, r8
 8001830:	9304      	str	r3, [sp, #16]
 8001832:	0c33      	lsrs	r3, r6, #16
 8001834:	0436      	lsls	r6, r6, #16
 8001836:	0c36      	lsrs	r6, r6, #16
 8001838:	4698      	mov	r8, r3
 800183a:	0033      	movs	r3, r6
 800183c:	4343      	muls	r3, r0
 800183e:	4699      	mov	r9, r3
 8001840:	4643      	mov	r3, r8
 8001842:	4343      	muls	r3, r0
 8001844:	002f      	movs	r7, r5
 8001846:	469a      	mov	sl, r3
 8001848:	4643      	mov	r3, r8
 800184a:	4377      	muls	r7, r6
 800184c:	435d      	muls	r5, r3
 800184e:	0c38      	lsrs	r0, r7, #16
 8001850:	444d      	add	r5, r9
 8001852:	1945      	adds	r5, r0, r5
 8001854:	45a9      	cmp	r9, r5
 8001856:	d903      	bls.n	8001860 <__aeabi_dmul+0x168>
 8001858:	2380      	movs	r3, #128	; 0x80
 800185a:	025b      	lsls	r3, r3, #9
 800185c:	4699      	mov	r9, r3
 800185e:	44ca      	add	sl, r9
 8001860:	043f      	lsls	r7, r7, #16
 8001862:	0c28      	lsrs	r0, r5, #16
 8001864:	0c3f      	lsrs	r7, r7, #16
 8001866:	042d      	lsls	r5, r5, #16
 8001868:	19ed      	adds	r5, r5, r7
 800186a:	0c27      	lsrs	r7, r4, #16
 800186c:	0424      	lsls	r4, r4, #16
 800186e:	0c24      	lsrs	r4, r4, #16
 8001870:	0003      	movs	r3, r0
 8001872:	0020      	movs	r0, r4
 8001874:	4350      	muls	r0, r2
 8001876:	437a      	muls	r2, r7
 8001878:	4691      	mov	r9, r2
 800187a:	003a      	movs	r2, r7
 800187c:	4453      	add	r3, sl
 800187e:	9305      	str	r3, [sp, #20]
 8001880:	0c03      	lsrs	r3, r0, #16
 8001882:	469a      	mov	sl, r3
 8001884:	434a      	muls	r2, r1
 8001886:	4361      	muls	r1, r4
 8001888:	4449      	add	r1, r9
 800188a:	4451      	add	r1, sl
 800188c:	44ab      	add	fp, r5
 800188e:	4589      	cmp	r9, r1
 8001890:	d903      	bls.n	800189a <__aeabi_dmul+0x1a2>
 8001892:	2380      	movs	r3, #128	; 0x80
 8001894:	025b      	lsls	r3, r3, #9
 8001896:	4699      	mov	r9, r3
 8001898:	444a      	add	r2, r9
 800189a:	0400      	lsls	r0, r0, #16
 800189c:	0c0b      	lsrs	r3, r1, #16
 800189e:	0c00      	lsrs	r0, r0, #16
 80018a0:	0409      	lsls	r1, r1, #16
 80018a2:	1809      	adds	r1, r1, r0
 80018a4:	0020      	movs	r0, r4
 80018a6:	4699      	mov	r9, r3
 80018a8:	4643      	mov	r3, r8
 80018aa:	4370      	muls	r0, r6
 80018ac:	435c      	muls	r4, r3
 80018ae:	437e      	muls	r6, r7
 80018b0:	435f      	muls	r7, r3
 80018b2:	0c03      	lsrs	r3, r0, #16
 80018b4:	4698      	mov	r8, r3
 80018b6:	19a4      	adds	r4, r4, r6
 80018b8:	4444      	add	r4, r8
 80018ba:	444a      	add	r2, r9
 80018bc:	9703      	str	r7, [sp, #12]
 80018be:	42a6      	cmp	r6, r4
 80018c0:	d904      	bls.n	80018cc <__aeabi_dmul+0x1d4>
 80018c2:	2380      	movs	r3, #128	; 0x80
 80018c4:	025b      	lsls	r3, r3, #9
 80018c6:	4698      	mov	r8, r3
 80018c8:	4447      	add	r7, r8
 80018ca:	9703      	str	r7, [sp, #12]
 80018cc:	0423      	lsls	r3, r4, #16
 80018ce:	9e02      	ldr	r6, [sp, #8]
 80018d0:	469a      	mov	sl, r3
 80018d2:	9b05      	ldr	r3, [sp, #20]
 80018d4:	445e      	add	r6, fp
 80018d6:	4698      	mov	r8, r3
 80018d8:	42ae      	cmp	r6, r5
 80018da:	41ad      	sbcs	r5, r5
 80018dc:	1876      	adds	r6, r6, r1
 80018de:	428e      	cmp	r6, r1
 80018e0:	4189      	sbcs	r1, r1
 80018e2:	0400      	lsls	r0, r0, #16
 80018e4:	0c00      	lsrs	r0, r0, #16
 80018e6:	4450      	add	r0, sl
 80018e8:	4440      	add	r0, r8
 80018ea:	426d      	negs	r5, r5
 80018ec:	1947      	adds	r7, r0, r5
 80018ee:	46b8      	mov	r8, r7
 80018f0:	4693      	mov	fp, r2
 80018f2:	4249      	negs	r1, r1
 80018f4:	4689      	mov	r9, r1
 80018f6:	44c3      	add	fp, r8
 80018f8:	44d9      	add	r9, fp
 80018fa:	4298      	cmp	r0, r3
 80018fc:	4180      	sbcs	r0, r0
 80018fe:	45a8      	cmp	r8, r5
 8001900:	41ad      	sbcs	r5, r5
 8001902:	4593      	cmp	fp, r2
 8001904:	4192      	sbcs	r2, r2
 8001906:	4589      	cmp	r9, r1
 8001908:	4189      	sbcs	r1, r1
 800190a:	426d      	negs	r5, r5
 800190c:	4240      	negs	r0, r0
 800190e:	4328      	orrs	r0, r5
 8001910:	0c24      	lsrs	r4, r4, #16
 8001912:	4252      	negs	r2, r2
 8001914:	4249      	negs	r1, r1
 8001916:	430a      	orrs	r2, r1
 8001918:	9b03      	ldr	r3, [sp, #12]
 800191a:	1900      	adds	r0, r0, r4
 800191c:	1880      	adds	r0, r0, r2
 800191e:	18c7      	adds	r7, r0, r3
 8001920:	464b      	mov	r3, r9
 8001922:	0ddc      	lsrs	r4, r3, #23
 8001924:	9b04      	ldr	r3, [sp, #16]
 8001926:	0275      	lsls	r5, r6, #9
 8001928:	431d      	orrs	r5, r3
 800192a:	1e6a      	subs	r2, r5, #1
 800192c:	4195      	sbcs	r5, r2
 800192e:	464b      	mov	r3, r9
 8001930:	0df6      	lsrs	r6, r6, #23
 8001932:	027f      	lsls	r7, r7, #9
 8001934:	4335      	orrs	r5, r6
 8001936:	025a      	lsls	r2, r3, #9
 8001938:	433c      	orrs	r4, r7
 800193a:	4315      	orrs	r5, r2
 800193c:	01fb      	lsls	r3, r7, #7
 800193e:	d400      	bmi.n	8001942 <__aeabi_dmul+0x24a>
 8001940:	e11c      	b.n	8001b7c <__aeabi_dmul+0x484>
 8001942:	2101      	movs	r1, #1
 8001944:	086a      	lsrs	r2, r5, #1
 8001946:	400d      	ands	r5, r1
 8001948:	4315      	orrs	r5, r2
 800194a:	07e2      	lsls	r2, r4, #31
 800194c:	4315      	orrs	r5, r2
 800194e:	0864      	lsrs	r4, r4, #1
 8001950:	494f      	ldr	r1, [pc, #316]	; (8001a90 <__aeabi_dmul+0x398>)
 8001952:	4461      	add	r1, ip
 8001954:	2900      	cmp	r1, #0
 8001956:	dc00      	bgt.n	800195a <__aeabi_dmul+0x262>
 8001958:	e0b0      	b.n	8001abc <__aeabi_dmul+0x3c4>
 800195a:	076b      	lsls	r3, r5, #29
 800195c:	d009      	beq.n	8001972 <__aeabi_dmul+0x27a>
 800195e:	220f      	movs	r2, #15
 8001960:	402a      	ands	r2, r5
 8001962:	2a04      	cmp	r2, #4
 8001964:	d005      	beq.n	8001972 <__aeabi_dmul+0x27a>
 8001966:	1d2a      	adds	r2, r5, #4
 8001968:	42aa      	cmp	r2, r5
 800196a:	41ad      	sbcs	r5, r5
 800196c:	426d      	negs	r5, r5
 800196e:	1964      	adds	r4, r4, r5
 8001970:	0015      	movs	r5, r2
 8001972:	01e3      	lsls	r3, r4, #7
 8001974:	d504      	bpl.n	8001980 <__aeabi_dmul+0x288>
 8001976:	2180      	movs	r1, #128	; 0x80
 8001978:	4a46      	ldr	r2, [pc, #280]	; (8001a94 <__aeabi_dmul+0x39c>)
 800197a:	00c9      	lsls	r1, r1, #3
 800197c:	4014      	ands	r4, r2
 800197e:	4461      	add	r1, ip
 8001980:	4a45      	ldr	r2, [pc, #276]	; (8001a98 <__aeabi_dmul+0x3a0>)
 8001982:	4291      	cmp	r1, r2
 8001984:	dd00      	ble.n	8001988 <__aeabi_dmul+0x290>
 8001986:	e726      	b.n	80017d6 <__aeabi_dmul+0xde>
 8001988:	0762      	lsls	r2, r4, #29
 800198a:	08ed      	lsrs	r5, r5, #3
 800198c:	0264      	lsls	r4, r4, #9
 800198e:	0549      	lsls	r1, r1, #21
 8001990:	4315      	orrs	r5, r2
 8001992:	0b24      	lsrs	r4, r4, #12
 8001994:	0d4a      	lsrs	r2, r1, #21
 8001996:	e710      	b.n	80017ba <__aeabi_dmul+0xc2>
 8001998:	4652      	mov	r2, sl
 800199a:	4332      	orrs	r2, r6
 800199c:	d100      	bne.n	80019a0 <__aeabi_dmul+0x2a8>
 800199e:	e07f      	b.n	8001aa0 <__aeabi_dmul+0x3a8>
 80019a0:	2e00      	cmp	r6, #0
 80019a2:	d100      	bne.n	80019a6 <__aeabi_dmul+0x2ae>
 80019a4:	e0dc      	b.n	8001b60 <__aeabi_dmul+0x468>
 80019a6:	0030      	movs	r0, r6
 80019a8:	f000 fe1e 	bl	80025e8 <__clzsi2>
 80019ac:	0002      	movs	r2, r0
 80019ae:	3a0b      	subs	r2, #11
 80019b0:	231d      	movs	r3, #29
 80019b2:	0001      	movs	r1, r0
 80019b4:	1a9b      	subs	r3, r3, r2
 80019b6:	4652      	mov	r2, sl
 80019b8:	3908      	subs	r1, #8
 80019ba:	40da      	lsrs	r2, r3
 80019bc:	408e      	lsls	r6, r1
 80019be:	4316      	orrs	r6, r2
 80019c0:	4652      	mov	r2, sl
 80019c2:	408a      	lsls	r2, r1
 80019c4:	9b00      	ldr	r3, [sp, #0]
 80019c6:	4935      	ldr	r1, [pc, #212]	; (8001a9c <__aeabi_dmul+0x3a4>)
 80019c8:	1a18      	subs	r0, r3, r0
 80019ca:	0003      	movs	r3, r0
 80019cc:	468c      	mov	ip, r1
 80019ce:	4463      	add	r3, ip
 80019d0:	2000      	movs	r0, #0
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	e6d3      	b.n	800177e <__aeabi_dmul+0x86>
 80019d6:	0025      	movs	r5, r4
 80019d8:	4305      	orrs	r5, r0
 80019da:	d04a      	beq.n	8001a72 <__aeabi_dmul+0x37a>
 80019dc:	2c00      	cmp	r4, #0
 80019de:	d100      	bne.n	80019e2 <__aeabi_dmul+0x2ea>
 80019e0:	e0b0      	b.n	8001b44 <__aeabi_dmul+0x44c>
 80019e2:	0020      	movs	r0, r4
 80019e4:	f000 fe00 	bl	80025e8 <__clzsi2>
 80019e8:	0001      	movs	r1, r0
 80019ea:	0002      	movs	r2, r0
 80019ec:	390b      	subs	r1, #11
 80019ee:	231d      	movs	r3, #29
 80019f0:	0010      	movs	r0, r2
 80019f2:	1a5b      	subs	r3, r3, r1
 80019f4:	0031      	movs	r1, r6
 80019f6:	0035      	movs	r5, r6
 80019f8:	3808      	subs	r0, #8
 80019fa:	4084      	lsls	r4, r0
 80019fc:	40d9      	lsrs	r1, r3
 80019fe:	4085      	lsls	r5, r0
 8001a00:	430c      	orrs	r4, r1
 8001a02:	4826      	ldr	r0, [pc, #152]	; (8001a9c <__aeabi_dmul+0x3a4>)
 8001a04:	1a83      	subs	r3, r0, r2
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	2300      	movs	r3, #0
 8001a0a:	4699      	mov	r9, r3
 8001a0c:	469b      	mov	fp, r3
 8001a0e:	e697      	b.n	8001740 <__aeabi_dmul+0x48>
 8001a10:	0005      	movs	r5, r0
 8001a12:	4325      	orrs	r5, r4
 8001a14:	d126      	bne.n	8001a64 <__aeabi_dmul+0x36c>
 8001a16:	2208      	movs	r2, #8
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	2400      	movs	r4, #0
 8001a1e:	4691      	mov	r9, r2
 8001a20:	469b      	mov	fp, r3
 8001a22:	e68d      	b.n	8001740 <__aeabi_dmul+0x48>
 8001a24:	4652      	mov	r2, sl
 8001a26:	9b00      	ldr	r3, [sp, #0]
 8001a28:	4332      	orrs	r2, r6
 8001a2a:	d110      	bne.n	8001a4e <__aeabi_dmul+0x356>
 8001a2c:	4915      	ldr	r1, [pc, #84]	; (8001a84 <__aeabi_dmul+0x38c>)
 8001a2e:	2600      	movs	r6, #0
 8001a30:	468c      	mov	ip, r1
 8001a32:	4463      	add	r3, ip
 8001a34:	4649      	mov	r1, r9
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	2302      	movs	r3, #2
 8001a3a:	4319      	orrs	r1, r3
 8001a3c:	4689      	mov	r9, r1
 8001a3e:	2002      	movs	r0, #2
 8001a40:	e69d      	b.n	800177e <__aeabi_dmul+0x86>
 8001a42:	465b      	mov	r3, fp
 8001a44:	9701      	str	r7, [sp, #4]
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d000      	beq.n	8001a4c <__aeabi_dmul+0x354>
 8001a4a:	e6ad      	b.n	80017a8 <__aeabi_dmul+0xb0>
 8001a4c:	e6c3      	b.n	80017d6 <__aeabi_dmul+0xde>
 8001a4e:	4a0d      	ldr	r2, [pc, #52]	; (8001a84 <__aeabi_dmul+0x38c>)
 8001a50:	2003      	movs	r0, #3
 8001a52:	4694      	mov	ip, r2
 8001a54:	4463      	add	r3, ip
 8001a56:	464a      	mov	r2, r9
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	4691      	mov	r9, r2
 8001a60:	4652      	mov	r2, sl
 8001a62:	e68c      	b.n	800177e <__aeabi_dmul+0x86>
 8001a64:	220c      	movs	r2, #12
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	2303      	movs	r3, #3
 8001a6a:	0005      	movs	r5, r0
 8001a6c:	4691      	mov	r9, r2
 8001a6e:	469b      	mov	fp, r3
 8001a70:	e666      	b.n	8001740 <__aeabi_dmul+0x48>
 8001a72:	2304      	movs	r3, #4
 8001a74:	4699      	mov	r9, r3
 8001a76:	2300      	movs	r3, #0
 8001a78:	9300      	str	r3, [sp, #0]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	2400      	movs	r4, #0
 8001a7e:	469b      	mov	fp, r3
 8001a80:	e65e      	b.n	8001740 <__aeabi_dmul+0x48>
 8001a82:	46c0      	nop			; (mov r8, r8)
 8001a84:	000007ff 	.word	0x000007ff
 8001a88:	fffffc01 	.word	0xfffffc01
 8001a8c:	08017108 	.word	0x08017108
 8001a90:	000003ff 	.word	0x000003ff
 8001a94:	feffffff 	.word	0xfeffffff
 8001a98:	000007fe 	.word	0x000007fe
 8001a9c:	fffffc0d 	.word	0xfffffc0d
 8001aa0:	4649      	mov	r1, r9
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	4319      	orrs	r1, r3
 8001aa6:	4689      	mov	r9, r1
 8001aa8:	2600      	movs	r6, #0
 8001aaa:	2001      	movs	r0, #1
 8001aac:	e667      	b.n	800177e <__aeabi_dmul+0x86>
 8001aae:	2300      	movs	r3, #0
 8001ab0:	2480      	movs	r4, #128	; 0x80
 8001ab2:	2500      	movs	r5, #0
 8001ab4:	4a43      	ldr	r2, [pc, #268]	; (8001bc4 <__aeabi_dmul+0x4cc>)
 8001ab6:	9301      	str	r3, [sp, #4]
 8001ab8:	0324      	lsls	r4, r4, #12
 8001aba:	e67e      	b.n	80017ba <__aeabi_dmul+0xc2>
 8001abc:	2001      	movs	r0, #1
 8001abe:	1a40      	subs	r0, r0, r1
 8001ac0:	2838      	cmp	r0, #56	; 0x38
 8001ac2:	dd00      	ble.n	8001ac6 <__aeabi_dmul+0x3ce>
 8001ac4:	e676      	b.n	80017b4 <__aeabi_dmul+0xbc>
 8001ac6:	281f      	cmp	r0, #31
 8001ac8:	dd5b      	ble.n	8001b82 <__aeabi_dmul+0x48a>
 8001aca:	221f      	movs	r2, #31
 8001acc:	0023      	movs	r3, r4
 8001ace:	4252      	negs	r2, r2
 8001ad0:	1a51      	subs	r1, r2, r1
 8001ad2:	40cb      	lsrs	r3, r1
 8001ad4:	0019      	movs	r1, r3
 8001ad6:	2820      	cmp	r0, #32
 8001ad8:	d003      	beq.n	8001ae2 <__aeabi_dmul+0x3ea>
 8001ada:	4a3b      	ldr	r2, [pc, #236]	; (8001bc8 <__aeabi_dmul+0x4d0>)
 8001adc:	4462      	add	r2, ip
 8001ade:	4094      	lsls	r4, r2
 8001ae0:	4325      	orrs	r5, r4
 8001ae2:	1e6a      	subs	r2, r5, #1
 8001ae4:	4195      	sbcs	r5, r2
 8001ae6:	002a      	movs	r2, r5
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	2107      	movs	r1, #7
 8001aec:	000d      	movs	r5, r1
 8001aee:	2400      	movs	r4, #0
 8001af0:	4015      	ands	r5, r2
 8001af2:	4211      	tst	r1, r2
 8001af4:	d05b      	beq.n	8001bae <__aeabi_dmul+0x4b6>
 8001af6:	210f      	movs	r1, #15
 8001af8:	2400      	movs	r4, #0
 8001afa:	4011      	ands	r1, r2
 8001afc:	2904      	cmp	r1, #4
 8001afe:	d053      	beq.n	8001ba8 <__aeabi_dmul+0x4b0>
 8001b00:	1d11      	adds	r1, r2, #4
 8001b02:	4291      	cmp	r1, r2
 8001b04:	4192      	sbcs	r2, r2
 8001b06:	4252      	negs	r2, r2
 8001b08:	18a4      	adds	r4, r4, r2
 8001b0a:	000a      	movs	r2, r1
 8001b0c:	0223      	lsls	r3, r4, #8
 8001b0e:	d54b      	bpl.n	8001ba8 <__aeabi_dmul+0x4b0>
 8001b10:	2201      	movs	r2, #1
 8001b12:	2400      	movs	r4, #0
 8001b14:	2500      	movs	r5, #0
 8001b16:	e650      	b.n	80017ba <__aeabi_dmul+0xc2>
 8001b18:	2380      	movs	r3, #128	; 0x80
 8001b1a:	031b      	lsls	r3, r3, #12
 8001b1c:	421c      	tst	r4, r3
 8001b1e:	d009      	beq.n	8001b34 <__aeabi_dmul+0x43c>
 8001b20:	421e      	tst	r6, r3
 8001b22:	d107      	bne.n	8001b34 <__aeabi_dmul+0x43c>
 8001b24:	4333      	orrs	r3, r6
 8001b26:	031c      	lsls	r4, r3, #12
 8001b28:	4643      	mov	r3, r8
 8001b2a:	0015      	movs	r5, r2
 8001b2c:	0b24      	lsrs	r4, r4, #12
 8001b2e:	4a25      	ldr	r2, [pc, #148]	; (8001bc4 <__aeabi_dmul+0x4cc>)
 8001b30:	9301      	str	r3, [sp, #4]
 8001b32:	e642      	b.n	80017ba <__aeabi_dmul+0xc2>
 8001b34:	2280      	movs	r2, #128	; 0x80
 8001b36:	0312      	lsls	r2, r2, #12
 8001b38:	4314      	orrs	r4, r2
 8001b3a:	0324      	lsls	r4, r4, #12
 8001b3c:	4a21      	ldr	r2, [pc, #132]	; (8001bc4 <__aeabi_dmul+0x4cc>)
 8001b3e:	0b24      	lsrs	r4, r4, #12
 8001b40:	9701      	str	r7, [sp, #4]
 8001b42:	e63a      	b.n	80017ba <__aeabi_dmul+0xc2>
 8001b44:	f000 fd50 	bl	80025e8 <__clzsi2>
 8001b48:	0001      	movs	r1, r0
 8001b4a:	0002      	movs	r2, r0
 8001b4c:	3115      	adds	r1, #21
 8001b4e:	3220      	adds	r2, #32
 8001b50:	291c      	cmp	r1, #28
 8001b52:	dc00      	bgt.n	8001b56 <__aeabi_dmul+0x45e>
 8001b54:	e74b      	b.n	80019ee <__aeabi_dmul+0x2f6>
 8001b56:	0034      	movs	r4, r6
 8001b58:	3808      	subs	r0, #8
 8001b5a:	2500      	movs	r5, #0
 8001b5c:	4084      	lsls	r4, r0
 8001b5e:	e750      	b.n	8001a02 <__aeabi_dmul+0x30a>
 8001b60:	f000 fd42 	bl	80025e8 <__clzsi2>
 8001b64:	0003      	movs	r3, r0
 8001b66:	001a      	movs	r2, r3
 8001b68:	3215      	adds	r2, #21
 8001b6a:	3020      	adds	r0, #32
 8001b6c:	2a1c      	cmp	r2, #28
 8001b6e:	dc00      	bgt.n	8001b72 <__aeabi_dmul+0x47a>
 8001b70:	e71e      	b.n	80019b0 <__aeabi_dmul+0x2b8>
 8001b72:	4656      	mov	r6, sl
 8001b74:	3b08      	subs	r3, #8
 8001b76:	2200      	movs	r2, #0
 8001b78:	409e      	lsls	r6, r3
 8001b7a:	e723      	b.n	80019c4 <__aeabi_dmul+0x2cc>
 8001b7c:	9b00      	ldr	r3, [sp, #0]
 8001b7e:	469c      	mov	ip, r3
 8001b80:	e6e6      	b.n	8001950 <__aeabi_dmul+0x258>
 8001b82:	4912      	ldr	r1, [pc, #72]	; (8001bcc <__aeabi_dmul+0x4d4>)
 8001b84:	0022      	movs	r2, r4
 8001b86:	4461      	add	r1, ip
 8001b88:	002e      	movs	r6, r5
 8001b8a:	408d      	lsls	r5, r1
 8001b8c:	408a      	lsls	r2, r1
 8001b8e:	40c6      	lsrs	r6, r0
 8001b90:	1e69      	subs	r1, r5, #1
 8001b92:	418d      	sbcs	r5, r1
 8001b94:	4332      	orrs	r2, r6
 8001b96:	432a      	orrs	r2, r5
 8001b98:	40c4      	lsrs	r4, r0
 8001b9a:	0753      	lsls	r3, r2, #29
 8001b9c:	d0b6      	beq.n	8001b0c <__aeabi_dmul+0x414>
 8001b9e:	210f      	movs	r1, #15
 8001ba0:	4011      	ands	r1, r2
 8001ba2:	2904      	cmp	r1, #4
 8001ba4:	d1ac      	bne.n	8001b00 <__aeabi_dmul+0x408>
 8001ba6:	e7b1      	b.n	8001b0c <__aeabi_dmul+0x414>
 8001ba8:	0765      	lsls	r5, r4, #29
 8001baa:	0264      	lsls	r4, r4, #9
 8001bac:	0b24      	lsrs	r4, r4, #12
 8001bae:	08d2      	lsrs	r2, r2, #3
 8001bb0:	4315      	orrs	r5, r2
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	e601      	b.n	80017ba <__aeabi_dmul+0xc2>
 8001bb6:	2280      	movs	r2, #128	; 0x80
 8001bb8:	0312      	lsls	r2, r2, #12
 8001bba:	4314      	orrs	r4, r2
 8001bbc:	0324      	lsls	r4, r4, #12
 8001bbe:	4a01      	ldr	r2, [pc, #4]	; (8001bc4 <__aeabi_dmul+0x4cc>)
 8001bc0:	0b24      	lsrs	r4, r4, #12
 8001bc2:	e5fa      	b.n	80017ba <__aeabi_dmul+0xc2>
 8001bc4:	000007ff 	.word	0x000007ff
 8001bc8:	0000043e 	.word	0x0000043e
 8001bcc:	0000041e 	.word	0x0000041e

08001bd0 <__aeabi_dsub>:
 8001bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bd2:	4657      	mov	r7, sl
 8001bd4:	464e      	mov	r6, r9
 8001bd6:	4645      	mov	r5, r8
 8001bd8:	46de      	mov	lr, fp
 8001bda:	b5e0      	push	{r5, r6, r7, lr}
 8001bdc:	001e      	movs	r6, r3
 8001bde:	0017      	movs	r7, r2
 8001be0:	004a      	lsls	r2, r1, #1
 8001be2:	030b      	lsls	r3, r1, #12
 8001be4:	0d52      	lsrs	r2, r2, #21
 8001be6:	0a5b      	lsrs	r3, r3, #9
 8001be8:	4690      	mov	r8, r2
 8001bea:	0f42      	lsrs	r2, r0, #29
 8001bec:	431a      	orrs	r2, r3
 8001bee:	0fcd      	lsrs	r5, r1, #31
 8001bf0:	4ccd      	ldr	r4, [pc, #820]	; (8001f28 <__aeabi_dsub+0x358>)
 8001bf2:	0331      	lsls	r1, r6, #12
 8001bf4:	00c3      	lsls	r3, r0, #3
 8001bf6:	4694      	mov	ip, r2
 8001bf8:	0070      	lsls	r0, r6, #1
 8001bfa:	0f7a      	lsrs	r2, r7, #29
 8001bfc:	0a49      	lsrs	r1, r1, #9
 8001bfe:	00ff      	lsls	r7, r7, #3
 8001c00:	469a      	mov	sl, r3
 8001c02:	46b9      	mov	r9, r7
 8001c04:	0d40      	lsrs	r0, r0, #21
 8001c06:	0ff6      	lsrs	r6, r6, #31
 8001c08:	4311      	orrs	r1, r2
 8001c0a:	42a0      	cmp	r0, r4
 8001c0c:	d100      	bne.n	8001c10 <__aeabi_dsub+0x40>
 8001c0e:	e0b1      	b.n	8001d74 <__aeabi_dsub+0x1a4>
 8001c10:	2201      	movs	r2, #1
 8001c12:	4056      	eors	r6, r2
 8001c14:	46b3      	mov	fp, r6
 8001c16:	42b5      	cmp	r5, r6
 8001c18:	d100      	bne.n	8001c1c <__aeabi_dsub+0x4c>
 8001c1a:	e088      	b.n	8001d2e <__aeabi_dsub+0x15e>
 8001c1c:	4642      	mov	r2, r8
 8001c1e:	1a12      	subs	r2, r2, r0
 8001c20:	2a00      	cmp	r2, #0
 8001c22:	dc00      	bgt.n	8001c26 <__aeabi_dsub+0x56>
 8001c24:	e0ae      	b.n	8001d84 <__aeabi_dsub+0x1b4>
 8001c26:	2800      	cmp	r0, #0
 8001c28:	d100      	bne.n	8001c2c <__aeabi_dsub+0x5c>
 8001c2a:	e0c1      	b.n	8001db0 <__aeabi_dsub+0x1e0>
 8001c2c:	48be      	ldr	r0, [pc, #760]	; (8001f28 <__aeabi_dsub+0x358>)
 8001c2e:	4580      	cmp	r8, r0
 8001c30:	d100      	bne.n	8001c34 <__aeabi_dsub+0x64>
 8001c32:	e151      	b.n	8001ed8 <__aeabi_dsub+0x308>
 8001c34:	2080      	movs	r0, #128	; 0x80
 8001c36:	0400      	lsls	r0, r0, #16
 8001c38:	4301      	orrs	r1, r0
 8001c3a:	2a38      	cmp	r2, #56	; 0x38
 8001c3c:	dd00      	ble.n	8001c40 <__aeabi_dsub+0x70>
 8001c3e:	e17b      	b.n	8001f38 <__aeabi_dsub+0x368>
 8001c40:	2a1f      	cmp	r2, #31
 8001c42:	dd00      	ble.n	8001c46 <__aeabi_dsub+0x76>
 8001c44:	e1ee      	b.n	8002024 <__aeabi_dsub+0x454>
 8001c46:	2020      	movs	r0, #32
 8001c48:	003e      	movs	r6, r7
 8001c4a:	1a80      	subs	r0, r0, r2
 8001c4c:	000c      	movs	r4, r1
 8001c4e:	40d6      	lsrs	r6, r2
 8001c50:	40d1      	lsrs	r1, r2
 8001c52:	4087      	lsls	r7, r0
 8001c54:	4662      	mov	r2, ip
 8001c56:	4084      	lsls	r4, r0
 8001c58:	1a52      	subs	r2, r2, r1
 8001c5a:	1e78      	subs	r0, r7, #1
 8001c5c:	4187      	sbcs	r7, r0
 8001c5e:	4694      	mov	ip, r2
 8001c60:	4334      	orrs	r4, r6
 8001c62:	4327      	orrs	r7, r4
 8001c64:	1bdc      	subs	r4, r3, r7
 8001c66:	42a3      	cmp	r3, r4
 8001c68:	419b      	sbcs	r3, r3
 8001c6a:	4662      	mov	r2, ip
 8001c6c:	425b      	negs	r3, r3
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	4699      	mov	r9, r3
 8001c72:	464b      	mov	r3, r9
 8001c74:	021b      	lsls	r3, r3, #8
 8001c76:	d400      	bmi.n	8001c7a <__aeabi_dsub+0xaa>
 8001c78:	e118      	b.n	8001eac <__aeabi_dsub+0x2dc>
 8001c7a:	464b      	mov	r3, r9
 8001c7c:	0258      	lsls	r0, r3, #9
 8001c7e:	0a43      	lsrs	r3, r0, #9
 8001c80:	4699      	mov	r9, r3
 8001c82:	464b      	mov	r3, r9
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d100      	bne.n	8001c8a <__aeabi_dsub+0xba>
 8001c88:	e137      	b.n	8001efa <__aeabi_dsub+0x32a>
 8001c8a:	4648      	mov	r0, r9
 8001c8c:	f000 fcac 	bl	80025e8 <__clzsi2>
 8001c90:	0001      	movs	r1, r0
 8001c92:	3908      	subs	r1, #8
 8001c94:	2320      	movs	r3, #32
 8001c96:	0022      	movs	r2, r4
 8001c98:	4648      	mov	r0, r9
 8001c9a:	1a5b      	subs	r3, r3, r1
 8001c9c:	40da      	lsrs	r2, r3
 8001c9e:	4088      	lsls	r0, r1
 8001ca0:	408c      	lsls	r4, r1
 8001ca2:	4643      	mov	r3, r8
 8001ca4:	4310      	orrs	r0, r2
 8001ca6:	4588      	cmp	r8, r1
 8001ca8:	dd00      	ble.n	8001cac <__aeabi_dsub+0xdc>
 8001caa:	e136      	b.n	8001f1a <__aeabi_dsub+0x34a>
 8001cac:	1ac9      	subs	r1, r1, r3
 8001cae:	1c4b      	adds	r3, r1, #1
 8001cb0:	2b1f      	cmp	r3, #31
 8001cb2:	dd00      	ble.n	8001cb6 <__aeabi_dsub+0xe6>
 8001cb4:	e0ea      	b.n	8001e8c <__aeabi_dsub+0x2bc>
 8001cb6:	2220      	movs	r2, #32
 8001cb8:	0026      	movs	r6, r4
 8001cba:	1ad2      	subs	r2, r2, r3
 8001cbc:	0001      	movs	r1, r0
 8001cbe:	4094      	lsls	r4, r2
 8001cc0:	40de      	lsrs	r6, r3
 8001cc2:	40d8      	lsrs	r0, r3
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	4091      	lsls	r1, r2
 8001cc8:	1e62      	subs	r2, r4, #1
 8001cca:	4194      	sbcs	r4, r2
 8001ccc:	4681      	mov	r9, r0
 8001cce:	4698      	mov	r8, r3
 8001cd0:	4331      	orrs	r1, r6
 8001cd2:	430c      	orrs	r4, r1
 8001cd4:	0763      	lsls	r3, r4, #29
 8001cd6:	d009      	beq.n	8001cec <__aeabi_dsub+0x11c>
 8001cd8:	230f      	movs	r3, #15
 8001cda:	4023      	ands	r3, r4
 8001cdc:	2b04      	cmp	r3, #4
 8001cde:	d005      	beq.n	8001cec <__aeabi_dsub+0x11c>
 8001ce0:	1d23      	adds	r3, r4, #4
 8001ce2:	42a3      	cmp	r3, r4
 8001ce4:	41a4      	sbcs	r4, r4
 8001ce6:	4264      	negs	r4, r4
 8001ce8:	44a1      	add	r9, r4
 8001cea:	001c      	movs	r4, r3
 8001cec:	464b      	mov	r3, r9
 8001cee:	021b      	lsls	r3, r3, #8
 8001cf0:	d400      	bmi.n	8001cf4 <__aeabi_dsub+0x124>
 8001cf2:	e0de      	b.n	8001eb2 <__aeabi_dsub+0x2e2>
 8001cf4:	4641      	mov	r1, r8
 8001cf6:	4b8c      	ldr	r3, [pc, #560]	; (8001f28 <__aeabi_dsub+0x358>)
 8001cf8:	3101      	adds	r1, #1
 8001cfa:	4299      	cmp	r1, r3
 8001cfc:	d100      	bne.n	8001d00 <__aeabi_dsub+0x130>
 8001cfe:	e0e7      	b.n	8001ed0 <__aeabi_dsub+0x300>
 8001d00:	464b      	mov	r3, r9
 8001d02:	488a      	ldr	r0, [pc, #552]	; (8001f2c <__aeabi_dsub+0x35c>)
 8001d04:	08e4      	lsrs	r4, r4, #3
 8001d06:	4003      	ands	r3, r0
 8001d08:	0018      	movs	r0, r3
 8001d0a:	0549      	lsls	r1, r1, #21
 8001d0c:	075b      	lsls	r3, r3, #29
 8001d0e:	0240      	lsls	r0, r0, #9
 8001d10:	4323      	orrs	r3, r4
 8001d12:	0d4a      	lsrs	r2, r1, #21
 8001d14:	0b04      	lsrs	r4, r0, #12
 8001d16:	0512      	lsls	r2, r2, #20
 8001d18:	07ed      	lsls	r5, r5, #31
 8001d1a:	4322      	orrs	r2, r4
 8001d1c:	432a      	orrs	r2, r5
 8001d1e:	0018      	movs	r0, r3
 8001d20:	0011      	movs	r1, r2
 8001d22:	bcf0      	pop	{r4, r5, r6, r7}
 8001d24:	46bb      	mov	fp, r7
 8001d26:	46b2      	mov	sl, r6
 8001d28:	46a9      	mov	r9, r5
 8001d2a:	46a0      	mov	r8, r4
 8001d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d2e:	4642      	mov	r2, r8
 8001d30:	1a12      	subs	r2, r2, r0
 8001d32:	2a00      	cmp	r2, #0
 8001d34:	dd52      	ble.n	8001ddc <__aeabi_dsub+0x20c>
 8001d36:	2800      	cmp	r0, #0
 8001d38:	d100      	bne.n	8001d3c <__aeabi_dsub+0x16c>
 8001d3a:	e09c      	b.n	8001e76 <__aeabi_dsub+0x2a6>
 8001d3c:	45a0      	cmp	r8, r4
 8001d3e:	d100      	bne.n	8001d42 <__aeabi_dsub+0x172>
 8001d40:	e0ca      	b.n	8001ed8 <__aeabi_dsub+0x308>
 8001d42:	2080      	movs	r0, #128	; 0x80
 8001d44:	0400      	lsls	r0, r0, #16
 8001d46:	4301      	orrs	r1, r0
 8001d48:	2a38      	cmp	r2, #56	; 0x38
 8001d4a:	dd00      	ble.n	8001d4e <__aeabi_dsub+0x17e>
 8001d4c:	e149      	b.n	8001fe2 <__aeabi_dsub+0x412>
 8001d4e:	2a1f      	cmp	r2, #31
 8001d50:	dc00      	bgt.n	8001d54 <__aeabi_dsub+0x184>
 8001d52:	e197      	b.n	8002084 <__aeabi_dsub+0x4b4>
 8001d54:	0010      	movs	r0, r2
 8001d56:	000e      	movs	r6, r1
 8001d58:	3820      	subs	r0, #32
 8001d5a:	40c6      	lsrs	r6, r0
 8001d5c:	2a20      	cmp	r2, #32
 8001d5e:	d004      	beq.n	8001d6a <__aeabi_dsub+0x19a>
 8001d60:	2040      	movs	r0, #64	; 0x40
 8001d62:	1a82      	subs	r2, r0, r2
 8001d64:	4091      	lsls	r1, r2
 8001d66:	430f      	orrs	r7, r1
 8001d68:	46b9      	mov	r9, r7
 8001d6a:	464c      	mov	r4, r9
 8001d6c:	1e62      	subs	r2, r4, #1
 8001d6e:	4194      	sbcs	r4, r2
 8001d70:	4334      	orrs	r4, r6
 8001d72:	e13a      	b.n	8001fea <__aeabi_dsub+0x41a>
 8001d74:	000a      	movs	r2, r1
 8001d76:	433a      	orrs	r2, r7
 8001d78:	d028      	beq.n	8001dcc <__aeabi_dsub+0x1fc>
 8001d7a:	46b3      	mov	fp, r6
 8001d7c:	42b5      	cmp	r5, r6
 8001d7e:	d02b      	beq.n	8001dd8 <__aeabi_dsub+0x208>
 8001d80:	4a6b      	ldr	r2, [pc, #428]	; (8001f30 <__aeabi_dsub+0x360>)
 8001d82:	4442      	add	r2, r8
 8001d84:	2a00      	cmp	r2, #0
 8001d86:	d05d      	beq.n	8001e44 <__aeabi_dsub+0x274>
 8001d88:	4642      	mov	r2, r8
 8001d8a:	4644      	mov	r4, r8
 8001d8c:	1a82      	subs	r2, r0, r2
 8001d8e:	2c00      	cmp	r4, #0
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dsub+0x1c4>
 8001d92:	e0f5      	b.n	8001f80 <__aeabi_dsub+0x3b0>
 8001d94:	4665      	mov	r5, ip
 8001d96:	431d      	orrs	r5, r3
 8001d98:	d100      	bne.n	8001d9c <__aeabi_dsub+0x1cc>
 8001d9a:	e19c      	b.n	80020d6 <__aeabi_dsub+0x506>
 8001d9c:	1e55      	subs	r5, r2, #1
 8001d9e:	2a01      	cmp	r2, #1
 8001da0:	d100      	bne.n	8001da4 <__aeabi_dsub+0x1d4>
 8001da2:	e1fb      	b.n	800219c <__aeabi_dsub+0x5cc>
 8001da4:	4c60      	ldr	r4, [pc, #384]	; (8001f28 <__aeabi_dsub+0x358>)
 8001da6:	42a2      	cmp	r2, r4
 8001da8:	d100      	bne.n	8001dac <__aeabi_dsub+0x1dc>
 8001daa:	e1bd      	b.n	8002128 <__aeabi_dsub+0x558>
 8001dac:	002a      	movs	r2, r5
 8001dae:	e0f0      	b.n	8001f92 <__aeabi_dsub+0x3c2>
 8001db0:	0008      	movs	r0, r1
 8001db2:	4338      	orrs	r0, r7
 8001db4:	d100      	bne.n	8001db8 <__aeabi_dsub+0x1e8>
 8001db6:	e0c3      	b.n	8001f40 <__aeabi_dsub+0x370>
 8001db8:	1e50      	subs	r0, r2, #1
 8001dba:	2a01      	cmp	r2, #1
 8001dbc:	d100      	bne.n	8001dc0 <__aeabi_dsub+0x1f0>
 8001dbe:	e1a8      	b.n	8002112 <__aeabi_dsub+0x542>
 8001dc0:	4c59      	ldr	r4, [pc, #356]	; (8001f28 <__aeabi_dsub+0x358>)
 8001dc2:	42a2      	cmp	r2, r4
 8001dc4:	d100      	bne.n	8001dc8 <__aeabi_dsub+0x1f8>
 8001dc6:	e087      	b.n	8001ed8 <__aeabi_dsub+0x308>
 8001dc8:	0002      	movs	r2, r0
 8001dca:	e736      	b.n	8001c3a <__aeabi_dsub+0x6a>
 8001dcc:	2201      	movs	r2, #1
 8001dce:	4056      	eors	r6, r2
 8001dd0:	46b3      	mov	fp, r6
 8001dd2:	42b5      	cmp	r5, r6
 8001dd4:	d000      	beq.n	8001dd8 <__aeabi_dsub+0x208>
 8001dd6:	e721      	b.n	8001c1c <__aeabi_dsub+0x4c>
 8001dd8:	4a55      	ldr	r2, [pc, #340]	; (8001f30 <__aeabi_dsub+0x360>)
 8001dda:	4442      	add	r2, r8
 8001ddc:	2a00      	cmp	r2, #0
 8001dde:	d100      	bne.n	8001de2 <__aeabi_dsub+0x212>
 8001de0:	e0b5      	b.n	8001f4e <__aeabi_dsub+0x37e>
 8001de2:	4642      	mov	r2, r8
 8001de4:	4644      	mov	r4, r8
 8001de6:	1a82      	subs	r2, r0, r2
 8001de8:	2c00      	cmp	r4, #0
 8001dea:	d100      	bne.n	8001dee <__aeabi_dsub+0x21e>
 8001dec:	e138      	b.n	8002060 <__aeabi_dsub+0x490>
 8001dee:	4e4e      	ldr	r6, [pc, #312]	; (8001f28 <__aeabi_dsub+0x358>)
 8001df0:	42b0      	cmp	r0, r6
 8001df2:	d100      	bne.n	8001df6 <__aeabi_dsub+0x226>
 8001df4:	e1de      	b.n	80021b4 <__aeabi_dsub+0x5e4>
 8001df6:	2680      	movs	r6, #128	; 0x80
 8001df8:	4664      	mov	r4, ip
 8001dfa:	0436      	lsls	r6, r6, #16
 8001dfc:	4334      	orrs	r4, r6
 8001dfe:	46a4      	mov	ip, r4
 8001e00:	2a38      	cmp	r2, #56	; 0x38
 8001e02:	dd00      	ble.n	8001e06 <__aeabi_dsub+0x236>
 8001e04:	e196      	b.n	8002134 <__aeabi_dsub+0x564>
 8001e06:	2a1f      	cmp	r2, #31
 8001e08:	dd00      	ble.n	8001e0c <__aeabi_dsub+0x23c>
 8001e0a:	e224      	b.n	8002256 <__aeabi_dsub+0x686>
 8001e0c:	2620      	movs	r6, #32
 8001e0e:	1ab4      	subs	r4, r6, r2
 8001e10:	46a2      	mov	sl, r4
 8001e12:	4664      	mov	r4, ip
 8001e14:	4656      	mov	r6, sl
 8001e16:	40b4      	lsls	r4, r6
 8001e18:	46a1      	mov	r9, r4
 8001e1a:	001c      	movs	r4, r3
 8001e1c:	464e      	mov	r6, r9
 8001e1e:	40d4      	lsrs	r4, r2
 8001e20:	4326      	orrs	r6, r4
 8001e22:	0034      	movs	r4, r6
 8001e24:	4656      	mov	r6, sl
 8001e26:	40b3      	lsls	r3, r6
 8001e28:	1e5e      	subs	r6, r3, #1
 8001e2a:	41b3      	sbcs	r3, r6
 8001e2c:	431c      	orrs	r4, r3
 8001e2e:	4663      	mov	r3, ip
 8001e30:	40d3      	lsrs	r3, r2
 8001e32:	18c9      	adds	r1, r1, r3
 8001e34:	19e4      	adds	r4, r4, r7
 8001e36:	42bc      	cmp	r4, r7
 8001e38:	41bf      	sbcs	r7, r7
 8001e3a:	427f      	negs	r7, r7
 8001e3c:	46b9      	mov	r9, r7
 8001e3e:	4680      	mov	r8, r0
 8001e40:	4489      	add	r9, r1
 8001e42:	e0d8      	b.n	8001ff6 <__aeabi_dsub+0x426>
 8001e44:	4640      	mov	r0, r8
 8001e46:	4c3b      	ldr	r4, [pc, #236]	; (8001f34 <__aeabi_dsub+0x364>)
 8001e48:	3001      	adds	r0, #1
 8001e4a:	4220      	tst	r0, r4
 8001e4c:	d000      	beq.n	8001e50 <__aeabi_dsub+0x280>
 8001e4e:	e0b4      	b.n	8001fba <__aeabi_dsub+0x3ea>
 8001e50:	4640      	mov	r0, r8
 8001e52:	2800      	cmp	r0, #0
 8001e54:	d000      	beq.n	8001e58 <__aeabi_dsub+0x288>
 8001e56:	e144      	b.n	80020e2 <__aeabi_dsub+0x512>
 8001e58:	4660      	mov	r0, ip
 8001e5a:	4318      	orrs	r0, r3
 8001e5c:	d100      	bne.n	8001e60 <__aeabi_dsub+0x290>
 8001e5e:	e190      	b.n	8002182 <__aeabi_dsub+0x5b2>
 8001e60:	0008      	movs	r0, r1
 8001e62:	4338      	orrs	r0, r7
 8001e64:	d000      	beq.n	8001e68 <__aeabi_dsub+0x298>
 8001e66:	e1aa      	b.n	80021be <__aeabi_dsub+0x5ee>
 8001e68:	4661      	mov	r1, ip
 8001e6a:	08db      	lsrs	r3, r3, #3
 8001e6c:	0749      	lsls	r1, r1, #29
 8001e6e:	430b      	orrs	r3, r1
 8001e70:	4661      	mov	r1, ip
 8001e72:	08cc      	lsrs	r4, r1, #3
 8001e74:	e027      	b.n	8001ec6 <__aeabi_dsub+0x2f6>
 8001e76:	0008      	movs	r0, r1
 8001e78:	4338      	orrs	r0, r7
 8001e7a:	d061      	beq.n	8001f40 <__aeabi_dsub+0x370>
 8001e7c:	1e50      	subs	r0, r2, #1
 8001e7e:	2a01      	cmp	r2, #1
 8001e80:	d100      	bne.n	8001e84 <__aeabi_dsub+0x2b4>
 8001e82:	e139      	b.n	80020f8 <__aeabi_dsub+0x528>
 8001e84:	42a2      	cmp	r2, r4
 8001e86:	d027      	beq.n	8001ed8 <__aeabi_dsub+0x308>
 8001e88:	0002      	movs	r2, r0
 8001e8a:	e75d      	b.n	8001d48 <__aeabi_dsub+0x178>
 8001e8c:	0002      	movs	r2, r0
 8001e8e:	391f      	subs	r1, #31
 8001e90:	40ca      	lsrs	r2, r1
 8001e92:	0011      	movs	r1, r2
 8001e94:	2b20      	cmp	r3, #32
 8001e96:	d003      	beq.n	8001ea0 <__aeabi_dsub+0x2d0>
 8001e98:	2240      	movs	r2, #64	; 0x40
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	4098      	lsls	r0, r3
 8001e9e:	4304      	orrs	r4, r0
 8001ea0:	1e63      	subs	r3, r4, #1
 8001ea2:	419c      	sbcs	r4, r3
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	4699      	mov	r9, r3
 8001ea8:	4698      	mov	r8, r3
 8001eaa:	430c      	orrs	r4, r1
 8001eac:	0763      	lsls	r3, r4, #29
 8001eae:	d000      	beq.n	8001eb2 <__aeabi_dsub+0x2e2>
 8001eb0:	e712      	b.n	8001cd8 <__aeabi_dsub+0x108>
 8001eb2:	464b      	mov	r3, r9
 8001eb4:	464a      	mov	r2, r9
 8001eb6:	08e4      	lsrs	r4, r4, #3
 8001eb8:	075b      	lsls	r3, r3, #29
 8001eba:	4323      	orrs	r3, r4
 8001ebc:	08d4      	lsrs	r4, r2, #3
 8001ebe:	4642      	mov	r2, r8
 8001ec0:	4919      	ldr	r1, [pc, #100]	; (8001f28 <__aeabi_dsub+0x358>)
 8001ec2:	428a      	cmp	r2, r1
 8001ec4:	d00e      	beq.n	8001ee4 <__aeabi_dsub+0x314>
 8001ec6:	0324      	lsls	r4, r4, #12
 8001ec8:	0552      	lsls	r2, r2, #21
 8001eca:	0b24      	lsrs	r4, r4, #12
 8001ecc:	0d52      	lsrs	r2, r2, #21
 8001ece:	e722      	b.n	8001d16 <__aeabi_dsub+0x146>
 8001ed0:	000a      	movs	r2, r1
 8001ed2:	2400      	movs	r4, #0
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	e71e      	b.n	8001d16 <__aeabi_dsub+0x146>
 8001ed8:	08db      	lsrs	r3, r3, #3
 8001eda:	4662      	mov	r2, ip
 8001edc:	0752      	lsls	r2, r2, #29
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	4662      	mov	r2, ip
 8001ee2:	08d4      	lsrs	r4, r2, #3
 8001ee4:	001a      	movs	r2, r3
 8001ee6:	4322      	orrs	r2, r4
 8001ee8:	d100      	bne.n	8001eec <__aeabi_dsub+0x31c>
 8001eea:	e1fc      	b.n	80022e6 <__aeabi_dsub+0x716>
 8001eec:	2280      	movs	r2, #128	; 0x80
 8001eee:	0312      	lsls	r2, r2, #12
 8001ef0:	4314      	orrs	r4, r2
 8001ef2:	0324      	lsls	r4, r4, #12
 8001ef4:	4a0c      	ldr	r2, [pc, #48]	; (8001f28 <__aeabi_dsub+0x358>)
 8001ef6:	0b24      	lsrs	r4, r4, #12
 8001ef8:	e70d      	b.n	8001d16 <__aeabi_dsub+0x146>
 8001efa:	0020      	movs	r0, r4
 8001efc:	f000 fb74 	bl	80025e8 <__clzsi2>
 8001f00:	0001      	movs	r1, r0
 8001f02:	3118      	adds	r1, #24
 8001f04:	291f      	cmp	r1, #31
 8001f06:	dc00      	bgt.n	8001f0a <__aeabi_dsub+0x33a>
 8001f08:	e6c4      	b.n	8001c94 <__aeabi_dsub+0xc4>
 8001f0a:	3808      	subs	r0, #8
 8001f0c:	4084      	lsls	r4, r0
 8001f0e:	4643      	mov	r3, r8
 8001f10:	0020      	movs	r0, r4
 8001f12:	2400      	movs	r4, #0
 8001f14:	4588      	cmp	r8, r1
 8001f16:	dc00      	bgt.n	8001f1a <__aeabi_dsub+0x34a>
 8001f18:	e6c8      	b.n	8001cac <__aeabi_dsub+0xdc>
 8001f1a:	4a04      	ldr	r2, [pc, #16]	; (8001f2c <__aeabi_dsub+0x35c>)
 8001f1c:	1a5b      	subs	r3, r3, r1
 8001f1e:	4010      	ands	r0, r2
 8001f20:	4698      	mov	r8, r3
 8001f22:	4681      	mov	r9, r0
 8001f24:	e6d6      	b.n	8001cd4 <__aeabi_dsub+0x104>
 8001f26:	46c0      	nop			; (mov r8, r8)
 8001f28:	000007ff 	.word	0x000007ff
 8001f2c:	ff7fffff 	.word	0xff7fffff
 8001f30:	fffff801 	.word	0xfffff801
 8001f34:	000007fe 	.word	0x000007fe
 8001f38:	430f      	orrs	r7, r1
 8001f3a:	1e7a      	subs	r2, r7, #1
 8001f3c:	4197      	sbcs	r7, r2
 8001f3e:	e691      	b.n	8001c64 <__aeabi_dsub+0x94>
 8001f40:	4661      	mov	r1, ip
 8001f42:	08db      	lsrs	r3, r3, #3
 8001f44:	0749      	lsls	r1, r1, #29
 8001f46:	430b      	orrs	r3, r1
 8001f48:	4661      	mov	r1, ip
 8001f4a:	08cc      	lsrs	r4, r1, #3
 8001f4c:	e7b8      	b.n	8001ec0 <__aeabi_dsub+0x2f0>
 8001f4e:	4640      	mov	r0, r8
 8001f50:	4cd3      	ldr	r4, [pc, #844]	; (80022a0 <__aeabi_dsub+0x6d0>)
 8001f52:	3001      	adds	r0, #1
 8001f54:	4220      	tst	r0, r4
 8001f56:	d000      	beq.n	8001f5a <__aeabi_dsub+0x38a>
 8001f58:	e0a2      	b.n	80020a0 <__aeabi_dsub+0x4d0>
 8001f5a:	4640      	mov	r0, r8
 8001f5c:	2800      	cmp	r0, #0
 8001f5e:	d000      	beq.n	8001f62 <__aeabi_dsub+0x392>
 8001f60:	e101      	b.n	8002166 <__aeabi_dsub+0x596>
 8001f62:	4660      	mov	r0, ip
 8001f64:	4318      	orrs	r0, r3
 8001f66:	d100      	bne.n	8001f6a <__aeabi_dsub+0x39a>
 8001f68:	e15e      	b.n	8002228 <__aeabi_dsub+0x658>
 8001f6a:	0008      	movs	r0, r1
 8001f6c:	4338      	orrs	r0, r7
 8001f6e:	d000      	beq.n	8001f72 <__aeabi_dsub+0x3a2>
 8001f70:	e15f      	b.n	8002232 <__aeabi_dsub+0x662>
 8001f72:	4661      	mov	r1, ip
 8001f74:	08db      	lsrs	r3, r3, #3
 8001f76:	0749      	lsls	r1, r1, #29
 8001f78:	430b      	orrs	r3, r1
 8001f7a:	4661      	mov	r1, ip
 8001f7c:	08cc      	lsrs	r4, r1, #3
 8001f7e:	e7a2      	b.n	8001ec6 <__aeabi_dsub+0x2f6>
 8001f80:	4dc8      	ldr	r5, [pc, #800]	; (80022a4 <__aeabi_dsub+0x6d4>)
 8001f82:	42a8      	cmp	r0, r5
 8001f84:	d100      	bne.n	8001f88 <__aeabi_dsub+0x3b8>
 8001f86:	e0cf      	b.n	8002128 <__aeabi_dsub+0x558>
 8001f88:	2580      	movs	r5, #128	; 0x80
 8001f8a:	4664      	mov	r4, ip
 8001f8c:	042d      	lsls	r5, r5, #16
 8001f8e:	432c      	orrs	r4, r5
 8001f90:	46a4      	mov	ip, r4
 8001f92:	2a38      	cmp	r2, #56	; 0x38
 8001f94:	dc56      	bgt.n	8002044 <__aeabi_dsub+0x474>
 8001f96:	2a1f      	cmp	r2, #31
 8001f98:	dd00      	ble.n	8001f9c <__aeabi_dsub+0x3cc>
 8001f9a:	e0d1      	b.n	8002140 <__aeabi_dsub+0x570>
 8001f9c:	2520      	movs	r5, #32
 8001f9e:	001e      	movs	r6, r3
 8001fa0:	1aad      	subs	r5, r5, r2
 8001fa2:	4664      	mov	r4, ip
 8001fa4:	40ab      	lsls	r3, r5
 8001fa6:	40ac      	lsls	r4, r5
 8001fa8:	40d6      	lsrs	r6, r2
 8001faa:	1e5d      	subs	r5, r3, #1
 8001fac:	41ab      	sbcs	r3, r5
 8001fae:	4334      	orrs	r4, r6
 8001fb0:	4323      	orrs	r3, r4
 8001fb2:	4664      	mov	r4, ip
 8001fb4:	40d4      	lsrs	r4, r2
 8001fb6:	1b09      	subs	r1, r1, r4
 8001fb8:	e049      	b.n	800204e <__aeabi_dsub+0x47e>
 8001fba:	4660      	mov	r0, ip
 8001fbc:	1bdc      	subs	r4, r3, r7
 8001fbe:	1a46      	subs	r6, r0, r1
 8001fc0:	42a3      	cmp	r3, r4
 8001fc2:	4180      	sbcs	r0, r0
 8001fc4:	4240      	negs	r0, r0
 8001fc6:	4681      	mov	r9, r0
 8001fc8:	0030      	movs	r0, r6
 8001fca:	464e      	mov	r6, r9
 8001fcc:	1b80      	subs	r0, r0, r6
 8001fce:	4681      	mov	r9, r0
 8001fd0:	0200      	lsls	r0, r0, #8
 8001fd2:	d476      	bmi.n	80020c2 <__aeabi_dsub+0x4f2>
 8001fd4:	464b      	mov	r3, r9
 8001fd6:	4323      	orrs	r3, r4
 8001fd8:	d000      	beq.n	8001fdc <__aeabi_dsub+0x40c>
 8001fda:	e652      	b.n	8001c82 <__aeabi_dsub+0xb2>
 8001fdc:	2400      	movs	r4, #0
 8001fde:	2500      	movs	r5, #0
 8001fe0:	e771      	b.n	8001ec6 <__aeabi_dsub+0x2f6>
 8001fe2:	4339      	orrs	r1, r7
 8001fe4:	000c      	movs	r4, r1
 8001fe6:	1e62      	subs	r2, r4, #1
 8001fe8:	4194      	sbcs	r4, r2
 8001fea:	18e4      	adds	r4, r4, r3
 8001fec:	429c      	cmp	r4, r3
 8001fee:	419b      	sbcs	r3, r3
 8001ff0:	425b      	negs	r3, r3
 8001ff2:	4463      	add	r3, ip
 8001ff4:	4699      	mov	r9, r3
 8001ff6:	464b      	mov	r3, r9
 8001ff8:	021b      	lsls	r3, r3, #8
 8001ffa:	d400      	bmi.n	8001ffe <__aeabi_dsub+0x42e>
 8001ffc:	e756      	b.n	8001eac <__aeabi_dsub+0x2dc>
 8001ffe:	2301      	movs	r3, #1
 8002000:	469c      	mov	ip, r3
 8002002:	4ba8      	ldr	r3, [pc, #672]	; (80022a4 <__aeabi_dsub+0x6d4>)
 8002004:	44e0      	add	r8, ip
 8002006:	4598      	cmp	r8, r3
 8002008:	d038      	beq.n	800207c <__aeabi_dsub+0x4ac>
 800200a:	464b      	mov	r3, r9
 800200c:	48a6      	ldr	r0, [pc, #664]	; (80022a8 <__aeabi_dsub+0x6d8>)
 800200e:	2201      	movs	r2, #1
 8002010:	4003      	ands	r3, r0
 8002012:	0018      	movs	r0, r3
 8002014:	0863      	lsrs	r3, r4, #1
 8002016:	4014      	ands	r4, r2
 8002018:	431c      	orrs	r4, r3
 800201a:	07c3      	lsls	r3, r0, #31
 800201c:	431c      	orrs	r4, r3
 800201e:	0843      	lsrs	r3, r0, #1
 8002020:	4699      	mov	r9, r3
 8002022:	e657      	b.n	8001cd4 <__aeabi_dsub+0x104>
 8002024:	0010      	movs	r0, r2
 8002026:	000e      	movs	r6, r1
 8002028:	3820      	subs	r0, #32
 800202a:	40c6      	lsrs	r6, r0
 800202c:	2a20      	cmp	r2, #32
 800202e:	d004      	beq.n	800203a <__aeabi_dsub+0x46a>
 8002030:	2040      	movs	r0, #64	; 0x40
 8002032:	1a82      	subs	r2, r0, r2
 8002034:	4091      	lsls	r1, r2
 8002036:	430f      	orrs	r7, r1
 8002038:	46b9      	mov	r9, r7
 800203a:	464f      	mov	r7, r9
 800203c:	1e7a      	subs	r2, r7, #1
 800203e:	4197      	sbcs	r7, r2
 8002040:	4337      	orrs	r7, r6
 8002042:	e60f      	b.n	8001c64 <__aeabi_dsub+0x94>
 8002044:	4662      	mov	r2, ip
 8002046:	431a      	orrs	r2, r3
 8002048:	0013      	movs	r3, r2
 800204a:	1e5a      	subs	r2, r3, #1
 800204c:	4193      	sbcs	r3, r2
 800204e:	1afc      	subs	r4, r7, r3
 8002050:	42a7      	cmp	r7, r4
 8002052:	41bf      	sbcs	r7, r7
 8002054:	427f      	negs	r7, r7
 8002056:	1bcb      	subs	r3, r1, r7
 8002058:	4699      	mov	r9, r3
 800205a:	465d      	mov	r5, fp
 800205c:	4680      	mov	r8, r0
 800205e:	e608      	b.n	8001c72 <__aeabi_dsub+0xa2>
 8002060:	4666      	mov	r6, ip
 8002062:	431e      	orrs	r6, r3
 8002064:	d100      	bne.n	8002068 <__aeabi_dsub+0x498>
 8002066:	e0be      	b.n	80021e6 <__aeabi_dsub+0x616>
 8002068:	1e56      	subs	r6, r2, #1
 800206a:	2a01      	cmp	r2, #1
 800206c:	d100      	bne.n	8002070 <__aeabi_dsub+0x4a0>
 800206e:	e109      	b.n	8002284 <__aeabi_dsub+0x6b4>
 8002070:	4c8c      	ldr	r4, [pc, #560]	; (80022a4 <__aeabi_dsub+0x6d4>)
 8002072:	42a2      	cmp	r2, r4
 8002074:	d100      	bne.n	8002078 <__aeabi_dsub+0x4a8>
 8002076:	e119      	b.n	80022ac <__aeabi_dsub+0x6dc>
 8002078:	0032      	movs	r2, r6
 800207a:	e6c1      	b.n	8001e00 <__aeabi_dsub+0x230>
 800207c:	4642      	mov	r2, r8
 800207e:	2400      	movs	r4, #0
 8002080:	2300      	movs	r3, #0
 8002082:	e648      	b.n	8001d16 <__aeabi_dsub+0x146>
 8002084:	2020      	movs	r0, #32
 8002086:	000c      	movs	r4, r1
 8002088:	1a80      	subs	r0, r0, r2
 800208a:	003e      	movs	r6, r7
 800208c:	4087      	lsls	r7, r0
 800208e:	4084      	lsls	r4, r0
 8002090:	40d6      	lsrs	r6, r2
 8002092:	1e78      	subs	r0, r7, #1
 8002094:	4187      	sbcs	r7, r0
 8002096:	40d1      	lsrs	r1, r2
 8002098:	4334      	orrs	r4, r6
 800209a:	433c      	orrs	r4, r7
 800209c:	448c      	add	ip, r1
 800209e:	e7a4      	b.n	8001fea <__aeabi_dsub+0x41a>
 80020a0:	4a80      	ldr	r2, [pc, #512]	; (80022a4 <__aeabi_dsub+0x6d4>)
 80020a2:	4290      	cmp	r0, r2
 80020a4:	d100      	bne.n	80020a8 <__aeabi_dsub+0x4d8>
 80020a6:	e0e9      	b.n	800227c <__aeabi_dsub+0x6ac>
 80020a8:	19df      	adds	r7, r3, r7
 80020aa:	429f      	cmp	r7, r3
 80020ac:	419b      	sbcs	r3, r3
 80020ae:	4461      	add	r1, ip
 80020b0:	425b      	negs	r3, r3
 80020b2:	18c9      	adds	r1, r1, r3
 80020b4:	07cc      	lsls	r4, r1, #31
 80020b6:	087f      	lsrs	r7, r7, #1
 80020b8:	084b      	lsrs	r3, r1, #1
 80020ba:	4699      	mov	r9, r3
 80020bc:	4680      	mov	r8, r0
 80020be:	433c      	orrs	r4, r7
 80020c0:	e6f4      	b.n	8001eac <__aeabi_dsub+0x2dc>
 80020c2:	1afc      	subs	r4, r7, r3
 80020c4:	42a7      	cmp	r7, r4
 80020c6:	41bf      	sbcs	r7, r7
 80020c8:	4663      	mov	r3, ip
 80020ca:	427f      	negs	r7, r7
 80020cc:	1ac9      	subs	r1, r1, r3
 80020ce:	1bcb      	subs	r3, r1, r7
 80020d0:	4699      	mov	r9, r3
 80020d2:	465d      	mov	r5, fp
 80020d4:	e5d5      	b.n	8001c82 <__aeabi_dsub+0xb2>
 80020d6:	08ff      	lsrs	r7, r7, #3
 80020d8:	074b      	lsls	r3, r1, #29
 80020da:	465d      	mov	r5, fp
 80020dc:	433b      	orrs	r3, r7
 80020de:	08cc      	lsrs	r4, r1, #3
 80020e0:	e6ee      	b.n	8001ec0 <__aeabi_dsub+0x2f0>
 80020e2:	4662      	mov	r2, ip
 80020e4:	431a      	orrs	r2, r3
 80020e6:	d000      	beq.n	80020ea <__aeabi_dsub+0x51a>
 80020e8:	e082      	b.n	80021f0 <__aeabi_dsub+0x620>
 80020ea:	000b      	movs	r3, r1
 80020ec:	433b      	orrs	r3, r7
 80020ee:	d11b      	bne.n	8002128 <__aeabi_dsub+0x558>
 80020f0:	2480      	movs	r4, #128	; 0x80
 80020f2:	2500      	movs	r5, #0
 80020f4:	0324      	lsls	r4, r4, #12
 80020f6:	e6f9      	b.n	8001eec <__aeabi_dsub+0x31c>
 80020f8:	19dc      	adds	r4, r3, r7
 80020fa:	429c      	cmp	r4, r3
 80020fc:	419b      	sbcs	r3, r3
 80020fe:	4461      	add	r1, ip
 8002100:	4689      	mov	r9, r1
 8002102:	425b      	negs	r3, r3
 8002104:	4499      	add	r9, r3
 8002106:	464b      	mov	r3, r9
 8002108:	021b      	lsls	r3, r3, #8
 800210a:	d444      	bmi.n	8002196 <__aeabi_dsub+0x5c6>
 800210c:	2301      	movs	r3, #1
 800210e:	4698      	mov	r8, r3
 8002110:	e6cc      	b.n	8001eac <__aeabi_dsub+0x2dc>
 8002112:	1bdc      	subs	r4, r3, r7
 8002114:	4662      	mov	r2, ip
 8002116:	42a3      	cmp	r3, r4
 8002118:	419b      	sbcs	r3, r3
 800211a:	1a51      	subs	r1, r2, r1
 800211c:	425b      	negs	r3, r3
 800211e:	1acb      	subs	r3, r1, r3
 8002120:	4699      	mov	r9, r3
 8002122:	2301      	movs	r3, #1
 8002124:	4698      	mov	r8, r3
 8002126:	e5a4      	b.n	8001c72 <__aeabi_dsub+0xa2>
 8002128:	08ff      	lsrs	r7, r7, #3
 800212a:	074b      	lsls	r3, r1, #29
 800212c:	465d      	mov	r5, fp
 800212e:	433b      	orrs	r3, r7
 8002130:	08cc      	lsrs	r4, r1, #3
 8002132:	e6d7      	b.n	8001ee4 <__aeabi_dsub+0x314>
 8002134:	4662      	mov	r2, ip
 8002136:	431a      	orrs	r2, r3
 8002138:	0014      	movs	r4, r2
 800213a:	1e63      	subs	r3, r4, #1
 800213c:	419c      	sbcs	r4, r3
 800213e:	e679      	b.n	8001e34 <__aeabi_dsub+0x264>
 8002140:	0015      	movs	r5, r2
 8002142:	4664      	mov	r4, ip
 8002144:	3d20      	subs	r5, #32
 8002146:	40ec      	lsrs	r4, r5
 8002148:	46a0      	mov	r8, r4
 800214a:	2a20      	cmp	r2, #32
 800214c:	d005      	beq.n	800215a <__aeabi_dsub+0x58a>
 800214e:	2540      	movs	r5, #64	; 0x40
 8002150:	4664      	mov	r4, ip
 8002152:	1aaa      	subs	r2, r5, r2
 8002154:	4094      	lsls	r4, r2
 8002156:	4323      	orrs	r3, r4
 8002158:	469a      	mov	sl, r3
 800215a:	4654      	mov	r4, sl
 800215c:	1e63      	subs	r3, r4, #1
 800215e:	419c      	sbcs	r4, r3
 8002160:	4643      	mov	r3, r8
 8002162:	4323      	orrs	r3, r4
 8002164:	e773      	b.n	800204e <__aeabi_dsub+0x47e>
 8002166:	4662      	mov	r2, ip
 8002168:	431a      	orrs	r2, r3
 800216a:	d023      	beq.n	80021b4 <__aeabi_dsub+0x5e4>
 800216c:	000a      	movs	r2, r1
 800216e:	433a      	orrs	r2, r7
 8002170:	d000      	beq.n	8002174 <__aeabi_dsub+0x5a4>
 8002172:	e0a0      	b.n	80022b6 <__aeabi_dsub+0x6e6>
 8002174:	4662      	mov	r2, ip
 8002176:	08db      	lsrs	r3, r3, #3
 8002178:	0752      	lsls	r2, r2, #29
 800217a:	4313      	orrs	r3, r2
 800217c:	4662      	mov	r2, ip
 800217e:	08d4      	lsrs	r4, r2, #3
 8002180:	e6b0      	b.n	8001ee4 <__aeabi_dsub+0x314>
 8002182:	000b      	movs	r3, r1
 8002184:	433b      	orrs	r3, r7
 8002186:	d100      	bne.n	800218a <__aeabi_dsub+0x5ba>
 8002188:	e728      	b.n	8001fdc <__aeabi_dsub+0x40c>
 800218a:	08ff      	lsrs	r7, r7, #3
 800218c:	074b      	lsls	r3, r1, #29
 800218e:	465d      	mov	r5, fp
 8002190:	433b      	orrs	r3, r7
 8002192:	08cc      	lsrs	r4, r1, #3
 8002194:	e697      	b.n	8001ec6 <__aeabi_dsub+0x2f6>
 8002196:	2302      	movs	r3, #2
 8002198:	4698      	mov	r8, r3
 800219a:	e736      	b.n	800200a <__aeabi_dsub+0x43a>
 800219c:	1afc      	subs	r4, r7, r3
 800219e:	42a7      	cmp	r7, r4
 80021a0:	41bf      	sbcs	r7, r7
 80021a2:	4663      	mov	r3, ip
 80021a4:	427f      	negs	r7, r7
 80021a6:	1ac9      	subs	r1, r1, r3
 80021a8:	1bcb      	subs	r3, r1, r7
 80021aa:	4699      	mov	r9, r3
 80021ac:	2301      	movs	r3, #1
 80021ae:	465d      	mov	r5, fp
 80021b0:	4698      	mov	r8, r3
 80021b2:	e55e      	b.n	8001c72 <__aeabi_dsub+0xa2>
 80021b4:	074b      	lsls	r3, r1, #29
 80021b6:	08ff      	lsrs	r7, r7, #3
 80021b8:	433b      	orrs	r3, r7
 80021ba:	08cc      	lsrs	r4, r1, #3
 80021bc:	e692      	b.n	8001ee4 <__aeabi_dsub+0x314>
 80021be:	1bdc      	subs	r4, r3, r7
 80021c0:	4660      	mov	r0, ip
 80021c2:	42a3      	cmp	r3, r4
 80021c4:	41b6      	sbcs	r6, r6
 80021c6:	1a40      	subs	r0, r0, r1
 80021c8:	4276      	negs	r6, r6
 80021ca:	1b80      	subs	r0, r0, r6
 80021cc:	4681      	mov	r9, r0
 80021ce:	0200      	lsls	r0, r0, #8
 80021d0:	d560      	bpl.n	8002294 <__aeabi_dsub+0x6c4>
 80021d2:	1afc      	subs	r4, r7, r3
 80021d4:	42a7      	cmp	r7, r4
 80021d6:	41bf      	sbcs	r7, r7
 80021d8:	4663      	mov	r3, ip
 80021da:	427f      	negs	r7, r7
 80021dc:	1ac9      	subs	r1, r1, r3
 80021de:	1bcb      	subs	r3, r1, r7
 80021e0:	4699      	mov	r9, r3
 80021e2:	465d      	mov	r5, fp
 80021e4:	e576      	b.n	8001cd4 <__aeabi_dsub+0x104>
 80021e6:	08ff      	lsrs	r7, r7, #3
 80021e8:	074b      	lsls	r3, r1, #29
 80021ea:	433b      	orrs	r3, r7
 80021ec:	08cc      	lsrs	r4, r1, #3
 80021ee:	e667      	b.n	8001ec0 <__aeabi_dsub+0x2f0>
 80021f0:	000a      	movs	r2, r1
 80021f2:	08db      	lsrs	r3, r3, #3
 80021f4:	433a      	orrs	r2, r7
 80021f6:	d100      	bne.n	80021fa <__aeabi_dsub+0x62a>
 80021f8:	e66f      	b.n	8001eda <__aeabi_dsub+0x30a>
 80021fa:	4662      	mov	r2, ip
 80021fc:	0752      	lsls	r2, r2, #29
 80021fe:	4313      	orrs	r3, r2
 8002200:	4662      	mov	r2, ip
 8002202:	08d4      	lsrs	r4, r2, #3
 8002204:	2280      	movs	r2, #128	; 0x80
 8002206:	0312      	lsls	r2, r2, #12
 8002208:	4214      	tst	r4, r2
 800220a:	d007      	beq.n	800221c <__aeabi_dsub+0x64c>
 800220c:	08c8      	lsrs	r0, r1, #3
 800220e:	4210      	tst	r0, r2
 8002210:	d104      	bne.n	800221c <__aeabi_dsub+0x64c>
 8002212:	465d      	mov	r5, fp
 8002214:	0004      	movs	r4, r0
 8002216:	08fb      	lsrs	r3, r7, #3
 8002218:	0749      	lsls	r1, r1, #29
 800221a:	430b      	orrs	r3, r1
 800221c:	0f5a      	lsrs	r2, r3, #29
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	0752      	lsls	r2, r2, #29
 8002224:	4313      	orrs	r3, r2
 8002226:	e65d      	b.n	8001ee4 <__aeabi_dsub+0x314>
 8002228:	074b      	lsls	r3, r1, #29
 800222a:	08ff      	lsrs	r7, r7, #3
 800222c:	433b      	orrs	r3, r7
 800222e:	08cc      	lsrs	r4, r1, #3
 8002230:	e649      	b.n	8001ec6 <__aeabi_dsub+0x2f6>
 8002232:	19dc      	adds	r4, r3, r7
 8002234:	429c      	cmp	r4, r3
 8002236:	419b      	sbcs	r3, r3
 8002238:	4461      	add	r1, ip
 800223a:	4689      	mov	r9, r1
 800223c:	425b      	negs	r3, r3
 800223e:	4499      	add	r9, r3
 8002240:	464b      	mov	r3, r9
 8002242:	021b      	lsls	r3, r3, #8
 8002244:	d400      	bmi.n	8002248 <__aeabi_dsub+0x678>
 8002246:	e631      	b.n	8001eac <__aeabi_dsub+0x2dc>
 8002248:	464a      	mov	r2, r9
 800224a:	4b17      	ldr	r3, [pc, #92]	; (80022a8 <__aeabi_dsub+0x6d8>)
 800224c:	401a      	ands	r2, r3
 800224e:	2301      	movs	r3, #1
 8002250:	4691      	mov	r9, r2
 8002252:	4698      	mov	r8, r3
 8002254:	e62a      	b.n	8001eac <__aeabi_dsub+0x2dc>
 8002256:	0016      	movs	r6, r2
 8002258:	4664      	mov	r4, ip
 800225a:	3e20      	subs	r6, #32
 800225c:	40f4      	lsrs	r4, r6
 800225e:	46a0      	mov	r8, r4
 8002260:	2a20      	cmp	r2, #32
 8002262:	d005      	beq.n	8002270 <__aeabi_dsub+0x6a0>
 8002264:	2640      	movs	r6, #64	; 0x40
 8002266:	4664      	mov	r4, ip
 8002268:	1ab2      	subs	r2, r6, r2
 800226a:	4094      	lsls	r4, r2
 800226c:	4323      	orrs	r3, r4
 800226e:	469a      	mov	sl, r3
 8002270:	4654      	mov	r4, sl
 8002272:	1e63      	subs	r3, r4, #1
 8002274:	419c      	sbcs	r4, r3
 8002276:	4643      	mov	r3, r8
 8002278:	431c      	orrs	r4, r3
 800227a:	e5db      	b.n	8001e34 <__aeabi_dsub+0x264>
 800227c:	0002      	movs	r2, r0
 800227e:	2400      	movs	r4, #0
 8002280:	2300      	movs	r3, #0
 8002282:	e548      	b.n	8001d16 <__aeabi_dsub+0x146>
 8002284:	19dc      	adds	r4, r3, r7
 8002286:	42bc      	cmp	r4, r7
 8002288:	41bf      	sbcs	r7, r7
 800228a:	4461      	add	r1, ip
 800228c:	4689      	mov	r9, r1
 800228e:	427f      	negs	r7, r7
 8002290:	44b9      	add	r9, r7
 8002292:	e738      	b.n	8002106 <__aeabi_dsub+0x536>
 8002294:	464b      	mov	r3, r9
 8002296:	4323      	orrs	r3, r4
 8002298:	d100      	bne.n	800229c <__aeabi_dsub+0x6cc>
 800229a:	e69f      	b.n	8001fdc <__aeabi_dsub+0x40c>
 800229c:	e606      	b.n	8001eac <__aeabi_dsub+0x2dc>
 800229e:	46c0      	nop			; (mov r8, r8)
 80022a0:	000007fe 	.word	0x000007fe
 80022a4:	000007ff 	.word	0x000007ff
 80022a8:	ff7fffff 	.word	0xff7fffff
 80022ac:	08ff      	lsrs	r7, r7, #3
 80022ae:	074b      	lsls	r3, r1, #29
 80022b0:	433b      	orrs	r3, r7
 80022b2:	08cc      	lsrs	r4, r1, #3
 80022b4:	e616      	b.n	8001ee4 <__aeabi_dsub+0x314>
 80022b6:	4662      	mov	r2, ip
 80022b8:	08db      	lsrs	r3, r3, #3
 80022ba:	0752      	lsls	r2, r2, #29
 80022bc:	4313      	orrs	r3, r2
 80022be:	4662      	mov	r2, ip
 80022c0:	08d4      	lsrs	r4, r2, #3
 80022c2:	2280      	movs	r2, #128	; 0x80
 80022c4:	0312      	lsls	r2, r2, #12
 80022c6:	4214      	tst	r4, r2
 80022c8:	d007      	beq.n	80022da <__aeabi_dsub+0x70a>
 80022ca:	08c8      	lsrs	r0, r1, #3
 80022cc:	4210      	tst	r0, r2
 80022ce:	d104      	bne.n	80022da <__aeabi_dsub+0x70a>
 80022d0:	465d      	mov	r5, fp
 80022d2:	0004      	movs	r4, r0
 80022d4:	08fb      	lsrs	r3, r7, #3
 80022d6:	0749      	lsls	r1, r1, #29
 80022d8:	430b      	orrs	r3, r1
 80022da:	0f5a      	lsrs	r2, r3, #29
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	0752      	lsls	r2, r2, #29
 80022e0:	08db      	lsrs	r3, r3, #3
 80022e2:	4313      	orrs	r3, r2
 80022e4:	e5fe      	b.n	8001ee4 <__aeabi_dsub+0x314>
 80022e6:	2300      	movs	r3, #0
 80022e8:	4a01      	ldr	r2, [pc, #4]	; (80022f0 <__aeabi_dsub+0x720>)
 80022ea:	001c      	movs	r4, r3
 80022ec:	e513      	b.n	8001d16 <__aeabi_dsub+0x146>
 80022ee:	46c0      	nop			; (mov r8, r8)
 80022f0:	000007ff 	.word	0x000007ff

080022f4 <__aeabi_dcmpun>:
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	0005      	movs	r5, r0
 80022f8:	480c      	ldr	r0, [pc, #48]	; (800232c <__aeabi_dcmpun+0x38>)
 80022fa:	031c      	lsls	r4, r3, #12
 80022fc:	0016      	movs	r6, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	030a      	lsls	r2, r1, #12
 8002302:	0049      	lsls	r1, r1, #1
 8002304:	0b12      	lsrs	r2, r2, #12
 8002306:	0d49      	lsrs	r1, r1, #21
 8002308:	0b24      	lsrs	r4, r4, #12
 800230a:	0d5b      	lsrs	r3, r3, #21
 800230c:	4281      	cmp	r1, r0
 800230e:	d008      	beq.n	8002322 <__aeabi_dcmpun+0x2e>
 8002310:	4a06      	ldr	r2, [pc, #24]	; (800232c <__aeabi_dcmpun+0x38>)
 8002312:	2000      	movs	r0, #0
 8002314:	4293      	cmp	r3, r2
 8002316:	d103      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002318:	0020      	movs	r0, r4
 800231a:	4330      	orrs	r0, r6
 800231c:	1e43      	subs	r3, r0, #1
 800231e:	4198      	sbcs	r0, r3
 8002320:	bd70      	pop	{r4, r5, r6, pc}
 8002322:	2001      	movs	r0, #1
 8002324:	432a      	orrs	r2, r5
 8002326:	d1fb      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002328:	e7f2      	b.n	8002310 <__aeabi_dcmpun+0x1c>
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	000007ff 	.word	0x000007ff

08002330 <__aeabi_d2iz>:
 8002330:	000a      	movs	r2, r1
 8002332:	b530      	push	{r4, r5, lr}
 8002334:	4c13      	ldr	r4, [pc, #76]	; (8002384 <__aeabi_d2iz+0x54>)
 8002336:	0053      	lsls	r3, r2, #1
 8002338:	0309      	lsls	r1, r1, #12
 800233a:	0005      	movs	r5, r0
 800233c:	0b09      	lsrs	r1, r1, #12
 800233e:	2000      	movs	r0, #0
 8002340:	0d5b      	lsrs	r3, r3, #21
 8002342:	0fd2      	lsrs	r2, r2, #31
 8002344:	42a3      	cmp	r3, r4
 8002346:	dd04      	ble.n	8002352 <__aeabi_d2iz+0x22>
 8002348:	480f      	ldr	r0, [pc, #60]	; (8002388 <__aeabi_d2iz+0x58>)
 800234a:	4283      	cmp	r3, r0
 800234c:	dd02      	ble.n	8002354 <__aeabi_d2iz+0x24>
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <__aeabi_d2iz+0x5c>)
 8002350:	18d0      	adds	r0, r2, r3
 8002352:	bd30      	pop	{r4, r5, pc}
 8002354:	2080      	movs	r0, #128	; 0x80
 8002356:	0340      	lsls	r0, r0, #13
 8002358:	4301      	orrs	r1, r0
 800235a:	480d      	ldr	r0, [pc, #52]	; (8002390 <__aeabi_d2iz+0x60>)
 800235c:	1ac0      	subs	r0, r0, r3
 800235e:	281f      	cmp	r0, #31
 8002360:	dd08      	ble.n	8002374 <__aeabi_d2iz+0x44>
 8002362:	480c      	ldr	r0, [pc, #48]	; (8002394 <__aeabi_d2iz+0x64>)
 8002364:	1ac3      	subs	r3, r0, r3
 8002366:	40d9      	lsrs	r1, r3
 8002368:	000b      	movs	r3, r1
 800236a:	4258      	negs	r0, r3
 800236c:	2a00      	cmp	r2, #0
 800236e:	d1f0      	bne.n	8002352 <__aeabi_d2iz+0x22>
 8002370:	0018      	movs	r0, r3
 8002372:	e7ee      	b.n	8002352 <__aeabi_d2iz+0x22>
 8002374:	4c08      	ldr	r4, [pc, #32]	; (8002398 <__aeabi_d2iz+0x68>)
 8002376:	40c5      	lsrs	r5, r0
 8002378:	46a4      	mov	ip, r4
 800237a:	4463      	add	r3, ip
 800237c:	4099      	lsls	r1, r3
 800237e:	000b      	movs	r3, r1
 8002380:	432b      	orrs	r3, r5
 8002382:	e7f2      	b.n	800236a <__aeabi_d2iz+0x3a>
 8002384:	000003fe 	.word	0x000003fe
 8002388:	0000041d 	.word	0x0000041d
 800238c:	7fffffff 	.word	0x7fffffff
 8002390:	00000433 	.word	0x00000433
 8002394:	00000413 	.word	0x00000413
 8002398:	fffffbed 	.word	0xfffffbed

0800239c <__aeabi_i2d>:
 800239c:	b570      	push	{r4, r5, r6, lr}
 800239e:	2800      	cmp	r0, #0
 80023a0:	d016      	beq.n	80023d0 <__aeabi_i2d+0x34>
 80023a2:	17c3      	asrs	r3, r0, #31
 80023a4:	18c5      	adds	r5, r0, r3
 80023a6:	405d      	eors	r5, r3
 80023a8:	0fc4      	lsrs	r4, r0, #31
 80023aa:	0028      	movs	r0, r5
 80023ac:	f000 f91c 	bl	80025e8 <__clzsi2>
 80023b0:	4a11      	ldr	r2, [pc, #68]	; (80023f8 <__aeabi_i2d+0x5c>)
 80023b2:	1a12      	subs	r2, r2, r0
 80023b4:	280a      	cmp	r0, #10
 80023b6:	dc16      	bgt.n	80023e6 <__aeabi_i2d+0x4a>
 80023b8:	0003      	movs	r3, r0
 80023ba:	002e      	movs	r6, r5
 80023bc:	3315      	adds	r3, #21
 80023be:	409e      	lsls	r6, r3
 80023c0:	230b      	movs	r3, #11
 80023c2:	1a18      	subs	r0, r3, r0
 80023c4:	40c5      	lsrs	r5, r0
 80023c6:	0552      	lsls	r2, r2, #21
 80023c8:	032d      	lsls	r5, r5, #12
 80023ca:	0b2d      	lsrs	r5, r5, #12
 80023cc:	0d53      	lsrs	r3, r2, #21
 80023ce:	e003      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023d0:	2400      	movs	r4, #0
 80023d2:	2300      	movs	r3, #0
 80023d4:	2500      	movs	r5, #0
 80023d6:	2600      	movs	r6, #0
 80023d8:	051b      	lsls	r3, r3, #20
 80023da:	432b      	orrs	r3, r5
 80023dc:	07e4      	lsls	r4, r4, #31
 80023de:	4323      	orrs	r3, r4
 80023e0:	0030      	movs	r0, r6
 80023e2:	0019      	movs	r1, r3
 80023e4:	bd70      	pop	{r4, r5, r6, pc}
 80023e6:	380b      	subs	r0, #11
 80023e8:	4085      	lsls	r5, r0
 80023ea:	0552      	lsls	r2, r2, #21
 80023ec:	032d      	lsls	r5, r5, #12
 80023ee:	2600      	movs	r6, #0
 80023f0:	0b2d      	lsrs	r5, r5, #12
 80023f2:	0d53      	lsrs	r3, r2, #21
 80023f4:	e7f0      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	0000041e 	.word	0x0000041e

080023fc <__aeabi_ui2d>:
 80023fc:	b510      	push	{r4, lr}
 80023fe:	1e04      	subs	r4, r0, #0
 8002400:	d010      	beq.n	8002424 <__aeabi_ui2d+0x28>
 8002402:	f000 f8f1 	bl	80025e8 <__clzsi2>
 8002406:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <__aeabi_ui2d+0x48>)
 8002408:	1a1b      	subs	r3, r3, r0
 800240a:	280a      	cmp	r0, #10
 800240c:	dc11      	bgt.n	8002432 <__aeabi_ui2d+0x36>
 800240e:	220b      	movs	r2, #11
 8002410:	0021      	movs	r1, r4
 8002412:	1a12      	subs	r2, r2, r0
 8002414:	40d1      	lsrs	r1, r2
 8002416:	3015      	adds	r0, #21
 8002418:	030a      	lsls	r2, r1, #12
 800241a:	055b      	lsls	r3, r3, #21
 800241c:	4084      	lsls	r4, r0
 800241e:	0b12      	lsrs	r2, r2, #12
 8002420:	0d5b      	lsrs	r3, r3, #21
 8002422:	e001      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002424:	2300      	movs	r3, #0
 8002426:	2200      	movs	r2, #0
 8002428:	051b      	lsls	r3, r3, #20
 800242a:	4313      	orrs	r3, r2
 800242c:	0020      	movs	r0, r4
 800242e:	0019      	movs	r1, r3
 8002430:	bd10      	pop	{r4, pc}
 8002432:	0022      	movs	r2, r4
 8002434:	380b      	subs	r0, #11
 8002436:	4082      	lsls	r2, r0
 8002438:	055b      	lsls	r3, r3, #21
 800243a:	0312      	lsls	r2, r2, #12
 800243c:	2400      	movs	r4, #0
 800243e:	0b12      	lsrs	r2, r2, #12
 8002440:	0d5b      	lsrs	r3, r3, #21
 8002442:	e7f1      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002444:	0000041e 	.word	0x0000041e

08002448 <__aeabi_f2d>:
 8002448:	b570      	push	{r4, r5, r6, lr}
 800244a:	0043      	lsls	r3, r0, #1
 800244c:	0246      	lsls	r6, r0, #9
 800244e:	0fc4      	lsrs	r4, r0, #31
 8002450:	20fe      	movs	r0, #254	; 0xfe
 8002452:	0e1b      	lsrs	r3, r3, #24
 8002454:	1c59      	adds	r1, r3, #1
 8002456:	0a75      	lsrs	r5, r6, #9
 8002458:	4208      	tst	r0, r1
 800245a:	d00c      	beq.n	8002476 <__aeabi_f2d+0x2e>
 800245c:	22e0      	movs	r2, #224	; 0xe0
 800245e:	0092      	lsls	r2, r2, #2
 8002460:	4694      	mov	ip, r2
 8002462:	076d      	lsls	r5, r5, #29
 8002464:	0b36      	lsrs	r6, r6, #12
 8002466:	4463      	add	r3, ip
 8002468:	051b      	lsls	r3, r3, #20
 800246a:	4333      	orrs	r3, r6
 800246c:	07e4      	lsls	r4, r4, #31
 800246e:	4323      	orrs	r3, r4
 8002470:	0028      	movs	r0, r5
 8002472:	0019      	movs	r1, r3
 8002474:	bd70      	pop	{r4, r5, r6, pc}
 8002476:	2b00      	cmp	r3, #0
 8002478:	d114      	bne.n	80024a4 <__aeabi_f2d+0x5c>
 800247a:	2d00      	cmp	r5, #0
 800247c:	d01b      	beq.n	80024b6 <__aeabi_f2d+0x6e>
 800247e:	0028      	movs	r0, r5
 8002480:	f000 f8b2 	bl	80025e8 <__clzsi2>
 8002484:	280a      	cmp	r0, #10
 8002486:	dc1c      	bgt.n	80024c2 <__aeabi_f2d+0x7a>
 8002488:	230b      	movs	r3, #11
 800248a:	002e      	movs	r6, r5
 800248c:	1a1b      	subs	r3, r3, r0
 800248e:	40de      	lsrs	r6, r3
 8002490:	0003      	movs	r3, r0
 8002492:	3315      	adds	r3, #21
 8002494:	409d      	lsls	r5, r3
 8002496:	4a0e      	ldr	r2, [pc, #56]	; (80024d0 <__aeabi_f2d+0x88>)
 8002498:	0336      	lsls	r6, r6, #12
 800249a:	1a12      	subs	r2, r2, r0
 800249c:	0552      	lsls	r2, r2, #21
 800249e:	0b36      	lsrs	r6, r6, #12
 80024a0:	0d53      	lsrs	r3, r2, #21
 80024a2:	e7e1      	b.n	8002468 <__aeabi_f2d+0x20>
 80024a4:	2d00      	cmp	r5, #0
 80024a6:	d009      	beq.n	80024bc <__aeabi_f2d+0x74>
 80024a8:	2280      	movs	r2, #128	; 0x80
 80024aa:	0b36      	lsrs	r6, r6, #12
 80024ac:	0312      	lsls	r2, r2, #12
 80024ae:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <__aeabi_f2d+0x8c>)
 80024b0:	076d      	lsls	r5, r5, #29
 80024b2:	4316      	orrs	r6, r2
 80024b4:	e7d8      	b.n	8002468 <__aeabi_f2d+0x20>
 80024b6:	2300      	movs	r3, #0
 80024b8:	2600      	movs	r6, #0
 80024ba:	e7d5      	b.n	8002468 <__aeabi_f2d+0x20>
 80024bc:	2600      	movs	r6, #0
 80024be:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <__aeabi_f2d+0x8c>)
 80024c0:	e7d2      	b.n	8002468 <__aeabi_f2d+0x20>
 80024c2:	0003      	movs	r3, r0
 80024c4:	3b0b      	subs	r3, #11
 80024c6:	409d      	lsls	r5, r3
 80024c8:	002e      	movs	r6, r5
 80024ca:	2500      	movs	r5, #0
 80024cc:	e7e3      	b.n	8002496 <__aeabi_f2d+0x4e>
 80024ce:	46c0      	nop			; (mov r8, r8)
 80024d0:	00000389 	.word	0x00000389
 80024d4:	000007ff 	.word	0x000007ff

080024d8 <__aeabi_d2f>:
 80024d8:	0002      	movs	r2, r0
 80024da:	004b      	lsls	r3, r1, #1
 80024dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024de:	0d5b      	lsrs	r3, r3, #21
 80024e0:	030c      	lsls	r4, r1, #12
 80024e2:	4e3d      	ldr	r6, [pc, #244]	; (80025d8 <__aeabi_d2f+0x100>)
 80024e4:	0a64      	lsrs	r4, r4, #9
 80024e6:	0f40      	lsrs	r0, r0, #29
 80024e8:	1c5f      	adds	r7, r3, #1
 80024ea:	0fc9      	lsrs	r1, r1, #31
 80024ec:	4304      	orrs	r4, r0
 80024ee:	00d5      	lsls	r5, r2, #3
 80024f0:	4237      	tst	r7, r6
 80024f2:	d00a      	beq.n	800250a <__aeabi_d2f+0x32>
 80024f4:	4839      	ldr	r0, [pc, #228]	; (80025dc <__aeabi_d2f+0x104>)
 80024f6:	181e      	adds	r6, r3, r0
 80024f8:	2efe      	cmp	r6, #254	; 0xfe
 80024fa:	dd16      	ble.n	800252a <__aeabi_d2f+0x52>
 80024fc:	20ff      	movs	r0, #255	; 0xff
 80024fe:	2400      	movs	r4, #0
 8002500:	05c0      	lsls	r0, r0, #23
 8002502:	4320      	orrs	r0, r4
 8002504:	07c9      	lsls	r1, r1, #31
 8002506:	4308      	orrs	r0, r1
 8002508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800250a:	2b00      	cmp	r3, #0
 800250c:	d106      	bne.n	800251c <__aeabi_d2f+0x44>
 800250e:	432c      	orrs	r4, r5
 8002510:	d026      	beq.n	8002560 <__aeabi_d2f+0x88>
 8002512:	2205      	movs	r2, #5
 8002514:	0192      	lsls	r2, r2, #6
 8002516:	0a54      	lsrs	r4, r2, #9
 8002518:	b2d8      	uxtb	r0, r3
 800251a:	e7f1      	b.n	8002500 <__aeabi_d2f+0x28>
 800251c:	4325      	orrs	r5, r4
 800251e:	d0ed      	beq.n	80024fc <__aeabi_d2f+0x24>
 8002520:	2080      	movs	r0, #128	; 0x80
 8002522:	03c0      	lsls	r0, r0, #15
 8002524:	4304      	orrs	r4, r0
 8002526:	20ff      	movs	r0, #255	; 0xff
 8002528:	e7ea      	b.n	8002500 <__aeabi_d2f+0x28>
 800252a:	2e00      	cmp	r6, #0
 800252c:	dd1b      	ble.n	8002566 <__aeabi_d2f+0x8e>
 800252e:	0192      	lsls	r2, r2, #6
 8002530:	1e53      	subs	r3, r2, #1
 8002532:	419a      	sbcs	r2, r3
 8002534:	00e4      	lsls	r4, r4, #3
 8002536:	0f6d      	lsrs	r5, r5, #29
 8002538:	4322      	orrs	r2, r4
 800253a:	432a      	orrs	r2, r5
 800253c:	0753      	lsls	r3, r2, #29
 800253e:	d048      	beq.n	80025d2 <__aeabi_d2f+0xfa>
 8002540:	230f      	movs	r3, #15
 8002542:	4013      	ands	r3, r2
 8002544:	2b04      	cmp	r3, #4
 8002546:	d000      	beq.n	800254a <__aeabi_d2f+0x72>
 8002548:	3204      	adds	r2, #4
 800254a:	2380      	movs	r3, #128	; 0x80
 800254c:	04db      	lsls	r3, r3, #19
 800254e:	4013      	ands	r3, r2
 8002550:	d03f      	beq.n	80025d2 <__aeabi_d2f+0xfa>
 8002552:	1c70      	adds	r0, r6, #1
 8002554:	2efe      	cmp	r6, #254	; 0xfe
 8002556:	d0d1      	beq.n	80024fc <__aeabi_d2f+0x24>
 8002558:	0192      	lsls	r2, r2, #6
 800255a:	0a54      	lsrs	r4, r2, #9
 800255c:	b2c0      	uxtb	r0, r0
 800255e:	e7cf      	b.n	8002500 <__aeabi_d2f+0x28>
 8002560:	2000      	movs	r0, #0
 8002562:	2400      	movs	r4, #0
 8002564:	e7cc      	b.n	8002500 <__aeabi_d2f+0x28>
 8002566:	0032      	movs	r2, r6
 8002568:	3217      	adds	r2, #23
 800256a:	db22      	blt.n	80025b2 <__aeabi_d2f+0xda>
 800256c:	2080      	movs	r0, #128	; 0x80
 800256e:	0400      	lsls	r0, r0, #16
 8002570:	4320      	orrs	r0, r4
 8002572:	241e      	movs	r4, #30
 8002574:	1ba4      	subs	r4, r4, r6
 8002576:	2c1f      	cmp	r4, #31
 8002578:	dd1d      	ble.n	80025b6 <__aeabi_d2f+0xde>
 800257a:	2202      	movs	r2, #2
 800257c:	4252      	negs	r2, r2
 800257e:	1b96      	subs	r6, r2, r6
 8002580:	0002      	movs	r2, r0
 8002582:	40f2      	lsrs	r2, r6
 8002584:	0016      	movs	r6, r2
 8002586:	2c20      	cmp	r4, #32
 8002588:	d004      	beq.n	8002594 <__aeabi_d2f+0xbc>
 800258a:	4a15      	ldr	r2, [pc, #84]	; (80025e0 <__aeabi_d2f+0x108>)
 800258c:	4694      	mov	ip, r2
 800258e:	4463      	add	r3, ip
 8002590:	4098      	lsls	r0, r3
 8002592:	4305      	orrs	r5, r0
 8002594:	002a      	movs	r2, r5
 8002596:	1e53      	subs	r3, r2, #1
 8002598:	419a      	sbcs	r2, r3
 800259a:	4332      	orrs	r2, r6
 800259c:	2600      	movs	r6, #0
 800259e:	0753      	lsls	r3, r2, #29
 80025a0:	d1ce      	bne.n	8002540 <__aeabi_d2f+0x68>
 80025a2:	2480      	movs	r4, #128	; 0x80
 80025a4:	0013      	movs	r3, r2
 80025a6:	04e4      	lsls	r4, r4, #19
 80025a8:	2001      	movs	r0, #1
 80025aa:	4023      	ands	r3, r4
 80025ac:	4222      	tst	r2, r4
 80025ae:	d1d3      	bne.n	8002558 <__aeabi_d2f+0x80>
 80025b0:	e7b0      	b.n	8002514 <__aeabi_d2f+0x3c>
 80025b2:	2300      	movs	r3, #0
 80025b4:	e7ad      	b.n	8002512 <__aeabi_d2f+0x3a>
 80025b6:	4a0b      	ldr	r2, [pc, #44]	; (80025e4 <__aeabi_d2f+0x10c>)
 80025b8:	4694      	mov	ip, r2
 80025ba:	002a      	movs	r2, r5
 80025bc:	40e2      	lsrs	r2, r4
 80025be:	0014      	movs	r4, r2
 80025c0:	002a      	movs	r2, r5
 80025c2:	4463      	add	r3, ip
 80025c4:	409a      	lsls	r2, r3
 80025c6:	4098      	lsls	r0, r3
 80025c8:	1e55      	subs	r5, r2, #1
 80025ca:	41aa      	sbcs	r2, r5
 80025cc:	4302      	orrs	r2, r0
 80025ce:	4322      	orrs	r2, r4
 80025d0:	e7e4      	b.n	800259c <__aeabi_d2f+0xc4>
 80025d2:	0033      	movs	r3, r6
 80025d4:	e79e      	b.n	8002514 <__aeabi_d2f+0x3c>
 80025d6:	46c0      	nop			; (mov r8, r8)
 80025d8:	000007fe 	.word	0x000007fe
 80025dc:	fffffc80 	.word	0xfffffc80
 80025e0:	fffffca2 	.word	0xfffffca2
 80025e4:	fffffc82 	.word	0xfffffc82

080025e8 <__clzsi2>:
 80025e8:	211c      	movs	r1, #28
 80025ea:	2301      	movs	r3, #1
 80025ec:	041b      	lsls	r3, r3, #16
 80025ee:	4298      	cmp	r0, r3
 80025f0:	d301      	bcc.n	80025f6 <__clzsi2+0xe>
 80025f2:	0c00      	lsrs	r0, r0, #16
 80025f4:	3910      	subs	r1, #16
 80025f6:	0a1b      	lsrs	r3, r3, #8
 80025f8:	4298      	cmp	r0, r3
 80025fa:	d301      	bcc.n	8002600 <__clzsi2+0x18>
 80025fc:	0a00      	lsrs	r0, r0, #8
 80025fe:	3908      	subs	r1, #8
 8002600:	091b      	lsrs	r3, r3, #4
 8002602:	4298      	cmp	r0, r3
 8002604:	d301      	bcc.n	800260a <__clzsi2+0x22>
 8002606:	0900      	lsrs	r0, r0, #4
 8002608:	3904      	subs	r1, #4
 800260a:	a202      	add	r2, pc, #8	; (adr r2, 8002614 <__clzsi2+0x2c>)
 800260c:	5c10      	ldrb	r0, [r2, r0]
 800260e:	1840      	adds	r0, r0, r1
 8002610:	4770      	bx	lr
 8002612:	46c0      	nop			; (mov r8, r8)
 8002614:	02020304 	.word	0x02020304
 8002618:	01010101 	.word	0x01010101
	...

08002624 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	4a06      	ldr	r2, [pc, #24]	; (800264c <vApplicationGetIdleTaskMemory+0x28>)
 8002634:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	4a05      	ldr	r2, [pc, #20]	; (8002650 <vApplicationGetIdleTaskMemory+0x2c>)
 800263a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2280      	movs	r2, #128	; 0x80
 8002640:	0052      	lsls	r2, r2, #1
 8002642:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002644:	46c0      	nop			; (mov r8, r8)
 8002646:	46bd      	mov	sp, r7
 8002648:	b004      	add	sp, #16
 800264a:	bd80      	pop	{r7, pc}
 800264c:	20000204 	.word	0x20000204
 8002650:	200002b8 	.word	0x200002b8

08002654 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)	//current UART
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a04      	ldr	r2, [pc, #16]	; (8002674 <HAL_UART_RxCpltCallback+0x20>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d101      	bne.n	800266a <HAL_UART_RxCpltCallback+0x16>
	{
		SIM800H_RX();
 8002666:	f007 f831 	bl	80096cc <SIM800H_RX>
	}
}
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	46bd      	mov	sp, r7
 800266e:	b002      	add	sp, #8
 8002670:	bd80      	pop	{r7, pc}
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	40004400 	.word	0x40004400

08002678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002678:	b5b0      	push	{r4, r5, r7, lr}
 800267a:	b08e      	sub	sp, #56	; 0x38
 800267c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800267e:	f007 f855 	bl	800972c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002682:	f000 f849 	bl	8002718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002686:	f000 fae1 	bl	8002c4c <MX_GPIO_Init>
  MX_ADC_Init();
 800268a:	f000 f90d 	bl	80028a8 <MX_ADC_Init>
  MX_I2C1_Init();
 800268e:	f000 f965 	bl	800295c <MX_I2C1_Init>
  MX_RTC_Init();
 8002692:	f000 f9c3 	bl	8002a1c <MX_RTC_Init>
  MX_USART2_UART_Init();
 8002696:	f000 faa9 	bl	8002bec <MX_USART2_UART_Init>
  MX_IWDG_Init();
 800269a:	f000 f99f 	bl	80029dc <MX_IWDG_Init>
  MX_TIM6_Init();
 800269e:	f000 fa59 	bl	8002b54 <MX_TIM6_Init>
  MX_TIM7_Init();
 80026a2:	f000 fa7d 	bl	8002ba0 <MX_TIM7_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80026a6:	f000 f8b9 	bl	800281c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

   HAL_UART_Receive_IT(&huart2, U2Rx_data, 1);  // enable UART2 RX interrupt on RX
 80026aa:	4915      	ldr	r1, [pc, #84]	; (8002700 <main+0x88>)
 80026ac:	4b15      	ldr	r3, [pc, #84]	; (8002704 <main+0x8c>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	0018      	movs	r0, r3
 80026b2:	f00c ffd8 	bl	800f666 <HAL_UART_Receive_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256, defaultTaskBuffer, &defaultTaskControlBlock);
 80026b6:	211c      	movs	r1, #28
 80026b8:	187b      	adds	r3, r7, r1
 80026ba:	4a13      	ldr	r2, [pc, #76]	; (8002708 <main+0x90>)
 80026bc:	ca31      	ldmia	r2!, {r0, r4, r5}
 80026be:	c331      	stmia	r3!, {r0, r4, r5}
 80026c0:	ca31      	ldmia	r2!, {r0, r4, r5}
 80026c2:	c331      	stmia	r3!, {r0, r4, r5}
 80026c4:	6812      	ldr	r2, [r2, #0]
 80026c6:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80026c8:	187b      	adds	r3, r7, r1
 80026ca:	2100      	movs	r1, #0
 80026cc:	0018      	movs	r0, r3
 80026ce:	f00e fa82 	bl	8010bd6 <osThreadCreate>
 80026d2:	0002      	movs	r2, r0
 80026d4:	4b0d      	ldr	r3, [pc, #52]	; (800270c <main+0x94>)
 80026d6:	601a      	str	r2, [r3, #0]

  /* definition and creation of GSMTask */
  osThreadStaticDef(GSMTask, StartGSMTask, osPriorityIdle, 0, 256, GSMTaskBuffer, &GSMTaskControlBlock);
 80026d8:	003b      	movs	r3, r7
 80026da:	4a0d      	ldr	r2, [pc, #52]	; (8002710 <main+0x98>)
 80026dc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80026de:	c313      	stmia	r3!, {r0, r1, r4}
 80026e0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80026e2:	c313      	stmia	r3!, {r0, r1, r4}
 80026e4:	6812      	ldr	r2, [r2, #0]
 80026e6:	601a      	str	r2, [r3, #0]
  GSMTaskHandle = osThreadCreate(osThread(GSMTask), NULL);
 80026e8:	003b      	movs	r3, r7
 80026ea:	2100      	movs	r1, #0
 80026ec:	0018      	movs	r0, r3
 80026ee:	f00e fa72 	bl	8010bd6 <osThreadCreate>
 80026f2:	0002      	movs	r2, r0
 80026f4:	4b07      	ldr	r3, [pc, #28]	; (8002714 <main+0x9c>)
 80026f6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80026f8:	f00e fa65 	bl	8010bc6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80026fc:	e7fe      	b.n	80026fc <main+0x84>
 80026fe:	46c0      	nop			; (mov r8, r8)
 8002700:	20002268 	.word	0x20002268
 8002704:	20000908 	.word	0x20000908
 8002708:	08016724 	.word	0x08016724
 800270c:	2000098c 	.word	0x2000098c
 8002710:	08016740 	.word	0x08016740
 8002714:	20000e44 	.word	0x20000e44

08002718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002718:	b590      	push	{r4, r7, lr}
 800271a:	b097      	sub	sp, #92	; 0x5c
 800271c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800271e:	2428      	movs	r4, #40	; 0x28
 8002720:	193b      	adds	r3, r7, r4
 8002722:	0018      	movs	r0, r3
 8002724:	2330      	movs	r3, #48	; 0x30
 8002726:	001a      	movs	r2, r3
 8002728:	2100      	movs	r1, #0
 800272a:	f00f fc67 	bl	8011ffc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800272e:	2318      	movs	r3, #24
 8002730:	18fb      	adds	r3, r7, r3
 8002732:	0018      	movs	r0, r3
 8002734:	2310      	movs	r3, #16
 8002736:	001a      	movs	r2, r3
 8002738:	2100      	movs	r1, #0
 800273a:	f00f fc5f 	bl	8011ffc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800273e:	1d3b      	adds	r3, r7, #4
 8002740:	0018      	movs	r0, r3
 8002742:	2314      	movs	r3, #20
 8002744:	001a      	movs	r2, r3
 8002746:	2100      	movs	r1, #0
 8002748:	f00f fc58 	bl	8011ffc <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800274c:	f00a faf0 	bl	800cd30 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_HIGH);
 8002750:	4b30      	ldr	r3, [pc, #192]	; (8002814 <SystemClock_Config+0xfc>)
 8002752:	6a1a      	ldr	r2, [r3, #32]
 8002754:	4b2f      	ldr	r3, [pc, #188]	; (8002814 <SystemClock_Config+0xfc>)
 8002756:	2118      	movs	r1, #24
 8002758:	430a      	orrs	r2, r1
 800275a:	621a      	str	r2, [r3, #32]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 800275c:	0021      	movs	r1, r4
 800275e:	187b      	adds	r3, r7, r1
 8002760:	221f      	movs	r2, #31
 8002762:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002764:	187b      	adds	r3, r7, r1
 8002766:	2201      	movs	r2, #1
 8002768:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800276a:	187b      	adds	r3, r7, r1
 800276c:	2201      	movs	r2, #1
 800276e:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002770:	187b      	adds	r3, r7, r1
 8002772:	2201      	movs	r2, #1
 8002774:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8002776:	187b      	adds	r3, r7, r1
 8002778:	2201      	movs	r2, #1
 800277a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800277c:	187b      	adds	r3, r7, r1
 800277e:	2210      	movs	r2, #16
 8002780:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8002782:	187b      	adds	r3, r7, r1
 8002784:	2210      	movs	r2, #16
 8002786:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002788:	187b      	adds	r3, r7, r1
 800278a:	2201      	movs	r2, #1
 800278c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800278e:	187b      	adds	r3, r7, r1
 8002790:	2202      	movs	r2, #2
 8002792:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002794:	187b      	adds	r3, r7, r1
 8002796:	2280      	movs	r2, #128	; 0x80
 8002798:	0252      	lsls	r2, r2, #9
 800279a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800279c:	187b      	adds	r3, r7, r1
 800279e:	2280      	movs	r2, #128	; 0x80
 80027a0:	0352      	lsls	r2, r2, #13
 80027a2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80027a4:	187b      	adds	r3, r7, r1
 80027a6:	2200      	movs	r2, #0
 80027a8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027aa:	187b      	adds	r3, r7, r1
 80027ac:	0018      	movs	r0, r3
 80027ae:	f00a facd 	bl	800cd4c <HAL_RCC_OscConfig>
 80027b2:	1e03      	subs	r3, r0, #0
 80027b4:	d001      	beq.n	80027ba <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80027b6:	f000 ff0d 	bl	80035d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027ba:	2118      	movs	r1, #24
 80027bc:	187b      	adds	r3, r7, r1
 80027be:	2207      	movs	r2, #7
 80027c0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027c2:	187b      	adds	r3, r7, r1
 80027c4:	2202      	movs	r2, #2
 80027c6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027c8:	187b      	adds	r3, r7, r1
 80027ca:	2200      	movs	r2, #0
 80027cc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80027ce:	187b      	adds	r3, r7, r1
 80027d0:	2200      	movs	r2, #0
 80027d2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80027d4:	187b      	adds	r3, r7, r1
 80027d6:	2101      	movs	r1, #1
 80027d8:	0018      	movs	r0, r3
 80027da:	f00a ff4b 	bl	800d674 <HAL_RCC_ClockConfig>
 80027de:	1e03      	subs	r3, r0, #0
 80027e0:	d001      	beq.n	80027e6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80027e2:	f000 fef7 	bl	80035d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
 80027e6:	1d3b      	adds	r3, r7, #4
 80027e8:	4a0b      	ldr	r2, [pc, #44]	; (8002818 <SystemClock_Config+0x100>)
 80027ea:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80027ec:	1d3b      	adds	r3, r7, #4
 80027ee:	2200      	movs	r2, #0
 80027f0:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80027f2:	1d3b      	adds	r3, r7, #4
 80027f4:	2280      	movs	r2, #128	; 0x80
 80027f6:	0052      	lsls	r2, r2, #1
 80027f8:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027fa:	1d3b      	adds	r3, r7, #4
 80027fc:	0018      	movs	r0, r3
 80027fe:	f00b f959 	bl	800dab4 <HAL_RCCEx_PeriphCLKConfig>
 8002802:	1e03      	subs	r3, r0, #0
 8002804:	d001      	beq.n	800280a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8002806:	f000 fee5 	bl	80035d4 <Error_Handler>
  }
}
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	46bd      	mov	sp, r7
 800280e:	b017      	add	sp, #92	; 0x5c
 8002810:	bd90      	pop	{r4, r7, pc}
 8002812:	46c0      	nop			; (mov r8, r8)
 8002814:	40021000 	.word	0x40021000
 8002818:	00010020 	.word	0x00010020

0800281c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* I2C1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_IRQn, 3, 0);
 8002820:	2200      	movs	r2, #0
 8002822:	2103      	movs	r1, #3
 8002824:	2017      	movs	r0, #23
 8002826:	f007 ffed 	bl	800a804 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800282a:	2017      	movs	r0, #23
 800282c:	f008 f80a 	bl	800a844 <HAL_NVIC_EnableIRQ>
  /* RTC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RTC_IRQn, 3, 0);
 8002830:	2200      	movs	r2, #0
 8002832:	2103      	movs	r1, #3
 8002834:	2002      	movs	r0, #2
 8002836:	f007 ffe5 	bl	800a804 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_IRQn);
 800283a:	2002      	movs	r0, #2
 800283c:	f008 f802 	bl	800a844 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 3, 0);
 8002840:	2200      	movs	r2, #0
 8002842:	2103      	movs	r1, #3
 8002844:	2004      	movs	r0, #4
 8002846:	f007 ffdd 	bl	800a804 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800284a:	2004      	movs	r0, #4
 800284c:	f007 fffa 	bl	800a844 <HAL_NVIC_EnableIRQ>
  /* ADC1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC1_IRQn, 3, 0);
 8002850:	2200      	movs	r2, #0
 8002852:	2103      	movs	r1, #3
 8002854:	200c      	movs	r0, #12
 8002856:	f007 ffd5 	bl	800a804 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800285a:	200c      	movs	r0, #12
 800285c:	f007 fff2 	bl	800a844 <HAL_NVIC_EnableIRQ>
  /* TIM6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_IRQn, 3, 0);
 8002860:	2200      	movs	r2, #0
 8002862:	2103      	movs	r1, #3
 8002864:	2011      	movs	r0, #17
 8002866:	f007 ffcd 	bl	800a804 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800286a:	2011      	movs	r0, #17
 800286c:	f007 ffea 	bl	800a844 <HAL_NVIC_EnableIRQ>
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 3, 0);
 8002870:	2200      	movs	r2, #0
 8002872:	2103      	movs	r1, #3
 8002874:	2012      	movs	r0, #18
 8002876:	f007 ffc5 	bl	800a804 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800287a:	2012      	movs	r0, #18
 800287c:	f007 ffe2 	bl	800a844 <HAL_NVIC_EnableIRQ>
  /* EXTI4_15_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 8002880:	2200      	movs	r2, #0
 8002882:	2103      	movs	r1, #3
 8002884:	2007      	movs	r0, #7
 8002886:	f007 ffbd 	bl	800a804 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800288a:	2007      	movs	r0, #7
 800288c:	f007 ffda 	bl	800a844 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8002890:	2200      	movs	r2, #0
 8002892:	2103      	movs	r1, #3
 8002894:	201c      	movs	r0, #28
 8002896:	f007 ffb5 	bl	800a804 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800289a:	201c      	movs	r0, #28
 800289c:	f007 ffd2 	bl	800a844 <HAL_NVIC_EnableIRQ>
}
 80028a0:	46c0      	nop			; (mov r8, r8)
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
	...

080028a8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80028ae:	1d3b      	adds	r3, r7, #4
 80028b0:	0018      	movs	r0, r3
 80028b2:	230c      	movs	r3, #12
 80028b4:	001a      	movs	r2, r3
 80028b6:	2100      	movs	r1, #0
 80028b8:	f00f fba0 	bl	8011ffc <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80028bc:	4b25      	ldr	r3, [pc, #148]	; (8002954 <MX_ADC_Init+0xac>)
 80028be:	4a26      	ldr	r2, [pc, #152]	; (8002958 <MX_ADC_Init+0xb0>)
 80028c0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80028c2:	4b24      	ldr	r3, [pc, #144]	; (8002954 <MX_ADC_Init+0xac>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80028c8:	4b22      	ldr	r3, [pc, #136]	; (8002954 <MX_ADC_Init+0xac>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80028ce:	4b21      	ldr	r3, [pc, #132]	; (8002954 <MX_ADC_Init+0xac>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80028d4:	4b1f      	ldr	r3, [pc, #124]	; (8002954 <MX_ADC_Init+0xac>)
 80028d6:	2201      	movs	r2, #1
 80028d8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80028da:	4b1e      	ldr	r3, [pc, #120]	; (8002954 <MX_ADC_Init+0xac>)
 80028dc:	2204      	movs	r2, #4
 80028de:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80028e0:	4b1c      	ldr	r3, [pc, #112]	; (8002954 <MX_ADC_Init+0xac>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80028e6:	4b1b      	ldr	r3, [pc, #108]	; (8002954 <MX_ADC_Init+0xac>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80028ec:	4b19      	ldr	r3, [pc, #100]	; (8002954 <MX_ADC_Init+0xac>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80028f2:	4b18      	ldr	r3, [pc, #96]	; (8002954 <MX_ADC_Init+0xac>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80028f8:	4b16      	ldr	r3, [pc, #88]	; (8002954 <MX_ADC_Init+0xac>)
 80028fa:	22c2      	movs	r2, #194	; 0xc2
 80028fc:	32ff      	adds	r2, #255	; 0xff
 80028fe:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002900:	4b14      	ldr	r3, [pc, #80]	; (8002954 <MX_ADC_Init+0xac>)
 8002902:	2200      	movs	r2, #0
 8002904:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002906:	4b13      	ldr	r3, [pc, #76]	; (8002954 <MX_ADC_Init+0xac>)
 8002908:	2224      	movs	r2, #36	; 0x24
 800290a:	2100      	movs	r1, #0
 800290c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800290e:	4b11      	ldr	r3, [pc, #68]	; (8002954 <MX_ADC_Init+0xac>)
 8002910:	2201      	movs	r2, #1
 8002912:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002914:	4b0f      	ldr	r3, [pc, #60]	; (8002954 <MX_ADC_Init+0xac>)
 8002916:	0018      	movs	r0, r3
 8002918:	f006 ff38 	bl	800978c <HAL_ADC_Init>
 800291c:	1e03      	subs	r3, r0, #0
 800291e:	d001      	beq.n	8002924 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8002920:	f000 fe58 	bl	80035d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002924:	1d3b      	adds	r3, r7, #4
 8002926:	2208      	movs	r2, #8
 8002928:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800292a:	1d3b      	adds	r3, r7, #4
 800292c:	2280      	movs	r2, #128	; 0x80
 800292e:	0152      	lsls	r2, r2, #5
 8002930:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002932:	1d3b      	adds	r3, r7, #4
 8002934:	2207      	movs	r2, #7
 8002936:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002938:	1d3a      	adds	r2, r7, #4
 800293a:	4b06      	ldr	r3, [pc, #24]	; (8002954 <MX_ADC_Init+0xac>)
 800293c:	0011      	movs	r1, r2
 800293e:	0018      	movs	r0, r3
 8002940:	f007 fbe6 	bl	800a110 <HAL_ADC_ConfigChannel>
 8002944:	1e03      	subs	r3, r0, #0
 8002946:	d001      	beq.n	800294c <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8002948:	f000 fe44 	bl	80035d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800294c:	46c0      	nop			; (mov r8, r8)
 800294e:	46bd      	mov	sp, r7
 8002950:	b004      	add	sp, #16
 8002952:	bd80      	pop	{r7, pc}
 8002954:	200007bc 	.word	0x200007bc
 8002958:	40012400 	.word	0x40012400

0800295c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002960:	4b1b      	ldr	r3, [pc, #108]	; (80029d0 <MX_I2C1_Init+0x74>)
 8002962:	4a1c      	ldr	r2, [pc, #112]	; (80029d4 <MX_I2C1_Init+0x78>)
 8002964:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8002966:	4b1a      	ldr	r3, [pc, #104]	; (80029d0 <MX_I2C1_Init+0x74>)
 8002968:	4a1b      	ldr	r2, [pc, #108]	; (80029d8 <MX_I2C1_Init+0x7c>)
 800296a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800296c:	4b18      	ldr	r3, [pc, #96]	; (80029d0 <MX_I2C1_Init+0x74>)
 800296e:	2200      	movs	r2, #0
 8002970:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002972:	4b17      	ldr	r3, [pc, #92]	; (80029d0 <MX_I2C1_Init+0x74>)
 8002974:	2201      	movs	r2, #1
 8002976:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002978:	4b15      	ldr	r3, [pc, #84]	; (80029d0 <MX_I2C1_Init+0x74>)
 800297a:	2200      	movs	r2, #0
 800297c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800297e:	4b14      	ldr	r3, [pc, #80]	; (80029d0 <MX_I2C1_Init+0x74>)
 8002980:	2200      	movs	r2, #0
 8002982:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002984:	4b12      	ldr	r3, [pc, #72]	; (80029d0 <MX_I2C1_Init+0x74>)
 8002986:	2200      	movs	r2, #0
 8002988:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800298a:	4b11      	ldr	r3, [pc, #68]	; (80029d0 <MX_I2C1_Init+0x74>)
 800298c:	2200      	movs	r2, #0
 800298e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002990:	4b0f      	ldr	r3, [pc, #60]	; (80029d0 <MX_I2C1_Init+0x74>)
 8002992:	2200      	movs	r2, #0
 8002994:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002996:	4b0e      	ldr	r3, [pc, #56]	; (80029d0 <MX_I2C1_Init+0x74>)
 8002998:	0018      	movs	r0, r3
 800299a:	f008 faef 	bl	800af7c <HAL_I2C_Init>
 800299e:	1e03      	subs	r3, r0, #0
 80029a0:	d001      	beq.n	80029a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80029a2:	f000 fe17 	bl	80035d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80029a6:	4b0a      	ldr	r3, [pc, #40]	; (80029d0 <MX_I2C1_Init+0x74>)
 80029a8:	2100      	movs	r1, #0
 80029aa:	0018      	movs	r0, r3
 80029ac:	f00a f842 	bl	800ca34 <HAL_I2CEx_ConfigAnalogFilter>
 80029b0:	1e03      	subs	r3, r0, #0
 80029b2:	d001      	beq.n	80029b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80029b4:	f000 fe0e 	bl	80035d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80029b8:	4b05      	ldr	r3, [pc, #20]	; (80029d0 <MX_I2C1_Init+0x74>)
 80029ba:	2100      	movs	r1, #0
 80029bc:	0018      	movs	r0, r3
 80029be:	f00a f8a7 	bl	800cb10 <HAL_I2CEx_ConfigDigitalFilter>
 80029c2:	1e03      	subs	r3, r0, #0
 80029c4:	d001      	beq.n	80029ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80029c6:	f000 fe05 	bl	80035d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80029ca:	46c0      	nop			; (mov r8, r8)
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	200007fc 	.word	0x200007fc
 80029d4:	40005400 	.word	0x40005400
 80029d8:	2000090e 	.word	0x2000090e

080029dc <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80029e0:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <MX_IWDG_Init+0x34>)
 80029e2:	4a0c      	ldr	r2, [pc, #48]	; (8002a14 <MX_IWDG_Init+0x38>)
 80029e4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 80029e6:	4b0a      	ldr	r3, [pc, #40]	; (8002a10 <MX_IWDG_Init+0x34>)
 80029e8:	2206      	movs	r2, #6
 80029ea:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80029ec:	4b08      	ldr	r3, [pc, #32]	; (8002a10 <MX_IWDG_Init+0x34>)
 80029ee:	4a0a      	ldr	r2, [pc, #40]	; (8002a18 <MX_IWDG_Init+0x3c>)
 80029f0:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 80029f2:	4b07      	ldr	r3, [pc, #28]	; (8002a10 <MX_IWDG_Init+0x34>)
 80029f4:	4a08      	ldr	r2, [pc, #32]	; (8002a18 <MX_IWDG_Init+0x3c>)
 80029f6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80029f8:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <MX_IWDG_Init+0x34>)
 80029fa:	0018      	movs	r0, r3
 80029fc:	f00a f8f2 	bl	800cbe4 <HAL_IWDG_Init>
 8002a00:	1e03      	subs	r3, r0, #0
 8002a02:	d001      	beq.n	8002a08 <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 8002a04:	f000 fde6 	bl	80035d4 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8002a08:	46c0      	nop			; (mov r8, r8)
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	46c0      	nop			; (mov r8, r8)
 8002a10:	20000848 	.word	0x20000848
 8002a14:	40003000 	.word	0x40003000
 8002a18:	00000fff 	.word	0x00000fff

08002a1c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b090      	sub	sp, #64	; 0x40
 8002a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002a22:	232c      	movs	r3, #44	; 0x2c
 8002a24:	18fb      	adds	r3, r7, r3
 8002a26:	0018      	movs	r0, r3
 8002a28:	2314      	movs	r3, #20
 8002a2a:	001a      	movs	r2, r3
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	f00f fae5 	bl	8011ffc <memset>
  RTC_DateTypeDef sDate = {0};
 8002a32:	2328      	movs	r3, #40	; 0x28
 8002a34:	18fb      	adds	r3, r7, r3
 8002a36:	2200      	movs	r2, #0
 8002a38:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8002a3a:	003b      	movs	r3, r7
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	2328      	movs	r3, #40	; 0x28
 8002a40:	001a      	movs	r2, r3
 8002a42:	2100      	movs	r1, #0
 8002a44:	f00f fada 	bl	8011ffc <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002a48:	4b3f      	ldr	r3, [pc, #252]	; (8002b48 <MX_RTC_Init+0x12c>)
 8002a4a:	4a40      	ldr	r2, [pc, #256]	; (8002b4c <MX_RTC_Init+0x130>)
 8002a4c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002a4e:	4b3e      	ldr	r3, [pc, #248]	; (8002b48 <MX_RTC_Init+0x12c>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002a54:	4b3c      	ldr	r3, [pc, #240]	; (8002b48 <MX_RTC_Init+0x12c>)
 8002a56:	227f      	movs	r2, #127	; 0x7f
 8002a58:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002a5a:	4b3b      	ldr	r3, [pc, #236]	; (8002b48 <MX_RTC_Init+0x12c>)
 8002a5c:	22ff      	movs	r2, #255	; 0xff
 8002a5e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002a60:	4b39      	ldr	r3, [pc, #228]	; (8002b48 <MX_RTC_Init+0x12c>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002a66:	4b38      	ldr	r3, [pc, #224]	; (8002b48 <MX_RTC_Init+0x12c>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002a6c:	4b36      	ldr	r3, [pc, #216]	; (8002b48 <MX_RTC_Init+0x12c>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002a72:	4b35      	ldr	r3, [pc, #212]	; (8002b48 <MX_RTC_Init+0x12c>)
 8002a74:	0018      	movs	r0, r3
 8002a76:	f00b f953 	bl	800dd20 <HAL_RTC_Init>
 8002a7a:	1e03      	subs	r3, r0, #0
 8002a7c:	d001      	beq.n	8002a82 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8002a7e:	f000 fda9 	bl	80035d4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8002a82:	212c      	movs	r1, #44	; 0x2c
 8002a84:	187b      	adds	r3, r7, r1
 8002a86:	2200      	movs	r2, #0
 8002a88:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8002a8a:	187b      	adds	r3, r7, r1
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8002a90:	187b      	adds	r3, r7, r1
 8002a92:	2200      	movs	r2, #0
 8002a94:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002a96:	187b      	adds	r3, r7, r1
 8002a98:	2200      	movs	r2, #0
 8002a9a:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002a9c:	187b      	adds	r3, r7, r1
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002aa2:	1879      	adds	r1, r7, r1
 8002aa4:	4b28      	ldr	r3, [pc, #160]	; (8002b48 <MX_RTC_Init+0x12c>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	f00b fa2f 	bl	800df0c <HAL_RTC_SetTime>
 8002aae:	1e03      	subs	r3, r0, #0
 8002ab0:	d001      	beq.n	8002ab6 <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 8002ab2:	f000 fd8f 	bl	80035d4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002ab6:	2128      	movs	r1, #40	; 0x28
 8002ab8:	187b      	adds	r3, r7, r1
 8002aba:	2201      	movs	r2, #1
 8002abc:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002abe:	187b      	adds	r3, r7, r1
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8002ac4:	187b      	adds	r3, r7, r1
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8002aca:	187b      	adds	r3, r7, r1
 8002acc:	2200      	movs	r2, #0
 8002ace:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002ad0:	1879      	adds	r1, r7, r1
 8002ad2:	4b1d      	ldr	r3, [pc, #116]	; (8002b48 <MX_RTC_Init+0x12c>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	0018      	movs	r0, r3
 8002ad8:	f00b fc18 	bl	800e30c <HAL_RTC_SetDate>
 8002adc:	1e03      	subs	r3, r0, #0
 8002ade:	d001      	beq.n	8002ae4 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8002ae0:	f000 fd78 	bl	80035d4 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8002ae4:	003b      	movs	r3, r7
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8002aea:	003b      	movs	r3, r7
 8002aec:	2200      	movs	r2, #0
 8002aee:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8002af0:	003b      	movs	r3, r7
 8002af2:	2200      	movs	r2, #0
 8002af4:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8002af6:	003b      	movs	r3, r7
 8002af8:	2200      	movs	r2, #0
 8002afa:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002afc:	003b      	movs	r3, r7
 8002afe:	2200      	movs	r2, #0
 8002b00:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002b02:	003b      	movs	r3, r7
 8002b04:	2200      	movs	r2, #0
 8002b06:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 8002b08:	003b      	movs	r3, r7
 8002b0a:	4a11      	ldr	r2, [pc, #68]	; (8002b50 <MX_RTC_Init+0x134>)
 8002b0c:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 8002b0e:	003b      	movs	r3, r7
 8002b10:	22f0      	movs	r2, #240	; 0xf0
 8002b12:	0512      	lsls	r2, r2, #20
 8002b14:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002b16:	003b      	movs	r3, r7
 8002b18:	2200      	movs	r2, #0
 8002b1a:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8002b1c:	003b      	movs	r3, r7
 8002b1e:	2220      	movs	r2, #32
 8002b20:	2101      	movs	r1, #1
 8002b22:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8002b24:	003b      	movs	r3, r7
 8002b26:	2280      	movs	r2, #128	; 0x80
 8002b28:	0052      	lsls	r2, r2, #1
 8002b2a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8002b2c:	0039      	movs	r1, r7
 8002b2e:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <MX_RTC_Init+0x12c>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	0018      	movs	r0, r3
 8002b34:	f00b fd8a 	bl	800e64c <HAL_RTC_SetAlarm_IT>
 8002b38:	1e03      	subs	r3, r0, #0
 8002b3a:	d001      	beq.n	8002b40 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8002b3c:	f000 fd4a 	bl	80035d4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002b40:	46c0      	nop			; (mov r8, r8)
 8002b42:	46bd      	mov	sp, r7
 8002b44:	b010      	add	sp, #64	; 0x40
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	20000858 	.word	0x20000858
 8002b4c:	40002800 	.word	0x40002800
 8002b50:	80808080 	.word	0x80808080

08002b54 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002b58:	4b0e      	ldr	r3, [pc, #56]	; (8002b94 <MX_TIM6_Init+0x40>)
 8002b5a:	4a0f      	ldr	r2, [pc, #60]	; (8002b98 <MX_TIM6_Init+0x44>)
 8002b5c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 100;
 8002b5e:	4b0d      	ldr	r3, [pc, #52]	; (8002b94 <MX_TIM6_Init+0x40>)
 8002b60:	2264      	movs	r2, #100	; 0x64
 8002b62:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b64:	4b0b      	ldr	r3, [pc, #44]	; (8002b94 <MX_TIM6_Init+0x40>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000;
 8002b6a:	4b0a      	ldr	r3, [pc, #40]	; (8002b94 <MX_TIM6_Init+0x40>)
 8002b6c:	4a0b      	ldr	r2, [pc, #44]	; (8002b9c <MX_TIM6_Init+0x48>)
 8002b6e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b70:	4b08      	ldr	r3, [pc, #32]	; (8002b94 <MX_TIM6_Init+0x40>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002b76:	4b07      	ldr	r3, [pc, #28]	; (8002b94 <MX_TIM6_Init+0x40>)
 8002b78:	0018      	movs	r0, r3
 8002b7a:	f00c f919 	bl	800edb0 <HAL_TIM_Base_Init>
 8002b7e:	1e03      	subs	r3, r0, #0
 8002b80:	d001      	beq.n	8002b86 <MX_TIM6_Init+0x32>
  {
    Error_Handler();
 8002b82:	f000 fd27 	bl	80035d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8002b86:	4b03      	ldr	r3, [pc, #12]	; (8002b94 <MX_TIM6_Init+0x40>)
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f00c f9e5 	bl	800ef58 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM6_Init 2 */

}
 8002b8e:	46c0      	nop			; (mov r8, r8)
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	20000878 	.word	0x20000878
 8002b98:	40001000 	.word	0x40001000
 8002b9c:	00002710 	.word	0x00002710

08002ba0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM7_Init 0 */

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002ba4:	4b0f      	ldr	r3, [pc, #60]	; (8002be4 <MX_TIM7_Init+0x44>)
 8002ba6:	4a10      	ldr	r2, [pc, #64]	; (8002be8 <MX_TIM7_Init+0x48>)
 8002ba8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2000;
 8002baa:	4b0e      	ldr	r3, [pc, #56]	; (8002be4 <MX_TIM7_Init+0x44>)
 8002bac:	22fa      	movs	r2, #250	; 0xfa
 8002bae:	00d2      	lsls	r2, r2, #3
 8002bb0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bb2:	4b0c      	ldr	r3, [pc, #48]	; (8002be4 <MX_TIM7_Init+0x44>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 8002bb8:	4b0a      	ldr	r3, [pc, #40]	; (8002be4 <MX_TIM7_Init+0x44>)
 8002bba:	22fa      	movs	r2, #250	; 0xfa
 8002bbc:	0092      	lsls	r2, r2, #2
 8002bbe:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bc0:	4b08      	ldr	r3, [pc, #32]	; (8002be4 <MX_TIM7_Init+0x44>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002bc6:	4b07      	ldr	r3, [pc, #28]	; (8002be4 <MX_TIM7_Init+0x44>)
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f00c f8f1 	bl	800edb0 <HAL_TIM_Base_Init>
 8002bce:	1e03      	subs	r3, r0, #0
 8002bd0:	d001      	beq.n	8002bd6 <MX_TIM7_Init+0x36>
  {
    Error_Handler();
 8002bd2:	f000 fcff 	bl	80035d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 8002bd6:	4b03      	ldr	r3, [pc, #12]	; (8002be4 <MX_TIM7_Init+0x44>)
 8002bd8:	0018      	movs	r0, r3
 8002bda:	f00c f9bd 	bl	800ef58 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM7_Init 2 */

}
 8002bde:	46c0      	nop			; (mov r8, r8)
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	200008c0 	.word	0x200008c0
 8002be8:	40001400 	.word	0x40001400

08002bec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002bf0:	4b14      	ldr	r3, [pc, #80]	; (8002c44 <MX_USART2_UART_Init+0x58>)
 8002bf2:	4a15      	ldr	r2, [pc, #84]	; (8002c48 <MX_USART2_UART_Init+0x5c>)
 8002bf4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002bf6:	4b13      	ldr	r3, [pc, #76]	; (8002c44 <MX_USART2_UART_Init+0x58>)
 8002bf8:	22e1      	movs	r2, #225	; 0xe1
 8002bfa:	0252      	lsls	r2, r2, #9
 8002bfc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002bfe:	4b11      	ldr	r3, [pc, #68]	; (8002c44 <MX_USART2_UART_Init+0x58>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c04:	4b0f      	ldr	r3, [pc, #60]	; (8002c44 <MX_USART2_UART_Init+0x58>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c0a:	4b0e      	ldr	r3, [pc, #56]	; (8002c44 <MX_USART2_UART_Init+0x58>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c10:	4b0c      	ldr	r3, [pc, #48]	; (8002c44 <MX_USART2_UART_Init+0x58>)
 8002c12:	220c      	movs	r2, #12
 8002c14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c16:	4b0b      	ldr	r3, [pc, #44]	; (8002c44 <MX_USART2_UART_Init+0x58>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c1c:	4b09      	ldr	r3, [pc, #36]	; (8002c44 <MX_USART2_UART_Init+0x58>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c22:	4b08      	ldr	r3, [pc, #32]	; (8002c44 <MX_USART2_UART_Init+0x58>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c28:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <MX_USART2_UART_Init+0x58>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c2e:	4b05      	ldr	r3, [pc, #20]	; (8002c44 <MX_USART2_UART_Init+0x58>)
 8002c30:	0018      	movs	r0, r3
 8002c32:	f00c fbd5 	bl	800f3e0 <HAL_UART_Init>
 8002c36:	1e03      	subs	r3, r0, #0
 8002c38:	d001      	beq.n	8002c3e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002c3a:	f000 fccb 	bl	80035d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c3e:	46c0      	nop			; (mov r8, r8)
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	20000908 	.word	0x20000908
 8002c48:	40004400 	.word	0x40004400

08002c4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c4c:	b590      	push	{r4, r7, lr}
 8002c4e:	b08b      	sub	sp, #44	; 0x2c
 8002c50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c52:	2414      	movs	r4, #20
 8002c54:	193b      	adds	r3, r7, r4
 8002c56:	0018      	movs	r0, r3
 8002c58:	2314      	movs	r3, #20
 8002c5a:	001a      	movs	r2, r3
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	f00f f9cd 	bl	8011ffc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c62:	4b76      	ldr	r3, [pc, #472]	; (8002e3c <MX_GPIO_Init+0x1f0>)
 8002c64:	695a      	ldr	r2, [r3, #20]
 8002c66:	4b75      	ldr	r3, [pc, #468]	; (8002e3c <MX_GPIO_Init+0x1f0>)
 8002c68:	2180      	movs	r1, #128	; 0x80
 8002c6a:	0309      	lsls	r1, r1, #12
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	615a      	str	r2, [r3, #20]
 8002c70:	4b72      	ldr	r3, [pc, #456]	; (8002e3c <MX_GPIO_Init+0x1f0>)
 8002c72:	695a      	ldr	r2, [r3, #20]
 8002c74:	2380      	movs	r3, #128	; 0x80
 8002c76:	031b      	lsls	r3, r3, #12
 8002c78:	4013      	ands	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]
 8002c7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c7e:	4b6f      	ldr	r3, [pc, #444]	; (8002e3c <MX_GPIO_Init+0x1f0>)
 8002c80:	695a      	ldr	r2, [r3, #20]
 8002c82:	4b6e      	ldr	r3, [pc, #440]	; (8002e3c <MX_GPIO_Init+0x1f0>)
 8002c84:	2180      	movs	r1, #128	; 0x80
 8002c86:	03c9      	lsls	r1, r1, #15
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	615a      	str	r2, [r3, #20]
 8002c8c:	4b6b      	ldr	r3, [pc, #428]	; (8002e3c <MX_GPIO_Init+0x1f0>)
 8002c8e:	695a      	ldr	r2, [r3, #20]
 8002c90:	2380      	movs	r3, #128	; 0x80
 8002c92:	03db      	lsls	r3, r3, #15
 8002c94:	4013      	ands	r3, r2
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c9a:	4b68      	ldr	r3, [pc, #416]	; (8002e3c <MX_GPIO_Init+0x1f0>)
 8002c9c:	695a      	ldr	r2, [r3, #20]
 8002c9e:	4b67      	ldr	r3, [pc, #412]	; (8002e3c <MX_GPIO_Init+0x1f0>)
 8002ca0:	2180      	movs	r1, #128	; 0x80
 8002ca2:	0289      	lsls	r1, r1, #10
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	615a      	str	r2, [r3, #20]
 8002ca8:	4b64      	ldr	r3, [pc, #400]	; (8002e3c <MX_GPIO_Init+0x1f0>)
 8002caa:	695a      	ldr	r2, [r3, #20]
 8002cac:	2380      	movs	r3, #128	; 0x80
 8002cae:	029b      	lsls	r3, r3, #10
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	60bb      	str	r3, [r7, #8]
 8002cb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cb6:	4b61      	ldr	r3, [pc, #388]	; (8002e3c <MX_GPIO_Init+0x1f0>)
 8002cb8:	695a      	ldr	r2, [r3, #20]
 8002cba:	4b60      	ldr	r3, [pc, #384]	; (8002e3c <MX_GPIO_Init+0x1f0>)
 8002cbc:	2180      	movs	r1, #128	; 0x80
 8002cbe:	02c9      	lsls	r1, r1, #11
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	615a      	str	r2, [r3, #20]
 8002cc4:	4b5d      	ldr	r3, [pc, #372]	; (8002e3c <MX_GPIO_Init+0x1f0>)
 8002cc6:	695a      	ldr	r2, [r3, #20]
 8002cc8:	2380      	movs	r3, #128	; 0x80
 8002cca:	02db      	lsls	r3, r3, #11
 8002ccc:	4013      	ands	r3, r2
 8002cce:	607b      	str	r3, [r7, #4]
 8002cd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002cd2:	2380      	movs	r3, #128	; 0x80
 8002cd4:	019b      	lsls	r3, r3, #6
 8002cd6:	485a      	ldr	r0, [pc, #360]	; (8002e40 <MX_GPIO_Init+0x1f4>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	0019      	movs	r1, r3
 8002cdc:	f008 f8ba 	bl	800ae54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GSM_ONOFF_Pin|GSM_PWR_Pin|OUT_ONOFF_Pin, GPIO_PIN_RESET);
 8002ce0:	4958      	ldr	r1, [pc, #352]	; (8002e44 <MX_GPIO_Init+0x1f8>)
 8002ce2:	2390      	movs	r3, #144	; 0x90
 8002ce4:	05db      	lsls	r3, r3, #23
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	0018      	movs	r0, r3
 8002cea:	f008 f8b3 	bl	800ae54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RELAY2_Pin|RELAY1_Pin|RFRX_LED_Pin|OUT_ALARM_Pin
 8002cee:	4956      	ldr	r1, [pc, #344]	; (8002e48 <MX_GPIO_Init+0x1fc>)
 8002cf0:	4b56      	ldr	r3, [pc, #344]	; (8002e4c <MX_GPIO_Init+0x200>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f008 f8ad 	bl	800ae54 <HAL_GPIO_WritePin>
                          |OUT_PANIC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002cfa:	193b      	adds	r3, r7, r4
 8002cfc:	2280      	movs	r2, #128	; 0x80
 8002cfe:	0192      	lsls	r2, r2, #6
 8002d00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d02:	193b      	adds	r3, r7, r4
 8002d04:	2201      	movs	r2, #1
 8002d06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d08:	193b      	adds	r3, r7, r4
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d0e:	193b      	adds	r3, r7, r4
 8002d10:	2200      	movs	r2, #0
 8002d12:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002d14:	193b      	adds	r3, r7, r4
 8002d16:	4a4a      	ldr	r2, [pc, #296]	; (8002e40 <MX_GPIO_Init+0x1f4>)
 8002d18:	0019      	movs	r1, r3
 8002d1a:	0010      	movs	r0, r2
 8002d1c:	f007 fe38 	bl	800a990 <HAL_GPIO_Init>

  /*Configure GPIO pins : GSM_ONOFF_Pin GSM_PWR_Pin OUT_ONOFF_Pin */
  GPIO_InitStruct.Pin = GSM_ONOFF_Pin|GSM_PWR_Pin|OUT_ONOFF_Pin;
 8002d20:	193b      	adds	r3, r7, r4
 8002d22:	4a48      	ldr	r2, [pc, #288]	; (8002e44 <MX_GPIO_Init+0x1f8>)
 8002d24:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d26:	193b      	adds	r3, r7, r4
 8002d28:	2201      	movs	r2, #1
 8002d2a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2c:	193b      	adds	r3, r7, r4
 8002d2e:	2200      	movs	r2, #0
 8002d30:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d32:	193b      	adds	r3, r7, r4
 8002d34:	2200      	movs	r2, #0
 8002d36:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d38:	193a      	adds	r2, r7, r4
 8002d3a:	2390      	movs	r3, #144	; 0x90
 8002d3c:	05db      	lsls	r3, r3, #23
 8002d3e:	0011      	movs	r1, r2
 8002d40:	0018      	movs	r0, r3
 8002d42:	f007 fe25 	bl	800a990 <HAL_GPIO_Init>

  /*Configure GPIO pin : GSM_RI_Pin */
  GPIO_InitStruct.Pin = GSM_RI_Pin;
 8002d46:	193b      	adds	r3, r7, r4
 8002d48:	2202      	movs	r2, #2
 8002d4a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d4c:	193b      	adds	r3, r7, r4
 8002d4e:	2200      	movs	r2, #0
 8002d50:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d52:	193b      	adds	r3, r7, r4
 8002d54:	2200      	movs	r2, #0
 8002d56:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GSM_RI_GPIO_Port, &GPIO_InitStruct);
 8002d58:	193a      	adds	r2, r7, r4
 8002d5a:	2390      	movs	r3, #144	; 0x90
 8002d5c:	05db      	lsls	r3, r3, #23
 8002d5e:	0011      	movs	r1, r2
 8002d60:	0018      	movs	r0, r3
 8002d62:	f007 fe15 	bl	800a990 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 PA9
                           PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
 8002d66:	193b      	adds	r3, r7, r4
 8002d68:	22f7      	movs	r2, #247	; 0xf7
 8002d6a:	0152      	lsls	r2, r2, #5
 8002d6c:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d6e:	193b      	adds	r3, r7, r4
 8002d70:	2203      	movs	r2, #3
 8002d72:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d74:	193b      	adds	r3, r7, r4
 8002d76:	2200      	movs	r2, #0
 8002d78:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d7a:	193a      	adds	r2, r7, r4
 8002d7c:	2390      	movs	r3, #144	; 0x90
 8002d7e:	05db      	lsls	r3, r3, #23
 8002d80:	0011      	movs	r1, r2
 8002d82:	0018      	movs	r0, r3
 8002d84:	f007 fe04 	bl	800a990 <HAL_GPIO_Init>

  /*Configure GPIO pin : MAINS_ONOFF_Pin */
  GPIO_InitStruct.Pin = MAINS_ONOFF_Pin;
 8002d88:	193b      	adds	r3, r7, r4
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d8e:	193b      	adds	r3, r7, r4
 8002d90:	2200      	movs	r2, #0
 8002d92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d94:	193b      	adds	r3, r7, r4
 8002d96:	2200      	movs	r2, #0
 8002d98:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MAINS_ONOFF_GPIO_Port, &GPIO_InitStruct);
 8002d9a:	193b      	adds	r3, r7, r4
 8002d9c:	4a2b      	ldr	r2, [pc, #172]	; (8002e4c <MX_GPIO_Init+0x200>)
 8002d9e:	0019      	movs	r1, r3
 8002da0:	0010      	movs	r0, r2
 8002da2:	f007 fdf5 	bl	800a990 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 PB5
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_5
 8002da6:	193b      	adds	r3, r7, r4
 8002da8:	4a29      	ldr	r2, [pc, #164]	; (8002e50 <MX_GPIO_Init+0x204>)
 8002daa:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dac:	193b      	adds	r3, r7, r4
 8002dae:	2203      	movs	r2, #3
 8002db0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db2:	193b      	adds	r3, r7, r4
 8002db4:	2200      	movs	r2, #0
 8002db6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002db8:	193b      	adds	r3, r7, r4
 8002dba:	4a24      	ldr	r2, [pc, #144]	; (8002e4c <MX_GPIO_Init+0x200>)
 8002dbc:	0019      	movs	r1, r3
 8002dbe:	0010      	movs	r0, r2
 8002dc0:	f007 fde6 	bl	800a990 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY2_Pin RELAY1_Pin RFRX_LED_Pin OUT_ALARM_Pin
                           OUT_PANIC_Pin */
  GPIO_InitStruct.Pin = RELAY2_Pin|RELAY1_Pin|RFRX_LED_Pin|OUT_ALARM_Pin
 8002dc4:	193b      	adds	r3, r7, r4
 8002dc6:	4a20      	ldr	r2, [pc, #128]	; (8002e48 <MX_GPIO_Init+0x1fc>)
 8002dc8:	601a      	str	r2, [r3, #0]
                          |OUT_PANIC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dca:	193b      	adds	r3, r7, r4
 8002dcc:	2201      	movs	r2, #1
 8002dce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd0:	193b      	adds	r3, r7, r4
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd6:	193b      	adds	r3, r7, r4
 8002dd8:	2200      	movs	r2, #0
 8002dda:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ddc:	193b      	adds	r3, r7, r4
 8002dde:	4a1b      	ldr	r2, [pc, #108]	; (8002e4c <MX_GPIO_Init+0x200>)
 8002de0:	0019      	movs	r1, r3
 8002de2:	0010      	movs	r0, r2
 8002de4:	f007 fdd4 	bl	800a990 <HAL_GPIO_Init>

  /*Configure GPIO pin : RFRX_LEARN_BUTTON_Pin */
  GPIO_InitStruct.Pin = RFRX_LEARN_BUTTON_Pin;
 8002de8:	0021      	movs	r1, r4
 8002dea:	187b      	adds	r3, r7, r1
 8002dec:	2280      	movs	r2, #128	; 0x80
 8002dee:	0212      	lsls	r2, r2, #8
 8002df0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002df2:	187b      	adds	r3, r7, r1
 8002df4:	2288      	movs	r2, #136	; 0x88
 8002df6:	0352      	lsls	r2, r2, #13
 8002df8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfa:	187b      	adds	r3, r7, r1
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RFRX_LEARN_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002e00:	000c      	movs	r4, r1
 8002e02:	187b      	adds	r3, r7, r1
 8002e04:	4a11      	ldr	r2, [pc, #68]	; (8002e4c <MX_GPIO_Init+0x200>)
 8002e06:	0019      	movs	r1, r3
 8002e08:	0010      	movs	r0, r2
 8002e0a:	f007 fdc1 	bl	800a990 <HAL_GPIO_Init>

  /*Configure GPIO pin : RFRX_IN_Pin */
  GPIO_InitStruct.Pin = RFRX_IN_Pin;
 8002e0e:	0021      	movs	r1, r4
 8002e10:	187b      	adds	r3, r7, r1
 8002e12:	2280      	movs	r2, #128	; 0x80
 8002e14:	0052      	lsls	r2, r2, #1
 8002e16:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002e18:	187b      	adds	r3, r7, r1
 8002e1a:	22c4      	movs	r2, #196	; 0xc4
 8002e1c:	0392      	lsls	r2, r2, #14
 8002e1e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e20:	187b      	adds	r3, r7, r1
 8002e22:	2200      	movs	r2, #0
 8002e24:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RFRX_IN_GPIO_Port, &GPIO_InitStruct);
 8002e26:	187a      	adds	r2, r7, r1
 8002e28:	2390      	movs	r3, #144	; 0x90
 8002e2a:	05db      	lsls	r3, r3, #23
 8002e2c:	0011      	movs	r1, r2
 8002e2e:	0018      	movs	r0, r3
 8002e30:	f007 fdae 	bl	800a990 <HAL_GPIO_Init>

}
 8002e34:	46c0      	nop			; (mov r8, r8)
 8002e36:	46bd      	mov	sp, r7
 8002e38:	b00b      	add	sp, #44	; 0x2c
 8002e3a:	bd90      	pop	{r4, r7, pc}
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	48000800 	.word	0x48000800
 8002e44:	00008011 	.word	0x00008011
 8002e48:	00007018 	.word	0x00007018
 8002e4c:	48000400 	.word	0x48000400
 8002e50:	00000f24 	.word	0x00000f24

08002e54 <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{	// 1 Second Interrupt
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]

	if(Siren_Time > 0) {
 8002e5c:	4b76      	ldr	r3, [pc, #472]	; (8003038 <HAL_RTC_AlarmAEventCallback+0x1e4>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d017      	beq.n	8002e94 <HAL_RTC_AlarmAEventCallback+0x40>
		Siren_Time--;
 8002e64:	4b74      	ldr	r3, [pc, #464]	; (8003038 <HAL_RTC_AlarmAEventCallback+0x1e4>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	1e5a      	subs	r2, r3, #1
 8002e6a:	4b73      	ldr	r3, [pc, #460]	; (8003038 <HAL_RTC_AlarmAEventCallback+0x1e4>)
 8002e6c:	601a      	str	r2, [r3, #0]
		if(Siren_Time == 0) {
 8002e6e:	4b72      	ldr	r3, [pc, #456]	; (8003038 <HAL_RTC_AlarmAEventCallback+0x1e4>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d107      	bne.n	8002e86 <HAL_RTC_AlarmAEventCallback+0x32>
			HAL_GPIO_WritePin(GPIOB, RELAY1_Pin, GPIO_PIN_RESET);
 8002e76:	2380      	movs	r3, #128	; 0x80
 8002e78:	019b      	lsls	r3, r3, #6
 8002e7a:	4870      	ldr	r0, [pc, #448]	; (800303c <HAL_RTC_AlarmAEventCallback+0x1e8>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	0019      	movs	r1, r3
 8002e80:	f007 ffe8 	bl	800ae54 <HAL_GPIO_WritePin>
 8002e84:	e006      	b.n	8002e94 <HAL_RTC_AlarmAEventCallback+0x40>
		} else {
			HAL_GPIO_WritePin(GPIOB, RELAY1_Pin, GPIO_PIN_SET);
 8002e86:	2380      	movs	r3, #128	; 0x80
 8002e88:	019b      	lsls	r3, r3, #6
 8002e8a:	486c      	ldr	r0, [pc, #432]	; (800303c <HAL_RTC_AlarmAEventCallback+0x1e8>)
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	0019      	movs	r1, r3
 8002e90:	f007 ffe0 	bl	800ae54 <HAL_GPIO_WritePin>
		}
	}

	if(Buzzer_Time > 0) {
 8002e94:	4b6a      	ldr	r3, [pc, #424]	; (8003040 <HAL_RTC_AlarmAEventCallback+0x1ec>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d017      	beq.n	8002ecc <HAL_RTC_AlarmAEventCallback+0x78>
		Buzzer_Time--;
 8002e9c:	4b68      	ldr	r3, [pc, #416]	; (8003040 <HAL_RTC_AlarmAEventCallback+0x1ec>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	1e5a      	subs	r2, r3, #1
 8002ea2:	4b67      	ldr	r3, [pc, #412]	; (8003040 <HAL_RTC_AlarmAEventCallback+0x1ec>)
 8002ea4:	601a      	str	r2, [r3, #0]
		if(Buzzer_Time == 0) {
 8002ea6:	4b66      	ldr	r3, [pc, #408]	; (8003040 <HAL_RTC_AlarmAEventCallback+0x1ec>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d107      	bne.n	8002ebe <HAL_RTC_AlarmAEventCallback+0x6a>
			HAL_GPIO_WritePin(GPIOB, RELAY2_Pin, GPIO_PIN_RESET);
 8002eae:	2380      	movs	r3, #128	; 0x80
 8002eb0:	015b      	lsls	r3, r3, #5
 8002eb2:	4862      	ldr	r0, [pc, #392]	; (800303c <HAL_RTC_AlarmAEventCallback+0x1e8>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	0019      	movs	r1, r3
 8002eb8:	f007 ffcc 	bl	800ae54 <HAL_GPIO_WritePin>
 8002ebc:	e006      	b.n	8002ecc <HAL_RTC_AlarmAEventCallback+0x78>
		} else {
			HAL_GPIO_WritePin(GPIOB, RELAY2_Pin, GPIO_PIN_SET);
 8002ebe:	2380      	movs	r3, #128	; 0x80
 8002ec0:	015b      	lsls	r3, r3, #5
 8002ec2:	485e      	ldr	r0, [pc, #376]	; (800303c <HAL_RTC_AlarmAEventCallback+0x1e8>)
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	0019      	movs	r1, r3
 8002ec8:	f007 ffc4 	bl	800ae54 <HAL_GPIO_WritePin>
		}
	}

	if(Alarm_Out_Time > 0) {
 8002ecc:	4b5d      	ldr	r3, [pc, #372]	; (8003044 <HAL_RTC_AlarmAEventCallback+0x1f0>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d016      	beq.n	8002f02 <HAL_RTC_AlarmAEventCallback+0xae>
		Alarm_Out_Time--;
 8002ed4:	4b5b      	ldr	r3, [pc, #364]	; (8003044 <HAL_RTC_AlarmAEventCallback+0x1f0>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	b2da      	uxtb	r2, r3
 8002edc:	4b59      	ldr	r3, [pc, #356]	; (8003044 <HAL_RTC_AlarmAEventCallback+0x1f0>)
 8002ede:	701a      	strb	r2, [r3, #0]
		if(Alarm_Out_Time == 0) {
 8002ee0:	4b58      	ldr	r3, [pc, #352]	; (8003044 <HAL_RTC_AlarmAEventCallback+0x1f0>)
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d106      	bne.n	8002ef6 <HAL_RTC_AlarmAEventCallback+0xa2>
			HAL_GPIO_WritePin(GPIOB, OUT_ALARM_Pin, GPIO_PIN_RESET);
 8002ee8:	4b54      	ldr	r3, [pc, #336]	; (800303c <HAL_RTC_AlarmAEventCallback+0x1e8>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	2108      	movs	r1, #8
 8002eee:	0018      	movs	r0, r3
 8002ef0:	f007 ffb0 	bl	800ae54 <HAL_GPIO_WritePin>
 8002ef4:	e005      	b.n	8002f02 <HAL_RTC_AlarmAEventCallback+0xae>
		} else {
			HAL_GPIO_WritePin(GPIOB, OUT_ALARM_Pin, GPIO_PIN_SET);
 8002ef6:	4b51      	ldr	r3, [pc, #324]	; (800303c <HAL_RTC_AlarmAEventCallback+0x1e8>)
 8002ef8:	2201      	movs	r2, #1
 8002efa:	2108      	movs	r1, #8
 8002efc:	0018      	movs	r0, r3
 8002efe:	f007 ffa9 	bl	800ae54 <HAL_GPIO_WritePin>
		}
	}

	if(Panic_Out_Time > 0) {
 8002f02:	4b51      	ldr	r3, [pc, #324]	; (8003048 <HAL_RTC_AlarmAEventCallback+0x1f4>)
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d016      	beq.n	8002f38 <HAL_RTC_AlarmAEventCallback+0xe4>
		Panic_Out_Time--;
 8002f0a:	4b4f      	ldr	r3, [pc, #316]	; (8003048 <HAL_RTC_AlarmAEventCallback+0x1f4>)
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	4b4d      	ldr	r3, [pc, #308]	; (8003048 <HAL_RTC_AlarmAEventCallback+0x1f4>)
 8002f14:	701a      	strb	r2, [r3, #0]
		if(Panic_Out_Time == 0) {
 8002f16:	4b4c      	ldr	r3, [pc, #304]	; (8003048 <HAL_RTC_AlarmAEventCallback+0x1f4>)
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d106      	bne.n	8002f2c <HAL_RTC_AlarmAEventCallback+0xd8>
			HAL_GPIO_WritePin(GPIOB, OUT_PANIC_Pin, GPIO_PIN_RESET);
 8002f1e:	4b47      	ldr	r3, [pc, #284]	; (800303c <HAL_RTC_AlarmAEventCallback+0x1e8>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	2110      	movs	r1, #16
 8002f24:	0018      	movs	r0, r3
 8002f26:	f007 ff95 	bl	800ae54 <HAL_GPIO_WritePin>
 8002f2a:	e005      	b.n	8002f38 <HAL_RTC_AlarmAEventCallback+0xe4>
		} else {
			HAL_GPIO_WritePin(GPIOB, OUT_PANIC_Pin, GPIO_PIN_SET);
 8002f2c:	4b43      	ldr	r3, [pc, #268]	; (800303c <HAL_RTC_AlarmAEventCallback+0x1e8>)
 8002f2e:	2201      	movs	r2, #1
 8002f30:	2110      	movs	r1, #16
 8002f32:	0018      	movs	r0, r3
 8002f34:	f007 ff8e 	bl	800ae54 <HAL_GPIO_WritePin>
		}
	}

	if(HAL_GPIO_ReadPin(RFRX_LEARN_BUTTON_GPIO_Port, RFRX_LEARN_BUTTON_Pin) == 0) {
 8002f38:	2380      	movs	r3, #128	; 0x80
 8002f3a:	021b      	lsls	r3, r3, #8
 8002f3c:	4a3f      	ldr	r2, [pc, #252]	; (800303c <HAL_RTC_AlarmAEventCallback+0x1e8>)
 8002f3e:	0019      	movs	r1, r3
 8002f40:	0010      	movs	r0, r2
 8002f42:	f007 ff57 	bl	800adf4 <HAL_GPIO_ReadPin>
 8002f46:	1e03      	subs	r3, r0, #0
 8002f48:	d110      	bne.n	8002f6c <HAL_RTC_AlarmAEventCallback+0x118>
		Learn_Button_Time++;
 8002f4a:	4b40      	ldr	r3, [pc, #256]	; (800304c <HAL_RTC_AlarmAEventCallback+0x1f8>)
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	3301      	adds	r3, #1
 8002f50:	b2da      	uxtb	r2, r3
 8002f52:	4b3e      	ldr	r3, [pc, #248]	; (800304c <HAL_RTC_AlarmAEventCallback+0x1f8>)
 8002f54:	701a      	strb	r2, [r3, #0]
		if(Learn_Button_Time >= 5) {
 8002f56:	4b3d      	ldr	r3, [pc, #244]	; (800304c <HAL_RTC_AlarmAEventCallback+0x1f8>)
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	2b04      	cmp	r3, #4
 8002f5c:	d909      	bls.n	8002f72 <HAL_RTC_AlarmAEventCallback+0x11e>
			Erase_RF_Devices = 1;
 8002f5e:	4b3c      	ldr	r3, [pc, #240]	; (8003050 <HAL_RTC_AlarmAEventCallback+0x1fc>)
 8002f60:	2201      	movs	r2, #1
 8002f62:	701a      	strb	r2, [r3, #0]
			Learn_Button_Time = 0;
 8002f64:	4b39      	ldr	r3, [pc, #228]	; (800304c <HAL_RTC_AlarmAEventCallback+0x1f8>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	701a      	strb	r2, [r3, #0]
 8002f6a:	e002      	b.n	8002f72 <HAL_RTC_AlarmAEventCallback+0x11e>
		}
	} else {
		Learn_Button_Time = 0;
 8002f6c:	4b37      	ldr	r3, [pc, #220]	; (800304c <HAL_RTC_AlarmAEventCallback+0x1f8>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	701a      	strb	r2, [r3, #0]
	}

	if(LearnTimeout > 0) {
 8002f72:	4b38      	ldr	r3, [pc, #224]	; (8003054 <HAL_RTC_AlarmAEventCallback+0x200>)
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d013      	beq.n	8002fa2 <HAL_RTC_AlarmAEventCallback+0x14e>
		LearnTimeout--;
 8002f7a:	4b36      	ldr	r3, [pc, #216]	; (8003054 <HAL_RTC_AlarmAEventCallback+0x200>)
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	b2da      	uxtb	r2, r3
 8002f82:	4b34      	ldr	r3, [pc, #208]	; (8003054 <HAL_RTC_AlarmAEventCallback+0x200>)
 8002f84:	701a      	strb	r2, [r3, #0]
		if(LearnTimeout == 0) {
 8002f86:	4b33      	ldr	r3, [pc, #204]	; (8003054 <HAL_RTC_AlarmAEventCallback+0x200>)
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d109      	bne.n	8002fa2 <HAL_RTC_AlarmAEventCallback+0x14e>
			LearnMode = 0;
 8002f8e:	4b32      	ldr	r3, [pc, #200]	; (8003058 <HAL_RTC_AlarmAEventCallback+0x204>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, RFRX_LED_Pin, GPIO_PIN_RESET);
 8002f94:	2380      	movs	r3, #128	; 0x80
 8002f96:	01db      	lsls	r3, r3, #7
 8002f98:	4828      	ldr	r0, [pc, #160]	; (800303c <HAL_RTC_AlarmAEventCallback+0x1e8>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	0019      	movs	r1, r3
 8002f9e:	f007 ff59 	bl	800ae54 <HAL_GPIO_WritePin>
		}
	}

	if(creg_timer > 0) {
 8002fa2:	4b2e      	ldr	r3, [pc, #184]	; (800305c <HAL_RTC_AlarmAEventCallback+0x208>)
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d005      	beq.n	8002fb6 <HAL_RTC_AlarmAEventCallback+0x162>
		creg_timer--;
 8002faa:	4b2c      	ldr	r3, [pc, #176]	; (800305c <HAL_RTC_AlarmAEventCallback+0x208>)
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	4b2a      	ldr	r3, [pc, #168]	; (800305c <HAL_RTC_AlarmAEventCallback+0x208>)
 8002fb4:	701a      	strb	r2, [r3, #0]
	}

	sec++;
 8002fb6:	4b2a      	ldr	r3, [pc, #168]	; (8003060 <HAL_RTC_AlarmAEventCallback+0x20c>)
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	3301      	adds	r3, #1
 8002fbc:	b2da      	uxtb	r2, r3
 8002fbe:	4b28      	ldr	r3, [pc, #160]	; (8003060 <HAL_RTC_AlarmAEventCallback+0x20c>)
 8002fc0:	701a      	strb	r2, [r3, #0]
	if(sec > 59) {
 8002fc2:	4b27      	ldr	r3, [pc, #156]	; (8003060 <HAL_RTC_AlarmAEventCallback+0x20c>)
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	2b3b      	cmp	r3, #59	; 0x3b
 8002fc8:	d905      	bls.n	8002fd6 <HAL_RTC_AlarmAEventCallback+0x182>
		minute_flag = 1;
 8002fca:	4b26      	ldr	r3, [pc, #152]	; (8003064 <HAL_RTC_AlarmAEventCallback+0x210>)
 8002fcc:	2201      	movs	r2, #1
 8002fce:	701a      	strb	r2, [r3, #0]
		sec = 0;
 8002fd0:	4b23      	ldr	r3, [pc, #140]	; (8003060 <HAL_RTC_AlarmAEventCallback+0x20c>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	701a      	strb	r2, [r3, #0]
	}

	if(bat_sample > 10) {
 8002fd6:	4b24      	ldr	r3, [pc, #144]	; (8003068 <HAL_RTC_AlarmAEventCallback+0x214>)
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	2b0a      	cmp	r3, #10
 8002fdc:	d906      	bls.n	8002fec <HAL_RTC_AlarmAEventCallback+0x198>
		bat_sample = 0;
 8002fde:	4b22      	ldr	r3, [pc, #136]	; (8003068 <HAL_RTC_AlarmAEventCallback+0x214>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	701a      	strb	r2, [r3, #0]
		Sample_Battery = 1;
 8002fe4:	4b21      	ldr	r3, [pc, #132]	; (800306c <HAL_RTC_AlarmAEventCallback+0x218>)
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	701a      	strb	r2, [r3, #0]
 8002fea:	e005      	b.n	8002ff8 <HAL_RTC_AlarmAEventCallback+0x1a4>

	} else {
		bat_sample++;
 8002fec:	4b1e      	ldr	r3, [pc, #120]	; (8003068 <HAL_RTC_AlarmAEventCallback+0x214>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	b2da      	uxtb	r2, r3
 8002ff4:	4b1c      	ldr	r3, [pc, #112]	; (8003068 <HAL_RTC_AlarmAEventCallback+0x214>)
 8002ff6:	701a      	strb	r2, [r3, #0]
	}

	no_data_Timer++;
 8002ff8:	4b1d      	ldr	r3, [pc, #116]	; (8003070 <HAL_RTC_AlarmAEventCallback+0x21c>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	1c5a      	adds	r2, r3, #1
 8002ffe:	4b1c      	ldr	r3, [pc, #112]	; (8003070 <HAL_RTC_AlarmAEventCallback+0x21c>)
 8003000:	601a      	str	r2, [r3, #0]
	if(no_data_Timer == 3) {
 8003002:	4b1b      	ldr	r3, [pc, #108]	; (8003070 <HAL_RTC_AlarmAEventCallback+0x21c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2b03      	cmp	r3, #3
 8003008:	d108      	bne.n	800301c <HAL_RTC_AlarmAEventCallback+0x1c8>
		memset(PrevSerialNum, 0, 4);
 800300a:	4b1a      	ldr	r3, [pc, #104]	; (8003074 <HAL_RTC_AlarmAEventCallback+0x220>)
 800300c:	2204      	movs	r2, #4
 800300e:	2100      	movs	r1, #0
 8003010:	0018      	movs	r0, r3
 8003012:	f00e fff3 	bl	8011ffc <memset>
		match = 0;
 8003016:	4b18      	ldr	r3, [pc, #96]	; (8003078 <HAL_RTC_AlarmAEventCallback+0x224>)
 8003018:	2200      	movs	r2, #0
 800301a:	701a      	strb	r2, [r3, #0]

	}

	if(Airtime_Req_Timer > 0) {
 800301c:	4b17      	ldr	r3, [pc, #92]	; (800307c <HAL_RTC_AlarmAEventCallback+0x228>)
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d005      	beq.n	8003030 <HAL_RTC_AlarmAEventCallback+0x1dc>
		Airtime_Req_Timer--;
 8003024:	4b15      	ldr	r3, [pc, #84]	; (800307c <HAL_RTC_AlarmAEventCallback+0x228>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	3b01      	subs	r3, #1
 800302a:	b2da      	uxtb	r2, r3
 800302c:	4b13      	ldr	r3, [pc, #76]	; (800307c <HAL_RTC_AlarmAEventCallback+0x228>)
 800302e:	701a      	strb	r2, [r3, #0]
	}
}
 8003030:	46c0      	nop			; (mov r8, r8)
 8003032:	46bd      	mov	sp, r7
 8003034:	b002      	add	sp, #8
 8003036:	bd80      	pop	{r7, pc}
 8003038:	200007b4 	.word	0x200007b4
 800303c:	48000400 	.word	0x48000400
 8003040:	200007b0 	.word	0x200007b0
 8003044:	200007ad 	.word	0x200007ad
 8003048:	200007ac 	.word	0x200007ac
 800304c:	200007b9 	.word	0x200007b9
 8003050:	200006ba 	.word	0x200006ba
 8003054:	20001671 	.word	0x20001671
 8003058:	20001670 	.word	0x20001670
 800305c:	20001801 	.word	0x20001801
 8003060:	200006b9 	.word	0x200006b9
 8003064:	200006b8 	.word	0x200006b8
 8003068:	200006c0 	.word	0x200006c0
 800306c:	200006c1 	.word	0x200006c1
 8003070:	20001690 	.word	0x20001690
 8003074:	20001650 	.word	0x20001650
 8003078:	2000163e 	.word	0x2000163e
 800307c:	200007aa 	.word	0x200007aa

08003080 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003080:	b590      	push	{r4, r7, lr}
 8003082:	b08d      	sub	sp, #52	; 0x34
 8003084:	af02      	add	r7, sp, #8
 8003086:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  unsigned char t = 0;
 8003088:	2327      	movs	r3, #39	; 0x27
 800308a:	18fb      	adds	r3, r7, r3
 800308c:	2200      	movs	r2, #0
 800308e:	701a      	strb	r2, [r3, #0]

//	Message[0] = AIRTIME;
//	Message[1] = 0;
//	Add_Message_to_Que(Message, 0, 0, 0, TRUE);

    Reload_Device_Flag = 1;
 8003090:	4bce      	ldr	r3, [pc, #824]	; (80033cc <StartDefaultTask+0x34c>)
 8003092:	2201      	movs	r2, #1
 8003094:	701a      	strb	r2, [r3, #0]
    Update_Mem_Flag = TRUE;
 8003096:	4bce      	ldr	r3, [pc, #824]	; (80033d0 <StartDefaultTask+0x350>)
 8003098:	2201      	movs	r2, #1
 800309a:	701a      	strb	r2, [r3, #0]


    for(;;)
    {
  	if(t > 5) {
 800309c:	2427      	movs	r4, #39	; 0x27
 800309e:	193b      	adds	r3, r7, r4
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	2b05      	cmp	r3, #5
 80030a4:	d909      	bls.n	80030ba <StartDefaultTask+0x3a>
  		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80030a6:	2380      	movs	r3, #128	; 0x80
 80030a8:	019b      	lsls	r3, r3, #6
 80030aa:	4aca      	ldr	r2, [pc, #808]	; (80033d4 <StartDefaultTask+0x354>)
 80030ac:	0019      	movs	r1, r3
 80030ae:	0010      	movs	r0, r2
 80030b0:	f007 ff10 	bl	800aed4 <HAL_GPIO_TogglePin>
  		t = 0;
 80030b4:	193b      	adds	r3, r7, r4
 80030b6:	2200      	movs	r2, #0
 80030b8:	701a      	strb	r2, [r3, #0]
  	}
  	t++;
 80030ba:	2127      	movs	r1, #39	; 0x27
 80030bc:	187b      	adds	r3, r7, r1
 80030be:	781a      	ldrb	r2, [r3, #0]
 80030c0:	187b      	adds	r3, r7, r1
 80030c2:	3201      	adds	r2, #1
 80030c4:	701a      	strb	r2, [r3, #0]

  	if(Update_Mem_Flag == TRUE) {
 80030c6:	4bc2      	ldr	r3, [pc, #776]	; (80033d0 <StartDefaultTask+0x350>)
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d104      	bne.n	80030d8 <StartDefaultTask+0x58>
  		Update_Mem_Flag = FALSE;
 80030ce:	4bc0      	ldr	r3, [pc, #768]	; (80033d0 <StartDefaultTask+0x350>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	701a      	strb	r2, [r3, #0]
  		Update_Mem_Values();
 80030d4:	f000 fe0a 	bl	8003cec <Update_Mem_Values>
  	}

  	Check_RF_Flags();
 80030d8:	f001 fae2 	bl	80046a0 <Check_RF_Flags>
 // 		Search_RXBUF();
 // 	} else if(RXTimeout < 10){
 // 		RXTimeout++;
 // 	}

  	if(minute_flag == 1) {
 80030dc:	4bbe      	ldr	r3, [pc, #760]	; (80033d8 <StartDefaultTask+0x358>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d12f      	bne.n	8003144 <StartDefaultTask+0xc4>
  			minute_flag = 0;
 80030e4:	4bbc      	ldr	r3, [pc, #752]	; (80033d8 <StartDefaultTask+0x358>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	701a      	strb	r2, [r3, #0]

  			RTC_TimeTypeDef sTime;
  			RTC_DateTypeDef sDate;

  			HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80030ea:	2410      	movs	r4, #16
 80030ec:	1939      	adds	r1, r7, r4
 80030ee:	4bbb      	ldr	r3, [pc, #748]	; (80033dc <StartDefaultTask+0x35c>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	0018      	movs	r0, r3
 80030f4:	f00b f89c 	bl	800e230 <HAL_RTC_GetTime>
  			HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80030f8:	230c      	movs	r3, #12
 80030fa:	18f9      	adds	r1, r7, r3
 80030fc:	4bb7      	ldr	r3, [pc, #732]	; (80033dc <StartDefaultTask+0x35c>)
 80030fe:	2200      	movs	r2, #0
 8003100:	0018      	movs	r0, r3
 8003102:	f00b fa45 	bl	800e590 <HAL_RTC_GetDate>

  			if(((unsigned char)sTime.Hours == (unsigned char)Health_TX_Hour)&&((unsigned char)sTime.Minutes == (unsigned char)Health_TX_Minute)) {
 8003106:	0021      	movs	r1, r4
 8003108:	187b      	adds	r3, r7, r1
 800310a:	781a      	ldrb	r2, [r3, #0]
 800310c:	4bb4      	ldr	r3, [pc, #720]	; (80033e0 <StartDefaultTask+0x360>)
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	429a      	cmp	r2, r3
 8003112:	d117      	bne.n	8003144 <StartDefaultTask+0xc4>
 8003114:	187b      	adds	r3, r7, r1
 8003116:	785a      	ldrb	r2, [r3, #1]
 8003118:	4bb2      	ldr	r3, [pc, #712]	; (80033e4 <StartDefaultTask+0x364>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	429a      	cmp	r2, r3
 800311e:	d111      	bne.n	8003144 <StartDefaultTask+0xc4>
  				TX_days_counter++;
 8003120:	4bb1      	ldr	r3, [pc, #708]	; (80033e8 <StartDefaultTask+0x368>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	3301      	adds	r3, #1
 8003126:	b2da      	uxtb	r2, r3
 8003128:	4baf      	ldr	r3, [pc, #700]	; (80033e8 <StartDefaultTask+0x368>)
 800312a:	701a      	strb	r2, [r3, #0]
  				if(TX_days_counter >= Health_TX_days) {
 800312c:	4bae      	ldr	r3, [pc, #696]	; (80033e8 <StartDefaultTask+0x368>)
 800312e:	781a      	ldrb	r2, [r3, #0]
 8003130:	4bae      	ldr	r3, [pc, #696]	; (80033ec <StartDefaultTask+0x36c>)
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	429a      	cmp	r2, r3
 8003136:	d305      	bcc.n	8003144 <StartDefaultTask+0xc4>
  					TX_days_counter = 0;
 8003138:	4bab      	ldr	r3, [pc, #684]	; (80033e8 <StartDefaultTask+0x368>)
 800313a:	2200      	movs	r2, #0
 800313c:	701a      	strb	r2, [r3, #0]

  					Send_Health_Message = TRUE;
 800313e:	4bac      	ldr	r3, [pc, #688]	; (80033f0 <StartDefaultTask+0x370>)
 8003140:	2201      	movs	r2, #1
 8003142:	701a      	strb	r2, [r3, #0]
  				}
  			}

  		}

  		if(Send_Health_Message == TRUE) {
 8003144:	4baa      	ldr	r3, [pc, #680]	; (80033f0 <StartDefaultTask+0x370>)
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d139      	bne.n	80031c0 <StartDefaultTask+0x140>
  			Send_Health_Message = FALSE;
 800314c:	4ba8      	ldr	r3, [pc, #672]	; (80033f0 <StartDefaultTask+0x370>)
 800314e:	2200      	movs	r2, #0
 8003150:	701a      	strb	r2, [r3, #0]
  			Read_Settings(EE_PREPAID_USSD);
 8003152:	2029      	movs	r0, #41	; 0x29
 8003154:	f000 ff78 	bl	8004048 <Read_Settings>
  			if((SPIPageBUF[0] == '*')&&(strlen(SPIPageBUF) > 2)) {
 8003158:	4ba6      	ldr	r3, [pc, #664]	; (80033f4 <StartDefaultTask+0x374>)
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	2b2a      	cmp	r3, #42	; 0x2a
 800315e:	d110      	bne.n	8003182 <StartDefaultTask+0x102>
 8003160:	4ba4      	ldr	r3, [pc, #656]	; (80033f4 <StartDefaultTask+0x374>)
 8003162:	0018      	movs	r0, r3
 8003164:	f7fc ffd0 	bl	8000108 <strlen>
 8003168:	0003      	movs	r3, r0
 800316a:	2b02      	cmp	r3, #2
 800316c:	d909      	bls.n	8003182 <StartDefaultTask+0x102>
  				Message[0] = AIRTIME;
 800316e:	4ba2      	ldr	r3, [pc, #648]	; (80033f8 <StartDefaultTask+0x378>)
 8003170:	226c      	movs	r2, #108	; 0x6c
 8003172:	701a      	strb	r2, [r3, #0]
  				Message[1] = 0;
 8003174:	4ba0      	ldr	r3, [pc, #640]	; (80033f8 <StartDefaultTask+0x378>)
 8003176:	2200      	movs	r2, #0
 8003178:	705a      	strb	r2, [r3, #1]
  				Message[2] = 0;
 800317a:	4b9f      	ldr	r3, [pc, #636]	; (80033f8 <StartDefaultTask+0x378>)
 800317c:	2200      	movs	r2, #0
 800317e:	709a      	strb	r2, [r3, #2]
 8003180:	e008      	b.n	8003194 <StartDefaultTask+0x114>
  			} else {
  				Message[0] = 114;
 8003182:	4b9d      	ldr	r3, [pc, #628]	; (80033f8 <StartDefaultTask+0x378>)
 8003184:	2272      	movs	r2, #114	; 0x72
 8003186:	701a      	strb	r2, [r3, #0]
  				Message[1] = EE_AT_MESSAGE;
 8003188:	4b9b      	ldr	r3, [pc, #620]	; (80033f8 <StartDefaultTask+0x378>)
 800318a:	2233      	movs	r2, #51	; 0x33
 800318c:	705a      	strb	r2, [r3, #1]
  				Message[2] = 0;
 800318e:	4b9a      	ldr	r3, [pc, #616]	; (80033f8 <StartDefaultTask+0x378>)
 8003190:	2200      	movs	r2, #0
 8003192:	709a      	strb	r2, [r3, #2]
  			}
  			Add_Message_to_Que(Message, 0, 0, 0, TRUE);
 8003194:	4898      	ldr	r0, [pc, #608]	; (80033f8 <StartDefaultTask+0x378>)
 8003196:	2301      	movs	r3, #1
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	2300      	movs	r3, #0
 800319c:	2200      	movs	r2, #0
 800319e:	2100      	movs	r1, #0
 80031a0:	f003 fec4 	bl	8006f2c <Add_Message_to_Que>

  			Message[0] = TIMESYNC_SMS;
 80031a4:	4b94      	ldr	r3, [pc, #592]	; (80033f8 <StartDefaultTask+0x378>)
 80031a6:	2264      	movs	r2, #100	; 0x64
 80031a8:	701a      	strb	r2, [r3, #0]
  			Message[1] = 0;
 80031aa:	4b93      	ldr	r3, [pc, #588]	; (80033f8 <StartDefaultTask+0x378>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	705a      	strb	r2, [r3, #1]
  			Add_Message_to_Que(Message, 1, EE_OWN_NUMBER, 0, TRUE);
 80031b0:	4891      	ldr	r0, [pc, #580]	; (80033f8 <StartDefaultTask+0x378>)
 80031b2:	2301      	movs	r3, #1
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	2300      	movs	r3, #0
 80031b8:	221a      	movs	r2, #26
 80031ba:	2101      	movs	r1, #1
 80031bc:	f003 feb6 	bl	8006f2c <Add_Message_to_Que>
  		}

  		if(prev_id_timer > 0) {
 80031c0:	4b8e      	ldr	r3, [pc, #568]	; (80033fc <StartDefaultTask+0x37c>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00b      	beq.n	80031e0 <StartDefaultTask+0x160>
  			prev_id_timer--;
 80031c8:	4b8c      	ldr	r3, [pc, #560]	; (80033fc <StartDefaultTask+0x37c>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	1e5a      	subs	r2, r3, #1
 80031ce:	4b8b      	ldr	r3, [pc, #556]	; (80033fc <StartDefaultTask+0x37c>)
 80031d0:	601a      	str	r2, [r3, #0]
  			if(prev_id_timer == 0) {
 80031d2:	4b8a      	ldr	r3, [pc, #552]	; (80033fc <StartDefaultTask+0x37c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d102      	bne.n	80031e0 <StartDefaultTask+0x160>
  				prev_id = 0;
 80031da:	4b89      	ldr	r3, [pc, #548]	; (8003400 <StartDefaultTask+0x380>)
 80031dc:	2200      	movs	r2, #0
 80031de:	701a      	strb	r2, [r3, #0]
  			}
  		}

  		if(Sample_Battery == 1) {
 80031e0:	4b88      	ldr	r3, [pc, #544]	; (8003404 <StartDefaultTask+0x384>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d000      	beq.n	80031ea <StartDefaultTask+0x16a>
 80031e8:	e0e0      	b.n	80033ac <StartDefaultTask+0x32c>
  			Sample_Battery = 0;
 80031ea:	4b86      	ldr	r3, [pc, #536]	; (8003404 <StartDefaultTask+0x384>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	701a      	strb	r2, [r3, #0]
  			if (HAL_ADC_Start(&hadc) != HAL_OK)
 80031f0:	4b85      	ldr	r3, [pc, #532]	; (8003408 <StartDefaultTask+0x388>)
 80031f2:	0018      	movs	r0, r3
 80031f4:	f006 fd14 	bl	8009c20 <HAL_ADC_Start>
  			{
  				/* Start Conversation Error */
  			}
  			if (HAL_ADC_PollForConversion(&hadc, 500) != HAL_OK)
 80031f8:	23fa      	movs	r3, #250	; 0xfa
 80031fa:	005a      	lsls	r2, r3, #1
 80031fc:	4b82      	ldr	r3, [pc, #520]	; (8003408 <StartDefaultTask+0x388>)
 80031fe:	0011      	movs	r1, r2
 8003200:	0018      	movs	r0, r3
 8003202:	f006 fdc1 	bl	8009d88 <HAL_ADC_PollForConversion>
 8003206:	1e03      	subs	r3, r0, #0
 8003208:	d004      	beq.n	8003214 <StartDefaultTask+0x194>
  			{
  				/* End Of Conversion flag not set on time */
  				ADCValue=-1;
 800320a:	4b80      	ldr	r3, [pc, #512]	; (800340c <StartDefaultTask+0x38c>)
 800320c:	2201      	movs	r2, #1
 800320e:	4252      	negs	r2, r2
 8003210:	601a      	str	r2, [r3, #0]
 8003212:	e019      	b.n	8003248 <StartDefaultTask+0x1c8>
  			}
  			else
  			{
  				/* ADC conversion completed */
  				/*##-5- Get the converted value of regular channel ########################*/
  				ADCValue = HAL_ADC_GetValue(&hadc);
 8003214:	4b7c      	ldr	r3, [pc, #496]	; (8003408 <StartDefaultTask+0x388>)
 8003216:	0018      	movs	r0, r3
 8003218:	f006 fe5e 	bl	8009ed8 <HAL_ADC_GetValue>
 800321c:	0003      	movs	r3, r0
 800321e:	001a      	movs	r2, r3
 8003220:	4b7a      	ldr	r3, [pc, #488]	; (800340c <StartDefaultTask+0x38c>)
 8003222:	601a      	str	r2, [r3, #0]
  				BatteryVoltage = (ADCValue * 0.00388);
 8003224:	4b79      	ldr	r3, [pc, #484]	; (800340c <StartDefaultTask+0x38c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	0018      	movs	r0, r3
 800322a:	f7ff f8b7 	bl	800239c <__aeabi_i2d>
 800322e:	4a78      	ldr	r2, [pc, #480]	; (8003410 <StartDefaultTask+0x390>)
 8003230:	4b78      	ldr	r3, [pc, #480]	; (8003414 <StartDefaultTask+0x394>)
 8003232:	f7fe fa61 	bl	80016f8 <__aeabi_dmul>
 8003236:	0002      	movs	r2, r0
 8003238:	000b      	movs	r3, r1
 800323a:	0010      	movs	r0, r2
 800323c:	0019      	movs	r1, r3
 800323e:	f7ff f94b 	bl	80024d8 <__aeabi_d2f>
 8003242:	1c02      	adds	r2, r0, #0
 8003244:	4b74      	ldr	r3, [pc, #464]	; (8003418 <StartDefaultTask+0x398>)
 8003246:	601a      	str	r2, [r3, #0]
  			}
  			HAL_ADC_Stop(&hadc);
 8003248:	4b6f      	ldr	r3, [pc, #444]	; (8003408 <StartDefaultTask+0x388>)
 800324a:	0018      	movs	r0, r3
 800324c:	f006 fd4c 	bl	8009ce8 <HAL_ADC_Stop>

  			if((BatteryVoltage <  Bat_Low_V)&&(Battery_Low == 0)) {
 8003250:	4b71      	ldr	r3, [pc, #452]	; (8003418 <StartDefaultTask+0x398>)
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	4b71      	ldr	r3, [pc, #452]	; (800341c <StartDefaultTask+0x39c>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	1c19      	adds	r1, r3, #0
 800325a:	1c10      	adds	r0, r2, #0
 800325c:	f7fd f936 	bl	80004cc <__aeabi_fcmplt>
 8003260:	1e03      	subs	r3, r0, #0
 8003262:	d026      	beq.n	80032b2 <StartDefaultTask+0x232>
 8003264:	4b6e      	ldr	r3, [pc, #440]	; (8003420 <StartDefaultTask+0x3a0>)
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d122      	bne.n	80032b2 <StartDefaultTask+0x232>
  				if(BatLow_Debounce > 10) {
 800326c:	4b6d      	ldr	r3, [pc, #436]	; (8003424 <StartDefaultTask+0x3a4>)
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	2b0a      	cmp	r3, #10
 8003272:	d917      	bls.n	80032a4 <StartDefaultTask+0x224>
  					Battery_Low = 1;
 8003274:	4b6a      	ldr	r3, [pc, #424]	; (8003420 <StartDefaultTask+0x3a0>)
 8003276:	2201      	movs	r2, #1
 8003278:	701a      	strb	r2, [r3, #0]
  					Battery_Ok = 0;
 800327a:	4b6b      	ldr	r3, [pc, #428]	; (8003428 <StartDefaultTask+0x3a8>)
 800327c:	2200      	movs	r2, #0
 800327e:	701a      	strb	r2, [r3, #0]

  					Message[0] = EE_BATTERY_LOW;
 8003280:	4b5d      	ldr	r3, [pc, #372]	; (80033f8 <StartDefaultTask+0x378>)
 8003282:	2209      	movs	r2, #9
 8003284:	701a      	strb	r2, [r3, #0]
  					Message[1] = EE_AT_MESSAGE;
 8003286:	4b5c      	ldr	r3, [pc, #368]	; (80033f8 <StartDefaultTask+0x378>)
 8003288:	2233      	movs	r2, #51	; 0x33
 800328a:	705a      	strb	r2, [r3, #1]
  					Message[2] = 0;
 800328c:	4b5a      	ldr	r3, [pc, #360]	; (80033f8 <StartDefaultTask+0x378>)
 800328e:	2200      	movs	r2, #0
 8003290:	709a      	strb	r2, [r3, #2]
  					Add_Message_to_Que(Message, 0, 0, 0, TRUE);
 8003292:	4859      	ldr	r0, [pc, #356]	; (80033f8 <StartDefaultTask+0x378>)
 8003294:	2301      	movs	r3, #1
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	2300      	movs	r3, #0
 800329a:	2200      	movs	r2, #0
 800329c:	2100      	movs	r1, #0
 800329e:	f003 fe45 	bl	8006f2c <Add_Message_to_Que>
  				if(BatLow_Debounce > 10) {
 80032a2:	e036      	b.n	8003312 <StartDefaultTask+0x292>

  				} else {
  					BatLow_Debounce++;
 80032a4:	4b5f      	ldr	r3, [pc, #380]	; (8003424 <StartDefaultTask+0x3a4>)
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	3301      	adds	r3, #1
 80032aa:	b2da      	uxtb	r2, r3
 80032ac:	4b5d      	ldr	r3, [pc, #372]	; (8003424 <StartDefaultTask+0x3a4>)
 80032ae:	701a      	strb	r2, [r3, #0]
  				if(BatLow_Debounce > 10) {
 80032b0:	e02f      	b.n	8003312 <StartDefaultTask+0x292>
  				}
  			} else if((BatteryVoltage >  Bat_Ok_V)&&(Battery_Ok == 0)) {
 80032b2:	4b59      	ldr	r3, [pc, #356]	; (8003418 <StartDefaultTask+0x398>)
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	4b5d      	ldr	r3, [pc, #372]	; (800342c <StartDefaultTask+0x3ac>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	1c19      	adds	r1, r3, #0
 80032bc:	1c10      	adds	r0, r2, #0
 80032be:	f7fd f919 	bl	80004f4 <__aeabi_fcmpgt>
 80032c2:	1e03      	subs	r3, r0, #0
 80032c4:	d025      	beq.n	8003312 <StartDefaultTask+0x292>
 80032c6:	4b58      	ldr	r3, [pc, #352]	; (8003428 <StartDefaultTask+0x3a8>)
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d121      	bne.n	8003312 <StartDefaultTask+0x292>
  				if(BatOk_Debounce > 10) {
 80032ce:	4b58      	ldr	r3, [pc, #352]	; (8003430 <StartDefaultTask+0x3b0>)
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	2b0a      	cmp	r3, #10
 80032d4:	d917      	bls.n	8003306 <StartDefaultTask+0x286>
  					Battery_Low = 0;
 80032d6:	4b52      	ldr	r3, [pc, #328]	; (8003420 <StartDefaultTask+0x3a0>)
 80032d8:	2200      	movs	r2, #0
 80032da:	701a      	strb	r2, [r3, #0]
  					Battery_Ok = 1;
 80032dc:	4b52      	ldr	r3, [pc, #328]	; (8003428 <StartDefaultTask+0x3a8>)
 80032de:	2201      	movs	r2, #1
 80032e0:	701a      	strb	r2, [r3, #0]

  					Message[0] = EE_BATTERY_OK;
 80032e2:	4b45      	ldr	r3, [pc, #276]	; (80033f8 <StartDefaultTask+0x378>)
 80032e4:	2208      	movs	r2, #8
 80032e6:	701a      	strb	r2, [r3, #0]
  					Message[1] = EE_AT_MESSAGE;
 80032e8:	4b43      	ldr	r3, [pc, #268]	; (80033f8 <StartDefaultTask+0x378>)
 80032ea:	2233      	movs	r2, #51	; 0x33
 80032ec:	705a      	strb	r2, [r3, #1]
  					Message[2] = 0;
 80032ee:	4b42      	ldr	r3, [pc, #264]	; (80033f8 <StartDefaultTask+0x378>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	709a      	strb	r2, [r3, #2]
  					Add_Message_to_Que(Message, 0, 0, 0, TRUE);
 80032f4:	4840      	ldr	r0, [pc, #256]	; (80033f8 <StartDefaultTask+0x378>)
 80032f6:	2301      	movs	r3, #1
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	2300      	movs	r3, #0
 80032fc:	2200      	movs	r2, #0
 80032fe:	2100      	movs	r1, #0
 8003300:	f003 fe14 	bl	8006f2c <Add_Message_to_Que>
 8003304:	e005      	b.n	8003312 <StartDefaultTask+0x292>

  				} else {
  					BatOk_Debounce++;
 8003306:	4b4a      	ldr	r3, [pc, #296]	; (8003430 <StartDefaultTask+0x3b0>)
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	3301      	adds	r3, #1
 800330c:	b2da      	uxtb	r2, r3
 800330e:	4b48      	ldr	r3, [pc, #288]	; (8003430 <StartDefaultTask+0x3b0>)
 8003310:	701a      	strb	r2, [r3, #0]
  				}
  			}

  			if(HAL_GPIO_ReadPin(GPIOB, MAINS_ONOFF_Pin) != Prev_Mains) {
 8003312:	4b48      	ldr	r3, [pc, #288]	; (8003434 <StartDefaultTask+0x3b4>)
 8003314:	2102      	movs	r1, #2
 8003316:	0018      	movs	r0, r3
 8003318:	f007 fd6c 	bl	800adf4 <HAL_GPIO_ReadPin>
 800331c:	0003      	movs	r3, r0
 800331e:	001a      	movs	r2, r3
 8003320:	4b45      	ldr	r3, [pc, #276]	; (8003438 <StartDefaultTask+0x3b8>)
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	429a      	cmp	r2, r3
 8003326:	d03e      	beq.n	80033a6 <StartDefaultTask+0x326>
  				if(Mains_Debounce < 200) {
 8003328:	4b44      	ldr	r3, [pc, #272]	; (800343c <StartDefaultTask+0x3bc>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	2bc7      	cmp	r3, #199	; 0xc7
 800332e:	d83d      	bhi.n	80033ac <StartDefaultTask+0x32c>
  					Mains_Debounce++;
 8003330:	4b42      	ldr	r3, [pc, #264]	; (800343c <StartDefaultTask+0x3bc>)
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	3301      	adds	r3, #1
 8003336:	b2da      	uxtb	r2, r3
 8003338:	4b40      	ldr	r3, [pc, #256]	; (800343c <StartDefaultTask+0x3bc>)
 800333a:	701a      	strb	r2, [r3, #0]
  					if(Mains_Debounce == 20) {
 800333c:	4b3f      	ldr	r3, [pc, #252]	; (800343c <StartDefaultTask+0x3bc>)
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2b14      	cmp	r3, #20
 8003342:	d133      	bne.n	80033ac <StartDefaultTask+0x32c>
  						Prev_Mains = HAL_GPIO_ReadPin(GPIOB, MAINS_ONOFF_Pin);
 8003344:	4b3b      	ldr	r3, [pc, #236]	; (8003434 <StartDefaultTask+0x3b4>)
 8003346:	2102      	movs	r1, #2
 8003348:	0018      	movs	r0, r3
 800334a:	f007 fd53 	bl	800adf4 <HAL_GPIO_ReadPin>
 800334e:	0003      	movs	r3, r0
 8003350:	001a      	movs	r2, r3
 8003352:	4b39      	ldr	r3, [pc, #228]	; (8003438 <StartDefaultTask+0x3b8>)
 8003354:	701a      	strb	r2, [r3, #0]
  						if(Prev_Mains == 1) {
 8003356:	4b38      	ldr	r3, [pc, #224]	; (8003438 <StartDefaultTask+0x3b8>)
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d111      	bne.n	8003382 <StartDefaultTask+0x302>
  							Message[0] = EE_MAINS_ON;
 800335e:	4b26      	ldr	r3, [pc, #152]	; (80033f8 <StartDefaultTask+0x378>)
 8003360:	2206      	movs	r2, #6
 8003362:	701a      	strb	r2, [r3, #0]
  							Message[1] = EE_AT_MESSAGE;
 8003364:	4b24      	ldr	r3, [pc, #144]	; (80033f8 <StartDefaultTask+0x378>)
 8003366:	2233      	movs	r2, #51	; 0x33
 8003368:	705a      	strb	r2, [r3, #1]
  							Message[2] = 0;
 800336a:	4b23      	ldr	r3, [pc, #140]	; (80033f8 <StartDefaultTask+0x378>)
 800336c:	2200      	movs	r2, #0
 800336e:	709a      	strb	r2, [r3, #2]
  							Add_Message_to_Que(Message, 0, 0, 0, TRUE);
 8003370:	4821      	ldr	r0, [pc, #132]	; (80033f8 <StartDefaultTask+0x378>)
 8003372:	2301      	movs	r3, #1
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	2300      	movs	r3, #0
 8003378:	2200      	movs	r2, #0
 800337a:	2100      	movs	r1, #0
 800337c:	f003 fdd6 	bl	8006f2c <Add_Message_to_Que>
 8003380:	e014      	b.n	80033ac <StartDefaultTask+0x32c>
  						} else {
  							Message[0] = EE_MAINS_OFF;
 8003382:	4b1d      	ldr	r3, [pc, #116]	; (80033f8 <StartDefaultTask+0x378>)
 8003384:	2207      	movs	r2, #7
 8003386:	701a      	strb	r2, [r3, #0]
  							Message[1] = EE_AT_MESSAGE;
 8003388:	4b1b      	ldr	r3, [pc, #108]	; (80033f8 <StartDefaultTask+0x378>)
 800338a:	2233      	movs	r2, #51	; 0x33
 800338c:	705a      	strb	r2, [r3, #1]
  							Message[2] = 0;
 800338e:	4b1a      	ldr	r3, [pc, #104]	; (80033f8 <StartDefaultTask+0x378>)
 8003390:	2200      	movs	r2, #0
 8003392:	709a      	strb	r2, [r3, #2]
  							Add_Message_to_Que(Message, 0, 0, 0, TRUE);
 8003394:	4818      	ldr	r0, [pc, #96]	; (80033f8 <StartDefaultTask+0x378>)
 8003396:	2301      	movs	r3, #1
 8003398:	9300      	str	r3, [sp, #0]
 800339a:	2300      	movs	r3, #0
 800339c:	2200      	movs	r2, #0
 800339e:	2100      	movs	r1, #0
 80033a0:	f003 fdc4 	bl	8006f2c <Add_Message_to_Que>
 80033a4:	e002      	b.n	80033ac <StartDefaultTask+0x32c>
  						}
  					}
  				}
  			} else {
  				Mains_Debounce = 0;
 80033a6:	4b25      	ldr	r3, [pc, #148]	; (800343c <StartDefaultTask+0x3bc>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	701a      	strb	r2, [r3, #0]
  			}
  		}

  		if(Erase_RF_Devices == 1) {
 80033ac:	4b24      	ldr	r3, [pc, #144]	; (8003440 <StartDefaultTask+0x3c0>)
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d000      	beq.n	80033b6 <StartDefaultTask+0x336>
 80033b4:	e07a      	b.n	80034ac <StartDefaultTask+0x42c>
  			Disable_LED = 1;
 80033b6:	4b23      	ldr	r3, [pc, #140]	; (8003444 <StartDefaultTask+0x3c4>)
 80033b8:	2201      	movs	r2, #1
 80033ba:	701a      	strb	r2, [r3, #0]
  			Clear_RF_Device_List();
 80033bc:	f000 ffe0 	bl	8004380 <Clear_RF_Device_List>
  			for(unsigned char u = 0; u < 20; u++) {
 80033c0:	2326      	movs	r3, #38	; 0x26
 80033c2:	18fb      	adds	r3, r7, r3
 80033c4:	2200      	movs	r2, #0
 80033c6:	701a      	strb	r2, [r3, #0]
 80033c8:	e062      	b.n	8003490 <StartDefaultTask+0x410>
 80033ca:	46c0      	nop			; (mov r8, r8)
 80033cc:	20001685 	.word	0x20001685
 80033d0:	2000079c 	.word	0x2000079c
 80033d4:	48000800 	.word	0x48000800
 80033d8:	200006b8 	.word	0x200006b8
 80033dc:	20000858 	.word	0x20000858
 80033e0:	2000134d 	.word	0x2000134d
 80033e4:	2000134e 	.word	0x2000134e
 80033e8:	200007ab 	.word	0x200007ab
 80033ec:	2000134f 	.word	0x2000134f
 80033f0:	200007ba 	.word	0x200007ba
 80033f4:	20001378 	.word	0x20001378
 80033f8:	200006c8 	.word	0x200006c8
 80033fc:	20001640 	.word	0x20001640
 8003400:	2000163f 	.word	0x2000163f
 8003404:	200006c1 	.word	0x200006c1
 8003408:	200007bc 	.word	0x200007bc
 800340c:	200006bc 	.word	0x200006bc
 8003410:	2378ab0d 	.word	0x2378ab0d
 8003414:	3f6fc8f3 	.word	0x3f6fc8f3
 8003418:	20002470 	.word	0x20002470
 800341c:	20001350 	.word	0x20001350
 8003420:	200006c2 	.word	0x200006c2
 8003424:	200006c4 	.word	0x200006c4
 8003428:	200006c3 	.word	0x200006c3
 800342c:	20001354 	.word	0x20001354
 8003430:	200006c5 	.word	0x200006c5
 8003434:	48000400 	.word	0x48000400
 8003438:	20000000 	.word	0x20000000
 800343c:	200006c6 	.word	0x200006c6
 8003440:	200006ba 	.word	0x200006ba
 8003444:	200007a9 	.word	0x200007a9

  				HAL_GPIO_WritePin(GPIOB, RFRX_LED_Pin, GPIO_PIN_SET);
 8003448:	2380      	movs	r3, #128	; 0x80
 800344a:	01db      	lsls	r3, r3, #7
 800344c:	4819      	ldr	r0, [pc, #100]	; (80034b4 <StartDefaultTask+0x434>)
 800344e:	2201      	movs	r2, #1
 8003450:	0019      	movs	r1, r3
 8003452:	f007 fcff 	bl	800ae54 <HAL_GPIO_WritePin>
  				Delay_LED();   Delay_LED();  	Delay_LED();   Delay_LED();
 8003456:	f000 ff74 	bl	8004342 <Delay_LED>
 800345a:	f000 ff72 	bl	8004342 <Delay_LED>
 800345e:	f000 ff70 	bl	8004342 <Delay_LED>
 8003462:	f000 ff6e 	bl	8004342 <Delay_LED>

  				HAL_GPIO_WritePin(GPIOB, RFRX_LED_Pin, GPIO_PIN_RESET);
 8003466:	2380      	movs	r3, #128	; 0x80
 8003468:	01db      	lsls	r3, r3, #7
 800346a:	4812      	ldr	r0, [pc, #72]	; (80034b4 <StartDefaultTask+0x434>)
 800346c:	2200      	movs	r2, #0
 800346e:	0019      	movs	r1, r3
 8003470:	f007 fcf0 	bl	800ae54 <HAL_GPIO_WritePin>
  				Delay_LED();  Delay_LED();  	Delay_LED();   Delay_LED();
 8003474:	f000 ff65 	bl	8004342 <Delay_LED>
 8003478:	f000 ff63 	bl	8004342 <Delay_LED>
 800347c:	f000 ff61 	bl	8004342 <Delay_LED>
 8003480:	f000 ff5f 	bl	8004342 <Delay_LED>
  			for(unsigned char u = 0; u < 20; u++) {
 8003484:	2126      	movs	r1, #38	; 0x26
 8003486:	187b      	adds	r3, r7, r1
 8003488:	781a      	ldrb	r2, [r3, #0]
 800348a:	187b      	adds	r3, r7, r1
 800348c:	3201      	adds	r2, #1
 800348e:	701a      	strb	r2, [r3, #0]
 8003490:	2326      	movs	r3, #38	; 0x26
 8003492:	18fb      	adds	r3, r7, r3
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	2b13      	cmp	r3, #19
 8003498:	d9d6      	bls.n	8003448 <StartDefaultTask+0x3c8>
  			}
  			Disable_LED = 0;
 800349a:	4b07      	ldr	r3, [pc, #28]	; (80034b8 <StartDefaultTask+0x438>)
 800349c:	2200      	movs	r2, #0
 800349e:	701a      	strb	r2, [r3, #0]
  			Erase_RF_Devices = 0;
 80034a0:	4b06      	ldr	r3, [pc, #24]	; (80034bc <StartDefaultTask+0x43c>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	701a      	strb	r2, [r3, #0]
  			LearnMode = 0;
 80034a6:	4b06      	ldr	r3, [pc, #24]	; (80034c0 <StartDefaultTask+0x440>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	701a      	strb	r2, [r3, #0]
  		}

  	    osDelay(20);
 80034ac:	2014      	movs	r0, #20
 80034ae:	f00d fbdf 	bl	8010c70 <osDelay>
    {
 80034b2:	e5f3      	b.n	800309c <StartDefaultTask+0x1c>
 80034b4:	48000400 	.word	0x48000400
 80034b8:	200007a9 	.word	0x200007a9
 80034bc:	200006ba 	.word	0x200006ba
 80034c0:	20001670 	.word	0x20001670

080034c4 <StartGSMTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGSMTask */
void StartGSMTask(void const * argument)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGSMTask */
  /* Infinite loop */
	 Reset_GSM_Flag = 1;
 80034cc:	4b2d      	ldr	r3, [pc, #180]	; (8003584 <StartGSMTask+0xc0>)
 80034ce:	2201      	movs	r2, #1
 80034d0:	701a      	strb	r2, [r3, #0]

	  /* Infinite loop */
	  for(;;)
	  {
		  HAL_IWDG_Refresh(&hiwdg);
 80034d2:	4b2d      	ldr	r3, [pc, #180]	; (8003588 <StartGSMTask+0xc4>)
 80034d4:	0018      	movs	r0, r3
 80034d6:	f009 fc1b 	bl	800cd10 <HAL_IWDG_Refresh>
		  	HAL_UART_Receive_IT(&huart2, U2Rx_data, 1);  // enable UART2 RX interrupt on RX
 80034da:	492c      	ldr	r1, [pc, #176]	; (800358c <StartGSMTask+0xc8>)
 80034dc:	4b2c      	ldr	r3, [pc, #176]	; (8003590 <StartGSMTask+0xcc>)
 80034de:	2201      	movs	r2, #1
 80034e0:	0018      	movs	r0, r3
 80034e2:	f00c f8c0 	bl	800f666 <HAL_UART_Receive_IT>

		  	if(Loopcount < 40) {
 80034e6:	4b2b      	ldr	r3, [pc, #172]	; (8003594 <StartGSMTask+0xd0>)
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	2b27      	cmp	r3, #39	; 0x27
 80034ec:	d806      	bhi.n	80034fc <StartGSMTask+0x38>
		  		Loopcount++;
 80034ee:	4b29      	ldr	r3, [pc, #164]	; (8003594 <StartGSMTask+0xd0>)
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	3301      	adds	r3, #1
 80034f4:	b2da      	uxtb	r2, r3
 80034f6:	4b27      	ldr	r3, [pc, #156]	; (8003594 <StartGSMTask+0xd0>)
 80034f8:	701a      	strb	r2, [r3, #0]
 80034fa:	e01b      	b.n	8003534 <StartGSMTask+0x70>
		  	} else {
		  		if(Check_GSM_Registered) {
 80034fc:	4b26      	ldr	r3, [pc, #152]	; (8003598 <StartGSMTask+0xd4>)
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d008      	beq.n	8003516 <StartGSMTask+0x52>
		  			Check_GSM_Registered = FALSE;
 8003504:	4b24      	ldr	r3, [pc, #144]	; (8003598 <StartGSMTask+0xd4>)
 8003506:	2200      	movs	r2, #0
 8003508:	701a      	strb	r2, [r3, #0]
		  			if(!SIM800H_Register_Status()) {
 800350a:	f005 f981 	bl	8008810 <SIM800H_Register_Status>
 800350e:	1e03      	subs	r3, r0, #0
 8003510:	d101      	bne.n	8003516 <StartGSMTask+0x52>
		  				SIM800H_Restart();
 8003512:	f005 f8ab 	bl	800866c <SIM800H_Restart>
		  			}
		  		}
		  		if(NO_SIM == 0 && Check_for_Messages()) {
 8003516:	4b21      	ldr	r3, [pc, #132]	; (800359c <StartGSMTask+0xd8>)
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d107      	bne.n	800352e <StartGSMTask+0x6a>
 800351e:	f004 f847 	bl	80075b0 <Check_for_Messages>
 8003522:	1e03      	subs	r3, r0, #0
 8003524:	d003      	beq.n	800352e <StartGSMTask+0x6a>
		  			Loopcount = 30;
 8003526:	4b1b      	ldr	r3, [pc, #108]	; (8003594 <StartGSMTask+0xd0>)
 8003528:	221e      	movs	r2, #30
 800352a:	701a      	strb	r2, [r3, #0]
 800352c:	e002      	b.n	8003534 <StartGSMTask+0x70>
		  		} else {
		  			Loopcount = 0;
 800352e:	4b19      	ldr	r3, [pc, #100]	; (8003594 <StartGSMTask+0xd0>)
 8003530:	2200      	movs	r2, #0
 8003532:	701a      	strb	r2, [r3, #0]
		  		}

		  	}

		  	if(Reset_GSM_Flag == TRUE) {
 8003534:	4b13      	ldr	r3, [pc, #76]	; (8003584 <StartGSMTask+0xc0>)
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d104      	bne.n	8003546 <StartGSMTask+0x82>
		  		Reset_GSM_Flag = FALSE;
 800353c:	4b11      	ldr	r3, [pc, #68]	; (8003584 <StartGSMTask+0xc0>)
 800353e:	2200      	movs	r2, #0
 8003540:	701a      	strb	r2, [r3, #0]

		  		SIM800H_Restart();
 8003542:	f005 f893 	bl	800866c <SIM800H_Restart>


		  	}

		  	if(Check_MessageQue() == TRUE) {   // Check if there is message to be send
 8003546:	f003 ff9f 	bl	8007488 <Check_MessageQue>
 800354a:	0003      	movs	r3, r0
 800354c:	2b01      	cmp	r3, #1
 800354e:	d114      	bne.n	800357a <StartGSMTask+0xb6>
		  		HAL_IWDG_Refresh(&hiwdg);
 8003550:	4b0d      	ldr	r3, [pc, #52]	; (8003588 <StartGSMTask+0xc4>)
 8003552:	0018      	movs	r0, r3
 8003554:	f009 fbdc 	bl	800cd10 <HAL_IWDG_Refresh>
		  		if(GPRS_Enabled == TRUE) {
 8003558:	4b11      	ldr	r3, [pc, #68]	; (80035a0 <StartGSMTask+0xdc>)
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d105      	bne.n	800356c <StartGSMTask+0xa8>
		  			if(GPRS_Barear_Started != TRUE) {
 8003560:	4b10      	ldr	r3, [pc, #64]	; (80035a4 <StartGSMTask+0xe0>)
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d001      	beq.n	800356c <StartGSMTask+0xa8>
		  				SIM800H_Restart();
 8003568:	f005 f880 	bl	800866c <SIM800H_Restart>
		  			}
		  		}
		  		running_seconds = 0;  // clear watchdog counter
 800356c:	4b0e      	ldr	r3, [pc, #56]	; (80035a8 <StartGSMTask+0xe4>)
 800356e:	2200      	movs	r2, #0
 8003570:	601a      	str	r2, [r3, #0]
		  		Send_Message(Out_Message);
 8003572:	4b0e      	ldr	r3, [pc, #56]	; (80035ac <StartGSMTask+0xe8>)
 8003574:	0018      	movs	r0, r3
 8003576:	f002 f8c1 	bl	80056fc <Send_Message>
		  	}

		  	osDelay(50);  // 100
 800357a:	2032      	movs	r0, #50	; 0x32
 800357c:	f00d fb78 	bl	8010c70 <osDelay>
		  HAL_IWDG_Refresh(&hiwdg);
 8003580:	e7a7      	b.n	80034d2 <StartGSMTask+0xe>
 8003582:	46c0      	nop			; (mov r8, r8)
 8003584:	20000792 	.word	0x20000792
 8003588:	20000848 	.word	0x20000848
 800358c:	20002268 	.word	0x20002268
 8003590:	20000908 	.word	0x20000908
 8003594:	20000790 	.word	0x20000790
 8003598:	20000791 	.word	0x20000791
 800359c:	20001694 	.word	0x20001694
 80035a0:	20000793 	.word	0x20000793
 80035a4:	20000794 	.word	0x20000794
 80035a8:	20000798 	.word	0x20000798
 80035ac:	20001760 	.word	0x20001760

080035b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a04      	ldr	r2, [pc, #16]	; (80035d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d101      	bne.n	80035c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80035c2:	f006 f8c7 	bl	8009754 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80035c6:	46c0      	nop			; (mov r8, r8)
 80035c8:	46bd      	mov	sp, r7
 80035ca:	b002      	add	sp, #8
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	46c0      	nop			; (mov r8, r8)
 80035d0:	40014800 	.word	0x40014800

080035d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035d8:	b672      	cpsid	i
}
 80035da:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80035dc:	e7fe      	b.n	80035dc <Error_Handler+0x8>

080035de <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b082      	sub	sp, #8
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
 80035e6:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80035e8:	46c0      	nop			; (mov r8, r8)
 80035ea:	46bd      	mov	sp, r7
 80035ec:	b002      	add	sp, #8
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035f6:	4b12      	ldr	r3, [pc, #72]	; (8003640 <HAL_MspInit+0x50>)
 80035f8:	699a      	ldr	r2, [r3, #24]
 80035fa:	4b11      	ldr	r3, [pc, #68]	; (8003640 <HAL_MspInit+0x50>)
 80035fc:	2101      	movs	r1, #1
 80035fe:	430a      	orrs	r2, r1
 8003600:	619a      	str	r2, [r3, #24]
 8003602:	4b0f      	ldr	r3, [pc, #60]	; (8003640 <HAL_MspInit+0x50>)
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	2201      	movs	r2, #1
 8003608:	4013      	ands	r3, r2
 800360a:	607b      	str	r3, [r7, #4]
 800360c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800360e:	4b0c      	ldr	r3, [pc, #48]	; (8003640 <HAL_MspInit+0x50>)
 8003610:	69da      	ldr	r2, [r3, #28]
 8003612:	4b0b      	ldr	r3, [pc, #44]	; (8003640 <HAL_MspInit+0x50>)
 8003614:	2180      	movs	r1, #128	; 0x80
 8003616:	0549      	lsls	r1, r1, #21
 8003618:	430a      	orrs	r2, r1
 800361a:	61da      	str	r2, [r3, #28]
 800361c:	4b08      	ldr	r3, [pc, #32]	; (8003640 <HAL_MspInit+0x50>)
 800361e:	69da      	ldr	r2, [r3, #28]
 8003620:	2380      	movs	r3, #128	; 0x80
 8003622:	055b      	lsls	r3, r3, #21
 8003624:	4013      	ands	r3, r2
 8003626:	603b      	str	r3, [r7, #0]
 8003628:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800362a:	2302      	movs	r3, #2
 800362c:	425b      	negs	r3, r3
 800362e:	2200      	movs	r2, #0
 8003630:	2103      	movs	r1, #3
 8003632:	0018      	movs	r0, r3
 8003634:	f007 f8e6 	bl	800a804 <HAL_NVIC_SetPriority>
  /* Peripheral interrupt init */

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003638:	46c0      	nop			; (mov r8, r8)
 800363a:	46bd      	mov	sp, r7
 800363c:	b002      	add	sp, #8
 800363e:	bd80      	pop	{r7, pc}
 8003640:	40021000 	.word	0x40021000

08003644 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003644:	b590      	push	{r4, r7, lr}
 8003646:	b08b      	sub	sp, #44	; 0x2c
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800364c:	2414      	movs	r4, #20
 800364e:	193b      	adds	r3, r7, r4
 8003650:	0018      	movs	r0, r3
 8003652:	2314      	movs	r3, #20
 8003654:	001a      	movs	r2, r3
 8003656:	2100      	movs	r1, #0
 8003658:	f00e fcd0 	bl	8011ffc <memset>
  if(hadc->Instance==ADC1)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a18      	ldr	r2, [pc, #96]	; (80036c4 <HAL_ADC_MspInit+0x80>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d12a      	bne.n	80036bc <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003666:	4b18      	ldr	r3, [pc, #96]	; (80036c8 <HAL_ADC_MspInit+0x84>)
 8003668:	699a      	ldr	r2, [r3, #24]
 800366a:	4b17      	ldr	r3, [pc, #92]	; (80036c8 <HAL_ADC_MspInit+0x84>)
 800366c:	2180      	movs	r1, #128	; 0x80
 800366e:	0089      	lsls	r1, r1, #2
 8003670:	430a      	orrs	r2, r1
 8003672:	619a      	str	r2, [r3, #24]
 8003674:	4b14      	ldr	r3, [pc, #80]	; (80036c8 <HAL_ADC_MspInit+0x84>)
 8003676:	699a      	ldr	r2, [r3, #24]
 8003678:	2380      	movs	r3, #128	; 0x80
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4013      	ands	r3, r2
 800367e:	613b      	str	r3, [r7, #16]
 8003680:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003682:	4b11      	ldr	r3, [pc, #68]	; (80036c8 <HAL_ADC_MspInit+0x84>)
 8003684:	695a      	ldr	r2, [r3, #20]
 8003686:	4b10      	ldr	r3, [pc, #64]	; (80036c8 <HAL_ADC_MspInit+0x84>)
 8003688:	2180      	movs	r1, #128	; 0x80
 800368a:	02c9      	lsls	r1, r1, #11
 800368c:	430a      	orrs	r2, r1
 800368e:	615a      	str	r2, [r3, #20]
 8003690:	4b0d      	ldr	r3, [pc, #52]	; (80036c8 <HAL_ADC_MspInit+0x84>)
 8003692:	695a      	ldr	r2, [r3, #20]
 8003694:	2380      	movs	r3, #128	; 0x80
 8003696:	02db      	lsls	r3, r3, #11
 8003698:	4013      	ands	r3, r2
 800369a:	60fb      	str	r3, [r7, #12]
 800369c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = VOLTAGE_SENSE_Pin;
 800369e:	193b      	adds	r3, r7, r4
 80036a0:	2201      	movs	r2, #1
 80036a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036a4:	193b      	adds	r3, r7, r4
 80036a6:	2203      	movs	r2, #3
 80036a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036aa:	193b      	adds	r3, r7, r4
 80036ac:	2200      	movs	r2, #0
 80036ae:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(VOLTAGE_SENSE_GPIO_Port, &GPIO_InitStruct);
 80036b0:	193b      	adds	r3, r7, r4
 80036b2:	4a06      	ldr	r2, [pc, #24]	; (80036cc <HAL_ADC_MspInit+0x88>)
 80036b4:	0019      	movs	r1, r3
 80036b6:	0010      	movs	r0, r2
 80036b8:	f007 f96a 	bl	800a990 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80036bc:	46c0      	nop			; (mov r8, r8)
 80036be:	46bd      	mov	sp, r7
 80036c0:	b00b      	add	sp, #44	; 0x2c
 80036c2:	bd90      	pop	{r4, r7, pc}
 80036c4:	40012400 	.word	0x40012400
 80036c8:	40021000 	.word	0x40021000
 80036cc:	48000400 	.word	0x48000400

080036d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80036d0:	b590      	push	{r4, r7, lr}
 80036d2:	b08b      	sub	sp, #44	; 0x2c
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036d8:	2414      	movs	r4, #20
 80036da:	193b      	adds	r3, r7, r4
 80036dc:	0018      	movs	r0, r3
 80036de:	2314      	movs	r3, #20
 80036e0:	001a      	movs	r2, r3
 80036e2:	2100      	movs	r1, #0
 80036e4:	f00e fc8a 	bl	8011ffc <memset>
  if(hi2c->Instance==I2C1)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a1c      	ldr	r2, [pc, #112]	; (8003760 <HAL_I2C_MspInit+0x90>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d131      	bne.n	8003756 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036f2:	4b1c      	ldr	r3, [pc, #112]	; (8003764 <HAL_I2C_MspInit+0x94>)
 80036f4:	695a      	ldr	r2, [r3, #20]
 80036f6:	4b1b      	ldr	r3, [pc, #108]	; (8003764 <HAL_I2C_MspInit+0x94>)
 80036f8:	2180      	movs	r1, #128	; 0x80
 80036fa:	02c9      	lsls	r1, r1, #11
 80036fc:	430a      	orrs	r2, r1
 80036fe:	615a      	str	r2, [r3, #20]
 8003700:	4b18      	ldr	r3, [pc, #96]	; (8003764 <HAL_I2C_MspInit+0x94>)
 8003702:	695a      	ldr	r2, [r3, #20]
 8003704:	2380      	movs	r3, #128	; 0x80
 8003706:	02db      	lsls	r3, r3, #11
 8003708:	4013      	ands	r3, r2
 800370a:	613b      	str	r3, [r7, #16]
 800370c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800370e:	0021      	movs	r1, r4
 8003710:	187b      	adds	r3, r7, r1
 8003712:	22c0      	movs	r2, #192	; 0xc0
 8003714:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003716:	187b      	adds	r3, r7, r1
 8003718:	2212      	movs	r2, #18
 800371a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800371c:	187b      	adds	r3, r7, r1
 800371e:	2201      	movs	r2, #1
 8003720:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003722:	187b      	adds	r3, r7, r1
 8003724:	2203      	movs	r2, #3
 8003726:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8003728:	187b      	adds	r3, r7, r1
 800372a:	2201      	movs	r2, #1
 800372c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800372e:	187b      	adds	r3, r7, r1
 8003730:	4a0d      	ldr	r2, [pc, #52]	; (8003768 <HAL_I2C_MspInit+0x98>)
 8003732:	0019      	movs	r1, r3
 8003734:	0010      	movs	r0, r2
 8003736:	f007 f92b 	bl	800a990 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800373a:	4b0a      	ldr	r3, [pc, #40]	; (8003764 <HAL_I2C_MspInit+0x94>)
 800373c:	69da      	ldr	r2, [r3, #28]
 800373e:	4b09      	ldr	r3, [pc, #36]	; (8003764 <HAL_I2C_MspInit+0x94>)
 8003740:	2180      	movs	r1, #128	; 0x80
 8003742:	0389      	lsls	r1, r1, #14
 8003744:	430a      	orrs	r2, r1
 8003746:	61da      	str	r2, [r3, #28]
 8003748:	4b06      	ldr	r3, [pc, #24]	; (8003764 <HAL_I2C_MspInit+0x94>)
 800374a:	69da      	ldr	r2, [r3, #28]
 800374c:	2380      	movs	r3, #128	; 0x80
 800374e:	039b      	lsls	r3, r3, #14
 8003750:	4013      	ands	r3, r2
 8003752:	60fb      	str	r3, [r7, #12]
 8003754:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003756:	46c0      	nop			; (mov r8, r8)
 8003758:	46bd      	mov	sp, r7
 800375a:	b00b      	add	sp, #44	; 0x2c
 800375c:	bd90      	pop	{r4, r7, pc}
 800375e:	46c0      	nop			; (mov r8, r8)
 8003760:	40005400 	.word	0x40005400
 8003764:	40021000 	.word	0x40021000
 8003768:	48000400 	.word	0x48000400

0800376c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a06      	ldr	r2, [pc, #24]	; (8003794 <HAL_RTC_MspInit+0x28>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d106      	bne.n	800378c <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800377e:	4b06      	ldr	r3, [pc, #24]	; (8003798 <HAL_RTC_MspInit+0x2c>)
 8003780:	6a1a      	ldr	r2, [r3, #32]
 8003782:	4b05      	ldr	r3, [pc, #20]	; (8003798 <HAL_RTC_MspInit+0x2c>)
 8003784:	2180      	movs	r1, #128	; 0x80
 8003786:	0209      	lsls	r1, r1, #8
 8003788:	430a      	orrs	r2, r1
 800378a:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800378c:	46c0      	nop			; (mov r8, r8)
 800378e:	46bd      	mov	sp, r7
 8003790:	b002      	add	sp, #8
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40002800 	.word	0x40002800
 8003798:	40021000 	.word	0x40021000

0800379c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a12      	ldr	r2, [pc, #72]	; (80037f4 <HAL_TIM_Base_MspInit+0x58>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d10c      	bne.n	80037c8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80037ae:	4b12      	ldr	r3, [pc, #72]	; (80037f8 <HAL_TIM_Base_MspInit+0x5c>)
 80037b0:	69da      	ldr	r2, [r3, #28]
 80037b2:	4b11      	ldr	r3, [pc, #68]	; (80037f8 <HAL_TIM_Base_MspInit+0x5c>)
 80037b4:	2110      	movs	r1, #16
 80037b6:	430a      	orrs	r2, r1
 80037b8:	61da      	str	r2, [r3, #28]
 80037ba:	4b0f      	ldr	r3, [pc, #60]	; (80037f8 <HAL_TIM_Base_MspInit+0x5c>)
 80037bc:	69db      	ldr	r3, [r3, #28]
 80037be:	2210      	movs	r2, #16
 80037c0:	4013      	ands	r3, r2
 80037c2:	60fb      	str	r3, [r7, #12]
 80037c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80037c6:	e010      	b.n	80037ea <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM7)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a0b      	ldr	r2, [pc, #44]	; (80037fc <HAL_TIM_Base_MspInit+0x60>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d10b      	bne.n	80037ea <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80037d2:	4b09      	ldr	r3, [pc, #36]	; (80037f8 <HAL_TIM_Base_MspInit+0x5c>)
 80037d4:	69da      	ldr	r2, [r3, #28]
 80037d6:	4b08      	ldr	r3, [pc, #32]	; (80037f8 <HAL_TIM_Base_MspInit+0x5c>)
 80037d8:	2120      	movs	r1, #32
 80037da:	430a      	orrs	r2, r1
 80037dc:	61da      	str	r2, [r3, #28]
 80037de:	4b06      	ldr	r3, [pc, #24]	; (80037f8 <HAL_TIM_Base_MspInit+0x5c>)
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	2220      	movs	r2, #32
 80037e4:	4013      	ands	r3, r2
 80037e6:	60bb      	str	r3, [r7, #8]
 80037e8:	68bb      	ldr	r3, [r7, #8]
}
 80037ea:	46c0      	nop			; (mov r8, r8)
 80037ec:	46bd      	mov	sp, r7
 80037ee:	b004      	add	sp, #16
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	46c0      	nop			; (mov r8, r8)
 80037f4:	40001000 	.word	0x40001000
 80037f8:	40021000 	.word	0x40021000
 80037fc:	40001400 	.word	0x40001400

08003800 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003800:	b590      	push	{r4, r7, lr}
 8003802:	b08b      	sub	sp, #44	; 0x2c
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003808:	2414      	movs	r4, #20
 800380a:	193b      	adds	r3, r7, r4
 800380c:	0018      	movs	r0, r3
 800380e:	2314      	movs	r3, #20
 8003810:	001a      	movs	r2, r3
 8003812:	2100      	movs	r1, #0
 8003814:	f00e fbf2 	bl	8011ffc <memset>
  if(huart->Instance==USART2)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a1c      	ldr	r2, [pc, #112]	; (8003890 <HAL_UART_MspInit+0x90>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d132      	bne.n	8003888 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003822:	4b1c      	ldr	r3, [pc, #112]	; (8003894 <HAL_UART_MspInit+0x94>)
 8003824:	69da      	ldr	r2, [r3, #28]
 8003826:	4b1b      	ldr	r3, [pc, #108]	; (8003894 <HAL_UART_MspInit+0x94>)
 8003828:	2180      	movs	r1, #128	; 0x80
 800382a:	0289      	lsls	r1, r1, #10
 800382c:	430a      	orrs	r2, r1
 800382e:	61da      	str	r2, [r3, #28]
 8003830:	4b18      	ldr	r3, [pc, #96]	; (8003894 <HAL_UART_MspInit+0x94>)
 8003832:	69da      	ldr	r2, [r3, #28]
 8003834:	2380      	movs	r3, #128	; 0x80
 8003836:	029b      	lsls	r3, r3, #10
 8003838:	4013      	ands	r3, r2
 800383a:	613b      	str	r3, [r7, #16]
 800383c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800383e:	4b15      	ldr	r3, [pc, #84]	; (8003894 <HAL_UART_MspInit+0x94>)
 8003840:	695a      	ldr	r2, [r3, #20]
 8003842:	4b14      	ldr	r3, [pc, #80]	; (8003894 <HAL_UART_MspInit+0x94>)
 8003844:	2180      	movs	r1, #128	; 0x80
 8003846:	0289      	lsls	r1, r1, #10
 8003848:	430a      	orrs	r2, r1
 800384a:	615a      	str	r2, [r3, #20]
 800384c:	4b11      	ldr	r3, [pc, #68]	; (8003894 <HAL_UART_MspInit+0x94>)
 800384e:	695a      	ldr	r2, [r3, #20]
 8003850:	2380      	movs	r3, #128	; 0x80
 8003852:	029b      	lsls	r3, r3, #10
 8003854:	4013      	ands	r3, r2
 8003856:	60fb      	str	r3, [r7, #12]
 8003858:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GSM_TX_Pin|GSM_RX_Pin;
 800385a:	0021      	movs	r1, r4
 800385c:	187b      	adds	r3, r7, r1
 800385e:	220c      	movs	r2, #12
 8003860:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003862:	187b      	adds	r3, r7, r1
 8003864:	2202      	movs	r2, #2
 8003866:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003868:	187b      	adds	r3, r7, r1
 800386a:	2200      	movs	r2, #0
 800386c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800386e:	187b      	adds	r3, r7, r1
 8003870:	2203      	movs	r2, #3
 8003872:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003874:	187b      	adds	r3, r7, r1
 8003876:	2201      	movs	r2, #1
 8003878:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800387a:	187a      	adds	r2, r7, r1
 800387c:	2390      	movs	r3, #144	; 0x90
 800387e:	05db      	lsls	r3, r3, #23
 8003880:	0011      	movs	r1, r2
 8003882:	0018      	movs	r0, r3
 8003884:	f007 f884 	bl	800a990 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003888:	46c0      	nop			; (mov r8, r8)
 800388a:	46bd      	mov	sp, r7
 800388c:	b00b      	add	sp, #44	; 0x2c
 800388e:	bd90      	pop	{r4, r7, pc}
 8003890:	40004400 	.word	0x40004400
 8003894:	40021000 	.word	0x40021000

08003898 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003898:	b5b0      	push	{r4, r5, r7, lr}
 800389a:	b08c      	sub	sp, #48	; 0x30
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80038a0:	2300      	movs	r3, #0
 80038a2:	627b      	str	r3, [r7, #36]	; 0x24

  uint32_t              uwPrescalerValue = 0U;
 80038a4:	2300      	movs	r3, #0
 80038a6:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80038a8:	4b38      	ldr	r3, [pc, #224]	; (800398c <HAL_InitTick+0xf4>)
 80038aa:	699a      	ldr	r2, [r3, #24]
 80038ac:	4b37      	ldr	r3, [pc, #220]	; (800398c <HAL_InitTick+0xf4>)
 80038ae:	2180      	movs	r1, #128	; 0x80
 80038b0:	02c9      	lsls	r1, r1, #11
 80038b2:	430a      	orrs	r2, r1
 80038b4:	619a      	str	r2, [r3, #24]
 80038b6:	4b35      	ldr	r3, [pc, #212]	; (800398c <HAL_InitTick+0xf4>)
 80038b8:	699a      	ldr	r2, [r3, #24]
 80038ba:	2380      	movs	r3, #128	; 0x80
 80038bc:	02db      	lsls	r3, r3, #11
 80038be:	4013      	ands	r3, r2
 80038c0:	60bb      	str	r3, [r7, #8]
 80038c2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80038c4:	230c      	movs	r3, #12
 80038c6:	18fa      	adds	r2, r7, r3
 80038c8:	2410      	movs	r4, #16
 80038ca:	193b      	adds	r3, r7, r4
 80038cc:	0011      	movs	r1, r2
 80038ce:	0018      	movs	r0, r3
 80038d0:	f00a f8ae 	bl	800da30 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80038d4:	193b      	adds	r3, r7, r4
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM17 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d104      	bne.n	80038ea <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80038e0:	f00a f890 	bl	800da04 <HAL_RCC_GetPCLK1Freq>
 80038e4:	0003      	movs	r3, r0
 80038e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038e8:	e004      	b.n	80038f4 <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80038ea:	f00a f88b 	bl	800da04 <HAL_RCC_GetPCLK1Freq>
 80038ee:	0003      	movs	r3, r0
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80038f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f6:	4926      	ldr	r1, [pc, #152]	; (8003990 <HAL_InitTick+0xf8>)
 80038f8:	0018      	movs	r0, r3
 80038fa:	f7fc fc21 	bl	8000140 <__udivsi3>
 80038fe:	0003      	movs	r3, r0
 8003900:	3b01      	subs	r3, #1
 8003902:	623b      	str	r3, [r7, #32]

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8003904:	4b23      	ldr	r3, [pc, #140]	; (8003994 <HAL_InitTick+0xfc>)
 8003906:	4a24      	ldr	r2, [pc, #144]	; (8003998 <HAL_InitTick+0x100>)
 8003908:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 800390a:	4b22      	ldr	r3, [pc, #136]	; (8003994 <HAL_InitTick+0xfc>)
 800390c:	4a23      	ldr	r2, [pc, #140]	; (800399c <HAL_InitTick+0x104>)
 800390e:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8003910:	4b20      	ldr	r3, [pc, #128]	; (8003994 <HAL_InitTick+0xfc>)
 8003912:	6a3a      	ldr	r2, [r7, #32]
 8003914:	605a      	str	r2, [r3, #4]
  htim17.Init.ClockDivision = 0;
 8003916:	4b1f      	ldr	r3, [pc, #124]	; (8003994 <HAL_InitTick+0xfc>)
 8003918:	2200      	movs	r2, #0
 800391a:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800391c:	4b1d      	ldr	r3, [pc, #116]	; (8003994 <HAL_InitTick+0xfc>)
 800391e:	2200      	movs	r2, #0
 8003920:	609a      	str	r2, [r3, #8]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003922:	4b1c      	ldr	r3, [pc, #112]	; (8003994 <HAL_InitTick+0xfc>)
 8003924:	2200      	movs	r2, #0
 8003926:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim17);
 8003928:	252b      	movs	r5, #43	; 0x2b
 800392a:	197c      	adds	r4, r7, r5
 800392c:	4b19      	ldr	r3, [pc, #100]	; (8003994 <HAL_InitTick+0xfc>)
 800392e:	0018      	movs	r0, r3
 8003930:	f00b fa3e 	bl	800edb0 <HAL_TIM_Base_Init>
 8003934:	0003      	movs	r3, r0
 8003936:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8003938:	197b      	adds	r3, r7, r5
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d11e      	bne.n	800397e <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8003940:	197c      	adds	r4, r7, r5
 8003942:	4b14      	ldr	r3, [pc, #80]	; (8003994 <HAL_InitTick+0xfc>)
 8003944:	0018      	movs	r0, r3
 8003946:	f00b fb07 	bl	800ef58 <HAL_TIM_Base_Start_IT>
 800394a:	0003      	movs	r3, r0
 800394c:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 800394e:	197b      	adds	r3, r7, r5
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d113      	bne.n	800397e <HAL_InitTick+0xe6>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8003956:	2016      	movs	r0, #22
 8003958:	f006 ff74 	bl	800a844 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b03      	cmp	r3, #3
 8003960:	d809      	bhi.n	8003976 <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	0019      	movs	r1, r3
 8003968:	2016      	movs	r0, #22
 800396a:	f006 ff4b 	bl	800a804 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800396e:	4b0c      	ldr	r3, [pc, #48]	; (80039a0 <HAL_InitTick+0x108>)
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	e003      	b.n	800397e <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 8003976:	232b      	movs	r3, #43	; 0x2b
 8003978:	18fb      	adds	r3, r7, r3
 800397a:	2201      	movs	r2, #1
 800397c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 800397e:	232b      	movs	r3, #43	; 0x2b
 8003980:	18fb      	adds	r3, r7, r3
 8003982:	781b      	ldrb	r3, [r3, #0]
}
 8003984:	0018      	movs	r0, r3
 8003986:	46bd      	mov	sp, r7
 8003988:	b00c      	add	sp, #48	; 0x30
 800398a:	bdb0      	pop	{r4, r5, r7, pc}
 800398c:	40021000 	.word	0x40021000
 8003990:	000f4240 	.word	0x000f4240
 8003994:	200012fc 	.word	0x200012fc
 8003998:	40014800 	.word	0x40014800
 800399c:	000003e7 	.word	0x000003e7
 80039a0:	20000008 	.word	0x20000008

080039a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80039a8:	e7fe      	b.n	80039a8 <NMI_Handler+0x4>

080039aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039ae:	e7fe      	b.n	80039ae <HardFault_Handler+0x4>

080039b0 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20.
  */
void RTC_IRQHandler(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80039b4:	4b03      	ldr	r3, [pc, #12]	; (80039c4 <RTC_IRQHandler+0x14>)
 80039b6:	0018      	movs	r0, r3
 80039b8:	f00b f934 	bl	800ec24 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 80039bc:	46c0      	nop			; (mov r8, r8)
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	46c0      	nop			; (mov r8, r8)
 80039c4:	20000858 	.word	0x20000858

080039c8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80039cc:	46c0      	nop			; (mov r8, r8)
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
	...

080039d4 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_FLAG(RFRX_IN_Pin)) {
 80039d8:	4b1c      	ldr	r3, [pc, #112]	; (8003a4c <EXTI4_15_IRQHandler+0x78>)
 80039da:	695a      	ldr	r2, [r3, #20]
 80039dc:	2380      	movs	r3, #128	; 0x80
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	4013      	ands	r3, r2
 80039e2:	d001      	beq.n	80039e8 <EXTI4_15_IRQHandler+0x14>
			RX_Pin_Int();
 80039e4:	f001 fc24 	bl	8005230 <RX_Pin_Int>

			//HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
		}
		if(__HAL_GPIO_EXTI_GET_FLAG(RFRX_LEARN_BUTTON_Pin)) {
 80039e8:	4b18      	ldr	r3, [pc, #96]	; (8003a4c <EXTI4_15_IRQHandler+0x78>)
 80039ea:	695a      	ldr	r2, [r3, #20]
 80039ec:	2380      	movs	r3, #128	; 0x80
 80039ee:	021b      	lsls	r3, r3, #8
 80039f0:	4013      	ands	r3, r2
 80039f2:	d01e      	beq.n	8003a32 <EXTI4_15_IRQHandler+0x5e>
			// Learn Button
			if(HAL_GPIO_ReadPin(RFRX_LEARN_BUTTON_GPIO_Port, RFRX_LEARN_BUTTON_Pin) == 1) {
 80039f4:	2380      	movs	r3, #128	; 0x80
 80039f6:	021b      	lsls	r3, r3, #8
 80039f8:	4a15      	ldr	r2, [pc, #84]	; (8003a50 <EXTI4_15_IRQHandler+0x7c>)
 80039fa:	0019      	movs	r1, r3
 80039fc:	0010      	movs	r0, r2
 80039fe:	f007 f9f9 	bl	800adf4 <HAL_GPIO_ReadPin>
 8003a02:	0003      	movs	r3, r0
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d111      	bne.n	8003a2c <EXTI4_15_IRQHandler+0x58>
				if(Learn_Button_Time < 2) {
 8003a08:	4b12      	ldr	r3, [pc, #72]	; (8003a54 <EXTI4_15_IRQHandler+0x80>)
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d810      	bhi.n	8003a32 <EXTI4_15_IRQHandler+0x5e>
					HAL_GPIO_WritePin(GPIOB, RFRX_LED_Pin, GPIO_PIN_SET);
 8003a10:	2380      	movs	r3, #128	; 0x80
 8003a12:	01db      	lsls	r3, r3, #7
 8003a14:	480e      	ldr	r0, [pc, #56]	; (8003a50 <EXTI4_15_IRQHandler+0x7c>)
 8003a16:	2201      	movs	r2, #1
 8003a18:	0019      	movs	r1, r3
 8003a1a:	f007 fa1b 	bl	800ae54 <HAL_GPIO_WritePin>
					LearnMode = 1;
 8003a1e:	4b0e      	ldr	r3, [pc, #56]	; (8003a58 <EXTI4_15_IRQHandler+0x84>)
 8003a20:	2201      	movs	r2, #1
 8003a22:	701a      	strb	r2, [r3, #0]
					LearnTimeout = 10;
 8003a24:	4b0d      	ldr	r3, [pc, #52]	; (8003a5c <EXTI4_15_IRQHandler+0x88>)
 8003a26:	220a      	movs	r2, #10
 8003a28:	701a      	strb	r2, [r3, #0]
 8003a2a:	e002      	b.n	8003a32 <EXTI4_15_IRQHandler+0x5e>
				}
			} else {
				Learn_Button_Time = 0;
 8003a2c:	4b09      	ldr	r3, [pc, #36]	; (8003a54 <EXTI4_15_IRQHandler+0x80>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	701a      	strb	r2, [r3, #0]
			}
			//HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
		}
  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RFRX_IN_Pin);
 8003a32:	2380      	movs	r3, #128	; 0x80
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	0018      	movs	r0, r3
 8003a38:	f007 fa7a 	bl	800af30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RFRX_LEARN_BUTTON_Pin);
 8003a3c:	2380      	movs	r3, #128	; 0x80
 8003a3e:	021b      	lsls	r3, r3, #8
 8003a40:	0018      	movs	r0, r3
 8003a42:	f007 fa75 	bl	800af30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003a46:	46c0      	nop			; (mov r8, r8)
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	40010400 	.word	0x40010400
 8003a50:	48000400 	.word	0x48000400
 8003a54:	200007b9 	.word	0x200007b9
 8003a58:	20001670 	.word	0x20001670
 8003a5c:	20001671 	.word	0x20001671

08003a60 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC interrupt.
  */
void ADC1_IRQHandler(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8003a64:	4b03      	ldr	r3, [pc, #12]	; (8003a74 <ADC1_IRQHandler+0x14>)
 8003a66:	0018      	movs	r0, r3
 8003a68:	f006 fa52 	bl	8009f10 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8003a6c:	46c0      	nop			; (mov r8, r8)
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	46c0      	nop			; (mov r8, r8)
 8003a74:	200007bc 	.word	0x200007bc

08003a78 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */
	RF_PacketTMR_Int();
 8003a7c:	f001 fbac 	bl	80051d8 <RF_PacketTMR_Int>
  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003a80:	4b03      	ldr	r3, [pc, #12]	; (8003a90 <TIM6_IRQHandler+0x18>)
 8003a82:	0018      	movs	r0, r3
 8003a84:	f00b faf0 	bl	800f068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8003a88:	46c0      	nop			; (mov r8, r8)
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	46c0      	nop			; (mov r8, r8)
 8003a90:	20000878 	.word	0x20000878

08003a94 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	BuzzerTMR_Int();
 8003a98:	f001 fb2a 	bl	80050f0 <BuzzerTMR_Int>
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003a9c:	4b03      	ldr	r3, [pc, #12]	; (8003aac <TIM7_IRQHandler+0x18>)
 8003a9e:	0018      	movs	r0, r3
 8003aa0:	f00b fae2 	bl	800f068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003aa4:	46c0      	nop			; (mov r8, r8)
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	46c0      	nop			; (mov r8, r8)
 8003aac:	200008c0 	.word	0x200008c0

08003ab0 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8003ab4:	4b03      	ldr	r3, [pc, #12]	; (8003ac4 <TIM17_IRQHandler+0x14>)
 8003ab6:	0018      	movs	r0, r3
 8003ab8:	f00b fad6 	bl	800f068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8003abc:	46c0      	nop			; (mov r8, r8)
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	46c0      	nop			; (mov r8, r8)
 8003ac4:	200012fc 	.word	0x200012fc

08003ac8 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8003acc:	4b09      	ldr	r3, [pc, #36]	; (8003af4 <I2C1_IRQHandler+0x2c>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	699a      	ldr	r2, [r3, #24]
 8003ad2:	23e0      	movs	r3, #224	; 0xe0
 8003ad4:	00db      	lsls	r3, r3, #3
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	d004      	beq.n	8003ae4 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8003ada:	4b06      	ldr	r3, [pc, #24]	; (8003af4 <I2C1_IRQHandler+0x2c>)
 8003adc:	0018      	movs	r0, r3
 8003ade:	f007 ff3b 	bl	800b958 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8003ae2:	e003      	b.n	8003aec <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8003ae4:	4b03      	ldr	r3, [pc, #12]	; (8003af4 <I2C1_IRQHandler+0x2c>)
 8003ae6:	0018      	movs	r0, r3
 8003ae8:	f007 ff1c 	bl	800b924 <HAL_I2C_EV_IRQHandler>
}
 8003aec:	46c0      	nop			; (mov r8, r8)
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	46c0      	nop			; (mov r8, r8)
 8003af4:	200007fc 	.word	0x200007fc

08003af8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003afc:	4b03      	ldr	r3, [pc, #12]	; (8003b0c <USART2_IRQHandler+0x14>)
 8003afe:	0018      	movs	r0, r3
 8003b00:	f00b fe12 	bl	800f728 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003b04:	46c0      	nop			; (mov r8, r8)
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	46c0      	nop			; (mov r8, r8)
 8003b0c:	20000908 	.word	0x20000908

08003b10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
	return 1;
 8003b14:	2301      	movs	r3, #1
}
 8003b16:	0018      	movs	r0, r3
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <_kill>:

int _kill(int pid, int sig)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003b26:	f00e f915 	bl	8011d54 <__errno>
 8003b2a:	0003      	movs	r3, r0
 8003b2c:	2216      	movs	r2, #22
 8003b2e:	601a      	str	r2, [r3, #0]
	return -1;
 8003b30:	2301      	movs	r3, #1
 8003b32:	425b      	negs	r3, r3
}
 8003b34:	0018      	movs	r0, r3
 8003b36:	46bd      	mov	sp, r7
 8003b38:	b002      	add	sp, #8
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <_exit>:

void _exit (int status)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003b44:	2301      	movs	r3, #1
 8003b46:	425a      	negs	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	0011      	movs	r1, r2
 8003b4c:	0018      	movs	r0, r3
 8003b4e:	f7ff ffe5 	bl	8003b1c <_kill>
	while (1) {}		/* Make sure we hang here */
 8003b52:	e7fe      	b.n	8003b52 <_exit+0x16>

08003b54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b60:	2300      	movs	r3, #0
 8003b62:	617b      	str	r3, [r7, #20]
 8003b64:	e00a      	b.n	8003b7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003b66:	e000      	b.n	8003b6a <_read+0x16>
 8003b68:	bf00      	nop
 8003b6a:	0001      	movs	r1, r0
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	1c5a      	adds	r2, r3, #1
 8003b70:	60ba      	str	r2, [r7, #8]
 8003b72:	b2ca      	uxtb	r2, r1
 8003b74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	3301      	adds	r3, #1
 8003b7a:	617b      	str	r3, [r7, #20]
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	dbf0      	blt.n	8003b66 <_read+0x12>
	}

return len;
 8003b84:	687b      	ldr	r3, [r7, #4]
}
 8003b86:	0018      	movs	r0, r3
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	b006      	add	sp, #24
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b086      	sub	sp, #24
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	60f8      	str	r0, [r7, #12]
 8003b96:	60b9      	str	r1, [r7, #8]
 8003b98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	617b      	str	r3, [r7, #20]
 8003b9e:	e009      	b.n	8003bb4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	1c5a      	adds	r2, r3, #1
 8003ba4:	60ba      	str	r2, [r7, #8]
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	0018      	movs	r0, r3
 8003baa:	e000      	b.n	8003bae <_write+0x20>
 8003bac:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	617b      	str	r3, [r7, #20]
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	dbf1      	blt.n	8003ba0 <_write+0x12>
	}
	return len;
 8003bbc:	687b      	ldr	r3, [r7, #4]
}
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	b006      	add	sp, #24
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <_close>:

int _close(int file)
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b082      	sub	sp, #8
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
	return -1;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	425b      	negs	r3, r3
}
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	b002      	add	sp, #8
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b082      	sub	sp, #8
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
 8003be2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	2280      	movs	r2, #128	; 0x80
 8003be8:	0192      	lsls	r2, r2, #6
 8003bea:	605a      	str	r2, [r3, #4]
	return 0;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	0018      	movs	r0, r3
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	b002      	add	sp, #8
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <_isatty>:

int _isatty(int file)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b082      	sub	sp, #8
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
	return 1;
 8003bfe:	2301      	movs	r3, #1
}
 8003c00:	0018      	movs	r0, r3
 8003c02:	46bd      	mov	sp, r7
 8003c04:	b002      	add	sp, #8
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
	return 0;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	0018      	movs	r0, r3
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	b004      	add	sp, #16
 8003c1c:	bd80      	pop	{r7, pc}
	...

08003c20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c28:	4a14      	ldr	r2, [pc, #80]	; (8003c7c <_sbrk+0x5c>)
 8003c2a:	4b15      	ldr	r3, [pc, #84]	; (8003c80 <_sbrk+0x60>)
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c34:	4b13      	ldr	r3, [pc, #76]	; (8003c84 <_sbrk+0x64>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d102      	bne.n	8003c42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c3c:	4b11      	ldr	r3, [pc, #68]	; (8003c84 <_sbrk+0x64>)
 8003c3e:	4a12      	ldr	r2, [pc, #72]	; (8003c88 <_sbrk+0x68>)
 8003c40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c42:	4b10      	ldr	r3, [pc, #64]	; (8003c84 <_sbrk+0x64>)
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	18d3      	adds	r3, r2, r3
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d207      	bcs.n	8003c60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c50:	f00e f880 	bl	8011d54 <__errno>
 8003c54:	0003      	movs	r3, r0
 8003c56:	220c      	movs	r2, #12
 8003c58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	425b      	negs	r3, r3
 8003c5e:	e009      	b.n	8003c74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c60:	4b08      	ldr	r3, [pc, #32]	; (8003c84 <_sbrk+0x64>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c66:	4b07      	ldr	r3, [pc, #28]	; (8003c84 <_sbrk+0x64>)
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	18d2      	adds	r2, r2, r3
 8003c6e:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <_sbrk+0x64>)
 8003c70:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003c72:	68fb      	ldr	r3, [r7, #12]
}
 8003c74:	0018      	movs	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	b006      	add	sp, #24
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	20004000 	.word	0x20004000
 8003c80:	00000400 	.word	0x00000400
 8003c84:	20001344 	.word	0x20001344
 8003c88:	20002da0 	.word	0x20002da0

08003c8c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003c90:	46c0      	nop			; (mov r8, r8)
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
	...

08003c98 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003c98:	480d      	ldr	r0, [pc, #52]	; (8003cd0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003c9a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c9c:	480d      	ldr	r0, [pc, #52]	; (8003cd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003c9e:	490e      	ldr	r1, [pc, #56]	; (8003cd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ca0:	4a0e      	ldr	r2, [pc, #56]	; (8003cdc <LoopForever+0xe>)
  movs r3, #0
 8003ca2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ca4:	e002      	b.n	8003cac <LoopCopyDataInit>

08003ca6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ca6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ca8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003caa:	3304      	adds	r3, #4

08003cac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003cac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003cae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003cb0:	d3f9      	bcc.n	8003ca6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003cb2:	4a0b      	ldr	r2, [pc, #44]	; (8003ce0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003cb4:	4c0b      	ldr	r4, [pc, #44]	; (8003ce4 <LoopForever+0x16>)
  movs r3, #0
 8003cb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003cb8:	e001      	b.n	8003cbe <LoopFillZerobss>

08003cba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003cba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003cbc:	3204      	adds	r2, #4

08003cbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003cbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003cc0:	d3fb      	bcc.n	8003cba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003cc2:	f7ff ffe3 	bl	8003c8c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003cc6:	f00e f94d 	bl	8011f64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003cca:	f7fe fcd5 	bl	8002678 <main>

08003cce <LoopForever>:

LoopForever:
    b LoopForever
 8003cce:	e7fe      	b.n	8003cce <LoopForever>
  ldr   r0, =_estack
 8003cd0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8003cd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003cd8:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8003cdc:	08017688 	.word	0x08017688
  ldr r2, =_sbss
 8003ce0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003ce4:	20002d9c 	.word	0x20002d9c

08003ce8 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003ce8:	e7fe      	b.n	8003ce8 <DMA1_Channel1_IRQHandler>
	...

08003cec <Update_Mem_Values>:
void IIC_EEPROM_Read_Page(unsigned long Address, unsigned char length);



void Update_Mem_Values(void)
{  char * pointer;
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
   unsigned int tempint;

    pointer = Read_Settings(EE_AWAY_MODE_ZONES_ENABLED);
 8003cf2:	2021      	movs	r0, #33	; 0x21
 8003cf4:	f000 f9a8 	bl	8004048 <Read_Settings>
 8003cf8:	0003      	movs	r3, r0
 8003cfa:	607b      	str	r3, [r7, #4]
    for(tempint = 0; tempint < ZONECOUNT; tempint++) {
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	603b      	str	r3, [r7, #0]
 8003d00:	e00c      	b.n	8003d1c <Update_Mem_Values+0x30>
    	AwayModeZones[tempint] = pointer[0];
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	7819      	ldrb	r1, [r3, #0]
 8003d06:	4a94      	ldr	r2, [pc, #592]	; (8003f58 <Update_Mem_Values+0x26c>)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	18d3      	adds	r3, r2, r3
 8003d0c:	1c0a      	adds	r2, r1, #0
 8003d0e:	701a      	strb	r2, [r3, #0]
    	pointer++;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	3301      	adds	r3, #1
 8003d14:	607b      	str	r3, [r7, #4]
    for(tempint = 0; tempint < ZONECOUNT; tempint++) {
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	3301      	adds	r3, #1
 8003d1a:	603b      	str	r3, [r7, #0]
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	2b05      	cmp	r3, #5
 8003d20:	d9ef      	bls.n	8003d02 <Update_Mem_Values+0x16>
    }

    pointer = Read_Settings(EE_CHIME_MODE_ZONES_ENABLED);
 8003d22:	2022      	movs	r0, #34	; 0x22
 8003d24:	f000 f990 	bl	8004048 <Read_Settings>
 8003d28:	0003      	movs	r3, r0
 8003d2a:	607b      	str	r3, [r7, #4]
    for(tempint = 0; tempint < ZONECOUNT; tempint++) {
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	603b      	str	r3, [r7, #0]
 8003d30:	e00c      	b.n	8003d4c <Update_Mem_Values+0x60>
      	ChimeModeZones[tempint] = pointer[0];
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	7819      	ldrb	r1, [r3, #0]
 8003d36:	4a89      	ldr	r2, [pc, #548]	; (8003f5c <Update_Mem_Values+0x270>)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	18d3      	adds	r3, r2, r3
 8003d3c:	1c0a      	adds	r2, r1, #0
 8003d3e:	701a      	strb	r2, [r3, #0]
       	pointer++;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	3301      	adds	r3, #1
 8003d44:	607b      	str	r3, [r7, #4]
    for(tempint = 0; tempint < ZONECOUNT; tempint++) {
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	3301      	adds	r3, #1
 8003d4a:	603b      	str	r3, [r7, #0]
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	2b05      	cmp	r3, #5
 8003d50:	d9ef      	bls.n	8003d32 <Update_Mem_Values+0x46>
    }

    pointer = Read_Settings(EE_CHIME_ANYMODE_ZONES);
 8003d52:	2023      	movs	r0, #35	; 0x23
 8003d54:	f000 f978 	bl	8004048 <Read_Settings>
 8003d58:	0003      	movs	r3, r0
 8003d5a:	607b      	str	r3, [r7, #4]
    for(tempint = 0; tempint < ZONECOUNT; tempint++) {
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	603b      	str	r3, [r7, #0]
 8003d60:	e00c      	b.n	8003d7c <Update_Mem_Values+0x90>
       	AnyModeChimeZones[tempint] = pointer[0];
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	7819      	ldrb	r1, [r3, #0]
 8003d66:	4a7e      	ldr	r2, [pc, #504]	; (8003f60 <Update_Mem_Values+0x274>)
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	18d3      	adds	r3, r2, r3
 8003d6c:	1c0a      	adds	r2, r1, #0
 8003d6e:	701a      	strb	r2, [r3, #0]
       	pointer++;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3301      	adds	r3, #1
 8003d74:	607b      	str	r3, [r7, #4]
    for(tempint = 0; tempint < ZONECOUNT; tempint++) {
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	603b      	str	r3, [r7, #0]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	2b05      	cmp	r3, #5
 8003d80:	d9ef      	bls.n	8003d62 <Update_Mem_Values+0x76>
    }

    pointer = Read_Settings(EE_SOUND_CHIME_ZONES);
 8003d82:	203c      	movs	r0, #60	; 0x3c
 8003d84:	f000 f960 	bl	8004048 <Read_Settings>
 8003d88:	0003      	movs	r3, r0
 8003d8a:	607b      	str	r3, [r7, #4]
    for(tempint = 0; tempint < ZONECOUNT; tempint++) {
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	603b      	str	r3, [r7, #0]
 8003d90:	e00c      	b.n	8003dac <Update_Mem_Values+0xc0>
       	SoundModeChimeZones[tempint] = pointer[0];
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	7819      	ldrb	r1, [r3, #0]
 8003d96:	4a73      	ldr	r2, [pc, #460]	; (8003f64 <Update_Mem_Values+0x278>)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	18d3      	adds	r3, r2, r3
 8003d9c:	1c0a      	adds	r2, r1, #0
 8003d9e:	701a      	strb	r2, [r3, #0]
       	pointer++;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	3301      	adds	r3, #1
 8003da4:	607b      	str	r3, [r7, #4]
    for(tempint = 0; tempint < ZONECOUNT; tempint++) {
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	3301      	adds	r3, #1
 8003daa:	603b      	str	r3, [r7, #0]
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	2b05      	cmp	r3, #5
 8003db0:	d9ef      	bls.n	8003d92 <Update_Mem_Values+0xa6>
    }

    pointer = Read_Settings(EE_SETTING_SEND_SMS_IN_CHIME);
 8003db2:	205b      	movs	r0, #91	; 0x5b
 8003db4:	f000 f948 	bl	8004048 <Read_Settings>
 8003db8:	0003      	movs	r3, r0
 8003dba:	607b      	str	r3, [r7, #4]
	if(pointer[0] == '0') {
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	2b30      	cmp	r3, #48	; 0x30
 8003dc2:	d103      	bne.n	8003dcc <Update_Mem_Values+0xe0>
		ChimeSMS_Enabled = 0;
 8003dc4:	4b68      	ldr	r3, [pc, #416]	; (8003f68 <Update_Mem_Values+0x27c>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	701a      	strb	r2, [r3, #0]
 8003dca:	e002      	b.n	8003dd2 <Update_Mem_Values+0xe6>
	} else ChimeSMS_Enabled = 1;
 8003dcc:	4b66      	ldr	r3, [pc, #408]	; (8003f68 <Update_Mem_Values+0x27c>)
 8003dce:	2201      	movs	r2, #1
 8003dd0:	701a      	strb	r2, [r3, #0]

	pointer = Read_Settings(EE_SETTING_COMMS_GPRS);
 8003dd2:	205c      	movs	r0, #92	; 0x5c
 8003dd4:	f000 f938 	bl	8004048 <Read_Settings>
 8003dd8:	0003      	movs	r3, r0
 8003dda:	607b      	str	r3, [r7, #4]
	if(strstr(pointer, "SMS") == NULL) {
 8003ddc:	4a63      	ldr	r2, [pc, #396]	; (8003f6c <Update_Mem_Values+0x280>)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	0011      	movs	r1, r2
 8003de2:	0018      	movs	r0, r3
 8003de4:	f00e ff53 	bl	8012c8e <strstr>
 8003de8:	1e03      	subs	r3, r0, #0
 8003dea:	d103      	bne.n	8003df4 <Update_Mem_Values+0x108>
		GPRS_Enabled = 1;
 8003dec:	4b60      	ldr	r3, [pc, #384]	; (8003f70 <Update_Mem_Values+0x284>)
 8003dee:	2201      	movs	r2, #1
 8003df0:	701a      	strb	r2, [r3, #0]
 8003df2:	e002      	b.n	8003dfa <Update_Mem_Values+0x10e>
	} else GPRS_Enabled = 0;
 8003df4:	4b5e      	ldr	r3, [pc, #376]	; (8003f70 <Update_Mem_Values+0x284>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	701a      	strb	r2, [r3, #0]

	pointer = Read_Settings(EE_HEALTH_REPORT_TIME);
 8003dfa:	2011      	movs	r0, #17
 8003dfc:	f000 f924 	bl	8004048 <Read_Settings>
 8003e00:	0003      	movs	r3, r0
 8003e02:	607b      	str	r3, [r7, #4]
	tempint = atoi(pointer);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	0018      	movs	r0, r3
 8003e08:	f00d ff9d 	bl	8011d46 <atoi>
 8003e0c:	0003      	movs	r3, r0
 8003e0e:	603b      	str	r3, [r7, #0]
	if((tempint == 0)||(tempint > 2400)) {
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d004      	beq.n	8003e20 <Update_Mem_Values+0x134>
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	2396      	movs	r3, #150	; 0x96
 8003e1a:	011b      	lsls	r3, r3, #4
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d906      	bls.n	8003e2e <Update_Mem_Values+0x142>
		Health_TX_Hour = 0xFF;
 8003e20:	4b54      	ldr	r3, [pc, #336]	; (8003f74 <Update_Mem_Values+0x288>)
 8003e22:	22ff      	movs	r2, #255	; 0xff
 8003e24:	701a      	strb	r2, [r3, #0]
		Health_TX_Minute = 0xFF;
 8003e26:	4b54      	ldr	r3, [pc, #336]	; (8003f78 <Update_Mem_Values+0x28c>)
 8003e28:	22ff      	movs	r2, #255	; 0xff
 8003e2a:	701a      	strb	r2, [r3, #0]
 8003e2c:	e011      	b.n	8003e52 <Update_Mem_Values+0x166>
	} else {
		Health_TX_Hour = (int) tempint / 100;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	2164      	movs	r1, #100	; 0x64
 8003e32:	0018      	movs	r0, r3
 8003e34:	f7fc fa0e 	bl	8000254 <__divsi3>
 8003e38:	0003      	movs	r3, r0
 8003e3a:	b2da      	uxtb	r2, r3
 8003e3c:	4b4d      	ldr	r3, [pc, #308]	; (8003f74 <Update_Mem_Values+0x288>)
 8003e3e:	701a      	strb	r2, [r3, #0]
		Health_TX_Minute = tempint % 100;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	2164      	movs	r1, #100	; 0x64
 8003e44:	0018      	movs	r0, r3
 8003e46:	f7fc fa01 	bl	800024c <__aeabi_uidivmod>
 8003e4a:	000b      	movs	r3, r1
 8003e4c:	b2da      	uxtb	r2, r3
 8003e4e:	4b4a      	ldr	r3, [pc, #296]	; (8003f78 <Update_Mem_Values+0x28c>)
 8003e50:	701a      	strb	r2, [r3, #0]
	}

	pointer = Read_Settings(EE_HEALTH_REPORT_DAYS);
 8003e52:	2010      	movs	r0, #16
 8003e54:	f000 f8f8 	bl	8004048 <Read_Settings>
 8003e58:	0003      	movs	r3, r0
 8003e5a:	607b      	str	r3, [r7, #4]
	tempint = atoi(pointer);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	0018      	movs	r0, r3
 8003e60:	f00d ff71 	bl	8011d46 <atoi>
 8003e64:	0003      	movs	r3, r0
 8003e66:	603b      	str	r3, [r7, #0]
	if((tempint > 0)&&(tempint < 32)) {
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d007      	beq.n	8003e7e <Update_Mem_Values+0x192>
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	2b1f      	cmp	r3, #31
 8003e72:	d804      	bhi.n	8003e7e <Update_Mem_Values+0x192>
		Health_TX_days = tempint;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	b2da      	uxtb	r2, r3
 8003e78:	4b40      	ldr	r3, [pc, #256]	; (8003f7c <Update_Mem_Values+0x290>)
 8003e7a:	701a      	strb	r2, [r3, #0]
 8003e7c:	e002      	b.n	8003e84 <Update_Mem_Values+0x198>
	} else {
		Health_TX_days = 1;
 8003e7e:	4b3f      	ldr	r3, [pc, #252]	; (8003f7c <Update_Mem_Values+0x290>)
 8003e80:	2201      	movs	r2, #1
 8003e82:	701a      	strb	r2, [r3, #0]
	}

	Silent_Panic_Buzzer_Time = atoi(Read_Settings(EE_SILENT_PANIC_BUZZER_TIME));
 8003e84:	2028      	movs	r0, #40	; 0x28
 8003e86:	f000 f8df 	bl	8004048 <Read_Settings>
 8003e8a:	0003      	movs	r3, r0
 8003e8c:	0018      	movs	r0, r3
 8003e8e:	f00d ff5a 	bl	8011d46 <atoi>
 8003e92:	0003      	movs	r3, r0
 8003e94:	b2da      	uxtb	r2, r3
 8003e96:	4b3a      	ldr	r3, [pc, #232]	; (8003f80 <Update_Mem_Values+0x294>)
 8003e98:	701a      	strb	r2, [r3, #0]

	pointer = Read_Settings(EE_BAT_LOW_HIGH_VALUE);
 8003e9a:	200a      	movs	r0, #10
 8003e9c:	f000 f8d4 	bl	8004048 <Read_Settings>
 8003ea0:	0003      	movs	r3, r0
 8003ea2:	607b      	str	r3, [r7, #4]
	pointer = strtok(pointer, " ");
 8003ea4:	4a37      	ldr	r2, [pc, #220]	; (8003f84 <Update_Mem_Values+0x298>)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	0011      	movs	r1, r2
 8003eaa:	0018      	movs	r0, r3
 8003eac:	f00f fd40 	bl	8013930 <strtok>
 8003eb0:	0003      	movs	r3, r0
 8003eb2:	607b      	str	r3, [r7, #4]
	Bat_Low_V = atof(pointer);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	0018      	movs	r0, r3
 8003eb8:	f00d ff40 	bl	8011d3c <atof>
 8003ebc:	0003      	movs	r3, r0
 8003ebe:	0018      	movs	r0, r3
 8003ec0:	f7fc fc4c 	bl	800075c <__aeabi_i2f>
 8003ec4:	1c02      	adds	r2, r0, #0
 8003ec6:	4b30      	ldr	r3, [pc, #192]	; (8003f88 <Update_Mem_Values+0x29c>)
 8003ec8:	601a      	str	r2, [r3, #0]

	pointer = strtok(pointer, " ");
 8003eca:	4a2e      	ldr	r2, [pc, #184]	; (8003f84 <Update_Mem_Values+0x298>)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	0011      	movs	r1, r2
 8003ed0:	0018      	movs	r0, r3
 8003ed2:	f00f fd2d 	bl	8013930 <strtok>
 8003ed6:	0003      	movs	r3, r0
 8003ed8:	607b      	str	r3, [r7, #4]
	Bat_Ok_V = atof(pointer);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	0018      	movs	r0, r3
 8003ede:	f00d ff2d 	bl	8011d3c <atof>
 8003ee2:	0003      	movs	r3, r0
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	f7fc fc39 	bl	800075c <__aeabi_i2f>
 8003eea:	1c02      	adds	r2, r0, #0
 8003eec:	4b27      	ldr	r3, [pc, #156]	; (8003f8c <Update_Mem_Values+0x2a0>)
 8003eee:	601a      	str	r2, [r3, #0]

	if((Bat_Ok_V < 10)||(Bat_Ok_V > 15)) {
 8003ef0:	4b26      	ldr	r3, [pc, #152]	; (8003f8c <Update_Mem_Values+0x2a0>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4926      	ldr	r1, [pc, #152]	; (8003f90 <Update_Mem_Values+0x2a4>)
 8003ef6:	1c18      	adds	r0, r3, #0
 8003ef8:	f7fc fae8 	bl	80004cc <__aeabi_fcmplt>
 8003efc:	1e03      	subs	r3, r0, #0
 8003efe:	d107      	bne.n	8003f10 <Update_Mem_Values+0x224>
 8003f00:	4b22      	ldr	r3, [pc, #136]	; (8003f8c <Update_Mem_Values+0x2a0>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4923      	ldr	r1, [pc, #140]	; (8003f94 <Update_Mem_Values+0x2a8>)
 8003f06:	1c18      	adds	r0, r3, #0
 8003f08:	f7fc faf4 	bl	80004f4 <__aeabi_fcmpgt>
 8003f0c:	1e03      	subs	r3, r0, #0
 8003f0e:	d002      	beq.n	8003f16 <Update_Mem_Values+0x22a>
		Bat_Ok_V = 12.5;
 8003f10:	4b1e      	ldr	r3, [pc, #120]	; (8003f8c <Update_Mem_Values+0x2a0>)
 8003f12:	4a21      	ldr	r2, [pc, #132]	; (8003f98 <Update_Mem_Values+0x2ac>)
 8003f14:	601a      	str	r2, [r3, #0]
	}

	if((Bat_Low_V < 9)||(Bat_Low_V > 15)) {
 8003f16:	4b1c      	ldr	r3, [pc, #112]	; (8003f88 <Update_Mem_Values+0x29c>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4920      	ldr	r1, [pc, #128]	; (8003f9c <Update_Mem_Values+0x2b0>)
 8003f1c:	1c18      	adds	r0, r3, #0
 8003f1e:	f7fc fad5 	bl	80004cc <__aeabi_fcmplt>
 8003f22:	1e03      	subs	r3, r0, #0
 8003f24:	d107      	bne.n	8003f36 <Update_Mem_Values+0x24a>
 8003f26:	4b18      	ldr	r3, [pc, #96]	; (8003f88 <Update_Mem_Values+0x29c>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	491a      	ldr	r1, [pc, #104]	; (8003f94 <Update_Mem_Values+0x2a8>)
 8003f2c:	1c18      	adds	r0, r3, #0
 8003f2e:	f7fc fae1 	bl	80004f4 <__aeabi_fcmpgt>
 8003f32:	1e03      	subs	r3, r0, #0
 8003f34:	d002      	beq.n	8003f3c <Update_Mem_Values+0x250>
		Bat_Low_V = 10.5;
 8003f36:	4b14      	ldr	r3, [pc, #80]	; (8003f88 <Update_Mem_Values+0x29c>)
 8003f38:	4a19      	ldr	r2, [pc, #100]	; (8003fa0 <Update_Mem_Values+0x2b4>)
 8003f3a:	601a      	str	r2, [r3, #0]
	}

	strcpy(Own_Number, Read_Settings(EE_OWN_NUMBER));
 8003f3c:	201a      	movs	r0, #26
 8003f3e:	f000 f883 	bl	8004048 <Read_Settings>
 8003f42:	0002      	movs	r2, r0
 8003f44:	4b17      	ldr	r3, [pc, #92]	; (8003fa4 <Update_Mem_Values+0x2b8>)
 8003f46:	0011      	movs	r1, r2
 8003f48:	0018      	movs	r0, r3
 8003f4a:	f00e fe72 	bl	8012c32 <strcpy>
}
 8003f4e:	46c0      	nop			; (mov r8, r8)
 8003f50:	46bd      	mov	sp, r7
 8003f52:	b002      	add	sp, #8
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	46c0      	nop			; (mov r8, r8)
 8003f58:	20001358 	.word	0x20001358
 8003f5c:	20001360 	.word	0x20001360
 8003f60:	20001368 	.word	0x20001368
 8003f64:	20001370 	.word	0x20001370
 8003f68:	2000134c 	.word	0x2000134c
 8003f6c:	0801675c 	.word	0x0801675c
 8003f70:	20000793 	.word	0x20000793
 8003f74:	2000134d 	.word	0x2000134d
 8003f78:	2000134e 	.word	0x2000134e
 8003f7c:	2000134f 	.word	0x2000134f
 8003f80:	2000166f 	.word	0x2000166f
 8003f84:	08016760 	.word	0x08016760
 8003f88:	20001350 	.word	0x20001350
 8003f8c:	20001354 	.word	0x20001354
 8003f90:	41200000 	.word	0x41200000
 8003f94:	41700000 	.word	0x41700000
 8003f98:	41480000 	.word	0x41480000
 8003f9c:	41100000 	.word	0x41100000
 8003fa0:	41280000 	.word	0x41280000
 8003fa4:	200018d4 	.word	0x200018d4

08003fa8 <Save_Settings>:


void Save_Settings(unsigned int page, char * savestring)
{  unsigned char leng = 0;
 8003fa8:	b590      	push	{r4, r7, lr}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
 8003fb2:	240f      	movs	r4, #15
 8003fb4:	193b      	adds	r3, r7, r4
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	701a      	strb	r2, [r3, #0]
	if((strlen(savestring) > 61)&&(page == EE_AT_MESSAGE)) {
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	0018      	movs	r0, r3
 8003fbe:	f7fc f8a3 	bl	8000108 <strlen>
 8003fc2:	0003      	movs	r3, r0
 8003fc4:	2b3d      	cmp	r3, #61	; 0x3d
 8003fc6:	d92c      	bls.n	8004022 <Save_Settings+0x7a>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b33      	cmp	r3, #51	; 0x33
 8003fcc:	d129      	bne.n	8004022 <Save_Settings+0x7a>
		if(page == 1) {  // if at message and message longer than 62 chars
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d122      	bne.n	800401a <Save_Settings+0x72>
			leng = strlen(savestring);
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	0018      	movs	r0, r3
 8003fd8:	f7fc f896 	bl	8000108 <strlen>
 8003fdc:	0002      	movs	r2, r0
 8003fde:	193b      	adds	r3, r7, r4
 8003fe0:	701a      	strb	r2, [r3, #0]
			if(leng > 124) {
 8003fe2:	193b      	adds	r3, r7, r4
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	2b7c      	cmp	r3, #124	; 0x7c
 8003fe8:	d902      	bls.n	8003ff0 <Save_Settings+0x48>
				leng = 124;
 8003fea:	193b      	adds	r3, r7, r4
 8003fec:	227c      	movs	r2, #124	; 0x7c
 8003fee:	701a      	strb	r2, [r3, #0]
			}
			leng = leng - 62;
 8003ff0:	220f      	movs	r2, #15
 8003ff2:	18bb      	adds	r3, r7, r2
 8003ff4:	18ba      	adds	r2, r7, r2
 8003ff6:	7812      	ldrb	r2, [r2, #0]
 8003ff8:	3a3e      	subs	r2, #62	; 0x3e
 8003ffa:	701a      	strb	r2, [r3, #0]

			memcpy(aTxBuffer, savestring + 61, 64);
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	333d      	adds	r3, #61	; 0x3d
 8004000:	0019      	movs	r1, r3
 8004002:	4b10      	ldr	r3, [pc, #64]	; (8004044 <Save_Settings+0x9c>)
 8004004:	2240      	movs	r2, #64	; 0x40
 8004006:	0018      	movs	r0, r3
 8004008:	f00d ffef 	bl	8011fea <memcpy>

			IIC_EEPROM_Write_Page((EE_AT_MESSAGE + 1) * 64, 64);
 800400c:	23d0      	movs	r3, #208	; 0xd0
 800400e:	011b      	lsls	r3, r3, #4
 8004010:	2140      	movs	r1, #64	; 0x40
 8004012:	0018      	movs	r0, r3
 8004014:	f000 f8a4 	bl	8004160 <IIC_EEPROM_Write_Page>
 8004018:	e003      	b.n	8004022 <Save_Settings+0x7a>
		} else savestring[61] = 0;
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	333d      	adds	r3, #61	; 0x3d
 800401e:	2200      	movs	r2, #0
 8004020:	701a      	strb	r2, [r3, #0]
	}
	memcpy(aTxBuffer, savestring, 64);
 8004022:	6839      	ldr	r1, [r7, #0]
 8004024:	4b07      	ldr	r3, [pc, #28]	; (8004044 <Save_Settings+0x9c>)
 8004026:	2240      	movs	r2, #64	; 0x40
 8004028:	0018      	movs	r0, r3
 800402a:	f00d ffde 	bl	8011fea <memcpy>

	IIC_EEPROM_Write_Page(page * 64, 64);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	019b      	lsls	r3, r3, #6
 8004032:	2140      	movs	r1, #64	; 0x40
 8004034:	0018      	movs	r0, r3
 8004036:	f000 f893 	bl	8004160 <IIC_EEPROM_Write_Page>
}
 800403a:	46c0      	nop			; (mov r8, r8)
 800403c:	46bd      	mov	sp, r7
 800403e:	b005      	add	sp, #20
 8004040:	bd90      	pop	{r4, r7, pc}
 8004042:	46c0      	nop			; (mov r8, r8)
 8004044:	20001478 	.word	0x20001478

08004048 <Read_Settings>:

char * Read_Settings(unsigned int page)
{  unsigned char i;
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
    IIC_EEPROM_Read_Page(page * 64, 64);			// First Page
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	019b      	lsls	r3, r3, #6
 8004054:	2140      	movs	r1, #64	; 0x40
 8004056:	0018      	movs	r0, r3
 8004058:	f000 f83a 	bl	80040d0 <IIC_EEPROM_Read_Page>
    for(i = 0; i < 64; i++) {
 800405c:	230f      	movs	r3, #15
 800405e:	18fb      	adds	r3, r7, r3
 8004060:	2200      	movs	r2, #0
 8004062:	701a      	strb	r2, [r3, #0]
 8004064:	e012      	b.n	800408c <Read_Settings+0x44>
    	if(aRxBuffer[i] == 0xFF) {
 8004066:	210f      	movs	r1, #15
 8004068:	187b      	adds	r3, r7, r1
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	4a14      	ldr	r2, [pc, #80]	; (80040c0 <Read_Settings+0x78>)
 800406e:	5cd3      	ldrb	r3, [r2, r3]
 8004070:	2bff      	cmp	r3, #255	; 0xff
 8004072:	d105      	bne.n	8004080 <Read_Settings+0x38>
    		aRxBuffer[i] = 0;
 8004074:	187b      	adds	r3, r7, r1
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	4a11      	ldr	r2, [pc, #68]	; (80040c0 <Read_Settings+0x78>)
 800407a:	2100      	movs	r1, #0
 800407c:	54d1      	strb	r1, [r2, r3]
    		break;
 800407e:	e00a      	b.n	8004096 <Read_Settings+0x4e>
    for(i = 0; i < 64; i++) {
 8004080:	210f      	movs	r1, #15
 8004082:	187b      	adds	r3, r7, r1
 8004084:	781a      	ldrb	r2, [r3, #0]
 8004086:	187b      	adds	r3, r7, r1
 8004088:	3201      	adds	r2, #1
 800408a:	701a      	strb	r2, [r3, #0]
 800408c:	230f      	movs	r3, #15
 800408e:	18fb      	adds	r3, r7, r3
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	2b3f      	cmp	r3, #63	; 0x3f
 8004094:	d9e7      	bls.n	8004066 <Read_Settings+0x1e>
    	}
    }
    memcpy(SPIPageBUF, aRxBuffer, 64);
 8004096:	490a      	ldr	r1, [pc, #40]	; (80040c0 <Read_Settings+0x78>)
 8004098:	4b0a      	ldr	r3, [pc, #40]	; (80040c4 <Read_Settings+0x7c>)
 800409a:	2240      	movs	r2, #64	; 0x40
 800409c:	0018      	movs	r0, r3
 800409e:	f00d ffa4 	bl	8011fea <memcpy>
    memcpy(EEPROM_Field, aRxBuffer, 64);
 80040a2:	4907      	ldr	r1, [pc, #28]	; (80040c0 <Read_Settings+0x78>)
 80040a4:	4b08      	ldr	r3, [pc, #32]	; (80040c8 <Read_Settings+0x80>)
 80040a6:	2240      	movs	r2, #64	; 0x40
 80040a8:	0018      	movs	r0, r3
 80040aa:	f00d ff9e 	bl	8011fea <memcpy>
	//		if(Check_Settings()) {
	//			strcat(EEPROM_Field, SPIPageBUF);
	//		}
	//	}
	//}
	tpointer = EEPROM_Field;
 80040ae:	4b07      	ldr	r3, [pc, #28]	; (80040cc <Read_Settings+0x84>)
 80040b0:	4a05      	ldr	r2, [pc, #20]	; (80040c8 <Read_Settings+0x80>)
 80040b2:	601a      	str	r2, [r3, #0]
	return(tpointer);
 80040b4:	4b05      	ldr	r3, [pc, #20]	; (80040cc <Read_Settings+0x84>)
 80040b6:	681b      	ldr	r3, [r3, #0]
}
 80040b8:	0018      	movs	r0, r3
 80040ba:	46bd      	mov	sp, r7
 80040bc:	b004      	add	sp, #16
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	200014f8 	.word	0x200014f8
 80040c4:	20001378 	.word	0x20001378
 80040c8:	200013f8 	.word	0x200013f8
 80040cc:	20001348 	.word	0x20001348

080040d0 <IIC_EEPROM_Read_Page>:

void IIC_EEPROM_Read_Page(unsigned long Address, unsigned char length)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af04      	add	r7, sp, #16
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	000a      	movs	r2, r1
 80040da:	1cfb      	adds	r3, r7, #3
 80040dc:	701a      	strb	r2, [r3, #0]
    /* Initialize Remaining Bytes Value to TX Buffer Size */
    Remaining_Bytes = length;
 80040de:	1cfb      	adds	r3, r7, #3
 80040e0:	781a      	ldrb	r2, [r3, #0]
 80040e2:	4b1c      	ldr	r3, [pc, #112]	; (8004154 <IIC_EEPROM_Read_Page+0x84>)
 80040e4:	601a      	str	r2, [r3, #0]

    /* Check if the EEPROM is ready for a new operation */
    while (HAL_I2C_IsDeviceReady(&hi2c1, EEPROM_ADDRESS, EEPROM_MAX_TRIALS, I2C_XFER_TIMEOUT_MAX) == HAL_TIMEOUT);
 80040e6:	46c0      	nop			; (mov r8, r8)
 80040e8:	2396      	movs	r3, #150	; 0x96
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	2296      	movs	r2, #150	; 0x96
 80040ee:	0052      	lsls	r2, r2, #1
 80040f0:	4819      	ldr	r0, [pc, #100]	; (8004158 <IIC_EEPROM_Read_Page+0x88>)
 80040f2:	21a0      	movs	r1, #160	; 0xa0
 80040f4:	f007 fafc 	bl	800b6f0 <HAL_I2C_IsDeviceReady>
 80040f8:	0003      	movs	r3, r0
 80040fa:	2b03      	cmp	r3, #3
 80040fc:	d0f4      	beq.n	80040e8 <IIC_EEPROM_Read_Page+0x18>

    /* Wait for the end of the transfer */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80040fe:	46c0      	nop			; (mov r8, r8)
 8004100:	4b15      	ldr	r3, [pc, #84]	; (8004158 <IIC_EEPROM_Read_Page+0x88>)
 8004102:	0018      	movs	r0, r3
 8004104:	f007 fcc2 	bl	800ba8c <HAL_I2C_GetState>
 8004108:	0003      	movs	r3, r0
 800410a:	2b20      	cmp	r3, #32
 800410c:	d1f8      	bne.n	8004100 <IIC_EEPROM_Read_Page+0x30>


    /*##-3- Start reading process ##############################################*/
    if (HAL_I2C_Mem_Read(&hi2c1, (unsigned int)EEPROM_ADDRESS, Address, I2C_MEMADD_SIZE_16BIT, (unsigned char *)aRxBuffer, length, 1000) != HAL_OK)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	b299      	uxth	r1, r3
 8004112:	1cfb      	adds	r3, r7, #3
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	b29b      	uxth	r3, r3
 8004118:	480f      	ldr	r0, [pc, #60]	; (8004158 <IIC_EEPROM_Read_Page+0x88>)
 800411a:	22fa      	movs	r2, #250	; 0xfa
 800411c:	0092      	lsls	r2, r2, #2
 800411e:	9202      	str	r2, [sp, #8]
 8004120:	9301      	str	r3, [sp, #4]
 8004122:	4b0e      	ldr	r3, [pc, #56]	; (800415c <IIC_EEPROM_Read_Page+0x8c>)
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	2302      	movs	r3, #2
 8004128:	000a      	movs	r2, r1
 800412a:	21a0      	movs	r1, #160	; 0xa0
 800412c:	f007 f99a 	bl	800b464 <HAL_I2C_Mem_Read>
 8004130:	1e03      	subs	r3, r0, #0
 8004132:	d001      	beq.n	8004138 <IIC_EEPROM_Read_Page+0x68>
    {
      /* Reading process Error */
      Error_Handler();
 8004134:	f7ff fa4e 	bl	80035d4 <Error_Handler>
    }

    /* Wait for the end of the transfer */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)
 8004138:	46c0      	nop			; (mov r8, r8)
 800413a:	4b07      	ldr	r3, [pc, #28]	; (8004158 <IIC_EEPROM_Read_Page+0x88>)
 800413c:	0018      	movs	r0, r3
 800413e:	f007 fca5 	bl	800ba8c <HAL_I2C_GetState>
 8004142:	0003      	movs	r3, r0
 8004144:	2b20      	cmp	r3, #32
 8004146:	d1f8      	bne.n	800413a <IIC_EEPROM_Read_Page+0x6a>
    {
    }
}
 8004148:	46c0      	nop			; (mov r8, r8)
 800414a:	46c0      	nop			; (mov r8, r8)
 800414c:	46bd      	mov	sp, r7
 800414e:	b002      	add	sp, #8
 8004150:	bd80      	pop	{r7, pc}
 8004152:	46c0      	nop			; (mov r8, r8)
 8004154:	20001578 	.word	0x20001578
 8004158:	200007fc 	.word	0x200007fc
 800415c:	200014f8 	.word	0x200014f8

08004160 <IIC_EEPROM_Write_Page>:


unsigned char IIC_EEPROM_Write_Page(unsigned long Address, unsigned char length)
{
 8004160:	b590      	push	{r4, r7, lr}
 8004162:	b087      	sub	sp, #28
 8004164:	af04      	add	r7, sp, #16
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	000a      	movs	r2, r1
 800416a:	1cfb      	adds	r3, r7, #3
 800416c:	701a      	strb	r2, [r3, #0]
	/* Initialize Remaining Bytes Value to TX Buffer Size */
    Remaining_Bytes = length;
 800416e:	1cfb      	adds	r3, r7, #3
 8004170:	781a      	ldrb	r2, [r3, #0]
 8004172:	4b60      	ldr	r3, [pc, #384]	; (80042f4 <IIC_EEPROM_Write_Page+0x194>)
 8004174:	601a      	str	r2, [r3, #0]

  	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8004176:	46c0      	nop			; (mov r8, r8)
 8004178:	4b5f      	ldr	r3, [pc, #380]	; (80042f8 <IIC_EEPROM_Write_Page+0x198>)
 800417a:	0018      	movs	r0, r3
 800417c:	f007 fc86 	bl	800ba8c <HAL_I2C_GetState>
 8004180:	0003      	movs	r3, r0
 8004182:	2b20      	cmp	r3, #32
 8004184:	d1f8      	bne.n	8004178 <IIC_EEPROM_Write_Page+0x18>

    /* Check if the EEPROM is ready for a new operation */
    while (HAL_I2C_IsDeviceReady(&hi2c1, EEPROM_ADDRESS, EEPROM_MAX_TRIALS, I2C_XFER_TIMEOUT_MAX) == HAL_TIMEOUT);
 8004186:	46c0      	nop			; (mov r8, r8)
 8004188:	2396      	movs	r3, #150	; 0x96
 800418a:	005b      	lsls	r3, r3, #1
 800418c:	2296      	movs	r2, #150	; 0x96
 800418e:	0052      	lsls	r2, r2, #1
 8004190:	4859      	ldr	r0, [pc, #356]	; (80042f8 <IIC_EEPROM_Write_Page+0x198>)
 8004192:	21a0      	movs	r1, #160	; 0xa0
 8004194:	f007 faac 	bl	800b6f0 <HAL_I2C_IsDeviceReady>
 8004198:	0003      	movs	r3, r0
 800419a:	2b03      	cmp	r3, #3
 800419c:	d0f4      	beq.n	8004188 <IIC_EEPROM_Write_Page+0x28>
    if(length > 64) {
 800419e:	1cfb      	adds	r3, r7, #3
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	2b40      	cmp	r3, #64	; 0x40
 80041a4:	d940      	bls.n	8004228 <IIC_EEPROM_Write_Page+0xc8>
    	/* Write EEPROM_PAGESIZE */
    	if(HAL_I2C_Mem_Write(&hi2c1 , (unsigned int)EEPROM_ADDRESS, Address, I2C_MEMADD_SIZE_16BIT, (unsigned char*)(aTxBuffer), 64, 1000)!= HAL_OK)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	4853      	ldr	r0, [pc, #332]	; (80042f8 <IIC_EEPROM_Write_Page+0x198>)
 80041ac:	23fa      	movs	r3, #250	; 0xfa
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	9302      	str	r3, [sp, #8]
 80041b2:	2340      	movs	r3, #64	; 0x40
 80041b4:	9301      	str	r3, [sp, #4]
 80041b6:	4b51      	ldr	r3, [pc, #324]	; (80042fc <IIC_EEPROM_Write_Page+0x19c>)
 80041b8:	9300      	str	r3, [sp, #0]
 80041ba:	2302      	movs	r3, #2
 80041bc:	21a0      	movs	r1, #160	; 0xa0
 80041be:	f007 f811 	bl	800b1e4 <HAL_I2C_Mem_Write>
 80041c2:	1e03      	subs	r3, r0, #0
 80041c4:	d001      	beq.n	80041ca <IIC_EEPROM_Write_Page+0x6a>
    	{
    		/* Writing process Error */
    		Error_Handler();
 80041c6:	f7ff fa05 	bl	80035d4 <Error_Handler>
    	}
    	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80041ca:	46c0      	nop			; (mov r8, r8)
 80041cc:	4b4a      	ldr	r3, [pc, #296]	; (80042f8 <IIC_EEPROM_Write_Page+0x198>)
 80041ce:	0018      	movs	r0, r3
 80041d0:	f007 fc5c 	bl	800ba8c <HAL_I2C_GetState>
 80041d4:	0003      	movs	r3, r0
 80041d6:	2b20      	cmp	r3, #32
 80041d8:	d1f8      	bne.n	80041cc <IIC_EEPROM_Write_Page+0x6c>

   	    /* Check if the EEPROM is ready for a new operation */
   	    while (HAL_I2C_IsDeviceReady(&hi2c1, EEPROM_ADDRESS, EEPROM_MAX_TRIALS, I2C_XFER_TIMEOUT_MAX) == HAL_TIMEOUT);
 80041da:	46c0      	nop			; (mov r8, r8)
 80041dc:	2396      	movs	r3, #150	; 0x96
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	2296      	movs	r2, #150	; 0x96
 80041e2:	0052      	lsls	r2, r2, #1
 80041e4:	4844      	ldr	r0, [pc, #272]	; (80042f8 <IIC_EEPROM_Write_Page+0x198>)
 80041e6:	21a0      	movs	r1, #160	; 0xa0
 80041e8:	f007 fa82 	bl	800b6f0 <HAL_I2C_IsDeviceReady>
 80041ec:	0003      	movs	r3, r0
 80041ee:	2b03      	cmp	r3, #3
 80041f0:	d0f4      	beq.n	80041dc <IIC_EEPROM_Write_Page+0x7c>

   	    /* Write EEPROM_PAGESIZE */
   	    if(HAL_I2C_Mem_Write(&hi2c1 , (unsigned int)EEPROM_ADDRESS, Address, I2C_MEMADD_SIZE_16BIT, (unsigned char*)(aTxBuffer[64]), length - 64, 1000)!= HAL_OK)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	b299      	uxth	r1, r3
 80041f6:	4b41      	ldr	r3, [pc, #260]	; (80042fc <IIC_EEPROM_Write_Page+0x19c>)
 80041f8:	2240      	movs	r2, #64	; 0x40
 80041fa:	5c9b      	ldrb	r3, [r3, r2]
 80041fc:	001c      	movs	r4, r3
 80041fe:	1cfb      	adds	r3, r7, #3
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	b29b      	uxth	r3, r3
 8004204:	3b40      	subs	r3, #64	; 0x40
 8004206:	b29b      	uxth	r3, r3
 8004208:	483b      	ldr	r0, [pc, #236]	; (80042f8 <IIC_EEPROM_Write_Page+0x198>)
 800420a:	22fa      	movs	r2, #250	; 0xfa
 800420c:	0092      	lsls	r2, r2, #2
 800420e:	9202      	str	r2, [sp, #8]
 8004210:	9301      	str	r3, [sp, #4]
 8004212:	9400      	str	r4, [sp, #0]
 8004214:	2302      	movs	r3, #2
 8004216:	000a      	movs	r2, r1
 8004218:	21a0      	movs	r1, #160	; 0xa0
 800421a:	f006 ffe3 	bl	800b1e4 <HAL_I2C_Mem_Write>
 800421e:	1e03      	subs	r3, r0, #0
 8004220:	d01f      	beq.n	8004262 <IIC_EEPROM_Write_Page+0x102>
   	    {
 	   	      /* Writing process Error */
  	   	      Error_Handler();
 8004222:	f7ff f9d7 	bl	80035d4 <Error_Handler>
 8004226:	e01c      	b.n	8004262 <IIC_EEPROM_Write_Page+0x102>
  	    }

    } else {
    	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8004228:	46c0      	nop			; (mov r8, r8)
 800422a:	4b33      	ldr	r3, [pc, #204]	; (80042f8 <IIC_EEPROM_Write_Page+0x198>)
 800422c:	0018      	movs	r0, r3
 800422e:	f007 fc2d 	bl	800ba8c <HAL_I2C_GetState>
 8004232:	0003      	movs	r3, r0
 8004234:	2b20      	cmp	r3, #32
 8004236:	d1f8      	bne.n	800422a <IIC_EEPROM_Write_Page+0xca>

   	    /* Check if the EEPROM is ready for a new operation */
   	    //while (HAL_I2C_IsDeviceReady(&hi2c1, EEPROM_ADDRESS, EEPROM_MAX_TRIALS, I2C_XFER_TIMEOUT_MAX) == HAL_TIMEOUT);

   	    /* Write EEPROM_PAGESIZE */
   	    if(HAL_I2C_Mem_Write(&hi2c1 , (unsigned int)EEPROM_ADDRESS, Address, I2C_MEMADD_SIZE_16BIT, (unsigned char*)(aTxBuffer), length, 1000)!= HAL_OK)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	b299      	uxth	r1, r3
 800423c:	1cfb      	adds	r3, r7, #3
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	b29b      	uxth	r3, r3
 8004242:	482d      	ldr	r0, [pc, #180]	; (80042f8 <IIC_EEPROM_Write_Page+0x198>)
 8004244:	22fa      	movs	r2, #250	; 0xfa
 8004246:	0092      	lsls	r2, r2, #2
 8004248:	9202      	str	r2, [sp, #8]
 800424a:	9301      	str	r3, [sp, #4]
 800424c:	4b2b      	ldr	r3, [pc, #172]	; (80042fc <IIC_EEPROM_Write_Page+0x19c>)
 800424e:	9300      	str	r3, [sp, #0]
 8004250:	2302      	movs	r3, #2
 8004252:	000a      	movs	r2, r1
 8004254:	21a0      	movs	r1, #160	; 0xa0
 8004256:	f006 ffc5 	bl	800b1e4 <HAL_I2C_Mem_Write>
 800425a:	1e03      	subs	r3, r0, #0
 800425c:	d001      	beq.n	8004262 <IIC_EEPROM_Write_Page+0x102>
   	    {
   	      /* Writing process Error */
   	      Error_Handler();
 800425e:	f7ff f9b9 	bl	80035d4 <Error_Handler>
        	For simplicity reasons, this example is just waiting till the end of the
        	transfer, but application may perform other tasks while transfer operation
        	is ongoing. */


    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8004262:	46c0      	nop			; (mov r8, r8)
 8004264:	4b24      	ldr	r3, [pc, #144]	; (80042f8 <IIC_EEPROM_Write_Page+0x198>)
 8004266:	0018      	movs	r0, r3
 8004268:	f007 fc10 	bl	800ba8c <HAL_I2C_GetState>
 800426c:	0003      	movs	r3, r0
 800426e:	2b20      	cmp	r3, #32
 8004270:	d1f8      	bne.n	8004264 <IIC_EEPROM_Write_Page+0x104>

    /* Check if the EEPROM is ready for a new operation */
    while (HAL_I2C_IsDeviceReady(&hi2c1, EEPROM_ADDRESS, EEPROM_MAX_TRIALS, I2C_XFER_TIMEOUT_MAX) == HAL_TIMEOUT);
 8004272:	46c0      	nop			; (mov r8, r8)
 8004274:	2396      	movs	r3, #150	; 0x96
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	2296      	movs	r2, #150	; 0x96
 800427a:	0052      	lsls	r2, r2, #1
 800427c:	481e      	ldr	r0, [pc, #120]	; (80042f8 <IIC_EEPROM_Write_Page+0x198>)
 800427e:	21a0      	movs	r1, #160	; 0xa0
 8004280:	f007 fa36 	bl	800b6f0 <HAL_I2C_IsDeviceReady>
 8004284:	0003      	movs	r3, r0
 8004286:	2b03      	cmp	r3, #3
 8004288:	d0f4      	beq.n	8004274 <IIC_EEPROM_Write_Page+0x114>

    /* Wait for the end of the transfer */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800428a:	46c0      	nop			; (mov r8, r8)
 800428c:	4b1a      	ldr	r3, [pc, #104]	; (80042f8 <IIC_EEPROM_Write_Page+0x198>)
 800428e:	0018      	movs	r0, r3
 8004290:	f007 fbfc 	bl	800ba8c <HAL_I2C_GetState>
 8004294:	0003      	movs	r3, r0
 8004296:	2b20      	cmp	r3, #32
 8004298:	d1f8      	bne.n	800428c <IIC_EEPROM_Write_Page+0x12c>

    /*##-3- Start reading process ##############################################*/
    if (HAL_I2C_Mem_Read(&hi2c1, (unsigned int)EEPROM_ADDRESS, Address, I2C_MEMADD_SIZE_16BIT, (unsigned char *)aRxBuffer, length, 1000) != HAL_OK)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	b299      	uxth	r1, r3
 800429e:	1cfb      	adds	r3, r7, #3
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	4814      	ldr	r0, [pc, #80]	; (80042f8 <IIC_EEPROM_Write_Page+0x198>)
 80042a6:	22fa      	movs	r2, #250	; 0xfa
 80042a8:	0092      	lsls	r2, r2, #2
 80042aa:	9202      	str	r2, [sp, #8]
 80042ac:	9301      	str	r3, [sp, #4]
 80042ae:	4b14      	ldr	r3, [pc, #80]	; (8004300 <IIC_EEPROM_Write_Page+0x1a0>)
 80042b0:	9300      	str	r3, [sp, #0]
 80042b2:	2302      	movs	r3, #2
 80042b4:	000a      	movs	r2, r1
 80042b6:	21a0      	movs	r1, #160	; 0xa0
 80042b8:	f007 f8d4 	bl	800b464 <HAL_I2C_Mem_Read>
 80042bc:	1e03      	subs	r3, r0, #0
 80042be:	d001      	beq.n	80042c4 <IIC_EEPROM_Write_Page+0x164>
    {
      /* Reading process Error */
      Error_Handler();
 80042c0:	f7ff f988 	bl	80035d4 <Error_Handler>
    }

    /* Wait for the end of the transfer */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)
 80042c4:	46c0      	nop			; (mov r8, r8)
 80042c6:	4b0c      	ldr	r3, [pc, #48]	; (80042f8 <IIC_EEPROM_Write_Page+0x198>)
 80042c8:	0018      	movs	r0, r3
 80042ca:	f007 fbdf 	bl	800ba8c <HAL_I2C_GetState>
 80042ce:	0003      	movs	r3, r0
 80042d0:	2b20      	cmp	r3, #32
 80042d2:	d1f8      	bne.n	80042c6 <IIC_EEPROM_Write_Page+0x166>
    {
    }

    /*##-4- Compare the sent and received buffers ##############################*/
    if (Buffercmp((unsigned char *)aTxBuffer, (unsigned char *)aRxBuffer, length) > 0)
 80042d4:	1cfb      	adds	r3, r7, #3
 80042d6:	781a      	ldrb	r2, [r3, #0]
 80042d8:	4909      	ldr	r1, [pc, #36]	; (8004300 <IIC_EEPROM_Write_Page+0x1a0>)
 80042da:	4b08      	ldr	r3, [pc, #32]	; (80042fc <IIC_EEPROM_Write_Page+0x19c>)
 80042dc:	0018      	movs	r0, r3
 80042de:	f000 f811 	bl	8004304 <Buffercmp>
 80042e2:	1e03      	subs	r3, r0, #0
 80042e4:	d001      	beq.n	80042ea <IIC_EEPROM_Write_Page+0x18a>
    {
    	return(1);  // write error
 80042e6:	2301      	movs	r3, #1
 80042e8:	e000      	b.n	80042ec <IIC_EEPROM_Write_Page+0x18c>
    }
    return(0); // ok
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	0018      	movs	r0, r3
 80042ee:	46bd      	mov	sp, r7
 80042f0:	b003      	add	sp, #12
 80042f2:	bd90      	pop	{r4, r7, pc}
 80042f4:	20001578 	.word	0x20001578
 80042f8:	200007fc 	.word	0x200007fc
 80042fc:	20001478 	.word	0x20001478
 8004300:	200014f8 	.word	0x200014f8

08004304 <Buffercmp>:


static unsigned int Buffercmp(unsigned char *pBuffer1, unsigned char *pBuffer2, unsigned int BufferLength)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
   while (BufferLength--)
 8004310:	e00d      	b.n	800432e <Buffercmp+0x2a>
   {
      if ((*pBuffer1) != *pBuffer2)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	781a      	ldrb	r2, [r3, #0]
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	429a      	cmp	r2, r3
 800431c:	d001      	beq.n	8004322 <Buffercmp+0x1e>
      {
         return BufferLength;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	e00b      	b.n	800433a <Buffercmp+0x36>
      }
      pBuffer1++;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	3301      	adds	r3, #1
 8004326:	60fb      	str	r3, [r7, #12]
      pBuffer2++;
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	3301      	adds	r3, #1
 800432c:	60bb      	str	r3, [r7, #8]
   while (BufferLength--)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	1e5a      	subs	r2, r3, #1
 8004332:	607a      	str	r2, [r7, #4]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1ec      	bne.n	8004312 <Buffercmp+0xe>
   }
   return 0;
 8004338:	2300      	movs	r3, #0
}
 800433a:	0018      	movs	r0, r3
 800433c:	46bd      	mov	sp, r7
 800433e:	b004      	add	sp, #16
 8004340:	bd80      	pop	{r7, pc}

08004342 <Delay_LED>:
extern unsigned char SoundModeChimeZones[];

extern IWDG_HandleTypeDef hiwdg;

void Delay_LED(void)
{ unsigned int delay, c, x;
 8004342:	b580      	push	{r7, lr}
 8004344:	b084      	sub	sp, #16
 8004346:	af00      	add	r7, sp, #0
  for(x=0;x<2000;x++) {
 8004348:	2300      	movs	r3, #0
 800434a:	607b      	str	r3, [r7, #4]
 800434c:	e00e      	b.n	800436c <Delay_LED+0x2a>
  	  for(delay=0;delay<20;delay++) {
 800434e:	2300      	movs	r3, #0
 8004350:	60fb      	str	r3, [r7, #12]
 8004352:	e005      	b.n	8004360 <Delay_LED+0x1e>
    	c++;
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	3301      	adds	r3, #1
 8004358:	60bb      	str	r3, [r7, #8]
  	  for(delay=0;delay<20;delay++) {
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	3301      	adds	r3, #1
 800435e:	60fb      	str	r3, [r7, #12]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2b13      	cmp	r3, #19
 8004364:	d9f6      	bls.n	8004354 <Delay_LED+0x12>
  for(x=0;x<2000;x++) {
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	3301      	adds	r3, #1
 800436a:	607b      	str	r3, [r7, #4]
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	23fa      	movs	r3, #250	; 0xfa
 8004370:	00db      	lsls	r3, r3, #3
 8004372:	429a      	cmp	r2, r3
 8004374:	d3eb      	bcc.n	800434e <Delay_LED+0xc>
      }
   }
}
 8004376:	46c0      	nop			; (mov r8, r8)
 8004378:	46c0      	nop			; (mov r8, r8)
 800437a:	46bd      	mov	sp, r7
 800437c:	b004      	add	sp, #16
 800437e:	bd80      	pop	{r7, pc}

08004380 <Clear_RF_Device_List>:


void Clear_RF_Device_List(void)
{  unsigned char p;
 8004380:	b590      	push	{r4, r7, lr}
 8004382:	b093      	sub	sp, #76	; 0x4c
 8004384:	af00      	add	r7, sp, #0
   char tempstr[64];
	memset(Device_List, 0, AMOUNT_RF_DEVICES * 4);
 8004386:	4b17      	ldr	r3, [pc, #92]	; (80043e4 <Clear_RF_Device_List+0x64>)
 8004388:	22b4      	movs	r2, #180	; 0xb4
 800438a:	2100      	movs	r1, #0
 800438c:	0018      	movs	r0, r3
 800438e:	f00d fe35 	bl	8011ffc <memset>
	memset(tempstr, 0, 64);
 8004392:	1d3b      	adds	r3, r7, #4
 8004394:	2240      	movs	r2, #64	; 0x40
 8004396:	2100      	movs	r1, #0
 8004398:	0018      	movs	r0, r3
 800439a:	f00d fe2f 	bl	8011ffc <memset>
	for(p = 0; p < EEPROM_RF_AMOUNT_PAGES; p++) {
 800439e:	2347      	movs	r3, #71	; 0x47
 80043a0:	18fb      	adds	r3, r7, r3
 80043a2:	2200      	movs	r2, #0
 80043a4:	701a      	strb	r2, [r3, #0]
 80043a6:	e011      	b.n	80043cc <Clear_RF_Device_List+0x4c>
		HAL_IWDG_Refresh(&hiwdg);
 80043a8:	4b0f      	ldr	r3, [pc, #60]	; (80043e8 <Clear_RF_Device_List+0x68>)
 80043aa:	0018      	movs	r0, r3
 80043ac:	f008 fcb0 	bl	800cd10 <HAL_IWDG_Refresh>
		Save_Settings(EEPROM_RF_DEVICE_START + p, tempstr);
 80043b0:	2447      	movs	r4, #71	; 0x47
 80043b2:	193b      	adds	r3, r7, r4
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	3396      	adds	r3, #150	; 0x96
 80043b8:	1d3a      	adds	r2, r7, #4
 80043ba:	0011      	movs	r1, r2
 80043bc:	0018      	movs	r0, r3
 80043be:	f7ff fdf3 	bl	8003fa8 <Save_Settings>
	for(p = 0; p < EEPROM_RF_AMOUNT_PAGES; p++) {
 80043c2:	193b      	adds	r3, r7, r4
 80043c4:	781a      	ldrb	r2, [r3, #0]
 80043c6:	193b      	adds	r3, r7, r4
 80043c8:	3201      	adds	r2, #1
 80043ca:	701a      	strb	r2, [r3, #0]
 80043cc:	2347      	movs	r3, #71	; 0x47
 80043ce:	18fb      	adds	r3, r7, r3
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d9e8      	bls.n	80043a8 <Clear_RF_Device_List+0x28>
	}

	LearnMode = 0;
 80043d6:	4b05      	ldr	r3, [pc, #20]	; (80043ec <Clear_RF_Device_List+0x6c>)
 80043d8:	2200      	movs	r2, #0
 80043da:	701a      	strb	r2, [r3, #0]

}
 80043dc:	46c0      	nop			; (mov r8, r8)
 80043de:	46bd      	mov	sp, r7
 80043e0:	b013      	add	sp, #76	; 0x4c
 80043e2:	bd90      	pop	{r4, r7, pc}
 80043e4:	2000157c 	.word	0x2000157c
 80043e8:	20000848 	.word	0x20000848
 80043ec:	20001670 	.word	0x20001670

080043f0 <Save_RF_Device_List>:

void Save_RF_Device_List(void)
{
 80043f0:	b5b0      	push	{r4, r5, r7, lr}
 80043f2:	b092      	sub	sp, #72	; 0x48
 80043f4:	af00      	add	r7, sp, #0
	unsigned char p;
	unsigned char q;
    char tempstr[64];

	for(p = 0; p < EEPROM_RF_AMOUNT_PAGES; p++) {
 80043f6:	2347      	movs	r3, #71	; 0x47
 80043f8:	18fb      	adds	r3, r7, r3
 80043fa:	2200      	movs	r2, #0
 80043fc:	701a      	strb	r2, [r3, #0]
 80043fe:	e025      	b.n	800444c <Save_RF_Device_List+0x5c>
		q = p * 15;
 8004400:	2546      	movs	r5, #70	; 0x46
 8004402:	197a      	adds	r2, r7, r5
 8004404:	2447      	movs	r4, #71	; 0x47
 8004406:	193b      	adds	r3, r7, r4
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	1c19      	adds	r1, r3, #0
 800440c:	0109      	lsls	r1, r1, #4
 800440e:	1acb      	subs	r3, r1, r3
 8004410:	7013      	strb	r3, [r2, #0]
		memset(tempstr, 0, 64);
 8004412:	1d3b      	adds	r3, r7, #4
 8004414:	2240      	movs	r2, #64	; 0x40
 8004416:	2100      	movs	r1, #0
 8004418:	0018      	movs	r0, r3
 800441a:	f00d fdef 	bl	8011ffc <memset>
		memcpy(tempstr, Device_List[q].DeviceSerial, 60);
 800441e:	197b      	adds	r3, r7, r5
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	009a      	lsls	r2, r3, #2
 8004424:	4b0e      	ldr	r3, [pc, #56]	; (8004460 <Save_RF_Device_List+0x70>)
 8004426:	18d1      	adds	r1, r2, r3
 8004428:	1d3b      	adds	r3, r7, #4
 800442a:	223c      	movs	r2, #60	; 0x3c
 800442c:	0018      	movs	r0, r3
 800442e:	f00d fddc 	bl	8011fea <memcpy>
		Save_Settings(EEPROM_RF_DEVICE_START + p, tempstr);
 8004432:	193b      	adds	r3, r7, r4
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	3396      	adds	r3, #150	; 0x96
 8004438:	1d3a      	adds	r2, r7, #4
 800443a:	0011      	movs	r1, r2
 800443c:	0018      	movs	r0, r3
 800443e:	f7ff fdb3 	bl	8003fa8 <Save_Settings>
	for(p = 0; p < EEPROM_RF_AMOUNT_PAGES; p++) {
 8004442:	193b      	adds	r3, r7, r4
 8004444:	781a      	ldrb	r2, [r3, #0]
 8004446:	193b      	adds	r3, r7, r4
 8004448:	3201      	adds	r2, #1
 800444a:	701a      	strb	r2, [r3, #0]
 800444c:	2347      	movs	r3, #71	; 0x47
 800444e:	18fb      	adds	r3, r7, r3
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	2b02      	cmp	r3, #2
 8004454:	d9d4      	bls.n	8004400 <Save_RF_Device_List+0x10>
	}
}
 8004456:	46c0      	nop			; (mov r8, r8)
 8004458:	46c0      	nop			; (mov r8, r8)
 800445a:	46bd      	mov	sp, r7
 800445c:	b012      	add	sp, #72	; 0x48
 800445e:	bdb0      	pop	{r4, r5, r7, pc}
 8004460:	2000157c 	.word	0x2000157c

08004464 <Load_RF_Device_List>:

void Load_RF_Device_List(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
	unsigned char p;
    unsigned char q;
	char * tempPoint;

	for(p = 0; p < EEPROM_RF_AMOUNT_PAGES; p++) {
 800446a:	1dfb      	adds	r3, r7, #7
 800446c:	2200      	movs	r2, #0
 800446e:	701a      	strb	r2, [r3, #0]
 8004470:	e01d      	b.n	80044ae <Load_RF_Device_List+0x4a>
		q = p * 15;
 8004472:	1dba      	adds	r2, r7, #6
 8004474:	1dfb      	adds	r3, r7, #7
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	1c19      	adds	r1, r3, #0
 800447a:	0109      	lsls	r1, r1, #4
 800447c:	1acb      	subs	r3, r1, r3
 800447e:	7013      	strb	r3, [r2, #0]
		tempPoint = Read_Settings(EEPROM_RF_DEVICE_START + p);
 8004480:	1dfb      	adds	r3, r7, #7
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	3396      	adds	r3, #150	; 0x96
 8004486:	0018      	movs	r0, r3
 8004488:	f7ff fdde 	bl	8004048 <Read_Settings>
 800448c:	0003      	movs	r3, r0
 800448e:	603b      	str	r3, [r7, #0]

		memcpy(&Device_List[q], tempPoint, 60);
 8004490:	1dbb      	adds	r3, r7, #6
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	009a      	lsls	r2, r3, #2
 8004496:	4b0a      	ldr	r3, [pc, #40]	; (80044c0 <Load_RF_Device_List+0x5c>)
 8004498:	18d3      	adds	r3, r2, r3
 800449a:	6839      	ldr	r1, [r7, #0]
 800449c:	223c      	movs	r2, #60	; 0x3c
 800449e:	0018      	movs	r0, r3
 80044a0:	f00d fda3 	bl	8011fea <memcpy>
	for(p = 0; p < EEPROM_RF_AMOUNT_PAGES; p++) {
 80044a4:	1dfb      	adds	r3, r7, #7
 80044a6:	781a      	ldrb	r2, [r3, #0]
 80044a8:	1dfb      	adds	r3, r7, #7
 80044aa:	3201      	adds	r2, #1
 80044ac:	701a      	strb	r2, [r3, #0]
 80044ae:	1dfb      	adds	r3, r7, #7
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d9dd      	bls.n	8004472 <Load_RF_Device_List+0xe>
	}
}
 80044b6:	46c0      	nop			; (mov r8, r8)
 80044b8:	46c0      	nop			; (mov r8, r8)
 80044ba:	46bd      	mov	sp, r7
 80044bc:	b002      	add	sp, #8
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	2000157c 	.word	0x2000157c

080044c4 <Search_Device>:

unsigned char Search_Device(char * inserial)
{ unsigned char p = 0;
 80044c4:	b590      	push	{r4, r7, lr}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	230f      	movs	r3, #15
 80044ce:	18fb      	adds	r3, r7, r3
 80044d0:	2200      	movs	r2, #0
 80044d2:	701a      	strb	r2, [r3, #0]
  unsigned int tempserial = 0;
 80044d4:	2300      	movs	r3, #0
 80044d6:	60bb      	str	r3, [r7, #8]

    tempserial = inserial[0] + inserial[1] + inserial[2] + inserial[3];
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	001a      	movs	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	3301      	adds	r3, #1
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	18d3      	adds	r3, r2, r3
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	3202      	adds	r2, #2
 80044ea:	7812      	ldrb	r2, [r2, #0]
 80044ec:	189b      	adds	r3, r3, r2
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	3203      	adds	r2, #3
 80044f2:	7812      	ldrb	r2, [r2, #0]
 80044f4:	189b      	adds	r3, r3, r2
 80044f6:	60bb      	str	r3, [r7, #8]
	if(tempserial == 0) {
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <Search_Device+0x3e>
		return(FALSE);
 80044fe:	2300      	movs	r3, #0
 8004500:	e022      	b.n	8004548 <Search_Device+0x84>
	}
	for(p = 0; p < AMOUNT_RF_DEVICES; p++) {
 8004502:	230f      	movs	r3, #15
 8004504:	18fb      	adds	r3, r7, r3
 8004506:	2200      	movs	r2, #0
 8004508:	701a      	strb	r2, [r3, #0]
 800450a:	e017      	b.n	800453c <Search_Device+0x78>
		if(strstr(Device_List[p].DeviceSerial, inserial) != NULL) {
 800450c:	240f      	movs	r4, #15
 800450e:	193b      	adds	r3, r7, r4
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	009a      	lsls	r2, r3, #2
 8004514:	4b0e      	ldr	r3, [pc, #56]	; (8004550 <Search_Device+0x8c>)
 8004516:	18d3      	adds	r3, r2, r3
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	0011      	movs	r1, r2
 800451c:	0018      	movs	r0, r3
 800451e:	f00e fbb6 	bl	8012c8e <strstr>
 8004522:	1e03      	subs	r3, r0, #0
 8004524:	d004      	beq.n	8004530 <Search_Device+0x6c>
			return(p+1);
 8004526:	193b      	adds	r3, r7, r4
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	3301      	adds	r3, #1
 800452c:	b2db      	uxtb	r3, r3
 800452e:	e00b      	b.n	8004548 <Search_Device+0x84>
	for(p = 0; p < AMOUNT_RF_DEVICES; p++) {
 8004530:	210f      	movs	r1, #15
 8004532:	187b      	adds	r3, r7, r1
 8004534:	781a      	ldrb	r2, [r3, #0]
 8004536:	187b      	adds	r3, r7, r1
 8004538:	3201      	adds	r2, #1
 800453a:	701a      	strb	r2, [r3, #0]
 800453c:	230f      	movs	r3, #15
 800453e:	18fb      	adds	r3, r7, r3
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	2b2c      	cmp	r3, #44	; 0x2c
 8004544:	d9e2      	bls.n	800450c <Search_Device+0x48>
		}
	}
	return(FALSE);
 8004546:	2300      	movs	r3, #0
}
 8004548:	0018      	movs	r0, r3
 800454a:	46bd      	mov	sp, r7
 800454c:	b005      	add	sp, #20
 800454e:	bd90      	pop	{r4, r7, pc}
 8004550:	2000157c 	.word	0x2000157c

08004554 <Get_Space>:

unsigned char Get_Space(char * inserial)
{ unsigned char p, u = 0;
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	230e      	movs	r3, #14
 800455e:	18fb      	adds	r3, r7, r3
 8004560:	2200      	movs	r2, #0
 8004562:	701a      	strb	r2, [r3, #0]
	for(p = 0; p < AMOUNT_RF_DEVICES; p++) {
 8004564:	230f      	movs	r3, #15
 8004566:	18fb      	adds	r3, r7, r3
 8004568:	2200      	movs	r2, #0
 800456a:	701a      	strb	r2, [r3, #0]
 800456c:	e050      	b.n	8004610 <Get_Space+0xbc>
		if(strstr(Device_List[p].DeviceSerial, inserial) != NULL) {
 800456e:	230f      	movs	r3, #15
 8004570:	18fb      	adds	r3, r7, r3
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	009a      	lsls	r2, r3, #2
 8004576:	4b47      	ldr	r3, [pc, #284]	; (8004694 <Get_Space+0x140>)
 8004578:	18d3      	adds	r3, r2, r3
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	0011      	movs	r1, r2
 800457e:	0018      	movs	r0, r3
 8004580:	f00e fb85 	bl	8012c8e <strstr>
 8004584:	1e03      	subs	r3, r0, #0
 8004586:	d03d      	beq.n	8004604 <Get_Space+0xb0>
			Disable_LED = 1;
 8004588:	4b43      	ldr	r3, [pc, #268]	; (8004698 <Get_Space+0x144>)
 800458a:	2201      	movs	r2, #1
 800458c:	701a      	strb	r2, [r3, #0]
			for(u = 0; u < 3; u++) {
 800458e:	230e      	movs	r3, #14
 8004590:	18fb      	adds	r3, r7, r3
 8004592:	2200      	movs	r2, #0
 8004594:	701a      	strb	r2, [r3, #0]
 8004596:	e02b      	b.n	80045f0 <Get_Space+0x9c>
				HAL_GPIO_WritePin(GPIOB, RFRX_LED_Pin, GPIO_PIN_SET);
 8004598:	2380      	movs	r3, #128	; 0x80
 800459a:	01db      	lsls	r3, r3, #7
 800459c:	483f      	ldr	r0, [pc, #252]	; (800469c <Get_Space+0x148>)
 800459e:	2201      	movs	r2, #1
 80045a0:	0019      	movs	r1, r3
 80045a2:	f006 fc57 	bl	800ae54 <HAL_GPIO_WritePin>
				Delay_LED();	Delay_LED();	Delay_LED();	Delay_LED();	Delay_LED();	Delay_LED();
 80045a6:	f7ff fecc 	bl	8004342 <Delay_LED>
 80045aa:	f7ff feca 	bl	8004342 <Delay_LED>
 80045ae:	f7ff fec8 	bl	8004342 <Delay_LED>
 80045b2:	f7ff fec6 	bl	8004342 <Delay_LED>
 80045b6:	f7ff fec4 	bl	8004342 <Delay_LED>
 80045ba:	f7ff fec2 	bl	8004342 <Delay_LED>

				HAL_GPIO_WritePin(GPIOB, RFRX_LED_Pin, GPIO_PIN_RESET);
 80045be:	2380      	movs	r3, #128	; 0x80
 80045c0:	01db      	lsls	r3, r3, #7
 80045c2:	4836      	ldr	r0, [pc, #216]	; (800469c <Get_Space+0x148>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	0019      	movs	r1, r3
 80045c8:	f006 fc44 	bl	800ae54 <HAL_GPIO_WritePin>
				Delay_LED();	Delay_LED();	Delay_LED();	Delay_LED();	Delay_LED();	Delay_LED();
 80045cc:	f7ff feb9 	bl	8004342 <Delay_LED>
 80045d0:	f7ff feb7 	bl	8004342 <Delay_LED>
 80045d4:	f7ff feb5 	bl	8004342 <Delay_LED>
 80045d8:	f7ff feb3 	bl	8004342 <Delay_LED>
 80045dc:	f7ff feb1 	bl	8004342 <Delay_LED>
 80045e0:	f7ff feaf 	bl	8004342 <Delay_LED>
			for(u = 0; u < 3; u++) {
 80045e4:	210e      	movs	r1, #14
 80045e6:	187b      	adds	r3, r7, r1
 80045e8:	781a      	ldrb	r2, [r3, #0]
 80045ea:	187b      	adds	r3, r7, r1
 80045ec:	3201      	adds	r2, #1
 80045ee:	701a      	strb	r2, [r3, #0]
 80045f0:	230e      	movs	r3, #14
 80045f2:	18fb      	adds	r3, r7, r3
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d9ce      	bls.n	8004598 <Get_Space+0x44>
			}
			Disable_LED = 0;
 80045fa:	4b27      	ldr	r3, [pc, #156]	; (8004698 <Get_Space+0x144>)
 80045fc:	2200      	movs	r2, #0
 80045fe:	701a      	strb	r2, [r3, #0]
			return(0);
 8004600:	2300      	movs	r3, #0
 8004602:	e042      	b.n	800468a <Get_Space+0x136>
	for(p = 0; p < AMOUNT_RF_DEVICES; p++) {
 8004604:	210f      	movs	r1, #15
 8004606:	187b      	adds	r3, r7, r1
 8004608:	781a      	ldrb	r2, [r3, #0]
 800460a:	187b      	adds	r3, r7, r1
 800460c:	3201      	adds	r2, #1
 800460e:	701a      	strb	r2, [r3, #0]
 8004610:	220f      	movs	r2, #15
 8004612:	18bb      	adds	r3, r7, r2
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	2b2c      	cmp	r3, #44	; 0x2c
 8004618:	d9a9      	bls.n	800456e <Get_Space+0x1a>
		}
	}
	for(p = 0; p < AMOUNT_RF_DEVICES; p++) {
 800461a:	18bb      	adds	r3, r7, r2
 800461c:	2200      	movs	r2, #0
 800461e:	701a      	strb	r2, [r3, #0]
 8004620:	e02d      	b.n	800467e <Get_Space+0x12a>
		if((Device_List[p].DeviceSerial[0] == 0)&&(Device_List[p].DeviceSerial[1] == 0)&&(Device_List[p].DeviceSerial[2] == 0)&&(Device_List[p].DeviceSerial[3] == 0)) {
 8004622:	210f      	movs	r1, #15
 8004624:	187b      	adds	r3, r7, r1
 8004626:	781a      	ldrb	r2, [r3, #0]
 8004628:	4b1a      	ldr	r3, [pc, #104]	; (8004694 <Get_Space+0x140>)
 800462a:	0092      	lsls	r2, r2, #2
 800462c:	5cd3      	ldrb	r3, [r2, r3]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d11f      	bne.n	8004672 <Get_Space+0x11e>
 8004632:	187b      	adds	r3, r7, r1
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	4a17      	ldr	r2, [pc, #92]	; (8004694 <Get_Space+0x140>)
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	18d3      	adds	r3, r2, r3
 800463c:	3301      	adds	r3, #1
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d116      	bne.n	8004672 <Get_Space+0x11e>
 8004644:	187b      	adds	r3, r7, r1
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	4a12      	ldr	r2, [pc, #72]	; (8004694 <Get_Space+0x140>)
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	18d3      	adds	r3, r2, r3
 800464e:	3302      	adds	r3, #2
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10d      	bne.n	8004672 <Get_Space+0x11e>
 8004656:	187b      	adds	r3, r7, r1
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	4a0e      	ldr	r2, [pc, #56]	; (8004694 <Get_Space+0x140>)
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	18d3      	adds	r3, r2, r3
 8004660:	3303      	adds	r3, #3
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d104      	bne.n	8004672 <Get_Space+0x11e>
			return(p + 1);
 8004668:	187b      	adds	r3, r7, r1
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	3301      	adds	r3, #1
 800466e:	b2db      	uxtb	r3, r3
 8004670:	e00b      	b.n	800468a <Get_Space+0x136>
	for(p = 0; p < AMOUNT_RF_DEVICES; p++) {
 8004672:	210f      	movs	r1, #15
 8004674:	187b      	adds	r3, r7, r1
 8004676:	781a      	ldrb	r2, [r3, #0]
 8004678:	187b      	adds	r3, r7, r1
 800467a:	3201      	adds	r2, #1
 800467c:	701a      	strb	r2, [r3, #0]
 800467e:	230f      	movs	r3, #15
 8004680:	18fb      	adds	r3, r7, r3
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	2b2c      	cmp	r3, #44	; 0x2c
 8004686:	d9cc      	bls.n	8004622 <Get_Space+0xce>
		}
	}
	return(0);
 8004688:	2300      	movs	r3, #0
}
 800468a:	0018      	movs	r0, r3
 800468c:	46bd      	mov	sp, r7
 800468e:	b004      	add	sp, #16
 8004690:	bd80      	pop	{r7, pc}
 8004692:	46c0      	nop			; (mov r8, r8)
 8004694:	2000157c 	.word	0x2000157c
 8004698:	200007a9 	.word	0x200007a9
 800469c:	48000400 	.word	0x48000400

080046a0 <Check_RF_Flags>:

void Check_RF_Flags(void)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af02      	add	r7, sp, #8
	if(Data_Received_Flag == TRUE) {
 80046a6:	4bda      	ldr	r3, [pc, #872]	; (8004a10 <Check_RF_Flags+0x370>)
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d001      	beq.n	80046b2 <Check_RF_Flags+0x12>
 80046ae:	f000 fcf6 	bl	800509e <Check_RF_Flags+0x9fe>
 80046b2:	4bd8      	ldr	r3, [pc, #864]	; (8004a14 <Check_RF_Flags+0x374>)
 80046b4:	681a      	ldr	r2, [r3, #0]

		memcpy(serial, SerialNum, 4);
 80046b6:	4bd8      	ldr	r3, [pc, #864]	; (8004a18 <Check_RF_Flags+0x378>)
 80046b8:	601a      	str	r2, [r3, #0]
		if(Disable_LED != 1) {
 80046ba:	4bd8      	ldr	r3, [pc, #864]	; (8004a1c <Check_RF_Flags+0x37c>)
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d006      	beq.n	80046d0 <Check_RF_Flags+0x30>
			HAL_GPIO_WritePin(GPIOB, RFRX_LED_Pin, GPIO_PIN_SET);
 80046c2:	2380      	movs	r3, #128	; 0x80
 80046c4:	01db      	lsls	r3, r3, #7
 80046c6:	48d6      	ldr	r0, [pc, #856]	; (8004a20 <Check_RF_Flags+0x380>)
 80046c8:	2201      	movs	r2, #1
 80046ca:	0019      	movs	r1, r3
 80046cc:	f006 fbc2 	bl	800ae54 <HAL_GPIO_WritePin>
		}



		button = Button_Push;
 80046d0:	4bd4      	ldr	r3, [pc, #848]	; (8004a24 <Check_RF_Flags+0x384>)
 80046d2:	781a      	ldrb	r2, [r3, #0]
 80046d4:	4bd4      	ldr	r3, [pc, #848]	; (8004a28 <Check_RF_Flags+0x388>)
 80046d6:	701a      	strb	r2, [r3, #0]


		if(LearnMode == 1) {
 80046d8:	4bd4      	ldr	r3, [pc, #848]	; (8004a2c <Check_RF_Flags+0x38c>)
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d157      	bne.n	8004790 <Check_RF_Flags+0xf0>

				LearnMode = 0;
 80046e0:	4bd2      	ldr	r3, [pc, #840]	; (8004a2c <Check_RF_Flags+0x38c>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	701a      	strb	r2, [r3, #0]
				pos = Get_Space(serial);
 80046e6:	4bcc      	ldr	r3, [pc, #816]	; (8004a18 <Check_RF_Flags+0x378>)
 80046e8:	0018      	movs	r0, r3
 80046ea:	f7ff ff33 	bl	8004554 <Get_Space>
 80046ee:	0003      	movs	r3, r0
 80046f0:	001a      	movs	r2, r3
 80046f2:	4bcf      	ldr	r3, [pc, #828]	; (8004a30 <Check_RF_Flags+0x390>)
 80046f4:	701a      	strb	r2, [r3, #0]
				if(pos > 0) {
 80046f6:	4bce      	ldr	r3, [pc, #824]	; (8004a30 <Check_RF_Flags+0x390>)
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d042      	beq.n	8004784 <Check_RF_Flags+0xe4>
					memcpy(&Device_List[pos-1].DeviceSerial[0], serial, 4);
 80046fe:	4bcc      	ldr	r3, [pc, #816]	; (8004a30 <Check_RF_Flags+0x390>)
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	3b01      	subs	r3, #1
 8004704:	009a      	lsls	r2, r3, #2
 8004706:	4bcb      	ldr	r3, [pc, #812]	; (8004a34 <Check_RF_Flags+0x394>)
 8004708:	18d2      	adds	r2, r2, r3
 800470a:	4bc3      	ldr	r3, [pc, #780]	; (8004a18 <Check_RF_Flags+0x378>)
 800470c:	0010      	movs	r0, r2
 800470e:	0019      	movs	r1, r3
 8004710:	2304      	movs	r3, #4
 8004712:	001a      	movs	r2, r3
 8004714:	f00d fc69 	bl	8011fea <memcpy>
					Save_RF_Device_List();
 8004718:	f7ff fe6a 	bl	80043f0 <Save_RF_Device_List>
					Disable_LED = 1;
 800471c:	4bbf      	ldr	r3, [pc, #764]	; (8004a1c <Check_RF_Flags+0x37c>)
 800471e:	2201      	movs	r2, #1
 8004720:	701a      	strb	r2, [r3, #0]
		  			for(unsigned char u = 0; u < 20; u++) {
 8004722:	1dfb      	adds	r3, r7, #7
 8004724:	2200      	movs	r2, #0
 8004726:	701a      	strb	r2, [r3, #0]
 8004728:	e022      	b.n	8004770 <Check_RF_Flags+0xd0>

		  				HAL_GPIO_WritePin(GPIOB, RFRX_LED_Pin, GPIO_PIN_SET);
 800472a:	2380      	movs	r3, #128	; 0x80
 800472c:	01db      	lsls	r3, r3, #7
 800472e:	48bc      	ldr	r0, [pc, #752]	; (8004a20 <Check_RF_Flags+0x380>)
 8004730:	2201      	movs	r2, #1
 8004732:	0019      	movs	r1, r3
 8004734:	f006 fb8e 	bl	800ae54 <HAL_GPIO_WritePin>
		  				Delay_LED();   Delay_LED();  	Delay_LED();   Delay_LED();
 8004738:	f7ff fe03 	bl	8004342 <Delay_LED>
 800473c:	f7ff fe01 	bl	8004342 <Delay_LED>
 8004740:	f7ff fdff 	bl	8004342 <Delay_LED>
 8004744:	f7ff fdfd 	bl	8004342 <Delay_LED>

		  				HAL_GPIO_WritePin(GPIOB, RFRX_LED_Pin, GPIO_PIN_RESET);
 8004748:	2380      	movs	r3, #128	; 0x80
 800474a:	01db      	lsls	r3, r3, #7
 800474c:	48b4      	ldr	r0, [pc, #720]	; (8004a20 <Check_RF_Flags+0x380>)
 800474e:	2200      	movs	r2, #0
 8004750:	0019      	movs	r1, r3
 8004752:	f006 fb7f 	bl	800ae54 <HAL_GPIO_WritePin>
		  				Delay_LED();  Delay_LED();  	Delay_LED();   Delay_LED();
 8004756:	f7ff fdf4 	bl	8004342 <Delay_LED>
 800475a:	f7ff fdf2 	bl	8004342 <Delay_LED>
 800475e:	f7ff fdf0 	bl	8004342 <Delay_LED>
 8004762:	f7ff fdee 	bl	8004342 <Delay_LED>
		  			for(unsigned char u = 0; u < 20; u++) {
 8004766:	1dfb      	adds	r3, r7, #7
 8004768:	781a      	ldrb	r2, [r3, #0]
 800476a:	1dfb      	adds	r3, r7, #7
 800476c:	3201      	adds	r2, #1
 800476e:	701a      	strb	r2, [r3, #0]
 8004770:	1dfb      	adds	r3, r7, #7
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	2b13      	cmp	r3, #19
 8004776:	d9d8      	bls.n	800472a <Check_RF_Flags+0x8a>
		  			}
					Disable_LED = 0;
 8004778:	4ba8      	ldr	r3, [pc, #672]	; (8004a1c <Check_RF_Flags+0x37c>)
 800477a:	2200      	movs	r2, #0
 800477c:	701a      	strb	r2, [r3, #0]
					LearnMode = 0;
 800477e:	4bab      	ldr	r3, [pc, #684]	; (8004a2c <Check_RF_Flags+0x38c>)
 8004780:	2200      	movs	r2, #0
 8004782:	701a      	strb	r2, [r3, #0]
 8004784:	4ba4      	ldr	r3, [pc, #656]	; (8004a18 <Check_RF_Flags+0x378>)
 8004786:	681a      	ldr	r2, [r3, #0]
				}

			memcpy(Prev_serial, serial, 4);
 8004788:	4bab      	ldr	r3, [pc, #684]	; (8004a38 <Check_RF_Flags+0x398>)
 800478a:	601a      	str	r2, [r3, #0]
 800478c:	f000 fc84 	bl	8005098 <Check_RF_Flags+0x9f8>
		} else if(id > 0) {
 8004790:	4baa      	ldr	r3, [pc, #680]	; (8004a3c <Check_RF_Flags+0x39c>)
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <Check_RF_Flags+0xfc>
 8004798:	f000 fc7c 	bl	8005094 <Check_RF_Flags+0x9f4>
			if((prev_id == id)&&(prev_id_timer > 0)) {
 800479c:	4ba8      	ldr	r3, [pc, #672]	; (8004a40 <Check_RF_Flags+0x3a0>)
 800479e:	781a      	ldrb	r2, [r3, #0]
 80047a0:	4ba6      	ldr	r3, [pc, #664]	; (8004a3c <Check_RF_Flags+0x39c>)
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d10a      	bne.n	80047be <Check_RF_Flags+0x11e>
 80047a8:	4ba6      	ldr	r3, [pc, #664]	; (8004a44 <Check_RF_Flags+0x3a4>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d006      	beq.n	80047be <Check_RF_Flags+0x11e>
				button = 0;
 80047b0:	4b9d      	ldr	r3, [pc, #628]	; (8004a28 <Check_RF_Flags+0x388>)
 80047b2:	2200      	movs	r2, #0
 80047b4:	701a      	strb	r2, [r3, #0]
				id = 0;
 80047b6:	4ba1      	ldr	r3, [pc, #644]	; (8004a3c <Check_RF_Flags+0x39c>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	701a      	strb	r2, [r3, #0]
 80047bc:	e006      	b.n	80047cc <Check_RF_Flags+0x12c>
			} else {
				prev_id_timer = 100;
 80047be:	4ba1      	ldr	r3, [pc, #644]	; (8004a44 <Check_RF_Flags+0x3a4>)
 80047c0:	2264      	movs	r2, #100	; 0x64
 80047c2:	601a      	str	r2, [r3, #0]
				prev_id = id;
 80047c4:	4b9d      	ldr	r3, [pc, #628]	; (8004a3c <Check_RF_Flags+0x39c>)
 80047c6:	781a      	ldrb	r2, [r3, #0]
 80047c8:	4b9d      	ldr	r3, [pc, #628]	; (8004a40 <Check_RF_Flags+0x3a0>)
 80047ca:	701a      	strb	r2, [r3, #0]
			}

			if(Sensor_Battery_Low == 1) {
 80047cc:	4b9e      	ldr	r3, [pc, #632]	; (8004a48 <Check_RF_Flags+0x3a8>)
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d14f      	bne.n	8004874 <Check_RF_Flags+0x1d4>

				Message[3] = 0;
 80047d4:	4b9d      	ldr	r3, [pc, #628]	; (8004a4c <Check_RF_Flags+0x3ac>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	70da      	strb	r2, [r3, #3]

				Message[0] = EE_SENSOR_LOW_BATTERY;
 80047da:	4b9c      	ldr	r3, [pc, #624]	; (8004a4c <Check_RF_Flags+0x3ac>)
 80047dc:	2205      	movs	r2, #5
 80047de:	701a      	strb	r2, [r3, #0]
				Message[1] = 127;
 80047e0:	4b9a      	ldr	r3, [pc, #616]	; (8004a4c <Check_RF_Flags+0x3ac>)
 80047e2:	227f      	movs	r2, #127	; 0x7f
 80047e4:	705a      	strb	r2, [r3, #1]
				Message[2] = 1;
 80047e6:	4b99      	ldr	r3, [pc, #612]	; (8004a4c <Check_RF_Flags+0x3ac>)
 80047e8:	2201      	movs	r2, #1
 80047ea:	709a      	strb	r2, [r3, #2]

				if(button == (ZONE1TRIG | DEVICEBIT)) {
 80047ec:	4b8e      	ldr	r3, [pc, #568]	; (8004a28 <Check_RF_Flags+0x388>)
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	2b09      	cmp	r3, #9
 80047f2:	d103      	bne.n	80047fc <Check_RF_Flags+0x15c>
					Message[3] = '1';
 80047f4:	4b95      	ldr	r3, [pc, #596]	; (8004a4c <Check_RF_Flags+0x3ac>)
 80047f6:	2231      	movs	r2, #49	; 0x31
 80047f8:	70da      	strb	r2, [r3, #3]
 80047fa:	e026      	b.n	800484a <Check_RF_Flags+0x1aa>
				} else if(button == (ZONE2TRIG | DEVICEBIT)) {
 80047fc:	4b8a      	ldr	r3, [pc, #552]	; (8004a28 <Check_RF_Flags+0x388>)
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	2b0a      	cmp	r3, #10
 8004802:	d103      	bne.n	800480c <Check_RF_Flags+0x16c>
					Message[3] = '2';
 8004804:	4b91      	ldr	r3, [pc, #580]	; (8004a4c <Check_RF_Flags+0x3ac>)
 8004806:	2232      	movs	r2, #50	; 0x32
 8004808:	70da      	strb	r2, [r3, #3]
 800480a:	e01e      	b.n	800484a <Check_RF_Flags+0x1aa>
				} else if(button == (ZONE3TRIG | DEVICEBIT)) {
 800480c:	4b86      	ldr	r3, [pc, #536]	; (8004a28 <Check_RF_Flags+0x388>)
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	2b0b      	cmp	r3, #11
 8004812:	d103      	bne.n	800481c <Check_RF_Flags+0x17c>
					Message[3] = '3';
 8004814:	4b8d      	ldr	r3, [pc, #564]	; (8004a4c <Check_RF_Flags+0x3ac>)
 8004816:	2233      	movs	r2, #51	; 0x33
 8004818:	70da      	strb	r2, [r3, #3]
 800481a:	e016      	b.n	800484a <Check_RF_Flags+0x1aa>
				} else if(button == (ZONE4TRIG | DEVICEBIT)) {
 800481c:	4b82      	ldr	r3, [pc, #520]	; (8004a28 <Check_RF_Flags+0x388>)
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	2b0c      	cmp	r3, #12
 8004822:	d103      	bne.n	800482c <Check_RF_Flags+0x18c>
					Message[3] = '4';
 8004824:	4b89      	ldr	r3, [pc, #548]	; (8004a4c <Check_RF_Flags+0x3ac>)
 8004826:	2234      	movs	r2, #52	; 0x34
 8004828:	70da      	strb	r2, [r3, #3]
 800482a:	e00e      	b.n	800484a <Check_RF_Flags+0x1aa>
				} else if(button == (ZONE5TRIG | DEVICEBIT)) {
 800482c:	4b7e      	ldr	r3, [pc, #504]	; (8004a28 <Check_RF_Flags+0x388>)
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	2b0d      	cmp	r3, #13
 8004832:	d103      	bne.n	800483c <Check_RF_Flags+0x19c>
					Message[3] = '5';
 8004834:	4b85      	ldr	r3, [pc, #532]	; (8004a4c <Check_RF_Flags+0x3ac>)
 8004836:	2235      	movs	r2, #53	; 0x35
 8004838:	70da      	strb	r2, [r3, #3]
 800483a:	e006      	b.n	800484a <Check_RF_Flags+0x1aa>
				} else if(button == (ZONE6TRIG | DEVICEBIT)) {
 800483c:	4b7a      	ldr	r3, [pc, #488]	; (8004a28 <Check_RF_Flags+0x388>)
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	2b0e      	cmp	r3, #14
 8004842:	d102      	bne.n	800484a <Check_RF_Flags+0x1aa>
					Message[3] = '6';
 8004844:	4b81      	ldr	r3, [pc, #516]	; (8004a4c <Check_RF_Flags+0x3ac>)
 8004846:	2236      	movs	r2, #54	; 0x36
 8004848:	70da      	strb	r2, [r3, #3]
				}
				if(Message[3] > 0) {
 800484a:	4b80      	ldr	r3, [pc, #512]	; (8004a4c <Check_RF_Flags+0x3ac>)
 800484c:	78db      	ldrb	r3, [r3, #3]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d010      	beq.n	8004874 <Check_RF_Flags+0x1d4>
					Message[4] = EE_BY_MESSAGE;
 8004852:	4b7e      	ldr	r3, [pc, #504]	; (8004a4c <Check_RF_Flags+0x3ac>)
 8004854:	220d      	movs	r2, #13
 8004856:	711a      	strb	r2, [r3, #4]
					Message[5] = EE_AT_MESSAGE;
 8004858:	4b7c      	ldr	r3, [pc, #496]	; (8004a4c <Check_RF_Flags+0x3ac>)
 800485a:	2233      	movs	r2, #51	; 0x33
 800485c:	715a      	strb	r2, [r3, #5]
					Message[6] = 0;
 800485e:	4b7b      	ldr	r3, [pc, #492]	; (8004a4c <Check_RF_Flags+0x3ac>)
 8004860:	2200      	movs	r2, #0
 8004862:	719a      	strb	r2, [r3, #6]

					Add_Message_to_Que(Message, 0, 0, 0, TRUE);
 8004864:	4879      	ldr	r0, [pc, #484]	; (8004a4c <Check_RF_Flags+0x3ac>)
 8004866:	2301      	movs	r3, #1
 8004868:	9300      	str	r3, [sp, #0]
 800486a:	2300      	movs	r3, #0
 800486c:	2200      	movs	r2, #0
 800486e:	2100      	movs	r1, #0
 8004870:	f002 fb5c 	bl	8006f2c <Add_Message_to_Que>
				}
			}

			if(button == DISARM_BUTTON) {			// Disarm
 8004874:	4b6c      	ldr	r3, [pc, #432]	; (8004a28 <Check_RF_Flags+0x388>)
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	2b04      	cmp	r3, #4
 800487a:	d15f      	bne.n	800493c <Check_RF_Flags+0x29c>
				ZoneTriggers[0] = 0;
 800487c:	4b74      	ldr	r3, [pc, #464]	; (8004a50 <Check_RF_Flags+0x3b0>)
 800487e:	2200      	movs	r2, #0
 8004880:	701a      	strb	r2, [r3, #0]
				ZoneTriggers[1] = 0;
 8004882:	4b73      	ldr	r3, [pc, #460]	; (8004a50 <Check_RF_Flags+0x3b0>)
 8004884:	2200      	movs	r2, #0
 8004886:	705a      	strb	r2, [r3, #1]
				ZoneTriggers[2] = 0;
 8004888:	4b71      	ldr	r3, [pc, #452]	; (8004a50 <Check_RF_Flags+0x3b0>)
 800488a:	2200      	movs	r2, #0
 800488c:	709a      	strb	r2, [r3, #2]
				ZoneTriggers[3] = 0;
 800488e:	4b70      	ldr	r3, [pc, #448]	; (8004a50 <Check_RF_Flags+0x3b0>)
 8004890:	2200      	movs	r2, #0
 8004892:	70da      	strb	r2, [r3, #3]
				ZoneTriggers[4] = 0;
 8004894:	4b6e      	ldr	r3, [pc, #440]	; (8004a50 <Check_RF_Flags+0x3b0>)
 8004896:	2200      	movs	r2, #0
 8004898:	711a      	strb	r2, [r3, #4]
				ZoneTriggers[5] = 0;
 800489a:	4b6d      	ldr	r3, [pc, #436]	; (8004a50 <Check_RF_Flags+0x3b0>)
 800489c:	2200      	movs	r2, #0
 800489e:	715a      	strb	r2, [r3, #5]

				if((Arm_Status == 1)||(Arm_Status == 2)) {
 80048a0:	4b6c      	ldr	r3, [pc, #432]	; (8004a54 <Check_RF_Flags+0x3b4>)
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d003      	beq.n	80048b0 <Check_RF_Flags+0x210>
 80048a8:	4b6a      	ldr	r3, [pc, #424]	; (8004a54 <Check_RF_Flags+0x3b4>)
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d127      	bne.n	8004900 <Check_RF_Flags+0x260>
					Message[0] = EE_SYSTEM_OFF_MODE;
 80048b0:	4b66      	ldr	r3, [pc, #408]	; (8004a4c <Check_RF_Flags+0x3ac>)
 80048b2:	2204      	movs	r2, #4
 80048b4:	701a      	strb	r2, [r3, #0]
					Message[1] = EE_BY_MESSAGE;
 80048b6:	4b65      	ldr	r3, [pc, #404]	; (8004a4c <Check_RF_Flags+0x3ac>)
 80048b8:	220d      	movs	r2, #13
 80048ba:	705a      	strb	r2, [r3, #1]
					Message[2] = EE_KEYRING;
 80048bc:	4b63      	ldr	r3, [pc, #396]	; (8004a4c <Check_RF_Flags+0x3ac>)
 80048be:	220e      	movs	r2, #14
 80048c0:	709a      	strb	r2, [r3, #2]
					Message[3] = EE_AT_MESSAGE;
 80048c2:	4b62      	ldr	r3, [pc, #392]	; (8004a4c <Check_RF_Flags+0x3ac>)
 80048c4:	2233      	movs	r2, #51	; 0x33
 80048c6:	70da      	strb	r2, [r3, #3]
					Message[4] = 0;
 80048c8:	4b60      	ldr	r3, [pc, #384]	; (8004a4c <Check_RF_Flags+0x3ac>)
 80048ca:	2200      	movs	r2, #0
 80048cc:	711a      	strb	r2, [r3, #4]

					Add_Message_to_Que(Message, 0, 0, 0, TRUE);
 80048ce:	485f      	ldr	r0, [pc, #380]	; (8004a4c <Check_RF_Flags+0x3ac>)
 80048d0:	2301      	movs	r3, #1
 80048d2:	9300      	str	r3, [sp, #0]
 80048d4:	2300      	movs	r3, #0
 80048d6:	2200      	movs	r2, #0
 80048d8:	2100      	movs	r1, #0
 80048da:	f002 fb27 	bl	8006f2c <Add_Message_to_Que>

					if(Arm_Status == 2) {
 80048de:	4b5d      	ldr	r3, [pc, #372]	; (8004a54 <Check_RF_Flags+0x3b4>)
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d103      	bne.n	80048ee <Check_RF_Flags+0x24e>
						Buzzer_Annunciate = 2;
 80048e6:	4b5c      	ldr	r3, [pc, #368]	; (8004a58 <Check_RF_Flags+0x3b8>)
 80048e8:	2202      	movs	r2, #2
 80048ea:	701a      	strb	r2, [r3, #0]
 80048ec:	e002      	b.n	80048f4 <Check_RF_Flags+0x254>
					} else {
						Siren_Annunciate = 2;
 80048ee:	4b5b      	ldr	r3, [pc, #364]	; (8004a5c <Check_RF_Flags+0x3bc>)
 80048f0:	2202      	movs	r2, #2
 80048f2:	701a      	strb	r2, [r3, #0]
					}

					Siren_Annunciate_Delay = 0;
 80048f4:	4b5a      	ldr	r3, [pc, #360]	; (8004a60 <Check_RF_Flags+0x3c0>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	601a      	str	r2, [r3, #0]

					Arm_Status = 0;
 80048fa:	4b56      	ldr	r3, [pc, #344]	; (8004a54 <Check_RF_Flags+0x3b4>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	701a      	strb	r2, [r3, #0]
				}
				HAL_GPIO_WritePin(OUT_ONOFF_GPIO_Port, OUT_ONOFF_Pin, GPIO_PIN_RESET);
 8004900:	2380      	movs	r3, #128	; 0x80
 8004902:	0219      	lsls	r1, r3, #8
 8004904:	2390      	movs	r3, #144	; 0x90
 8004906:	05db      	lsls	r3, r3, #23
 8004908:	2200      	movs	r2, #0
 800490a:	0018      	movs	r0, r3
 800490c:	f006 faa2 	bl	800ae54 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOB, RELAY1_Pin, GPIO_PIN_RESET);
 8004910:	2380      	movs	r3, #128	; 0x80
 8004912:	019b      	lsls	r3, r3, #6
 8004914:	4842      	ldr	r0, [pc, #264]	; (8004a20 <Check_RF_Flags+0x380>)
 8004916:	2200      	movs	r2, #0
 8004918:	0019      	movs	r1, r3
 800491a:	f006 fa9b 	bl	800ae54 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, RELAY2_Pin, GPIO_PIN_RESET);
 800491e:	2380      	movs	r3, #128	; 0x80
 8004920:	015b      	lsls	r3, r3, #5
 8004922:	483f      	ldr	r0, [pc, #252]	; (8004a20 <Check_RF_Flags+0x380>)
 8004924:	2200      	movs	r2, #0
 8004926:	0019      	movs	r1, r3
 8004928:	f006 fa94 	bl	800ae54 <HAL_GPIO_WritePin>
				Siren_Time = 0;
 800492c:	4b4d      	ldr	r3, [pc, #308]	; (8004a64 <Check_RF_Flags+0x3c4>)
 800492e:	2200      	movs	r2, #0
 8004930:	601a      	str	r2, [r3, #0]
				Buzzer_Time = 0;
 8004932:	4b4d      	ldr	r3, [pc, #308]	; (8004a68 <Check_RF_Flags+0x3c8>)
 8004934:	2200      	movs	r2, #0
 8004936:	701a      	strb	r2, [r3, #0]
 8004938:	f000 fbae 	bl	8005098 <Check_RF_Flags+0x9f8>
			} else if(button == ARM_BUTTON) {		// Arm
 800493c:	4b3a      	ldr	r3, [pc, #232]	; (8004a28 <Check_RF_Flags+0x388>)
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	2b02      	cmp	r3, #2
 8004942:	d134      	bne.n	80049ae <Check_RF_Flags+0x30e>
				if(Arm_Status != 1) {
 8004944:	4b43      	ldr	r3, [pc, #268]	; (8004a54 <Check_RF_Flags+0x3b4>)
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d101      	bne.n	8004950 <Check_RF_Flags+0x2b0>
 800494c:	f000 fba4 	bl	8005098 <Check_RF_Flags+0x9f8>
					memset(Message, 0, 10);
 8004950:	4b3e      	ldr	r3, [pc, #248]	; (8004a4c <Check_RF_Flags+0x3ac>)
 8004952:	220a      	movs	r2, #10
 8004954:	2100      	movs	r1, #0
 8004956:	0018      	movs	r0, r3
 8004958:	f00d fb50 	bl	8011ffc <memset>
					Message[0] = EE_AWAY_MODE;
 800495c:	4b3b      	ldr	r3, [pc, #236]	; (8004a4c <Check_RF_Flags+0x3ac>)
 800495e:	2202      	movs	r2, #2
 8004960:	701a      	strb	r2, [r3, #0]
					Message[1] = EE_BY_MESSAGE;
 8004962:	4b3a      	ldr	r3, [pc, #232]	; (8004a4c <Check_RF_Flags+0x3ac>)
 8004964:	220d      	movs	r2, #13
 8004966:	705a      	strb	r2, [r3, #1]
					Message[2] = EE_KEYRING;
 8004968:	4b38      	ldr	r3, [pc, #224]	; (8004a4c <Check_RF_Flags+0x3ac>)
 800496a:	220e      	movs	r2, #14
 800496c:	709a      	strb	r2, [r3, #2]
					Message[3] = EE_AT_MESSAGE;
 800496e:	4b37      	ldr	r3, [pc, #220]	; (8004a4c <Check_RF_Flags+0x3ac>)
 8004970:	2233      	movs	r2, #51	; 0x33
 8004972:	70da      	strb	r2, [r3, #3]
					Message[4] = 0;
 8004974:	4b35      	ldr	r3, [pc, #212]	; (8004a4c <Check_RF_Flags+0x3ac>)
 8004976:	2200      	movs	r2, #0
 8004978:	711a      	strb	r2, [r3, #4]

					Add_Message_to_Que(Message, 0, 0, 0, TRUE);
 800497a:	4834      	ldr	r0, [pc, #208]	; (8004a4c <Check_RF_Flags+0x3ac>)
 800497c:	2301      	movs	r3, #1
 800497e:	9300      	str	r3, [sp, #0]
 8004980:	2300      	movs	r3, #0
 8004982:	2200      	movs	r2, #0
 8004984:	2100      	movs	r1, #0
 8004986:	f002 fad1 	bl	8006f2c <Add_Message_to_Que>

					HAL_GPIO_WritePin(OUT_ONOFF_GPIO_Port, OUT_ONOFF_Pin, GPIO_PIN_SET);
 800498a:	2380      	movs	r3, #128	; 0x80
 800498c:	0219      	lsls	r1, r3, #8
 800498e:	2390      	movs	r3, #144	; 0x90
 8004990:	05db      	lsls	r3, r3, #23
 8004992:	2201      	movs	r2, #1
 8004994:	0018      	movs	r0, r3
 8004996:	f006 fa5d 	bl	800ae54 <HAL_GPIO_WritePin>
					Siren_Annunciate = 1;
 800499a:	4b30      	ldr	r3, [pc, #192]	; (8004a5c <Check_RF_Flags+0x3bc>)
 800499c:	2201      	movs	r2, #1
 800499e:	701a      	strb	r2, [r3, #0]
					Siren_Annunciate_Delay = 0;
 80049a0:	4b2f      	ldr	r3, [pc, #188]	; (8004a60 <Check_RF_Flags+0x3c0>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	601a      	str	r2, [r3, #0]

					Arm_Status = 1;
 80049a6:	4b2b      	ldr	r3, [pc, #172]	; (8004a54 <Check_RF_Flags+0x3b4>)
 80049a8:	2201      	movs	r2, #1
 80049aa:	701a      	strb	r2, [r3, #0]
 80049ac:	e374      	b.n	8005098 <Check_RF_Flags+0x9f8>
				}
			} else if(button == CHIME_BUTTON) {		// Chime
 80049ae:	4b1e      	ldr	r3, [pc, #120]	; (8004a28 <Check_RF_Flags+0x388>)
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	2b06      	cmp	r3, #6
 80049b4:	d15a      	bne.n	8004a6c <Check_RF_Flags+0x3cc>
				if(Arm_Status != 2) {
 80049b6:	4b27      	ldr	r3, [pc, #156]	; (8004a54 <Check_RF_Flags+0x3b4>)
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d100      	bne.n	80049c0 <Check_RF_Flags+0x320>
 80049be:	e36b      	b.n	8005098 <Check_RF_Flags+0x9f8>
					memset(Message, 0, 10);
 80049c0:	4b22      	ldr	r3, [pc, #136]	; (8004a4c <Check_RF_Flags+0x3ac>)
 80049c2:	220a      	movs	r2, #10
 80049c4:	2100      	movs	r1, #0
 80049c6:	0018      	movs	r0, r3
 80049c8:	f00d fb18 	bl	8011ffc <memset>
					Message[0] = EE_MONITOR_MODE;
 80049cc:	4b1f      	ldr	r3, [pc, #124]	; (8004a4c <Check_RF_Flags+0x3ac>)
 80049ce:	2203      	movs	r2, #3
 80049d0:	701a      	strb	r2, [r3, #0]
					Message[1] = EE_BY_MESSAGE;
 80049d2:	4b1e      	ldr	r3, [pc, #120]	; (8004a4c <Check_RF_Flags+0x3ac>)
 80049d4:	220d      	movs	r2, #13
 80049d6:	705a      	strb	r2, [r3, #1]
					Message[2] = EE_KEYRING;
 80049d8:	4b1c      	ldr	r3, [pc, #112]	; (8004a4c <Check_RF_Flags+0x3ac>)
 80049da:	220e      	movs	r2, #14
 80049dc:	709a      	strb	r2, [r3, #2]
					Message[3] = EE_AT_MESSAGE;
 80049de:	4b1b      	ldr	r3, [pc, #108]	; (8004a4c <Check_RF_Flags+0x3ac>)
 80049e0:	2233      	movs	r2, #51	; 0x33
 80049e2:	70da      	strb	r2, [r3, #3]
					Message[4] = 0;
 80049e4:	4b19      	ldr	r3, [pc, #100]	; (8004a4c <Check_RF_Flags+0x3ac>)
 80049e6:	2200      	movs	r2, #0
 80049e8:	711a      	strb	r2, [r3, #4]


					Add_Message_to_Que(Message, 0, 0, 0, TRUE);
 80049ea:	4818      	ldr	r0, [pc, #96]	; (8004a4c <Check_RF_Flags+0x3ac>)
 80049ec:	2301      	movs	r3, #1
 80049ee:	9300      	str	r3, [sp, #0]
 80049f0:	2300      	movs	r3, #0
 80049f2:	2200      	movs	r2, #0
 80049f4:	2100      	movs	r1, #0
 80049f6:	f002 fa99 	bl	8006f2c <Add_Message_to_Que>

					Arm_Status = 2;
 80049fa:	4b16      	ldr	r3, [pc, #88]	; (8004a54 <Check_RF_Flags+0x3b4>)
 80049fc:	2202      	movs	r2, #2
 80049fe:	701a      	strb	r2, [r3, #0]

					Buzzer_Annunciate = 3;
 8004a00:	4b15      	ldr	r3, [pc, #84]	; (8004a58 <Check_RF_Flags+0x3b8>)
 8004a02:	2203      	movs	r2, #3
 8004a04:	701a      	strb	r2, [r3, #0]
					Siren_Annunciate_Delay = 0;
 8004a06:	4b16      	ldr	r3, [pc, #88]	; (8004a60 <Check_RF_Flags+0x3c0>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	601a      	str	r2, [r3, #0]
 8004a0c:	e344      	b.n	8005098 <Check_RF_Flags+0x9f8>
 8004a0e:	46c0      	nop			; (mov r8, r8)
 8004a10:	20001684 	.word	0x20001684
 8004a14:	20001668 	.word	0x20001668
 8004a18:	20001680 	.word	0x20001680
 8004a1c:	200007a9 	.word	0x200007a9
 8004a20:	48000400 	.word	0x48000400
 8004a24:	2000166d 	.word	0x2000166d
 8004a28:	20001635 	.word	0x20001635
 8004a2c:	20001670 	.word	0x20001670
 8004a30:	2000164d 	.word	0x2000164d
 8004a34:	2000157c 	.word	0x2000157c
 8004a38:	2000167c 	.word	0x2000167c
 8004a3c:	2000164c 	.word	0x2000164c
 8004a40:	2000163f 	.word	0x2000163f
 8004a44:	20001640 	.word	0x20001640
 8004a48:	2000166c 	.word	0x2000166c
 8004a4c:	200006c8 	.word	0x200006c8
 8004a50:	20001638 	.word	0x20001638
 8004a54:	200007b8 	.word	0x200007b8
 8004a58:	20001687 	.word	0x20001687
 8004a5c:	20001686 	.word	0x20001686
 8004a60:	20001688 	.word	0x20001688
 8004a64:	200007b4 	.word	0x200007b4
 8004a68:	200007b0 	.word	0x200007b0

				}
			} else if(button == PANIC_BUTTON) {
 8004a6c:	4bd3      	ldr	r3, [pc, #844]	; (8004dbc <Check_RF_Flags+0x71c>)
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d123      	bne.n	8004abc <Check_RF_Flags+0x41c>
				memset(Message, 0, 10);
 8004a74:	4bd2      	ldr	r3, [pc, #840]	; (8004dc0 <Check_RF_Flags+0x720>)
 8004a76:	220a      	movs	r2, #10
 8004a78:	2100      	movs	r1, #0
 8004a7a:	0018      	movs	r0, r3
 8004a7c:	f00d fabe 	bl	8011ffc <memset>
				Message[0] = EE_PANIC;
 8004a80:	4bcf      	ldr	r3, [pc, #828]	; (8004dc0 <Check_RF_Flags+0x720>)
 8004a82:	220c      	movs	r2, #12
 8004a84:	701a      	strb	r2, [r3, #0]
				Message[1] = EE_BY_MESSAGE;
 8004a86:	4bce      	ldr	r3, [pc, #824]	; (8004dc0 <Check_RF_Flags+0x720>)
 8004a88:	220d      	movs	r2, #13
 8004a8a:	705a      	strb	r2, [r3, #1]
				Message[2] = EE_KEYRING;
 8004a8c:	4bcc      	ldr	r3, [pc, #816]	; (8004dc0 <Check_RF_Flags+0x720>)
 8004a8e:	220e      	movs	r2, #14
 8004a90:	709a      	strb	r2, [r3, #2]
				Message[3] = EE_AT_MESSAGE;
 8004a92:	4bcb      	ldr	r3, [pc, #812]	; (8004dc0 <Check_RF_Flags+0x720>)
 8004a94:	2233      	movs	r2, #51	; 0x33
 8004a96:	70da      	strb	r2, [r3, #3]
				Message[4] = 0;
 8004a98:	4bc9      	ldr	r3, [pc, #804]	; (8004dc0 <Check_RF_Flags+0x720>)
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	711a      	strb	r2, [r3, #4]

				Add_Message_to_Que(Message, 0, 0, 0, TRUE);
 8004a9e:	48c8      	ldr	r0, [pc, #800]	; (8004dc0 <Check_RF_Flags+0x720>)
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	9300      	str	r3, [sp, #0]
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	f002 fa3f 	bl	8006f2c <Add_Message_to_Que>
				Panic_Out_Time = OUTPUT_ON_TIME + 1;
 8004aae:	4bc5      	ldr	r3, [pc, #788]	; (8004dc4 <Check_RF_Flags+0x724>)
 8004ab0:	2205      	movs	r2, #5
 8004ab2:	701a      	strb	r2, [r3, #0]
				Siren_Time = SIREN_SECONDS;
 8004ab4:	4bc4      	ldr	r3, [pc, #784]	; (8004dc8 <Check_RF_Flags+0x728>)
 8004ab6:	22f0      	movs	r2, #240	; 0xf0
 8004ab8:	601a      	str	r2, [r3, #0]
 8004aba:	e2ed      	b.n	8005098 <Check_RF_Flags+0x9f8>


			} else if(button == SILENT_PANIC_BUTTON) {
 8004abc:	4bbf      	ldr	r3, [pc, #764]	; (8004dbc <Check_RF_Flags+0x71c>)
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	2b03      	cmp	r3, #3
 8004ac2:	d124      	bne.n	8004b0e <Check_RF_Flags+0x46e>
				memset(Message, 0, 10);
 8004ac4:	4bbe      	ldr	r3, [pc, #760]	; (8004dc0 <Check_RF_Flags+0x720>)
 8004ac6:	220a      	movs	r2, #10
 8004ac8:	2100      	movs	r1, #0
 8004aca:	0018      	movs	r0, r3
 8004acc:	f00d fa96 	bl	8011ffc <memset>
				Message[0] = EE_SILENT_PANIC;
 8004ad0:	4bbb      	ldr	r3, [pc, #748]	; (8004dc0 <Check_RF_Flags+0x720>)
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	701a      	strb	r2, [r3, #0]
				Message[1] = EE_BY_MESSAGE;
 8004ad6:	4bba      	ldr	r3, [pc, #744]	; (8004dc0 <Check_RF_Flags+0x720>)
 8004ad8:	220d      	movs	r2, #13
 8004ada:	705a      	strb	r2, [r3, #1]
				Message[2] = EE_KEYRING;
 8004adc:	4bb8      	ldr	r3, [pc, #736]	; (8004dc0 <Check_RF_Flags+0x720>)
 8004ade:	220e      	movs	r2, #14
 8004ae0:	709a      	strb	r2, [r3, #2]
				Message[3] = EE_AT_MESSAGE;
 8004ae2:	4bb7      	ldr	r3, [pc, #732]	; (8004dc0 <Check_RF_Flags+0x720>)
 8004ae4:	2233      	movs	r2, #51	; 0x33
 8004ae6:	70da      	strb	r2, [r3, #3]
				Message[4] = 0;
 8004ae8:	4bb5      	ldr	r3, [pc, #724]	; (8004dc0 <Check_RF_Flags+0x720>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	711a      	strb	r2, [r3, #4]

				Add_Message_to_Que(Message, 0, 0, 0, TRUE);
 8004aee:	48b4      	ldr	r0, [pc, #720]	; (8004dc0 <Check_RF_Flags+0x720>)
 8004af0:	2301      	movs	r3, #1
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	2300      	movs	r3, #0
 8004af6:	2200      	movs	r2, #0
 8004af8:	2100      	movs	r1, #0
 8004afa:	f002 fa17 	bl	8006f2c <Add_Message_to_Que>
				Panic_Out_Time = OUTPUT_ON_TIME + 1;
 8004afe:	4bb1      	ldr	r3, [pc, #708]	; (8004dc4 <Check_RF_Flags+0x724>)
 8004b00:	2205      	movs	r2, #5
 8004b02:	701a      	strb	r2, [r3, #0]
				Buzzer_Time = Silent_Panic_Buzzer_Time;
 8004b04:	4bb1      	ldr	r3, [pc, #708]	; (8004dcc <Check_RF_Flags+0x72c>)
 8004b06:	781a      	ldrb	r2, [r3, #0]
 8004b08:	4bb1      	ldr	r3, [pc, #708]	; (8004dd0 <Check_RF_Flags+0x730>)
 8004b0a:	701a      	strb	r2, [r3, #0]
 8004b0c:	e2c4      	b.n	8005098 <Check_RF_Flags+0x9f8>


			} else if(button&DEVICEBIT) {
 8004b0e:	4bab      	ldr	r3, [pc, #684]	; (8004dbc <Check_RF_Flags+0x71c>)
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	001a      	movs	r2, r3
 8004b14:	2308      	movs	r3, #8
 8004b16:	4013      	ands	r3, r2
 8004b18:	d100      	bne.n	8004b1c <Check_RF_Flags+0x47c>
 8004b1a:	e2bd      	b.n	8005098 <Check_RF_Flags+0x9f8>
				if(button == (ZONE1TRIG | DEVICEBIT)) {
 8004b1c:	4ba7      	ldr	r3, [pc, #668]	; (8004dbc <Check_RF_Flags+0x71c>)
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	2b09      	cmp	r3, #9
 8004b22:	d16b      	bne.n	8004bfc <Check_RF_Flags+0x55c>
					if((AwayModeZones[0] == '1')&&(Arm_Status == 1)&&(ZoneTriggers[0] < 5)) {
 8004b24:	4bab      	ldr	r3, [pc, #684]	; (8004dd4 <Check_RF_Flags+0x734>)
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	2b31      	cmp	r3, #49	; 0x31
 8004b2a:	d133      	bne.n	8004b94 <Check_RF_Flags+0x4f4>
 8004b2c:	4baa      	ldr	r3, [pc, #680]	; (8004dd8 <Check_RF_Flags+0x738>)
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d12f      	bne.n	8004b94 <Check_RF_Flags+0x4f4>
 8004b34:	4ba9      	ldr	r3, [pc, #676]	; (8004ddc <Check_RF_Flags+0x73c>)
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	2b04      	cmp	r3, #4
 8004b3a:	d82b      	bhi.n	8004b94 <Check_RF_Flags+0x4f4>
						ZoneTriggers[0]++;
 8004b3c:	4ba7      	ldr	r3, [pc, #668]	; (8004ddc <Check_RF_Flags+0x73c>)
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	3301      	adds	r3, #1
 8004b42:	b2da      	uxtb	r2, r3
 8004b44:	4ba5      	ldr	r3, [pc, #660]	; (8004ddc <Check_RF_Flags+0x73c>)
 8004b46:	701a      	strb	r2, [r3, #0]
						memset(Message, 0, 10);
 8004b48:	4b9d      	ldr	r3, [pc, #628]	; (8004dc0 <Check_RF_Flags+0x720>)
 8004b4a:	220a      	movs	r2, #10
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	0018      	movs	r0, r3
 8004b50:	f00d fa54 	bl	8011ffc <memset>
						Message[0] = EE_ZONE1_MESSAGE;
 8004b54:	4b9a      	ldr	r3, [pc, #616]	; (8004dc0 <Check_RF_Flags+0x720>)
 8004b56:	221b      	movs	r2, #27
 8004b58:	701a      	strb	r2, [r3, #0]
						Message[1] = EE_AT_MESSAGE;
 8004b5a:	4b99      	ldr	r3, [pc, #612]	; (8004dc0 <Check_RF_Flags+0x720>)
 8004b5c:	2233      	movs	r2, #51	; 0x33
 8004b5e:	705a      	strb	r2, [r3, #1]
						Message[2] = 0;
 8004b60:	4b97      	ldr	r3, [pc, #604]	; (8004dc0 <Check_RF_Flags+0x720>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	709a      	strb	r2, [r3, #2]

						Add_Message_to_Que(Message, 0, 0, 0, TRUE);
 8004b66:	4896      	ldr	r0, [pc, #600]	; (8004dc0 <Check_RF_Flags+0x720>)
 8004b68:	2301      	movs	r3, #1
 8004b6a:	9300      	str	r3, [sp, #0]
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	2200      	movs	r2, #0
 8004b70:	2100      	movs	r1, #0
 8004b72:	f002 f9db 	bl	8006f2c <Add_Message_to_Que>

						if(AnyModeChimeZones[0] == '0') {
 8004b76:	4b9a      	ldr	r3, [pc, #616]	; (8004de0 <Check_RF_Flags+0x740>)
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	2b30      	cmp	r3, #48	; 0x30
 8004b7c:	d106      	bne.n	8004b8c <Check_RF_Flags+0x4ec>
							Siren_Time = SIREN_SECONDS;
 8004b7e:	4b92      	ldr	r3, [pc, #584]	; (8004dc8 <Check_RF_Flags+0x728>)
 8004b80:	22f0      	movs	r2, #240	; 0xf0
 8004b82:	601a      	str	r2, [r3, #0]
							Alarm_Out_Time = OUTPUT_ON_TIME + 1;
 8004b84:	4b97      	ldr	r3, [pc, #604]	; (8004de4 <Check_RF_Flags+0x744>)
 8004b86:	2205      	movs	r2, #5
 8004b88:	701a      	strb	r2, [r3, #0]
					if((AwayModeZones[0] == '1')&&(Arm_Status == 1)&&(ZoneTriggers[0] < 5)) {
 8004b8a:	e285      	b.n	8005098 <Check_RF_Flags+0x9f8>
						} else {
							Buzzer_Annunciate = 6;
 8004b8c:	4b96      	ldr	r3, [pc, #600]	; (8004de8 <Check_RF_Flags+0x748>)
 8004b8e:	2206      	movs	r2, #6
 8004b90:	701a      	strb	r2, [r3, #0]
					if((AwayModeZones[0] == '1')&&(Arm_Status == 1)&&(ZoneTriggers[0] < 5)) {
 8004b92:	e281      	b.n	8005098 <Check_RF_Flags+0x9f8>
						}
					} else if((ChimeModeZones[0] == '1')&&(Arm_Status == 2)) {
 8004b94:	4b95      	ldr	r3, [pc, #596]	; (8004dec <Check_RF_Flags+0x74c>)
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	2b31      	cmp	r3, #49	; 0x31
 8004b9a:	d000      	beq.n	8004b9e <Check_RF_Flags+0x4fe>
 8004b9c:	e27c      	b.n	8005098 <Check_RF_Flags+0x9f8>
 8004b9e:	4b8e      	ldr	r3, [pc, #568]	; (8004dd8 <Check_RF_Flags+0x738>)
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d000      	beq.n	8004ba8 <Check_RF_Flags+0x508>
 8004ba6:	e277      	b.n	8005098 <Check_RF_Flags+0x9f8>
						if(ChimeSMS_Enabled == 1) {
 8004ba8:	4b91      	ldr	r3, [pc, #580]	; (8004df0 <Check_RF_Flags+0x750>)
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d116      	bne.n	8004bde <Check_RF_Flags+0x53e>
							memset(Message, 0, 10);
 8004bb0:	4b83      	ldr	r3, [pc, #524]	; (8004dc0 <Check_RF_Flags+0x720>)
 8004bb2:	220a      	movs	r2, #10
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	0018      	movs	r0, r3
 8004bb8:	f00d fa20 	bl	8011ffc <memset>
							Message[0] = EE_ZONE1_MESSAGE;
 8004bbc:	4b80      	ldr	r3, [pc, #512]	; (8004dc0 <Check_RF_Flags+0x720>)
 8004bbe:	221b      	movs	r2, #27
 8004bc0:	701a      	strb	r2, [r3, #0]
							Message[1] = EE_AT_MESSAGE;
 8004bc2:	4b7f      	ldr	r3, [pc, #508]	; (8004dc0 <Check_RF_Flags+0x720>)
 8004bc4:	2233      	movs	r2, #51	; 0x33
 8004bc6:	705a      	strb	r2, [r3, #1]
							Message[2] = 0;
 8004bc8:	4b7d      	ldr	r3, [pc, #500]	; (8004dc0 <Check_RF_Flags+0x720>)
 8004bca:	2200      	movs	r2, #0
 8004bcc:	709a      	strb	r2, [r3, #2]

							Add_Message_to_Que(Message, 0, 0, 0, TRUE);
 8004bce:	487c      	ldr	r0, [pc, #496]	; (8004dc0 <Check_RF_Flags+0x720>)
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	9300      	str	r3, [sp, #0]
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	2100      	movs	r1, #0
 8004bda:	f002 f9a7 	bl	8006f2c <Add_Message_to_Que>
						}
						if(SoundModeChimeZones[0] == '1'){
 8004bde:	4b85      	ldr	r3, [pc, #532]	; (8004df4 <Check_RF_Flags+0x754>)
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	2b31      	cmp	r3, #49	; 0x31
 8004be4:	d106      	bne.n	8004bf4 <Check_RF_Flags+0x554>
							Siren_Time = SIREN_SECONDS;
 8004be6:	4b78      	ldr	r3, [pc, #480]	; (8004dc8 <Check_RF_Flags+0x728>)
 8004be8:	22f0      	movs	r2, #240	; 0xf0
 8004bea:	601a      	str	r2, [r3, #0]
							Alarm_Out_Time = OUTPUT_ON_TIME + 1;
 8004bec:	4b7d      	ldr	r3, [pc, #500]	; (8004de4 <Check_RF_Flags+0x744>)
 8004bee:	2205      	movs	r2, #5
 8004bf0:	701a      	strb	r2, [r3, #0]
 8004bf2:	e251      	b.n	8005098 <Check_RF_Flags+0x9f8>
						}else{
							//  Chime Trigger
							Buzzer_Annunciate = 6;
 8004bf4:	4b7c      	ldr	r3, [pc, #496]	; (8004de8 <Check_RF_Flags+0x748>)
 8004bf6:	2206      	movs	r2, #6
 8004bf8:	701a      	strb	r2, [r3, #0]
 8004bfa:	e24d      	b.n	8005098 <Check_RF_Flags+0x9f8>
						}

					}
				} else if(button == (ZONE2TRIG | DEVICEBIT)) {
 8004bfc:	4b6f      	ldr	r3, [pc, #444]	; (8004dbc <Check_RF_Flags+0x71c>)
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	2b0a      	cmp	r3, #10
 8004c02:	d000      	beq.n	8004c06 <Check_RF_Flags+0x566>
 8004c04:	e071      	b.n	8004cea <Check_RF_Flags+0x64a>
					if((AwayModeZones[1] == '1')&&(Arm_Status == 1)&&(ZoneTriggers[1] < 5)) {
 8004c06:	4b73      	ldr	r3, [pc, #460]	; (8004dd4 <Check_RF_Flags+0x734>)
 8004c08:	785b      	ldrb	r3, [r3, #1]
 8004c0a:	2b31      	cmp	r3, #49	; 0x31
 8004c0c:	d139      	bne.n	8004c82 <Check_RF_Flags+0x5e2>
 8004c0e:	4b72      	ldr	r3, [pc, #456]	; (8004dd8 <Check_RF_Flags+0x738>)
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d135      	bne.n	8004c82 <Check_RF_Flags+0x5e2>
 8004c16:	4b71      	ldr	r3, [pc, #452]	; (8004ddc <Check_RF_Flags+0x73c>)
 8004c18:	785b      	ldrb	r3, [r3, #1]
 8004c1a:	2b04      	cmp	r3, #4
 8004c1c:	d831      	bhi.n	8004c82 <Check_RF_Flags+0x5e2>
						ZoneTriggers[1]++;
 8004c1e:	4b6f      	ldr	r3, [pc, #444]	; (8004ddc <Check_RF_Flags+0x73c>)
 8004c20:	785b      	ldrb	r3, [r3, #1]
 8004c22:	3301      	adds	r3, #1
 8004c24:	b2da      	uxtb	r2, r3
 8004c26:	4b6d      	ldr	r3, [pc, #436]	; (8004ddc <Check_RF_Flags+0x73c>)
 8004c28:	705a      	strb	r2, [r3, #1]
						memset(Message, 0, 10);
 8004c2a:	4b65      	ldr	r3, [pc, #404]	; (8004dc0 <Check_RF_Flags+0x720>)
 8004c2c:	220a      	movs	r2, #10
 8004c2e:	2100      	movs	r1, #0
 8004c30:	0018      	movs	r0, r3
 8004c32:	f00d f9e3 	bl	8011ffc <memset>
						Message[0] = EE_ZONE2_MESSAGE;
 8004c36:	4b62      	ldr	r3, [pc, #392]	; (8004dc0 <Check_RF_Flags+0x720>)
 8004c38:	221c      	movs	r2, #28
 8004c3a:	701a      	strb	r2, [r3, #0]
						Message[1] = EE_AT_MESSAGE;
 8004c3c:	4b60      	ldr	r3, [pc, #384]	; (8004dc0 <Check_RF_Flags+0x720>)
 8004c3e:	2233      	movs	r2, #51	; 0x33
 8004c40:	705a      	strb	r2, [r3, #1]
						Message[2] = 0;
 8004c42:	4b5f      	ldr	r3, [pc, #380]	; (8004dc0 <Check_RF_Flags+0x720>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	709a      	strb	r2, [r3, #2]

						Add_Message_to_Que(Message, 0, 0, 0, TRUE);
 8004c48:	485d      	ldr	r0, [pc, #372]	; (8004dc0 <Check_RF_Flags+0x720>)
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	2300      	movs	r3, #0
 8004c50:	2200      	movs	r2, #0
 8004c52:	2100      	movs	r1, #0
 8004c54:	f002 f96a 	bl	8006f2c <Add_Message_to_Que>
						if(AnyModeChimeZones[1] == '0') {
 8004c58:	4b61      	ldr	r3, [pc, #388]	; (8004de0 <Check_RF_Flags+0x740>)
 8004c5a:	785b      	ldrb	r3, [r3, #1]
 8004c5c:	2b30      	cmp	r3, #48	; 0x30
 8004c5e:	d106      	bne.n	8004c6e <Check_RF_Flags+0x5ce>
							Siren_Time = SIREN_SECONDS;
 8004c60:	4b59      	ldr	r3, [pc, #356]	; (8004dc8 <Check_RF_Flags+0x728>)
 8004c62:	22f0      	movs	r2, #240	; 0xf0
 8004c64:	601a      	str	r2, [r3, #0]
							Alarm_Out_Time = OUTPUT_ON_TIME + 1;
 8004c66:	4b5f      	ldr	r3, [pc, #380]	; (8004de4 <Check_RF_Flags+0x744>)
 8004c68:	2205      	movs	r2, #5
 8004c6a:	701a      	strb	r2, [r3, #0]
 8004c6c:	e002      	b.n	8004c74 <Check_RF_Flags+0x5d4>
						} else {
							Buzzer_Annunciate = 6;
 8004c6e:	4b5e      	ldr	r3, [pc, #376]	; (8004de8 <Check_RF_Flags+0x748>)
 8004c70:	2206      	movs	r2, #6
 8004c72:	701a      	strb	r2, [r3, #0]
						}	Siren_Time = SIREN_SECONDS;
 8004c74:	4b54      	ldr	r3, [pc, #336]	; (8004dc8 <Check_RF_Flags+0x728>)
 8004c76:	22f0      	movs	r2, #240	; 0xf0
 8004c78:	601a      	str	r2, [r3, #0]

						Alarm_Out_Time = OUTPUT_ON_TIME + 1;
 8004c7a:	4b5a      	ldr	r3, [pc, #360]	; (8004de4 <Check_RF_Flags+0x744>)
 8004c7c:	2205      	movs	r2, #5
 8004c7e:	701a      	strb	r2, [r3, #0]
					if((AwayModeZones[1] == '1')&&(Arm_Status == 1)&&(ZoneTriggers[1] < 5)) {
 8004c80:	e20a      	b.n	8005098 <Check_RF_Flags+0x9f8>
					} else if((ChimeModeZones[1] == '1')&&(Arm_Status == 2)) {
 8004c82:	4b5a      	ldr	r3, [pc, #360]	; (8004dec <Check_RF_Flags+0x74c>)
 8004c84:	785b      	ldrb	r3, [r3, #1]
 8004c86:	2b31      	cmp	r3, #49	; 0x31
 8004c88:	d000      	beq.n	8004c8c <Check_RF_Flags+0x5ec>
 8004c8a:	e205      	b.n	8005098 <Check_RF_Flags+0x9f8>
 8004c8c:	4b52      	ldr	r3, [pc, #328]	; (8004dd8 <Check_RF_Flags+0x738>)
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d000      	beq.n	8004c96 <Check_RF_Flags+0x5f6>
 8004c94:	e200      	b.n	8005098 <Check_RF_Flags+0x9f8>
						if(ChimeSMS_Enabled == 1) {
 8004c96:	4b56      	ldr	r3, [pc, #344]	; (8004df0 <Check_RF_Flags+0x750>)
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d116      	bne.n	8004ccc <Check_RF_Flags+0x62c>
							memset(Message, 0, 10);
 8004c9e:	4b48      	ldr	r3, [pc, #288]	; (8004dc0 <Check_RF_Flags+0x720>)
 8004ca0:	220a      	movs	r2, #10
 8004ca2:	2100      	movs	r1, #0
 8004ca4:	0018      	movs	r0, r3
 8004ca6:	f00d f9a9 	bl	8011ffc <memset>
							Message[0] = EE_ZONE2_MESSAGE;
 8004caa:	4b45      	ldr	r3, [pc, #276]	; (8004dc0 <Check_RF_Flags+0x720>)
 8004cac:	221c      	movs	r2, #28
 8004cae:	701a      	strb	r2, [r3, #0]
							Message[1] = EE_AT_MESSAGE;
 8004cb0:	4b43      	ldr	r3, [pc, #268]	; (8004dc0 <Check_RF_Flags+0x720>)
 8004cb2:	2233      	movs	r2, #51	; 0x33
 8004cb4:	705a      	strb	r2, [r3, #1]
							Message[2] = 0;
 8004cb6:	4b42      	ldr	r3, [pc, #264]	; (8004dc0 <Check_RF_Flags+0x720>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	709a      	strb	r2, [r3, #2]

							Add_Message_to_Que(Message, 0, 0, 0, TRUE);
 8004cbc:	4840      	ldr	r0, [pc, #256]	; (8004dc0 <Check_RF_Flags+0x720>)
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	9300      	str	r3, [sp, #0]
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	2100      	movs	r1, #0
 8004cc8:	f002 f930 	bl	8006f2c <Add_Message_to_Que>
						}
						if(SoundModeChimeZones[1] == '1'){
 8004ccc:	4b49      	ldr	r3, [pc, #292]	; (8004df4 <Check_RF_Flags+0x754>)
 8004cce:	785b      	ldrb	r3, [r3, #1]
 8004cd0:	2b31      	cmp	r3, #49	; 0x31
 8004cd2:	d106      	bne.n	8004ce2 <Check_RF_Flags+0x642>
							Siren_Time = SIREN_SECONDS;
 8004cd4:	4b3c      	ldr	r3, [pc, #240]	; (8004dc8 <Check_RF_Flags+0x728>)
 8004cd6:	22f0      	movs	r2, #240	; 0xf0
 8004cd8:	601a      	str	r2, [r3, #0]
							Alarm_Out_Time = OUTPUT_ON_TIME + 1;
 8004cda:	4b42      	ldr	r3, [pc, #264]	; (8004de4 <Check_RF_Flags+0x744>)
 8004cdc:	2205      	movs	r2, #5
 8004cde:	701a      	strb	r2, [r3, #0]
 8004ce0:	e1da      	b.n	8005098 <Check_RF_Flags+0x9f8>
						}else{
							//  Chime Trigger
							Buzzer_Annunciate = 6;
 8004ce2:	4b41      	ldr	r3, [pc, #260]	; (8004de8 <Check_RF_Flags+0x748>)
 8004ce4:	2206      	movs	r2, #6
 8004ce6:	701a      	strb	r2, [r3, #0]
 8004ce8:	e1d6      	b.n	8005098 <Check_RF_Flags+0x9f8>
						}
					}
				} else if(button == (ZONE3TRIG | DEVICEBIT)) {
 8004cea:	4b34      	ldr	r3, [pc, #208]	; (8004dbc <Check_RF_Flags+0x71c>)
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	2b0b      	cmp	r3, #11
 8004cf0:	d000      	beq.n	8004cf4 <Check_RF_Flags+0x654>
 8004cf2:	e081      	b.n	8004df8 <Check_RF_Flags+0x758>
					if((AwayModeZones[2] == '1')&&(Arm_Status == 1)&&(ZoneTriggers[2] < 5)) {
 8004cf4:	4b37      	ldr	r3, [pc, #220]	; (8004dd4 <Check_RF_Flags+0x734>)
 8004cf6:	789b      	ldrb	r3, [r3, #2]
 8004cf8:	2b31      	cmp	r3, #49	; 0x31
 8004cfa:	d12b      	bne.n	8004d54 <Check_RF_Flags+0x6b4>
 8004cfc:	4b36      	ldr	r3, [pc, #216]	; (8004dd8 <Check_RF_Flags+0x738>)
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d127      	bne.n	8004d54 <Check_RF_Flags+0x6b4>
 8004d04:	4b35      	ldr	r3, [pc, #212]	; (8004ddc <Check_RF_Flags+0x73c>)
 8004d06:	789b      	ldrb	r3, [r3, #2]
 8004d08:	2b04      	cmp	r3, #4
 8004d0a:	d823      	bhi.n	8004d54 <Check_RF_Flags+0x6b4>
						ZoneTriggers[2]++;
 8004d0c:	4b33      	ldr	r3, [pc, #204]	; (8004ddc <Check_RF_Flags+0x73c>)
 8004d0e:	789b      	ldrb	r3, [r3, #2]
 8004d10:	3301      	adds	r3, #1
 8004d12:	b2da      	uxtb	r2, r3
 8004d14:	4b31      	ldr	r3, [pc, #196]	; (8004ddc <Check_RF_Flags+0x73c>)
 8004d16:	709a      	strb	r2, [r3, #2]
						memset(Message, 0, 10);
 8004d18:	4b29      	ldr	r3, [pc, #164]	; (8004dc0 <Check_RF_Flags+0x720>)
 8004d1a:	220a      	movs	r2, #10
 8004d1c:	2100      	movs	r1, #0
 8004d1e:	0018      	movs	r0, r3
 8004d20:	f00d f96c 	bl	8011ffc <memset>
						Message[0] = EE_ZONE3_MESSAGE;
 8004d24:	4b26      	ldr	r3, [pc, #152]	; (8004dc0 <Check_RF_Flags+0x720>)
 8004d26:	221d      	movs	r2, #29
 8004d28:	701a      	strb	r2, [r3, #0]
						Message[1] = EE_AT_MESSAGE;
 8004d2a:	4b25      	ldr	r3, [pc, #148]	; (8004dc0 <Check_RF_Flags+0x720>)
 8004d2c:	2233      	movs	r2, #51	; 0x33
 8004d2e:	705a      	strb	r2, [r3, #1]
						Message[2] = 0;
 8004d30:	4b23      	ldr	r3, [pc, #140]	; (8004dc0 <Check_RF_Flags+0x720>)
 8004d32:	2200      	movs	r2, #0
 8004d34:	709a      	strb	r2, [r3, #2]

						Add_Message_to_Que(Message, 0, 0, 0, TRUE);
 8004d36:	4822      	ldr	r0, [pc, #136]	; (8004dc0 <Check_RF_Flags+0x720>)
 8004d38:	2301      	movs	r3, #1
 8004d3a:	9300      	str	r3, [sp, #0]
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	2200      	movs	r2, #0
 8004d40:	2100      	movs	r1, #0
 8004d42:	f002 f8f3 	bl	8006f2c <Add_Message_to_Que>
						Siren_Time = SIREN_SECONDS;
 8004d46:	4b20      	ldr	r3, [pc, #128]	; (8004dc8 <Check_RF_Flags+0x728>)
 8004d48:	22f0      	movs	r2, #240	; 0xf0
 8004d4a:	601a      	str	r2, [r3, #0]

						Alarm_Out_Time = OUTPUT_ON_TIME + 1;
 8004d4c:	4b25      	ldr	r3, [pc, #148]	; (8004de4 <Check_RF_Flags+0x744>)
 8004d4e:	2205      	movs	r2, #5
 8004d50:	701a      	strb	r2, [r3, #0]
					if((AwayModeZones[2] == '1')&&(Arm_Status == 1)&&(ZoneTriggers[2] < 5)) {
 8004d52:	e1a1      	b.n	8005098 <Check_RF_Flags+0x9f8>
					} else if((ChimeModeZones[2] == '1')&&(Arm_Status == 2)) {
 8004d54:	4b25      	ldr	r3, [pc, #148]	; (8004dec <Check_RF_Flags+0x74c>)
 8004d56:	789b      	ldrb	r3, [r3, #2]
 8004d58:	2b31      	cmp	r3, #49	; 0x31
 8004d5a:	d000      	beq.n	8004d5e <Check_RF_Flags+0x6be>
 8004d5c:	e19c      	b.n	8005098 <Check_RF_Flags+0x9f8>
 8004d5e:	4b1e      	ldr	r3, [pc, #120]	; (8004dd8 <Check_RF_Flags+0x738>)
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d000      	beq.n	8004d68 <Check_RF_Flags+0x6c8>
 8004d66:	e197      	b.n	8005098 <Check_RF_Flags+0x9f8>
						if(ChimeSMS_Enabled == 1) {
 8004d68:	4b21      	ldr	r3, [pc, #132]	; (8004df0 <Check_RF_Flags+0x750>)
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d116      	bne.n	8004d9e <Check_RF_Flags+0x6fe>
							memset(Message, 0, 10);
 8004d70:	4b13      	ldr	r3, [pc, #76]	; (8004dc0 <Check_RF_Flags+0x720>)
 8004d72:	220a      	movs	r2, #10
 8004d74:	2100      	movs	r1, #0
 8004d76:	0018      	movs	r0, r3
 8004d78:	f00d f940 	bl	8011ffc <memset>
							Message[0] = EE_ZONE3_MESSAGE;
 8004d7c:	4b10      	ldr	r3, [pc, #64]	; (8004dc0 <Check_RF_Flags+0x720>)
 8004d7e:	221d      	movs	r2, #29
 8004d80:	701a      	strb	r2, [r3, #0]
							Message[1] = EE_AT_MESSAGE;
 8004d82:	4b0f      	ldr	r3, [pc, #60]	; (8004dc0 <Check_RF_Flags+0x720>)
 8004d84:	2233      	movs	r2, #51	; 0x33
 8004d86:	705a      	strb	r2, [r3, #1]
							Message[2] = 0;
 8004d88:	4b0d      	ldr	r3, [pc, #52]	; (8004dc0 <Check_RF_Flags+0x720>)
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	709a      	strb	r2, [r3, #2]

							Add_Message_to_Que(Message, 0, 0, 0, TRUE);
 8004d8e:	480c      	ldr	r0, [pc, #48]	; (8004dc0 <Check_RF_Flags+0x720>)
 8004d90:	2301      	movs	r3, #1
 8004d92:	9300      	str	r3, [sp, #0]
 8004d94:	2300      	movs	r3, #0
 8004d96:	2200      	movs	r2, #0
 8004d98:	2100      	movs	r1, #0
 8004d9a:	f002 f8c7 	bl	8006f2c <Add_Message_to_Que>
						}
						if(SoundModeChimeZones[2] == '1'){
 8004d9e:	4b15      	ldr	r3, [pc, #84]	; (8004df4 <Check_RF_Flags+0x754>)
 8004da0:	789b      	ldrb	r3, [r3, #2]
 8004da2:	2b31      	cmp	r3, #49	; 0x31
 8004da4:	d106      	bne.n	8004db4 <Check_RF_Flags+0x714>
							Siren_Time = SIREN_SECONDS;
 8004da6:	4b08      	ldr	r3, [pc, #32]	; (8004dc8 <Check_RF_Flags+0x728>)
 8004da8:	22f0      	movs	r2, #240	; 0xf0
 8004daa:	601a      	str	r2, [r3, #0]
							Alarm_Out_Time = OUTPUT_ON_TIME + 1;
 8004dac:	4b0d      	ldr	r3, [pc, #52]	; (8004de4 <Check_RF_Flags+0x744>)
 8004dae:	2205      	movs	r2, #5
 8004db0:	701a      	strb	r2, [r3, #0]
 8004db2:	e171      	b.n	8005098 <Check_RF_Flags+0x9f8>
						}else{
							//  Chime Trigger
							Buzzer_Annunciate = 6;
 8004db4:	4b0c      	ldr	r3, [pc, #48]	; (8004de8 <Check_RF_Flags+0x748>)
 8004db6:	2206      	movs	r2, #6
 8004db8:	701a      	strb	r2, [r3, #0]
 8004dba:	e16d      	b.n	8005098 <Check_RF_Flags+0x9f8>
 8004dbc:	20001635 	.word	0x20001635
 8004dc0:	200006c8 	.word	0x200006c8
 8004dc4:	200007ac 	.word	0x200007ac
 8004dc8:	200007b4 	.word	0x200007b4
 8004dcc:	2000166f 	.word	0x2000166f
 8004dd0:	200007b0 	.word	0x200007b0
 8004dd4:	20001358 	.word	0x20001358
 8004dd8:	200007b8 	.word	0x200007b8
 8004ddc:	20001638 	.word	0x20001638
 8004de0:	20001368 	.word	0x20001368
 8004de4:	200007ad 	.word	0x200007ad
 8004de8:	20001687 	.word	0x20001687
 8004dec:	20001360 	.word	0x20001360
 8004df0:	2000134c 	.word	0x2000134c
 8004df4:	20001370 	.word	0x20001370
						}
					}
				} else if(button == (ZONE4TRIG | DEVICEBIT)) {
 8004df8:	4baf      	ldr	r3, [pc, #700]	; (80050b8 <Check_RF_Flags+0xa18>)
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	2b0c      	cmp	r3, #12
 8004dfe:	d16b      	bne.n	8004ed8 <Check_RF_Flags+0x838>
					if((AwayModeZones[3] == '1')&&(Arm_Status == 1)&&(ZoneTriggers[3] < 5)) {
 8004e00:	4bae      	ldr	r3, [pc, #696]	; (80050bc <Check_RF_Flags+0xa1c>)
 8004e02:	78db      	ldrb	r3, [r3, #3]
 8004e04:	2b31      	cmp	r3, #49	; 0x31
 8004e06:	d133      	bne.n	8004e70 <Check_RF_Flags+0x7d0>
 8004e08:	4bad      	ldr	r3, [pc, #692]	; (80050c0 <Check_RF_Flags+0xa20>)
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d12f      	bne.n	8004e70 <Check_RF_Flags+0x7d0>
 8004e10:	4bac      	ldr	r3, [pc, #688]	; (80050c4 <Check_RF_Flags+0xa24>)
 8004e12:	78db      	ldrb	r3, [r3, #3]
 8004e14:	2b04      	cmp	r3, #4
 8004e16:	d82b      	bhi.n	8004e70 <Check_RF_Flags+0x7d0>
						ZoneTriggers[3]++;
 8004e18:	4baa      	ldr	r3, [pc, #680]	; (80050c4 <Check_RF_Flags+0xa24>)
 8004e1a:	78db      	ldrb	r3, [r3, #3]
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	b2da      	uxtb	r2, r3
 8004e20:	4ba8      	ldr	r3, [pc, #672]	; (80050c4 <Check_RF_Flags+0xa24>)
 8004e22:	70da      	strb	r2, [r3, #3]
						memset(Message, 0, 10);
 8004e24:	4ba8      	ldr	r3, [pc, #672]	; (80050c8 <Check_RF_Flags+0xa28>)
 8004e26:	220a      	movs	r2, #10
 8004e28:	2100      	movs	r1, #0
 8004e2a:	0018      	movs	r0, r3
 8004e2c:	f00d f8e6 	bl	8011ffc <memset>
						Message[0] = EE_ZONE4_MESSAGE;
 8004e30:	4ba5      	ldr	r3, [pc, #660]	; (80050c8 <Check_RF_Flags+0xa28>)
 8004e32:	221e      	movs	r2, #30
 8004e34:	701a      	strb	r2, [r3, #0]
						Message[1] = EE_AT_MESSAGE;
 8004e36:	4ba4      	ldr	r3, [pc, #656]	; (80050c8 <Check_RF_Flags+0xa28>)
 8004e38:	2233      	movs	r2, #51	; 0x33
 8004e3a:	705a      	strb	r2, [r3, #1]
						Message[2] = 0;
 8004e3c:	4ba2      	ldr	r3, [pc, #648]	; (80050c8 <Check_RF_Flags+0xa28>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	709a      	strb	r2, [r3, #2]

						Add_Message_to_Que(Message, 0, 0, 0, TRUE);
 8004e42:	48a1      	ldr	r0, [pc, #644]	; (80050c8 <Check_RF_Flags+0xa28>)
 8004e44:	2301      	movs	r3, #1
 8004e46:	9300      	str	r3, [sp, #0]
 8004e48:	2300      	movs	r3, #0
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	2100      	movs	r1, #0
 8004e4e:	f002 f86d 	bl	8006f2c <Add_Message_to_Que>
						if(AnyModeChimeZones[3] == '0') {
 8004e52:	4b9e      	ldr	r3, [pc, #632]	; (80050cc <Check_RF_Flags+0xa2c>)
 8004e54:	78db      	ldrb	r3, [r3, #3]
 8004e56:	2b30      	cmp	r3, #48	; 0x30
 8004e58:	d106      	bne.n	8004e68 <Check_RF_Flags+0x7c8>
							Siren_Time = SIREN_SECONDS;
 8004e5a:	4b9d      	ldr	r3, [pc, #628]	; (80050d0 <Check_RF_Flags+0xa30>)
 8004e5c:	22f0      	movs	r2, #240	; 0xf0
 8004e5e:	601a      	str	r2, [r3, #0]
							Alarm_Out_Time = OUTPUT_ON_TIME + 1;
 8004e60:	4b9c      	ldr	r3, [pc, #624]	; (80050d4 <Check_RF_Flags+0xa34>)
 8004e62:	2205      	movs	r2, #5
 8004e64:	701a      	strb	r2, [r3, #0]
					if((AwayModeZones[3] == '1')&&(Arm_Status == 1)&&(ZoneTriggers[3] < 5)) {
 8004e66:	e117      	b.n	8005098 <Check_RF_Flags+0x9f8>
						} else {
							Buzzer_Annunciate = 6;
 8004e68:	4b9b      	ldr	r3, [pc, #620]	; (80050d8 <Check_RF_Flags+0xa38>)
 8004e6a:	2206      	movs	r2, #6
 8004e6c:	701a      	strb	r2, [r3, #0]
					if((AwayModeZones[3] == '1')&&(Arm_Status == 1)&&(ZoneTriggers[3] < 5)) {
 8004e6e:	e113      	b.n	8005098 <Check_RF_Flags+0x9f8>
						}
					} else if((ChimeModeZones[3] == '1')&&(Arm_Status == 2)) {
 8004e70:	4b9a      	ldr	r3, [pc, #616]	; (80050dc <Check_RF_Flags+0xa3c>)
 8004e72:	78db      	ldrb	r3, [r3, #3]
 8004e74:	2b31      	cmp	r3, #49	; 0x31
 8004e76:	d000      	beq.n	8004e7a <Check_RF_Flags+0x7da>
 8004e78:	e10e      	b.n	8005098 <Check_RF_Flags+0x9f8>
 8004e7a:	4b91      	ldr	r3, [pc, #580]	; (80050c0 <Check_RF_Flags+0xa20>)
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d000      	beq.n	8004e84 <Check_RF_Flags+0x7e4>
 8004e82:	e109      	b.n	8005098 <Check_RF_Flags+0x9f8>
						if(ChimeSMS_Enabled == 1) {
 8004e84:	4b96      	ldr	r3, [pc, #600]	; (80050e0 <Check_RF_Flags+0xa40>)
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d116      	bne.n	8004eba <Check_RF_Flags+0x81a>
							memset(Message, 0, 10);
 8004e8c:	4b8e      	ldr	r3, [pc, #568]	; (80050c8 <Check_RF_Flags+0xa28>)
 8004e8e:	220a      	movs	r2, #10
 8004e90:	2100      	movs	r1, #0
 8004e92:	0018      	movs	r0, r3
 8004e94:	f00d f8b2 	bl	8011ffc <memset>
							Message[0] = EE_ZONE4_MESSAGE;
 8004e98:	4b8b      	ldr	r3, [pc, #556]	; (80050c8 <Check_RF_Flags+0xa28>)
 8004e9a:	221e      	movs	r2, #30
 8004e9c:	701a      	strb	r2, [r3, #0]
							Message[1] = EE_AT_MESSAGE;
 8004e9e:	4b8a      	ldr	r3, [pc, #552]	; (80050c8 <Check_RF_Flags+0xa28>)
 8004ea0:	2233      	movs	r2, #51	; 0x33
 8004ea2:	705a      	strb	r2, [r3, #1]
							Message[2] = 0;
 8004ea4:	4b88      	ldr	r3, [pc, #544]	; (80050c8 <Check_RF_Flags+0xa28>)
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	709a      	strb	r2, [r3, #2]

							Add_Message_to_Que(Message, 0, 0, 0, TRUE);
 8004eaa:	4887      	ldr	r0, [pc, #540]	; (80050c8 <Check_RF_Flags+0xa28>)
 8004eac:	2301      	movs	r3, #1
 8004eae:	9300      	str	r3, [sp, #0]
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	f002 f839 	bl	8006f2c <Add_Message_to_Que>
						}
						if(SoundModeChimeZones[0] == '1'){
 8004eba:	4b8a      	ldr	r3, [pc, #552]	; (80050e4 <Check_RF_Flags+0xa44>)
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	2b31      	cmp	r3, #49	; 0x31
 8004ec0:	d106      	bne.n	8004ed0 <Check_RF_Flags+0x830>
							Siren_Time = SIREN_SECONDS;
 8004ec2:	4b83      	ldr	r3, [pc, #524]	; (80050d0 <Check_RF_Flags+0xa30>)
 8004ec4:	22f0      	movs	r2, #240	; 0xf0
 8004ec6:	601a      	str	r2, [r3, #0]
							Alarm_Out_Time = OUTPUT_ON_TIME + 1;
 8004ec8:	4b82      	ldr	r3, [pc, #520]	; (80050d4 <Check_RF_Flags+0xa34>)
 8004eca:	2205      	movs	r2, #5
 8004ecc:	701a      	strb	r2, [r3, #0]
 8004ece:	e0e3      	b.n	8005098 <Check_RF_Flags+0x9f8>
						}else{
							//  Chime Trigger
							Buzzer_Annunciate = 6;
 8004ed0:	4b81      	ldr	r3, [pc, #516]	; (80050d8 <Check_RF_Flags+0xa38>)
 8004ed2:	2206      	movs	r2, #6
 8004ed4:	701a      	strb	r2, [r3, #0]
 8004ed6:	e0df      	b.n	8005098 <Check_RF_Flags+0x9f8>
						}
					}
				} else if(button == (ZONE5TRIG | DEVICEBIT)) {
 8004ed8:	4b77      	ldr	r3, [pc, #476]	; (80050b8 <Check_RF_Flags+0xa18>)
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	2b0d      	cmp	r3, #13
 8004ede:	d16b      	bne.n	8004fb8 <Check_RF_Flags+0x918>
					if((AwayModeZones[4] == '1')&&(Arm_Status == 1)&&(ZoneTriggers[4] < 5)) {
 8004ee0:	4b76      	ldr	r3, [pc, #472]	; (80050bc <Check_RF_Flags+0xa1c>)
 8004ee2:	791b      	ldrb	r3, [r3, #4]
 8004ee4:	2b31      	cmp	r3, #49	; 0x31
 8004ee6:	d133      	bne.n	8004f50 <Check_RF_Flags+0x8b0>
 8004ee8:	4b75      	ldr	r3, [pc, #468]	; (80050c0 <Check_RF_Flags+0xa20>)
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d12f      	bne.n	8004f50 <Check_RF_Flags+0x8b0>
 8004ef0:	4b74      	ldr	r3, [pc, #464]	; (80050c4 <Check_RF_Flags+0xa24>)
 8004ef2:	791b      	ldrb	r3, [r3, #4]
 8004ef4:	2b04      	cmp	r3, #4
 8004ef6:	d82b      	bhi.n	8004f50 <Check_RF_Flags+0x8b0>
						ZoneTriggers[4]++;
 8004ef8:	4b72      	ldr	r3, [pc, #456]	; (80050c4 <Check_RF_Flags+0xa24>)
 8004efa:	791b      	ldrb	r3, [r3, #4]
 8004efc:	3301      	adds	r3, #1
 8004efe:	b2da      	uxtb	r2, r3
 8004f00:	4b70      	ldr	r3, [pc, #448]	; (80050c4 <Check_RF_Flags+0xa24>)
 8004f02:	711a      	strb	r2, [r3, #4]
						memset(Message, 0, 10);
 8004f04:	4b70      	ldr	r3, [pc, #448]	; (80050c8 <Check_RF_Flags+0xa28>)
 8004f06:	220a      	movs	r2, #10
 8004f08:	2100      	movs	r1, #0
 8004f0a:	0018      	movs	r0, r3
 8004f0c:	f00d f876 	bl	8011ffc <memset>
						Message[0] = EE_ZONE5_MESSAGE;
 8004f10:	4b6d      	ldr	r3, [pc, #436]	; (80050c8 <Check_RF_Flags+0xa28>)
 8004f12:	221f      	movs	r2, #31
 8004f14:	701a      	strb	r2, [r3, #0]
						Message[1] = EE_AT_MESSAGE;
 8004f16:	4b6c      	ldr	r3, [pc, #432]	; (80050c8 <Check_RF_Flags+0xa28>)
 8004f18:	2233      	movs	r2, #51	; 0x33
 8004f1a:	705a      	strb	r2, [r3, #1]
						Message[2] = 0;
 8004f1c:	4b6a      	ldr	r3, [pc, #424]	; (80050c8 <Check_RF_Flags+0xa28>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	709a      	strb	r2, [r3, #2]

						Add_Message_to_Que(Message, 0, 0, 0, TRUE);
 8004f22:	4869      	ldr	r0, [pc, #420]	; (80050c8 <Check_RF_Flags+0xa28>)
 8004f24:	2301      	movs	r3, #1
 8004f26:	9300      	str	r3, [sp, #0]
 8004f28:	2300      	movs	r3, #0
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	2100      	movs	r1, #0
 8004f2e:	f001 fffd 	bl	8006f2c <Add_Message_to_Que>
						if(AnyModeChimeZones[4] == '0') {
 8004f32:	4b66      	ldr	r3, [pc, #408]	; (80050cc <Check_RF_Flags+0xa2c>)
 8004f34:	791b      	ldrb	r3, [r3, #4]
 8004f36:	2b30      	cmp	r3, #48	; 0x30
 8004f38:	d106      	bne.n	8004f48 <Check_RF_Flags+0x8a8>
							Siren_Time = SIREN_SECONDS;
 8004f3a:	4b65      	ldr	r3, [pc, #404]	; (80050d0 <Check_RF_Flags+0xa30>)
 8004f3c:	22f0      	movs	r2, #240	; 0xf0
 8004f3e:	601a      	str	r2, [r3, #0]
							Alarm_Out_Time = OUTPUT_ON_TIME + 1;
 8004f40:	4b64      	ldr	r3, [pc, #400]	; (80050d4 <Check_RF_Flags+0xa34>)
 8004f42:	2205      	movs	r2, #5
 8004f44:	701a      	strb	r2, [r3, #0]
					if((AwayModeZones[4] == '1')&&(Arm_Status == 1)&&(ZoneTriggers[4] < 5)) {
 8004f46:	e0a7      	b.n	8005098 <Check_RF_Flags+0x9f8>
						} else {
							Buzzer_Annunciate = 6;
 8004f48:	4b63      	ldr	r3, [pc, #396]	; (80050d8 <Check_RF_Flags+0xa38>)
 8004f4a:	2206      	movs	r2, #6
 8004f4c:	701a      	strb	r2, [r3, #0]
					if((AwayModeZones[4] == '1')&&(Arm_Status == 1)&&(ZoneTriggers[4] < 5)) {
 8004f4e:	e0a3      	b.n	8005098 <Check_RF_Flags+0x9f8>
						}
					} else if((ChimeModeZones[4] == '1')&&(Arm_Status == 2)) {
 8004f50:	4b62      	ldr	r3, [pc, #392]	; (80050dc <Check_RF_Flags+0xa3c>)
 8004f52:	791b      	ldrb	r3, [r3, #4]
 8004f54:	2b31      	cmp	r3, #49	; 0x31
 8004f56:	d000      	beq.n	8004f5a <Check_RF_Flags+0x8ba>
 8004f58:	e09e      	b.n	8005098 <Check_RF_Flags+0x9f8>
 8004f5a:	4b59      	ldr	r3, [pc, #356]	; (80050c0 <Check_RF_Flags+0xa20>)
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d000      	beq.n	8004f64 <Check_RF_Flags+0x8c4>
 8004f62:	e099      	b.n	8005098 <Check_RF_Flags+0x9f8>
						if(ChimeSMS_Enabled == 1) {
 8004f64:	4b5e      	ldr	r3, [pc, #376]	; (80050e0 <Check_RF_Flags+0xa40>)
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d116      	bne.n	8004f9a <Check_RF_Flags+0x8fa>
							memset(Message, 0, 10);
 8004f6c:	4b56      	ldr	r3, [pc, #344]	; (80050c8 <Check_RF_Flags+0xa28>)
 8004f6e:	220a      	movs	r2, #10
 8004f70:	2100      	movs	r1, #0
 8004f72:	0018      	movs	r0, r3
 8004f74:	f00d f842 	bl	8011ffc <memset>
							Message[0] = EE_ZONE5_MESSAGE;
 8004f78:	4b53      	ldr	r3, [pc, #332]	; (80050c8 <Check_RF_Flags+0xa28>)
 8004f7a:	221f      	movs	r2, #31
 8004f7c:	701a      	strb	r2, [r3, #0]
							Message[1] = EE_AT_MESSAGE;
 8004f7e:	4b52      	ldr	r3, [pc, #328]	; (80050c8 <Check_RF_Flags+0xa28>)
 8004f80:	2233      	movs	r2, #51	; 0x33
 8004f82:	705a      	strb	r2, [r3, #1]
							Message[2] = 0;
 8004f84:	4b50      	ldr	r3, [pc, #320]	; (80050c8 <Check_RF_Flags+0xa28>)
 8004f86:	2200      	movs	r2, #0
 8004f88:	709a      	strb	r2, [r3, #2]

							Add_Message_to_Que(Message, 0, 0, 0, TRUE);
 8004f8a:	484f      	ldr	r0, [pc, #316]	; (80050c8 <Check_RF_Flags+0xa28>)
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	9300      	str	r3, [sp, #0]
 8004f90:	2300      	movs	r3, #0
 8004f92:	2200      	movs	r2, #0
 8004f94:	2100      	movs	r1, #0
 8004f96:	f001 ffc9 	bl	8006f2c <Add_Message_to_Que>
						}
						if(SoundModeChimeZones[0] == '1'){
 8004f9a:	4b52      	ldr	r3, [pc, #328]	; (80050e4 <Check_RF_Flags+0xa44>)
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	2b31      	cmp	r3, #49	; 0x31
 8004fa0:	d106      	bne.n	8004fb0 <Check_RF_Flags+0x910>
							Siren_Time = SIREN_SECONDS;
 8004fa2:	4b4b      	ldr	r3, [pc, #300]	; (80050d0 <Check_RF_Flags+0xa30>)
 8004fa4:	22f0      	movs	r2, #240	; 0xf0
 8004fa6:	601a      	str	r2, [r3, #0]
							Alarm_Out_Time = OUTPUT_ON_TIME + 1;
 8004fa8:	4b4a      	ldr	r3, [pc, #296]	; (80050d4 <Check_RF_Flags+0xa34>)
 8004faa:	2205      	movs	r2, #5
 8004fac:	701a      	strb	r2, [r3, #0]
 8004fae:	e073      	b.n	8005098 <Check_RF_Flags+0x9f8>
						}else{
							//  Chime Trigger
							Buzzer_Annunciate = 6;
 8004fb0:	4b49      	ldr	r3, [pc, #292]	; (80050d8 <Check_RF_Flags+0xa38>)
 8004fb2:	2206      	movs	r2, #6
 8004fb4:	701a      	strb	r2, [r3, #0]
 8004fb6:	e06f      	b.n	8005098 <Check_RF_Flags+0x9f8>
						}
					}
				} else if(button == (ZONE6TRIG | DEVICEBIT)) {
 8004fb8:	4b3f      	ldr	r3, [pc, #252]	; (80050b8 <Check_RF_Flags+0xa18>)
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	2b0e      	cmp	r3, #14
 8004fbe:	d16b      	bne.n	8005098 <Check_RF_Flags+0x9f8>
					if((AwayModeZones[5] == '1')&&(Arm_Status == 1)&&(ZoneTriggers[5] < 5)) {
 8004fc0:	4b3e      	ldr	r3, [pc, #248]	; (80050bc <Check_RF_Flags+0xa1c>)
 8004fc2:	795b      	ldrb	r3, [r3, #5]
 8004fc4:	2b31      	cmp	r3, #49	; 0x31
 8004fc6:	d133      	bne.n	8005030 <Check_RF_Flags+0x990>
 8004fc8:	4b3d      	ldr	r3, [pc, #244]	; (80050c0 <Check_RF_Flags+0xa20>)
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d12f      	bne.n	8005030 <Check_RF_Flags+0x990>
 8004fd0:	4b3c      	ldr	r3, [pc, #240]	; (80050c4 <Check_RF_Flags+0xa24>)
 8004fd2:	795b      	ldrb	r3, [r3, #5]
 8004fd4:	2b04      	cmp	r3, #4
 8004fd6:	d82b      	bhi.n	8005030 <Check_RF_Flags+0x990>
						ZoneTriggers[5]++;
 8004fd8:	4b3a      	ldr	r3, [pc, #232]	; (80050c4 <Check_RF_Flags+0xa24>)
 8004fda:	795b      	ldrb	r3, [r3, #5]
 8004fdc:	3301      	adds	r3, #1
 8004fde:	b2da      	uxtb	r2, r3
 8004fe0:	4b38      	ldr	r3, [pc, #224]	; (80050c4 <Check_RF_Flags+0xa24>)
 8004fe2:	715a      	strb	r2, [r3, #5]
						memset(Message, 0, 10);
 8004fe4:	4b38      	ldr	r3, [pc, #224]	; (80050c8 <Check_RF_Flags+0xa28>)
 8004fe6:	220a      	movs	r2, #10
 8004fe8:	2100      	movs	r1, #0
 8004fea:	0018      	movs	r0, r3
 8004fec:	f00d f806 	bl	8011ffc <memset>
						Message[0] = EE_ZONE6_MESSAGE;
 8004ff0:	4b35      	ldr	r3, [pc, #212]	; (80050c8 <Check_RF_Flags+0xa28>)
 8004ff2:	2220      	movs	r2, #32
 8004ff4:	701a      	strb	r2, [r3, #0]
						Message[1] = EE_AT_MESSAGE;
 8004ff6:	4b34      	ldr	r3, [pc, #208]	; (80050c8 <Check_RF_Flags+0xa28>)
 8004ff8:	2233      	movs	r2, #51	; 0x33
 8004ffa:	705a      	strb	r2, [r3, #1]
						Message[2] = 0;
 8004ffc:	4b32      	ldr	r3, [pc, #200]	; (80050c8 <Check_RF_Flags+0xa28>)
 8004ffe:	2200      	movs	r2, #0
 8005000:	709a      	strb	r2, [r3, #2]

						Add_Message_to_Que(Message, 0, 0, 0, TRUE);
 8005002:	4831      	ldr	r0, [pc, #196]	; (80050c8 <Check_RF_Flags+0xa28>)
 8005004:	2301      	movs	r3, #1
 8005006:	9300      	str	r3, [sp, #0]
 8005008:	2300      	movs	r3, #0
 800500a:	2200      	movs	r2, #0
 800500c:	2100      	movs	r1, #0
 800500e:	f001 ff8d 	bl	8006f2c <Add_Message_to_Que>
						if(AnyModeChimeZones[5] == '0') {
 8005012:	4b2e      	ldr	r3, [pc, #184]	; (80050cc <Check_RF_Flags+0xa2c>)
 8005014:	795b      	ldrb	r3, [r3, #5]
 8005016:	2b30      	cmp	r3, #48	; 0x30
 8005018:	d106      	bne.n	8005028 <Check_RF_Flags+0x988>
							Siren_Time = SIREN_SECONDS;
 800501a:	4b2d      	ldr	r3, [pc, #180]	; (80050d0 <Check_RF_Flags+0xa30>)
 800501c:	22f0      	movs	r2, #240	; 0xf0
 800501e:	601a      	str	r2, [r3, #0]
							Alarm_Out_Time = OUTPUT_ON_TIME + 1;
 8005020:	4b2c      	ldr	r3, [pc, #176]	; (80050d4 <Check_RF_Flags+0xa34>)
 8005022:	2205      	movs	r2, #5
 8005024:	701a      	strb	r2, [r3, #0]
					if((AwayModeZones[5] == '1')&&(Arm_Status == 1)&&(ZoneTriggers[5] < 5)) {
 8005026:	e037      	b.n	8005098 <Check_RF_Flags+0x9f8>
						} else {
							Buzzer_Annunciate = 6;
 8005028:	4b2b      	ldr	r3, [pc, #172]	; (80050d8 <Check_RF_Flags+0xa38>)
 800502a:	2206      	movs	r2, #6
 800502c:	701a      	strb	r2, [r3, #0]
					if((AwayModeZones[5] == '1')&&(Arm_Status == 1)&&(ZoneTriggers[5] < 5)) {
 800502e:	e033      	b.n	8005098 <Check_RF_Flags+0x9f8>
						}
					} else if((ChimeModeZones[5] == '1')&&(Arm_Status == 2)) {
 8005030:	4b2a      	ldr	r3, [pc, #168]	; (80050dc <Check_RF_Flags+0xa3c>)
 8005032:	795b      	ldrb	r3, [r3, #5]
 8005034:	2b31      	cmp	r3, #49	; 0x31
 8005036:	d12f      	bne.n	8005098 <Check_RF_Flags+0x9f8>
 8005038:	4b21      	ldr	r3, [pc, #132]	; (80050c0 <Check_RF_Flags+0xa20>)
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	2b02      	cmp	r3, #2
 800503e:	d12b      	bne.n	8005098 <Check_RF_Flags+0x9f8>
						if(ChimeSMS_Enabled == 1) {
 8005040:	4b27      	ldr	r3, [pc, #156]	; (80050e0 <Check_RF_Flags+0xa40>)
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d116      	bne.n	8005076 <Check_RF_Flags+0x9d6>
							memset(Message, 0, 10);
 8005048:	4b1f      	ldr	r3, [pc, #124]	; (80050c8 <Check_RF_Flags+0xa28>)
 800504a:	220a      	movs	r2, #10
 800504c:	2100      	movs	r1, #0
 800504e:	0018      	movs	r0, r3
 8005050:	f00c ffd4 	bl	8011ffc <memset>
							Message[0] = EE_ZONE6_MESSAGE;
 8005054:	4b1c      	ldr	r3, [pc, #112]	; (80050c8 <Check_RF_Flags+0xa28>)
 8005056:	2220      	movs	r2, #32
 8005058:	701a      	strb	r2, [r3, #0]
							Message[1] = EE_AT_MESSAGE;
 800505a:	4b1b      	ldr	r3, [pc, #108]	; (80050c8 <Check_RF_Flags+0xa28>)
 800505c:	2233      	movs	r2, #51	; 0x33
 800505e:	705a      	strb	r2, [r3, #1]
							Message[2] = 0;
 8005060:	4b19      	ldr	r3, [pc, #100]	; (80050c8 <Check_RF_Flags+0xa28>)
 8005062:	2200      	movs	r2, #0
 8005064:	709a      	strb	r2, [r3, #2]

							Add_Message_to_Que(Message, 0, 0, 0, TRUE);
 8005066:	4818      	ldr	r0, [pc, #96]	; (80050c8 <Check_RF_Flags+0xa28>)
 8005068:	2301      	movs	r3, #1
 800506a:	9300      	str	r3, [sp, #0]
 800506c:	2300      	movs	r3, #0
 800506e:	2200      	movs	r2, #0
 8005070:	2100      	movs	r1, #0
 8005072:	f001 ff5b 	bl	8006f2c <Add_Message_to_Que>
						}
						if(SoundModeChimeZones[0] == '1'){
 8005076:	4b1b      	ldr	r3, [pc, #108]	; (80050e4 <Check_RF_Flags+0xa44>)
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	2b31      	cmp	r3, #49	; 0x31
 800507c:	d106      	bne.n	800508c <Check_RF_Flags+0x9ec>
							Siren_Time = SIREN_SECONDS;
 800507e:	4b14      	ldr	r3, [pc, #80]	; (80050d0 <Check_RF_Flags+0xa30>)
 8005080:	22f0      	movs	r2, #240	; 0xf0
 8005082:	601a      	str	r2, [r3, #0]
							Alarm_Out_Time = OUTPUT_ON_TIME + 1;
 8005084:	4b13      	ldr	r3, [pc, #76]	; (80050d4 <Check_RF_Flags+0xa34>)
 8005086:	2205      	movs	r2, #5
 8005088:	701a      	strb	r2, [r3, #0]
 800508a:	e005      	b.n	8005098 <Check_RF_Flags+0x9f8>
						}else{
							//  Chime Trigger
							Buzzer_Annunciate = 6;
 800508c:	4b12      	ldr	r3, [pc, #72]	; (80050d8 <Check_RF_Flags+0xa38>)
 800508e:	2206      	movs	r2, #6
 8005090:	701a      	strb	r2, [r3, #0]
 8005092:	e001      	b.n	8005098 <Check_RF_Flags+0x9f8>
				}

			}
		} else {

			Delay_LED();
 8005094:	f7ff f955 	bl	8004342 <Delay_LED>
		}

		Data_Received_Flag = FALSE;
 8005098:	4b13      	ldr	r3, [pc, #76]	; (80050e8 <Check_RF_Flags+0xa48>)
 800509a:	2200      	movs	r2, #0
 800509c:	701a      	strb	r2, [r3, #0]
	}

	if(Reload_Device_Flag == TRUE) {
 800509e:	4b13      	ldr	r3, [pc, #76]	; (80050ec <Check_RF_Flags+0xa4c>)
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d104      	bne.n	80050b0 <Check_RF_Flags+0xa10>
		Reload_Device_Flag = FALSE;
 80050a6:	4b11      	ldr	r3, [pc, #68]	; (80050ec <Check_RF_Flags+0xa4c>)
 80050a8:	2200      	movs	r2, #0
 80050aa:	701a      	strb	r2, [r3, #0]
		Load_RF_Device_List();
 80050ac:	f7ff f9da 	bl	8004464 <Load_RF_Device_List>
	}
}
 80050b0:	46c0      	nop			; (mov r8, r8)
 80050b2:	46bd      	mov	sp, r7
 80050b4:	b002      	add	sp, #8
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	20001635 	.word	0x20001635
 80050bc:	20001358 	.word	0x20001358
 80050c0:	200007b8 	.word	0x200007b8
 80050c4:	20001638 	.word	0x20001638
 80050c8:	200006c8 	.word	0x200006c8
 80050cc:	20001368 	.word	0x20001368
 80050d0:	200007b4 	.word	0x200007b4
 80050d4:	200007ad 	.word	0x200007ad
 80050d8:	20001687 	.word	0x20001687
 80050dc:	20001360 	.word	0x20001360
 80050e0:	2000134c 	.word	0x2000134c
 80050e4:	20001370 	.word	0x20001370
 80050e8:	20001684 	.word	0x20001684
 80050ec:	20001685 	.word	0x20001685

080050f0 <BuzzerTMR_Int>:

void BuzzerTMR_Int(void)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	af00      	add	r7, sp, #0
	if(Siren_Annunciate_Delay > 0) {
 80050f4:	4b33      	ldr	r3, [pc, #204]	; (80051c4 <BuzzerTMR_Int+0xd4>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d005      	beq.n	8005108 <BuzzerTMR_Int+0x18>
		Siren_Annunciate_Delay--;
 80050fc:	4b31      	ldr	r3, [pc, #196]	; (80051c4 <BuzzerTMR_Int+0xd4>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	1e5a      	subs	r2, r3, #1
 8005102:	4b30      	ldr	r3, [pc, #192]	; (80051c4 <BuzzerTMR_Int+0xd4>)
 8005104:	601a      	str	r2, [r3, #0]
 8005106:	e027      	b.n	8005158 <BuzzerTMR_Int+0x68>
	} else {
		Siren_Annunciate_Delay = 10;
 8005108:	4b2e      	ldr	r3, [pc, #184]	; (80051c4 <BuzzerTMR_Int+0xd4>)
 800510a:	220a      	movs	r2, #10
 800510c:	601a      	str	r2, [r3, #0]
		if(Siren_Annunciate > 0) {
 800510e:	4b2e      	ldr	r3, [pc, #184]	; (80051c8 <BuzzerTMR_Int+0xd8>)
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d020      	beq.n	8005158 <BuzzerTMR_Int+0x68>
			if(HAL_GPIO_ReadPin(GPIOB, RELAY1_Pin) == 0) {
 8005116:	2380      	movs	r3, #128	; 0x80
 8005118:	019b      	lsls	r3, r3, #6
 800511a:	4a2c      	ldr	r2, [pc, #176]	; (80051cc <BuzzerTMR_Int+0xdc>)
 800511c:	0019      	movs	r1, r3
 800511e:	0010      	movs	r0, r2
 8005120:	f005 fe68 	bl	800adf4 <HAL_GPIO_ReadPin>
 8005124:	1e03      	subs	r3, r0, #0
 8005126:	d10a      	bne.n	800513e <BuzzerTMR_Int+0x4e>
				HAL_GPIO_WritePin(GPIOB, RELAY1_Pin, GPIO_PIN_SET);
 8005128:	2380      	movs	r3, #128	; 0x80
 800512a:	019b      	lsls	r3, r3, #6
 800512c:	4827      	ldr	r0, [pc, #156]	; (80051cc <BuzzerTMR_Int+0xdc>)
 800512e:	2201      	movs	r2, #1
 8005130:	0019      	movs	r1, r3
 8005132:	f005 fe8f 	bl	800ae54 <HAL_GPIO_WritePin>
				Siren_Annunciate_Delay = 1;
 8005136:	4b23      	ldr	r3, [pc, #140]	; (80051c4 <BuzzerTMR_Int+0xd4>)
 8005138:	2201      	movs	r2, #1
 800513a:	601a      	str	r2, [r3, #0]
 800513c:	e00c      	b.n	8005158 <BuzzerTMR_Int+0x68>
			} else {
				HAL_GPIO_WritePin(GPIOB, RELAY1_Pin, GPIO_PIN_RESET);
 800513e:	2380      	movs	r3, #128	; 0x80
 8005140:	019b      	lsls	r3, r3, #6
 8005142:	4822      	ldr	r0, [pc, #136]	; (80051cc <BuzzerTMR_Int+0xdc>)
 8005144:	2200      	movs	r2, #0
 8005146:	0019      	movs	r1, r3
 8005148:	f005 fe84 	bl	800ae54 <HAL_GPIO_WritePin>
				Siren_Annunciate--;
 800514c:	4b1e      	ldr	r3, [pc, #120]	; (80051c8 <BuzzerTMR_Int+0xd8>)
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	3b01      	subs	r3, #1
 8005152:	b2da      	uxtb	r2, r3
 8005154:	4b1c      	ldr	r3, [pc, #112]	; (80051c8 <BuzzerTMR_Int+0xd8>)
 8005156:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	if(Buzzer_Annunciate_Delay > 0) {
 8005158:	4b1d      	ldr	r3, [pc, #116]	; (80051d0 <BuzzerTMR_Int+0xe0>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d005      	beq.n	800516c <BuzzerTMR_Int+0x7c>
		Buzzer_Annunciate_Delay--;
 8005160:	4b1b      	ldr	r3, [pc, #108]	; (80051d0 <BuzzerTMR_Int+0xe0>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	1e5a      	subs	r2, r3, #1
 8005166:	4b1a      	ldr	r3, [pc, #104]	; (80051d0 <BuzzerTMR_Int+0xe0>)
 8005168:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, RELAY2_Pin, GPIO_PIN_RESET);
				Buzzer_Annunciate--;
			}
		}
	}
}
 800516a:	e027      	b.n	80051bc <BuzzerTMR_Int+0xcc>
		Buzzer_Annunciate_Delay = 10;
 800516c:	4b18      	ldr	r3, [pc, #96]	; (80051d0 <BuzzerTMR_Int+0xe0>)
 800516e:	220a      	movs	r2, #10
 8005170:	601a      	str	r2, [r3, #0]
		if(Buzzer_Annunciate > 0) {
 8005172:	4b18      	ldr	r3, [pc, #96]	; (80051d4 <BuzzerTMR_Int+0xe4>)
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d020      	beq.n	80051bc <BuzzerTMR_Int+0xcc>
			if(HAL_GPIO_ReadPin(GPIOB, RELAY2_Pin) == 0) {
 800517a:	2380      	movs	r3, #128	; 0x80
 800517c:	015b      	lsls	r3, r3, #5
 800517e:	4a13      	ldr	r2, [pc, #76]	; (80051cc <BuzzerTMR_Int+0xdc>)
 8005180:	0019      	movs	r1, r3
 8005182:	0010      	movs	r0, r2
 8005184:	f005 fe36 	bl	800adf4 <HAL_GPIO_ReadPin>
 8005188:	1e03      	subs	r3, r0, #0
 800518a:	d10a      	bne.n	80051a2 <BuzzerTMR_Int+0xb2>
				HAL_GPIO_WritePin(GPIOB, RELAY2_Pin, GPIO_PIN_SET);
 800518c:	2380      	movs	r3, #128	; 0x80
 800518e:	015b      	lsls	r3, r3, #5
 8005190:	480e      	ldr	r0, [pc, #56]	; (80051cc <BuzzerTMR_Int+0xdc>)
 8005192:	2201      	movs	r2, #1
 8005194:	0019      	movs	r1, r3
 8005196:	f005 fe5d 	bl	800ae54 <HAL_GPIO_WritePin>
				Buzzer_Annunciate_Delay = 1;
 800519a:	4b0d      	ldr	r3, [pc, #52]	; (80051d0 <BuzzerTMR_Int+0xe0>)
 800519c:	2201      	movs	r2, #1
 800519e:	601a      	str	r2, [r3, #0]
}
 80051a0:	e00c      	b.n	80051bc <BuzzerTMR_Int+0xcc>
				HAL_GPIO_WritePin(GPIOB, RELAY2_Pin, GPIO_PIN_RESET);
 80051a2:	2380      	movs	r3, #128	; 0x80
 80051a4:	015b      	lsls	r3, r3, #5
 80051a6:	4809      	ldr	r0, [pc, #36]	; (80051cc <BuzzerTMR_Int+0xdc>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	0019      	movs	r1, r3
 80051ac:	f005 fe52 	bl	800ae54 <HAL_GPIO_WritePin>
				Buzzer_Annunciate--;
 80051b0:	4b08      	ldr	r3, [pc, #32]	; (80051d4 <BuzzerTMR_Int+0xe4>)
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	3b01      	subs	r3, #1
 80051b6:	b2da      	uxtb	r2, r3
 80051b8:	4b06      	ldr	r3, [pc, #24]	; (80051d4 <BuzzerTMR_Int+0xe4>)
 80051ba:	701a      	strb	r2, [r3, #0]
}
 80051bc:	46c0      	nop			; (mov r8, r8)
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	46c0      	nop			; (mov r8, r8)
 80051c4:	20001688 	.word	0x20001688
 80051c8:	20001686 	.word	0x20001686
 80051cc:	48000400 	.word	0x48000400
 80051d0:	2000168c 	.word	0x2000168c
 80051d4:	20001687 	.word	0x20001687

080051d8 <RF_PacketTMR_Int>:

void RF_PacketTMR_Int(void)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	af00      	add	r7, sp, #0
	if(RX_State == 0) {   // preamble
 80051dc:	4b0f      	ldr	r3, [pc, #60]	; (800521c <RF_PacketTMR_Int+0x44>)
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d106      	bne.n	80051f2 <RF_PacketTMR_Int+0x1a>
		AvrTmr = 0;
 80051e4:	4b0e      	ldr	r3, [pc, #56]	; (8005220 <RF_PacketTMR_Int+0x48>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	601a      	str	r2, [r3, #0]
		preamble = 0;
 80051ea:	4b0e      	ldr	r3, [pc, #56]	; (8005224 <RF_PacketTMR_Int+0x4c>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	701a      	strb	r2, [r3, #0]
 80051f0:	e006      	b.n	8005200 <RF_PacketTMR_Int+0x28>
	} else if(RX_State == 1) {   // header receive state.  If timeout then error
 80051f2:	4b0a      	ldr	r3, [pc, #40]	; (800521c <RF_PacketTMR_Int+0x44>)
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d102      	bne.n	8005200 <RF_PacketTMR_Int+0x28>
		RX_State = 2;
 80051fa:	4b08      	ldr	r3, [pc, #32]	; (800521c <RF_PacketTMR_Int+0x44>)
 80051fc:	2202      	movs	r2, #2
 80051fe:	701a      	strb	r2, [r3, #0]
	}
	if(Disable_LED != 1) {
 8005200:	4b09      	ldr	r3, [pc, #36]	; (8005228 <RF_PacketTMR_Int+0x50>)
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	2b01      	cmp	r3, #1
 8005206:	d006      	beq.n	8005216 <RF_PacketTMR_Int+0x3e>
		HAL_GPIO_WritePin(GPIOB, RFRX_LED_Pin, GPIO_PIN_RESET);
 8005208:	2380      	movs	r3, #128	; 0x80
 800520a:	01db      	lsls	r3, r3, #7
 800520c:	4807      	ldr	r0, [pc, #28]	; (800522c <RF_PacketTMR_Int+0x54>)
 800520e:	2200      	movs	r2, #0
 8005210:	0019      	movs	r1, r3
 8005212:	f005 fe1f 	bl	800ae54 <HAL_GPIO_WritePin>
	}
}
 8005216:	46c0      	nop			; (mov r8, r8)
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	20001631 	.word	0x20001631
 8005220:	20001654 	.word	0x20001654
 8005224:	20001632 	.word	0x20001632
 8005228:	200007a9 	.word	0x200007a9
 800522c:	48000400 	.word	0x48000400

08005230 <RX_Pin_Int>:

void RX_Pin_Int(void)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	af00      	add	r7, sp, #0
	if(RX_State == 0) {
 8005234:	4ba5      	ldr	r3, [pc, #660]	; (80054cc <RX_Pin_Int+0x29c>)
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d000      	beq.n	800523e <RX_Pin_Int+0xe>
 800523c:	e098      	b.n	8005370 <RX_Pin_Int+0x140>
		RAW_RX_Char = 0;
 800523e:	4ba4      	ldr	r3, [pc, #656]	; (80054d0 <RX_Pin_Int+0x2a0>)
 8005240:	2200      	movs	r2, #0
 8005242:	701a      	strb	r2, [r3, #0]
		RAW_RX_Data[0] = 0;		//0-8
 8005244:	4ba3      	ldr	r3, [pc, #652]	; (80054d4 <RX_Pin_Int+0x2a4>)
 8005246:	2200      	movs	r2, #0
 8005248:	701a      	strb	r2, [r3, #0]
		RAW_RX_Data[1] = 0;		//9-16
 800524a:	4ba2      	ldr	r3, [pc, #648]	; (80054d4 <RX_Pin_Int+0x2a4>)
 800524c:	2200      	movs	r2, #0
 800524e:	705a      	strb	r2, [r3, #1]
		RAW_RX_Data[2] = 0;		//17-24
 8005250:	4ba0      	ldr	r3, [pc, #640]	; (80054d4 <RX_Pin_Int+0x2a4>)
 8005252:	2200      	movs	r2, #0
 8005254:	709a      	strb	r2, [r3, #2]
		RAW_RX_Data[3] = 0;		//25-32
 8005256:	4b9f      	ldr	r3, [pc, #636]	; (80054d4 <RX_Pin_Int+0x2a4>)
 8005258:	2200      	movs	r2, #0
 800525a:	70da      	strb	r2, [r3, #3]
		RAW_RX_Data[4] = 0;		//33-40
 800525c:	4b9d      	ldr	r3, [pc, #628]	; (80054d4 <RX_Pin_Int+0x2a4>)
 800525e:	2200      	movs	r2, #0
 8005260:	711a      	strb	r2, [r3, #4]
		RAW_RX_Data[5] = 0;		//41-48
 8005262:	4b9c      	ldr	r3, [pc, #624]	; (80054d4 <RX_Pin_Int+0x2a4>)
 8005264:	2200      	movs	r2, #0
 8005266:	715a      	strb	r2, [r3, #5]
		RAW_RX_Data[6] = 0;		//49-56
 8005268:	4b9a      	ldr	r3, [pc, #616]	; (80054d4 <RX_Pin_Int+0x2a4>)
 800526a:	2200      	movs	r2, #0
 800526c:	719a      	strb	r2, [r3, #6]
		RAW_RX_Data[7] = 0;		//57-64
 800526e:	4b99      	ldr	r3, [pc, #612]	; (80054d4 <RX_Pin_Int+0x2a4>)
 8005270:	2200      	movs	r2, #0
 8005272:	71da      	strb	r2, [r3, #7]
		RAW_RX_Data[8] = 0;		//65-72
 8005274:	4b97      	ldr	r3, [pc, #604]	; (80054d4 <RX_Pin_Int+0x2a4>)
 8005276:	2200      	movs	r2, #0
 8005278:	721a      	strb	r2, [r3, #8]

		Bit = 0;
 800527a:	4b97      	ldr	r3, [pc, #604]	; (80054d8 <RX_Pin_Int+0x2a8>)
 800527c:	2200      	movs	r2, #0
 800527e:	701a      	strb	r2, [r3, #0]
		if(preamble == 0) {
 8005280:	4b96      	ldr	r3, [pc, #600]	; (80054dc <RX_Pin_Int+0x2ac>)
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d114      	bne.n	80052b2 <RX_Pin_Int+0x82>
			if(HAL_GPIO_ReadPin(RFRX_IN_GPIO_Port, RFRX_IN_Pin)) {
 8005288:	2380      	movs	r3, #128	; 0x80
 800528a:	005a      	lsls	r2, r3, #1
 800528c:	2390      	movs	r3, #144	; 0x90
 800528e:	05db      	lsls	r3, r3, #23
 8005290:	0011      	movs	r1, r2
 8005292:	0018      	movs	r0, r3
 8005294:	f005 fdae 	bl	800adf4 <HAL_GPIO_ReadPin>
 8005298:	1e03      	subs	r3, r0, #0
 800529a:	d02f      	beq.n	80052fc <RX_Pin_Int+0xcc>
				preamble++;
 800529c:	4b8f      	ldr	r3, [pc, #572]	; (80054dc <RX_Pin_Int+0x2ac>)
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	3301      	adds	r3, #1
 80052a2:	b2da      	uxtb	r2, r3
 80052a4:	4b8d      	ldr	r3, [pc, #564]	; (80054dc <RX_Pin_Int+0x2ac>)
 80052a6:	701a      	strb	r2, [r3, #0]
				htim6.Instance->CNT = 0;
 80052a8:	4b8d      	ldr	r3, [pc, #564]	; (80054e0 <RX_Pin_Int+0x2b0>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2200      	movs	r2, #0
 80052ae:	625a      	str	r2, [r3, #36]	; 0x24
 80052b0:	e024      	b.n	80052fc <RX_Pin_Int+0xcc>
			}
		} else {
			TimerVal = htim6.Instance->CNT;  //__HAL_TIM_GET_COUNTER(&htim6);
 80052b2:	4b8b      	ldr	r3, [pc, #556]	; (80054e0 <RX_Pin_Int+0x2b0>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052b8:	4b8a      	ldr	r3, [pc, #552]	; (80054e4 <RX_Pin_Int+0x2b4>)
 80052ba:	601a      	str	r2, [r3, #0]
			if((TimerVal > 100)&&(TimerVal < 250)) {   //    0x022D = 280us   0x04D1 = 620us
 80052bc:	4b89      	ldr	r3, [pc, #548]	; (80054e4 <RX_Pin_Int+0x2b4>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2b64      	cmp	r3, #100	; 0x64
 80052c2:	d915      	bls.n	80052f0 <RX_Pin_Int+0xc0>
 80052c4:	4b87      	ldr	r3, [pc, #540]	; (80054e4 <RX_Pin_Int+0x2b4>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2bf9      	cmp	r3, #249	; 0xf9
 80052ca:	d811      	bhi.n	80052f0 <RX_Pin_Int+0xc0>
				preamble++;
 80052cc:	4b83      	ldr	r3, [pc, #524]	; (80054dc <RX_Pin_Int+0x2ac>)
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	3301      	adds	r3, #1
 80052d2:	b2da      	uxtb	r2, r3
 80052d4:	4b81      	ldr	r3, [pc, #516]	; (80054dc <RX_Pin_Int+0x2ac>)
 80052d6:	701a      	strb	r2, [r3, #0]
				AvrTmr = AvrTmr + TimerVal;
 80052d8:	4b83      	ldr	r3, [pc, #524]	; (80054e8 <RX_Pin_Int+0x2b8>)
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	4b81      	ldr	r3, [pc, #516]	; (80054e4 <RX_Pin_Int+0x2b4>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	18d2      	adds	r2, r2, r3
 80052e2:	4b81      	ldr	r3, [pc, #516]	; (80054e8 <RX_Pin_Int+0x2b8>)
 80052e4:	601a      	str	r2, [r3, #0]
				htim6.Instance->CNT = 0;
 80052e6:	4b7e      	ldr	r3, [pc, #504]	; (80054e0 <RX_Pin_Int+0x2b0>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2200      	movs	r2, #0
 80052ec:	625a      	str	r2, [r3, #36]	; 0x24
 80052ee:	e005      	b.n	80052fc <RX_Pin_Int+0xcc>
			} else {
				preamble = 0;
 80052f0:	4b7a      	ldr	r3, [pc, #488]	; (80054dc <RX_Pin_Int+0x2ac>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	701a      	strb	r2, [r3, #0]
				AvrTmr = 0;
 80052f6:	4b7c      	ldr	r3, [pc, #496]	; (80054e8 <RX_Pin_Int+0x2b8>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	601a      	str	r2, [r3, #0]
			}
		}
		if(preamble > 23) {   // preamble received
 80052fc:	4b77      	ldr	r3, [pc, #476]	; (80054dc <RX_Pin_Int+0x2ac>)
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	2b17      	cmp	r3, #23
 8005302:	d800      	bhi.n	8005306 <RX_Pin_Int+0xd6>
 8005304:	e1d8      	b.n	80056b8 <RX_Pin_Int+0x488>
			TempTmr = AvrTmr / (preamble - 1);
 8005306:	4b78      	ldr	r3, [pc, #480]	; (80054e8 <RX_Pin_Int+0x2b8>)
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	4b74      	ldr	r3, [pc, #464]	; (80054dc <RX_Pin_Int+0x2ac>)
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	3b01      	subs	r3, #1
 8005310:	0019      	movs	r1, r3
 8005312:	0010      	movs	r0, r2
 8005314:	f7fa ff14 	bl	8000140 <__udivsi3>
 8005318:	0003      	movs	r3, r0
 800531a:	001a      	movs	r2, r3
 800531c:	4b73      	ldr	r3, [pc, #460]	; (80054ec <RX_Pin_Int+0x2bc>)
 800531e:	601a      	str	r2, [r3, #0]
			TempTmr = TempTmr * 9.5;  // calc Header time - 5% error
 8005320:	4b72      	ldr	r3, [pc, #456]	; (80054ec <RX_Pin_Int+0x2bc>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	0018      	movs	r0, r3
 8005326:	f7fd f869 	bl	80023fc <__aeabi_ui2d>
 800532a:	2200      	movs	r2, #0
 800532c:	4b70      	ldr	r3, [pc, #448]	; (80054f0 <RX_Pin_Int+0x2c0>)
 800532e:	f7fc f9e3 	bl	80016f8 <__aeabi_dmul>
 8005332:	0002      	movs	r2, r0
 8005334:	000b      	movs	r3, r1
 8005336:	0010      	movs	r0, r2
 8005338:	0019      	movs	r1, r3
 800533a:	f7fb f8ef 	bl	800051c <__aeabi_d2uiz>
 800533e:	0002      	movs	r2, r0
 8005340:	4b6a      	ldr	r3, [pc, #424]	; (80054ec <RX_Pin_Int+0x2bc>)
 8005342:	601a      	str	r2, [r3, #0]
			RX_State = 1;
 8005344:	4b61      	ldr	r3, [pc, #388]	; (80054cc <RX_Pin_Int+0x29c>)
 8005346:	2201      	movs	r2, #1
 8005348:	701a      	strb	r2, [r3, #0]
			memset(RAW_RX_Data, 0, 10);
 800534a:	4b62      	ldr	r3, [pc, #392]	; (80054d4 <RX_Pin_Int+0x2a4>)
 800534c:	220a      	movs	r2, #10
 800534e:	2100      	movs	r1, #0
 8005350:	0018      	movs	r0, r3
 8005352:	f00c fe53 	bl	8011ffc <memset>
			htim6.Instance->CNT = 0;
 8005356:	4b62      	ldr	r3, [pc, #392]	; (80054e0 <RX_Pin_Int+0x2b0>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2200      	movs	r2, #0
 800535c:	625a      	str	r2, [r3, #36]	; 0x24
			htim6.Instance->ARR = TempTmr;
 800535e:	4b60      	ldr	r3, [pc, #384]	; (80054e0 <RX_Pin_Int+0x2b0>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a62      	ldr	r2, [pc, #392]	; (80054ec <RX_Pin_Int+0x2bc>)
 8005364:	6812      	ldr	r2, [r2, #0]
 8005366:	62da      	str	r2, [r3, #44]	; 0x2c
			Got_Header = 0;
 8005368:	4b62      	ldr	r3, [pc, #392]	; (80054f4 <RX_Pin_Int+0x2c4>)
 800536a:	2200      	movs	r2, #0
 800536c:	701a      	strb	r2, [r3, #0]
		RX_State = 0;
		if(Disable_LED != 1) {
			HAL_GPIO_WritePin(GPIOB, RFRX_LED_Pin, GPIO_PIN_RESET);
		}
	}
}
 800536e:	e1a3      	b.n	80056b8 <RX_Pin_Int+0x488>
	} else if(RX_State == 1) {   // error while header
 8005370:	4b56      	ldr	r3, [pc, #344]	; (80054cc <RX_Pin_Int+0x29c>)
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d109      	bne.n	800538c <RX_Pin_Int+0x15c>
		RX_State = 0;
 8005378:	4b54      	ldr	r3, [pc, #336]	; (80054cc <RX_Pin_Int+0x29c>)
 800537a:	2200      	movs	r2, #0
 800537c:	701a      	strb	r2, [r3, #0]
		AvrTmr = 0;
 800537e:	4b5a      	ldr	r3, [pc, #360]	; (80054e8 <RX_Pin_Int+0x2b8>)
 8005380:	2200      	movs	r2, #0
 8005382:	601a      	str	r2, [r3, #0]
		preamble = 0;
 8005384:	4b55      	ldr	r3, [pc, #340]	; (80054dc <RX_Pin_Int+0x2ac>)
 8005386:	2200      	movs	r2, #0
 8005388:	701a      	strb	r2, [r3, #0]
}
 800538a:	e195      	b.n	80056b8 <RX_Pin_Int+0x488>
	} else if((RX_State == 2)&&(HAL_GPIO_ReadPin(RFRX_IN_GPIO_Port, RFRX_IN_Pin))) {  // header ok, first byte start rx
 800538c:	4b4f      	ldr	r3, [pc, #316]	; (80054cc <RX_Pin_Int+0x29c>)
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	2b02      	cmp	r3, #2
 8005392:	d13f      	bne.n	8005414 <RX_Pin_Int+0x1e4>
 8005394:	2380      	movs	r3, #128	; 0x80
 8005396:	005a      	lsls	r2, r3, #1
 8005398:	2390      	movs	r3, #144	; 0x90
 800539a:	05db      	lsls	r3, r3, #23
 800539c:	0011      	movs	r1, r2
 800539e:	0018      	movs	r0, r3
 80053a0:	f005 fd28 	bl	800adf4 <HAL_GPIO_ReadPin>
 80053a4:	1e03      	subs	r3, r0, #0
 80053a6:	d035      	beq.n	8005414 <RX_Pin_Int+0x1e4>
		Got_Header = 1;
 80053a8:	4b52      	ldr	r3, [pc, #328]	; (80054f4 <RX_Pin_Int+0x2c4>)
 80053aa:	2201      	movs	r2, #1
 80053ac:	701a      	strb	r2, [r3, #0]
		Header_Timer = 0;
 80053ae:	4b52      	ldr	r3, [pc, #328]	; (80054f8 <RX_Pin_Int+0x2c8>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	601a      	str	r2, [r3, #0]
		RX_State = 3;
 80053b4:	4b45      	ldr	r3, [pc, #276]	; (80054cc <RX_Pin_Int+0x29c>)
 80053b6:	2203      	movs	r2, #3
 80053b8:	701a      	strb	r2, [r3, #0]
		RAW_RX_Char = 0;
 80053ba:	4b45      	ldr	r3, [pc, #276]	; (80054d0 <RX_Pin_Int+0x2a0>)
 80053bc:	2200      	movs	r2, #0
 80053be:	701a      	strb	r2, [r3, #0]
		Bit = 0;
 80053c0:	4b45      	ldr	r3, [pc, #276]	; (80054d8 <RX_Pin_Int+0x2a8>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	701a      	strb	r2, [r3, #0]
		bitpart = 0;
 80053c6:	4b4d      	ldr	r3, [pc, #308]	; (80054fc <RX_Pin_Int+0x2cc>)
 80053c8:	2200      	movs	r2, #0
 80053ca:	701a      	strb	r2, [r3, #0]
		htim6.Instance->CNT = 0;
 80053cc:	4b44      	ldr	r3, [pc, #272]	; (80054e0 <RX_Pin_Int+0x2b0>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2200      	movs	r2, #0
 80053d2:	625a      	str	r2, [r3, #36]	; 0x24
		htim6.Instance->ARR = TempTmr;
 80053d4:	4b42      	ldr	r3, [pc, #264]	; (80054e0 <RX_Pin_Int+0x2b0>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a44      	ldr	r2, [pc, #272]	; (80054ec <RX_Pin_Int+0x2bc>)
 80053da:	6812      	ldr	r2, [r2, #0]
 80053dc:	62da      	str	r2, [r3, #44]	; 0x2c
		Timerval = (TempTmr / 9.5) * 1.5;
 80053de:	4b43      	ldr	r3, [pc, #268]	; (80054ec <RX_Pin_Int+0x2bc>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	0018      	movs	r0, r3
 80053e4:	f7fd f80a 	bl	80023fc <__aeabi_ui2d>
 80053e8:	2200      	movs	r2, #0
 80053ea:	4b41      	ldr	r3, [pc, #260]	; (80054f0 <RX_Pin_Int+0x2c0>)
 80053ec:	f7fb fd82 	bl	8000ef4 <__aeabi_ddiv>
 80053f0:	0002      	movs	r2, r0
 80053f2:	000b      	movs	r3, r1
 80053f4:	0010      	movs	r0, r2
 80053f6:	0019      	movs	r1, r3
 80053f8:	2200      	movs	r2, #0
 80053fa:	4b41      	ldr	r3, [pc, #260]	; (8005500 <RX_Pin_Int+0x2d0>)
 80053fc:	f7fc f97c 	bl	80016f8 <__aeabi_dmul>
 8005400:	0002      	movs	r2, r0
 8005402:	000b      	movs	r3, r1
 8005404:	0010      	movs	r0, r2
 8005406:	0019      	movs	r1, r3
 8005408:	f7fd f866 	bl	80024d8 <__aeabi_d2f>
 800540c:	1c02      	adds	r2, r0, #0
 800540e:	4b3d      	ldr	r3, [pc, #244]	; (8005504 <RX_Pin_Int+0x2d4>)
 8005410:	601a      	str	r2, [r3, #0]
}
 8005412:	e151      	b.n	80056b8 <RX_Pin_Int+0x488>
	} else if(RX_State == 3) {
 8005414:	4b2d      	ldr	r3, [pc, #180]	; (80054cc <RX_Pin_Int+0x29c>)
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	2b03      	cmp	r3, #3
 800541a:	d000      	beq.n	800541e <RX_Pin_Int+0x1ee>
 800541c:	e134      	b.n	8005688 <RX_Pin_Int+0x458>
		if(HAL_GPIO_ReadPin(RFRX_IN_GPIO_Port, RFRX_IN_Pin) == 0) {
 800541e:	2380      	movs	r3, #128	; 0x80
 8005420:	005a      	lsls	r2, r3, #1
 8005422:	2390      	movs	r3, #144	; 0x90
 8005424:	05db      	lsls	r3, r3, #23
 8005426:	0011      	movs	r1, r2
 8005428:	0018      	movs	r0, r3
 800542a:	f005 fce3 	bl	800adf4 <HAL_GPIO_ReadPin>
 800542e:	1e03      	subs	r3, r0, #0
 8005430:	d170      	bne.n	8005514 <RX_Pin_Int+0x2e4>
			if(Disable_LED != 1) {
 8005432:	4b35      	ldr	r3, [pc, #212]	; (8005508 <RX_Pin_Int+0x2d8>)
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	2b01      	cmp	r3, #1
 8005438:	d006      	beq.n	8005448 <RX_Pin_Int+0x218>
				HAL_GPIO_WritePin(GPIOB, RFRX_LED_Pin, GPIO_PIN_RESET);
 800543a:	2380      	movs	r3, #128	; 0x80
 800543c:	01db      	lsls	r3, r3, #7
 800543e:	4833      	ldr	r0, [pc, #204]	; (800550c <RX_Pin_Int+0x2dc>)
 8005440:	2200      	movs	r2, #0
 8005442:	0019      	movs	r1, r3
 8005444:	f005 fd06 	bl	800ae54 <HAL_GPIO_WritePin>
			if(htim6.Instance->CNT > Timerval) {
 8005448:	4b25      	ldr	r3, [pc, #148]	; (80054e0 <RX_Pin_Int+0x2b0>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544e:	0018      	movs	r0, r3
 8005450:	f7fb f9d2 	bl	80007f8 <__aeabi_ui2f>
 8005454:	1c02      	adds	r2, r0, #0
 8005456:	4b2b      	ldr	r3, [pc, #172]	; (8005504 <RX_Pin_Int+0x2d4>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	1c19      	adds	r1, r3, #0
 800545c:	1c10      	adds	r0, r2, #0
 800545e:	f7fb f849 	bl	80004f4 <__aeabi_fcmpgt>
 8005462:	1e03      	subs	r3, r0, #0
 8005464:	d003      	beq.n	800546e <RX_Pin_Int+0x23e>
				curbit = 0;
 8005466:	4b2a      	ldr	r3, [pc, #168]	; (8005510 <RX_Pin_Int+0x2e0>)
 8005468:	2200      	movs	r2, #0
 800546a:	701a      	strb	r2, [r3, #0]
 800546c:	e002      	b.n	8005474 <RX_Pin_Int+0x244>
				curbit = 1;
 800546e:	4b28      	ldr	r3, [pc, #160]	; (8005510 <RX_Pin_Int+0x2e0>)
 8005470:	2201      	movs	r2, #1
 8005472:	701a      	strb	r2, [r3, #0]
			htim6.Instance->CNT = 0;
 8005474:	4b1a      	ldr	r3, [pc, #104]	; (80054e0 <RX_Pin_Int+0x2b0>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2200      	movs	r2, #0
 800547a:	625a      	str	r2, [r3, #36]	; 0x24
			bitpart++;
 800547c:	4b1f      	ldr	r3, [pc, #124]	; (80054fc <RX_Pin_Int+0x2cc>)
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	3301      	adds	r3, #1
 8005482:	b2da      	uxtb	r2, r3
 8005484:	4b1d      	ldr	r3, [pc, #116]	; (80054fc <RX_Pin_Int+0x2cc>)
 8005486:	701a      	strb	r2, [r3, #0]
			RAW_RX_Data[RAW_RX_Char] = RAW_RX_Data[RAW_RX_Char] << 1;
 8005488:	4b11      	ldr	r3, [pc, #68]	; (80054d0 <RX_Pin_Int+0x2a0>)
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	001a      	movs	r2, r3
 800548e:	4b11      	ldr	r3, [pc, #68]	; (80054d4 <RX_Pin_Int+0x2a4>)
 8005490:	5c99      	ldrb	r1, [r3, r2]
 8005492:	4b0f      	ldr	r3, [pc, #60]	; (80054d0 <RX_Pin_Int+0x2a0>)
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	001a      	movs	r2, r3
 8005498:	1c0b      	adds	r3, r1, #0
 800549a:	18db      	adds	r3, r3, r3
 800549c:	b2d9      	uxtb	r1, r3
 800549e:	4b0d      	ldr	r3, [pc, #52]	; (80054d4 <RX_Pin_Int+0x2a4>)
 80054a0:	5499      	strb	r1, [r3, r2]
			RAW_RX_Data[RAW_RX_Char] |= curbit;
 80054a2:	4b0b      	ldr	r3, [pc, #44]	; (80054d0 <RX_Pin_Int+0x2a0>)
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	001a      	movs	r2, r3
 80054a8:	4b0a      	ldr	r3, [pc, #40]	; (80054d4 <RX_Pin_Int+0x2a4>)
 80054aa:	5c9a      	ldrb	r2, [r3, r2]
 80054ac:	4b18      	ldr	r3, [pc, #96]	; (8005510 <RX_Pin_Int+0x2e0>)
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	4907      	ldr	r1, [pc, #28]	; (80054d0 <RX_Pin_Int+0x2a0>)
 80054b2:	7809      	ldrb	r1, [r1, #0]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	4b06      	ldr	r3, [pc, #24]	; (80054d4 <RX_Pin_Int+0x2a4>)
 80054ba:	545a      	strb	r2, [r3, r1]
			bitpart++;
 80054bc:	4b0f      	ldr	r3, [pc, #60]	; (80054fc <RX_Pin_Int+0x2cc>)
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	3301      	adds	r3, #1
 80054c2:	b2da      	uxtb	r2, r3
 80054c4:	4b0d      	ldr	r3, [pc, #52]	; (80054fc <RX_Pin_Int+0x2cc>)
 80054c6:	701a      	strb	r2, [r3, #0]
}
 80054c8:	e0f6      	b.n	80056b8 <RX_Pin_Int+0x488>
 80054ca:	46c0      	nop			; (mov r8, r8)
 80054cc:	20001631 	.word	0x20001631
 80054d0:	20001666 	.word	0x20001666
 80054d4:	2000165c 	.word	0x2000165c
 80054d8:	20001634 	.word	0x20001634
 80054dc:	20001632 	.word	0x20001632
 80054e0:	20000878 	.word	0x20000878
 80054e4:	20001674 	.word	0x20001674
 80054e8:	20001654 	.word	0x20001654
 80054ec:	20001658 	.word	0x20001658
 80054f0:	40230000 	.word	0x40230000
 80054f4:	20001644 	.word	0x20001644
 80054f8:	20001648 	.word	0x20001648
 80054fc:	20001630 	.word	0x20001630
 8005500:	3ff80000 	.word	0x3ff80000
 8005504:	20001678 	.word	0x20001678
 8005508:	200007a9 	.word	0x200007a9
 800550c:	48000400 	.word	0x48000400
 8005510:	20001633 	.word	0x20001633
			htim6.Instance->CNT = 0;
 8005514:	4b6a      	ldr	r3, [pc, #424]	; (80056c0 <RX_Pin_Int+0x490>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2200      	movs	r2, #0
 800551a:	625a      	str	r2, [r3, #36]	; 0x24
			if(Disable_LED != 1) {
 800551c:	4b69      	ldr	r3, [pc, #420]	; (80056c4 <RX_Pin_Int+0x494>)
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d006      	beq.n	8005532 <RX_Pin_Int+0x302>
				HAL_GPIO_WritePin(GPIOB, RFRX_LED_Pin, GPIO_PIN_SET);
 8005524:	2380      	movs	r3, #128	; 0x80
 8005526:	01db      	lsls	r3, r3, #7
 8005528:	4867      	ldr	r0, [pc, #412]	; (80056c8 <RX_Pin_Int+0x498>)
 800552a:	2201      	movs	r2, #1
 800552c:	0019      	movs	r1, r3
 800552e:	f005 fc91 	bl	800ae54 <HAL_GPIO_WritePin>
			if(Bit > 6) {
 8005532:	4b66      	ldr	r3, [pc, #408]	; (80056cc <RX_Pin_Int+0x49c>)
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	2b06      	cmp	r3, #6
 8005538:	d800      	bhi.n	800553c <RX_Pin_Int+0x30c>
 800553a:	e090      	b.n	800565e <RX_Pin_Int+0x42e>
				if(Disable_LED != 1) {
 800553c:	4b61      	ldr	r3, [pc, #388]	; (80056c4 <RX_Pin_Int+0x494>)
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d006      	beq.n	8005552 <RX_Pin_Int+0x322>
					HAL_GPIO_WritePin(GPIOB, RFRX_LED_Pin, GPIO_PIN_RESET);
 8005544:	2380      	movs	r3, #128	; 0x80
 8005546:	01db      	lsls	r3, r3, #7
 8005548:	485f      	ldr	r0, [pc, #380]	; (80056c8 <RX_Pin_Int+0x498>)
 800554a:	2200      	movs	r2, #0
 800554c:	0019      	movs	r1, r3
 800554e:	f005 fc81 	bl	800ae54 <HAL_GPIO_WritePin>
				Bit = 0;
 8005552:	4b5e      	ldr	r3, [pc, #376]	; (80056cc <RX_Pin_Int+0x49c>)
 8005554:	2200      	movs	r2, #0
 8005556:	701a      	strb	r2, [r3, #0]
				RAW_RX_Char++;
 8005558:	4b5d      	ldr	r3, [pc, #372]	; (80056d0 <RX_Pin_Int+0x4a0>)
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	3301      	adds	r3, #1
 800555e:	b2da      	uxtb	r2, r3
 8005560:	4b5b      	ldr	r3, [pc, #364]	; (80056d0 <RX_Pin_Int+0x4a0>)
 8005562:	701a      	strb	r2, [r3, #0]
				if(RAW_RX_Char == 9) {
 8005564:	4b5a      	ldr	r3, [pc, #360]	; (80056d0 <RX_Pin_Int+0x4a0>)
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	2b09      	cmp	r3, #9
 800556a:	d000      	beq.n	800556e <RX_Pin_Int+0x33e>
 800556c:	e07d      	b.n	800566a <RX_Pin_Int+0x43a>
					__HAL_DBGMCU_FREEZE_IWDG();
 800556e:	4b59      	ldr	r3, [pc, #356]	; (80056d4 <RX_Pin_Int+0x4a4>)
 8005570:	689a      	ldr	r2, [r3, #8]
 8005572:	4b58      	ldr	r3, [pc, #352]	; (80056d4 <RX_Pin_Int+0x4a4>)
 8005574:	2180      	movs	r1, #128	; 0x80
 8005576:	0149      	lsls	r1, r1, #5
 8005578:	430a      	orrs	r2, r1
 800557a:	609a      	str	r2, [r3, #8]
					memset(SerialNum,0,4);
 800557c:	4b56      	ldr	r3, [pc, #344]	; (80056d8 <RX_Pin_Int+0x4a8>)
 800557e:	2204      	movs	r2, #4
 8005580:	2100      	movs	r1, #0
 8005582:	0018      	movs	r0, r3
 8005584:	f00c fd3a 	bl	8011ffc <memset>
 8005588:	4b54      	ldr	r3, [pc, #336]	; (80056dc <RX_Pin_Int+0x4ac>)
 800558a:	685a      	ldr	r2, [r3, #4]
					memcpy(SerialNum, &RAW_RX_Data[4], 4);
 800558c:	4b52      	ldr	r3, [pc, #328]	; (80056d8 <RX_Pin_Int+0x4a8>)
 800558e:	601a      	str	r2, [r3, #0]
					bp = (unsigned char) SerialNum[3];
 8005590:	4b51      	ldr	r3, [pc, #324]	; (80056d8 <RX_Pin_Int+0x4a8>)
 8005592:	78da      	ldrb	r2, [r3, #3]
 8005594:	4b52      	ldr	r3, [pc, #328]	; (80056e0 <RX_Pin_Int+0x4b0>)
 8005596:	701a      	strb	r2, [r3, #0]
					SerialNum[3] = SerialNum[3] & 0xF0;
 8005598:	4b4f      	ldr	r3, [pc, #316]	; (80056d8 <RX_Pin_Int+0x4a8>)
 800559a:	78db      	ldrb	r3, [r3, #3]
 800559c:	220f      	movs	r2, #15
 800559e:	4393      	bics	r3, r2
 80055a0:	b2da      	uxtb	r2, r3
 80055a2:	4b4d      	ldr	r3, [pc, #308]	; (80056d8 <RX_Pin_Int+0x4a8>)
 80055a4:	70da      	strb	r2, [r3, #3]
					id = Search_Device(SerialNum);
 80055a6:	4b4c      	ldr	r3, [pc, #304]	; (80056d8 <RX_Pin_Int+0x4a8>)
 80055a8:	0018      	movs	r0, r3
 80055aa:	f7fe ff8b 	bl	80044c4 <Search_Device>
 80055ae:	0003      	movs	r3, r0
 80055b0:	001a      	movs	r2, r3
 80055b2:	4b4c      	ldr	r3, [pc, #304]	; (80056e4 <RX_Pin_Int+0x4b4>)
 80055b4:	701a      	strb	r2, [r3, #0]
					if(id != 0) {
 80055b6:	4b4b      	ldr	r3, [pc, #300]	; (80056e4 <RX_Pin_Int+0x4b4>)
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d046      	beq.n	800564c <RX_Pin_Int+0x41c>
							bp = bp & 0x0F;
 80055be:	4b48      	ldr	r3, [pc, #288]	; (80056e0 <RX_Pin_Int+0x4b0>)
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	220f      	movs	r2, #15
 80055c4:	4013      	ands	r3, r2
 80055c6:	b2da      	uxtb	r2, r3
 80055c8:	4b45      	ldr	r3, [pc, #276]	; (80056e0 <RX_Pin_Int+0x4b0>)
 80055ca:	701a      	strb	r2, [r3, #0]
							Sensor_Battery_Low = (RAW_RX_Data[8]&0x80) >> 7;
 80055cc:	4b43      	ldr	r3, [pc, #268]	; (80056dc <RX_Pin_Int+0x4ac>)
 80055ce:	7a1b      	ldrb	r3, [r3, #8]
 80055d0:	09db      	lsrs	r3, r3, #7
 80055d2:	b2da      	uxtb	r2, r3
 80055d4:	4b44      	ldr	r3, [pc, #272]	; (80056e8 <RX_Pin_Int+0x4b8>)
 80055d6:	701a      	strb	r2, [r3, #0]
							Button_Push = ((bp >> 2) & 0x01);
 80055d8:	4b41      	ldr	r3, [pc, #260]	; (80056e0 <RX_Pin_Int+0x4b0>)
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	089b      	lsrs	r3, r3, #2
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	2201      	movs	r2, #1
 80055e2:	4013      	ands	r3, r2
 80055e4:	b2da      	uxtb	r2, r3
 80055e6:	4b41      	ldr	r3, [pc, #260]	; (80056ec <RX_Pin_Int+0x4bc>)
 80055e8:	701a      	strb	r2, [r3, #0]
							Button_Push |= (bp & 0x02);
 80055ea:	4b3d      	ldr	r3, [pc, #244]	; (80056e0 <RX_Pin_Int+0x4b0>)
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	b25b      	sxtb	r3, r3
 80055f0:	2202      	movs	r2, #2
 80055f2:	4013      	ands	r3, r2
 80055f4:	b25a      	sxtb	r2, r3
 80055f6:	4b3d      	ldr	r3, [pc, #244]	; (80056ec <RX_Pin_Int+0x4bc>)
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	b25b      	sxtb	r3, r3
 80055fc:	4313      	orrs	r3, r2
 80055fe:	b25b      	sxtb	r3, r3
 8005600:	b2da      	uxtb	r2, r3
 8005602:	4b3a      	ldr	r3, [pc, #232]	; (80056ec <RX_Pin_Int+0x4bc>)
 8005604:	701a      	strb	r2, [r3, #0]
							Button_Push |= ((bp << 2) & 0x04);
 8005606:	4b36      	ldr	r3, [pc, #216]	; (80056e0 <RX_Pin_Int+0x4b0>)
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	b25b      	sxtb	r3, r3
 800560e:	2204      	movs	r2, #4
 8005610:	4013      	ands	r3, r2
 8005612:	b25a      	sxtb	r2, r3
 8005614:	4b35      	ldr	r3, [pc, #212]	; (80056ec <RX_Pin_Int+0x4bc>)
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	b25b      	sxtb	r3, r3
 800561a:	4313      	orrs	r3, r2
 800561c:	b25b      	sxtb	r3, r3
 800561e:	b2da      	uxtb	r2, r3
 8005620:	4b32      	ldr	r3, [pc, #200]	; (80056ec <RX_Pin_Int+0x4bc>)
 8005622:	701a      	strb	r2, [r3, #0]
							Button_Push |= (bp & 0x08);
 8005624:	4b2e      	ldr	r3, [pc, #184]	; (80056e0 <RX_Pin_Int+0x4b0>)
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	b25b      	sxtb	r3, r3
 800562a:	2208      	movs	r2, #8
 800562c:	4013      	ands	r3, r2
 800562e:	b25a      	sxtb	r2, r3
 8005630:	4b2e      	ldr	r3, [pc, #184]	; (80056ec <RX_Pin_Int+0x4bc>)
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	b25b      	sxtb	r3, r3
 8005636:	4313      	orrs	r3, r2
 8005638:	b25b      	sxtb	r3, r3
 800563a:	b2da      	uxtb	r2, r3
 800563c:	4b2b      	ldr	r3, [pc, #172]	; (80056ec <RX_Pin_Int+0x4bc>)
 800563e:	701a      	strb	r2, [r3, #0]
							Data_Received_Flag = TRUE;
 8005640:	4b2b      	ldr	r3, [pc, #172]	; (80056f0 <RX_Pin_Int+0x4c0>)
 8005642:	2201      	movs	r2, #1
 8005644:	701a      	strb	r2, [r3, #0]
							Check_RF_Flags();
 8005646:	f7ff f82b 	bl	80046a0 <Check_RF_Flags>
 800564a:	e004      	b.n	8005656 <RX_Pin_Int+0x426>
						Data_Received_Flag = TRUE;
 800564c:	4b28      	ldr	r3, [pc, #160]	; (80056f0 <RX_Pin_Int+0x4c0>)
 800564e:	2201      	movs	r2, #1
 8005650:	701a      	strb	r2, [r3, #0]
						Check_RF_Flags();
 8005652:	f7ff f825 	bl	80046a0 <Check_RF_Flags>
					RX_State = 0;
 8005656:	4b27      	ldr	r3, [pc, #156]	; (80056f4 <RX_Pin_Int+0x4c4>)
 8005658:	2200      	movs	r2, #0
 800565a:	701a      	strb	r2, [r3, #0]
 800565c:	e005      	b.n	800566a <RX_Pin_Int+0x43a>
			} else Bit++;
 800565e:	4b1b      	ldr	r3, [pc, #108]	; (80056cc <RX_Pin_Int+0x49c>)
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	3301      	adds	r3, #1
 8005664:	b2da      	uxtb	r2, r3
 8005666:	4b19      	ldr	r3, [pc, #100]	; (80056cc <RX_Pin_Int+0x49c>)
 8005668:	701a      	strb	r2, [r3, #0]
			if((RAW_RX_Char == 9)&&(Bit == 2)) {
 800566a:	4b19      	ldr	r3, [pc, #100]	; (80056d0 <RX_Pin_Int+0x4a0>)
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	2b09      	cmp	r3, #9
 8005670:	d106      	bne.n	8005680 <RX_Pin_Int+0x450>
 8005672:	4b16      	ldr	r3, [pc, #88]	; (80056cc <RX_Pin_Int+0x49c>)
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	2b02      	cmp	r3, #2
 8005678:	d102      	bne.n	8005680 <RX_Pin_Int+0x450>
				Bit = 7;
 800567a:	4b14      	ldr	r3, [pc, #80]	; (80056cc <RX_Pin_Int+0x49c>)
 800567c:	2207      	movs	r2, #7
 800567e:	701a      	strb	r2, [r3, #0]
			bitpart = 0;
 8005680:	4b1d      	ldr	r3, [pc, #116]	; (80056f8 <RX_Pin_Int+0x4c8>)
 8005682:	2200      	movs	r2, #0
 8005684:	701a      	strb	r2, [r3, #0]
}
 8005686:	e017      	b.n	80056b8 <RX_Pin_Int+0x488>
	} else if(HAL_GPIO_ReadPin(RFRX_IN_GPIO_Port, RFRX_IN_Pin)) {
 8005688:	2380      	movs	r3, #128	; 0x80
 800568a:	005a      	lsls	r2, r3, #1
 800568c:	2390      	movs	r3, #144	; 0x90
 800568e:	05db      	lsls	r3, r3, #23
 8005690:	0011      	movs	r1, r2
 8005692:	0018      	movs	r0, r3
 8005694:	f005 fbae 	bl	800adf4 <HAL_GPIO_ReadPin>
 8005698:	1e03      	subs	r3, r0, #0
 800569a:	d00d      	beq.n	80056b8 <RX_Pin_Int+0x488>
		RX_State = 0;
 800569c:	4b15      	ldr	r3, [pc, #84]	; (80056f4 <RX_Pin_Int+0x4c4>)
 800569e:	2200      	movs	r2, #0
 80056a0:	701a      	strb	r2, [r3, #0]
		if(Disable_LED != 1) {
 80056a2:	4b08      	ldr	r3, [pc, #32]	; (80056c4 <RX_Pin_Int+0x494>)
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d006      	beq.n	80056b8 <RX_Pin_Int+0x488>
			HAL_GPIO_WritePin(GPIOB, RFRX_LED_Pin, GPIO_PIN_RESET);
 80056aa:	2380      	movs	r3, #128	; 0x80
 80056ac:	01db      	lsls	r3, r3, #7
 80056ae:	4806      	ldr	r0, [pc, #24]	; (80056c8 <RX_Pin_Int+0x498>)
 80056b0:	2200      	movs	r2, #0
 80056b2:	0019      	movs	r1, r3
 80056b4:	f005 fbce 	bl	800ae54 <HAL_GPIO_WritePin>
}
 80056b8:	46c0      	nop			; (mov r8, r8)
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	46c0      	nop			; (mov r8, r8)
 80056c0:	20000878 	.word	0x20000878
 80056c4:	200007a9 	.word	0x200007a9
 80056c8:	48000400 	.word	0x48000400
 80056cc:	20001634 	.word	0x20001634
 80056d0:	20001666 	.word	0x20001666
 80056d4:	40015800 	.word	0x40015800
 80056d8:	20001668 	.word	0x20001668
 80056dc:	2000165c 	.word	0x2000165c
 80056e0:	2000166e 	.word	0x2000166e
 80056e4:	2000164c 	.word	0x2000164c
 80056e8:	2000166c 	.word	0x2000166c
 80056ec:	2000166d 	.word	0x2000166d
 80056f0:	20001684 	.word	0x20001684
 80056f4:	20001631 	.word	0x20001631
 80056f8:	20001630 	.word	0x20001630

080056fc <Send_Message>:
static unsigned char SIMA76_HTTP_Send_Message(char * number, char * message, unsigned char cellPosition);



unsigned char Send_Message(char * message)
{  unsigned char r = 0;
 80056fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056fe:	b095      	sub	sp, #84	; 0x54
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	234c      	movs	r3, #76	; 0x4c
 8005706:	18fb      	adds	r3, r7, r3
 8005708:	2200      	movs	r2, #0
 800570a:	701a      	strb	r2, [r3, #0]
   unsigned char Mask = 0;
 800570c:	244f      	movs	r4, #79	; 0x4f
 800570e:	193b      	adds	r3, r7, r4
 8005710:	2200      	movs	r2, #0
 8005712:	701a      	strb	r2, [r3, #0]
   unsigned char Mask_Flags = 0;
 8005714:	254e      	movs	r5, #78	; 0x4e
 8005716:	197b      	adds	r3, r7, r5
 8005718:	2200      	movs	r2, #0
 800571a:	701a      	strb	r2, [r3, #0]
   unsigned char SendFlag_Pos = 0;
 800571c:	264d      	movs	r6, #77	; 0x4d
 800571e:	19bb      	adds	r3, r7, r6
 8005720:	2200      	movs	r2, #0
 8005722:	701a      	strb	r2, [r3, #0]
   unsigned char Number_Of_Messages = 0;
 8005724:	234b      	movs	r3, #75	; 0x4b
 8005726:	18fb      	adds	r3, r7, r3
 8005728:	2200      	movs	r2, #0
 800572a:	701a      	strb	r2, [r3, #0]
   char cellnum[65];

    SIM800H_Clear_Buffers();
 800572c:	f003 fd2c 	bl	8009188 <SIM800H_Clear_Buffers>

	if(SIM800H_Register_Status()) {
 8005730:	f003 f86e 	bl	8008810 <SIM800H_Register_Status>
 8005734:	1e03      	subs	r3, r0, #0
 8005736:	d101      	bne.n	800573c <Send_Message+0x40>
 8005738:	f000 fc9f 	bl	800607a <Send_Message+0x97e>
	Mask = 0x80;
 800573c:	193b      	adds	r3, r7, r4
 800573e:	2280      	movs	r2, #128	; 0x80
 8005740:	701a      	strb	r2, [r3, #0]
	Mask_Flags = 0xFF;
 8005742:	197b      	adds	r3, r7, r5
 8005744:	22ff      	movs	r2, #255	; 0xff
 8005746:	701a      	strb	r2, [r3, #0]
	for(SendFlag_Pos = 1; SendFlag_Pos < 10; SendFlag_Pos++) {
 8005748:	19bb      	adds	r3, r7, r6
 800574a:	2201      	movs	r2, #1
 800574c:	701a      	strb	r2, [r3, #0]
 800574e:	e029      	b.n	80057a4 <Send_Message+0xa8>
		if(Mask & MessageLog[MesQue_Tail].Send_Flags) {
 8005750:	4be0      	ldr	r3, [pc, #896]	; (8005ad4 <Send_Message+0x3d8>)
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	0019      	movs	r1, r3
 8005756:	4ae0      	ldr	r2, [pc, #896]	; (8005ad8 <Send_Message+0x3dc>)
 8005758:	000b      	movs	r3, r1
 800575a:	011b      	lsls	r3, r3, #4
 800575c:	1a5b      	subs	r3, r3, r1
 800575e:	18d3      	adds	r3, r2, r3
 8005760:	330d      	adds	r3, #13
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	224f      	movs	r2, #79	; 0x4f
 8005766:	18ba      	adds	r2, r7, r2
 8005768:	7812      	ldrb	r2, [r2, #0]
 800576a:	4013      	ands	r3, r2
 800576c:	b2db      	uxtb	r3, r3
 800576e:	2b00      	cmp	r3, #0
 8005770:	d006      	beq.n	8005780 <Send_Message+0x84>
			Mask_Flags >>= 1;
 8005772:	224e      	movs	r2, #78	; 0x4e
 8005774:	18bb      	adds	r3, r7, r2
 8005776:	18ba      	adds	r2, r7, r2
 8005778:	7812      	ldrb	r2, [r2, #0]
 800577a:	0852      	lsrs	r2, r2, #1
 800577c:	701a      	strb	r2, [r3, #0]
			break;
 800577e:	e016      	b.n	80057ae <Send_Message+0xb2>
		} else {
			Mask >>= 1;
 8005780:	224f      	movs	r2, #79	; 0x4f
 8005782:	18bb      	adds	r3, r7, r2
 8005784:	18ba      	adds	r2, r7, r2
 8005786:	7812      	ldrb	r2, [r2, #0]
 8005788:	0852      	lsrs	r2, r2, #1
 800578a:	701a      	strb	r2, [r3, #0]
			Mask_Flags >>= 1;
 800578c:	224e      	movs	r2, #78	; 0x4e
 800578e:	18bb      	adds	r3, r7, r2
 8005790:	18ba      	adds	r2, r7, r2
 8005792:	7812      	ldrb	r2, [r2, #0]
 8005794:	0852      	lsrs	r2, r2, #1
 8005796:	701a      	strb	r2, [r3, #0]
	for(SendFlag_Pos = 1; SendFlag_Pos < 10; SendFlag_Pos++) {
 8005798:	214d      	movs	r1, #77	; 0x4d
 800579a:	187b      	adds	r3, r7, r1
 800579c:	781a      	ldrb	r2, [r3, #0]
 800579e:	187b      	adds	r3, r7, r1
 80057a0:	3201      	adds	r2, #1
 80057a2:	701a      	strb	r2, [r3, #0]
 80057a4:	234d      	movs	r3, #77	; 0x4d
 80057a6:	18fb      	adds	r3, r7, r3
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	2b09      	cmp	r3, #9
 80057ac:	d9d0      	bls.n	8005750 <Send_Message+0x54>
		}
	}
	if(Mask == 0) {   // if no flags is set
 80057ae:	234f      	movs	r3, #79	; 0x4f
 80057b0:	18fb      	adds	r3, r7, r3
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d12c      	bne.n	8005812 <Send_Message+0x116>
		MessageLog[MesQue_Tail].Send = TRUE;
 80057b8:	4bc6      	ldr	r3, [pc, #792]	; (8005ad4 <Send_Message+0x3d8>)
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	0019      	movs	r1, r3
 80057be:	4ac6      	ldr	r2, [pc, #792]	; (8005ad8 <Send_Message+0x3dc>)
 80057c0:	000b      	movs	r3, r1
 80057c2:	011b      	lsls	r3, r3, #4
 80057c4:	1a5b      	subs	r3, r3, r1
 80057c6:	18d3      	adds	r3, r2, r3
 80057c8:	330b      	adds	r3, #11
 80057ca:	2201      	movs	r2, #1
 80057cc:	701a      	strb	r2, [r3, #0]
		MessageLog[MesQue_Tail].Cellnumber = 0;
 80057ce:	4bc1      	ldr	r3, [pc, #772]	; (8005ad4 <Send_Message+0x3d8>)
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	0019      	movs	r1, r3
 80057d4:	4ac0      	ldr	r2, [pc, #768]	; (8005ad8 <Send_Message+0x3dc>)
 80057d6:	000b      	movs	r3, r1
 80057d8:	011b      	lsls	r3, r3, #4
 80057da:	1a5b      	subs	r3, r3, r1
 80057dc:	18d3      	adds	r3, r2, r3
 80057de:	330a      	adds	r3, #10
 80057e0:	2200      	movs	r2, #0
 80057e2:	701a      	strb	r2, [r3, #0]
		MessageLog[MesQue_Tail].Message[0] = 0;
 80057e4:	4bbb      	ldr	r3, [pc, #748]	; (8005ad4 <Send_Message+0x3d8>)
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	0019      	movs	r1, r3
 80057ea:	4abb      	ldr	r2, [pc, #748]	; (8005ad8 <Send_Message+0x3dc>)
 80057ec:	000b      	movs	r3, r1
 80057ee:	011b      	lsls	r3, r3, #4
 80057f0:	1a5b      	subs	r3, r3, r1
 80057f2:	2100      	movs	r1, #0
 80057f4:	5499      	strb	r1, [r3, r2]
		MessageLog[MesQue_Tail].Retries = 0;
 80057f6:	4bb7      	ldr	r3, [pc, #732]	; (8005ad4 <Send_Message+0x3d8>)
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	0019      	movs	r1, r3
 80057fc:	4ab6      	ldr	r2, [pc, #728]	; (8005ad8 <Send_Message+0x3dc>)
 80057fe:	000b      	movs	r3, r1
 8005800:	011b      	lsls	r3, r3, #4
 8005802:	1a5b      	subs	r3, r3, r1
 8005804:	18d3      	adds	r3, r2, r3
 8005806:	330c      	adds	r3, #12
 8005808:	2200      	movs	r2, #0
 800580a:	701a      	strb	r2, [r3, #0]
		return(FALSE);
 800580c:	2300      	movs	r3, #0
 800580e:	f000 fc37 	bl	8006080 <Send_Message+0x984>
	}

	if(SendFlag_Pos == 1) {   // Base
 8005812:	234d      	movs	r3, #77	; 0x4d
 8005814:	18fb      	adds	r3, r7, r3
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	2b01      	cmp	r3, #1
 800581a:	d000      	beq.n	800581e <Send_Message+0x122>
 800581c:	e1d0      	b.n	8005bc0 <Send_Message+0x4c4>
		strcpy(cellnum, Read_Settings(EE_GPRS_BASE));
 800581e:	2012      	movs	r0, #18
 8005820:	f7fe fc12 	bl	8004048 <Read_Settings>
 8005824:	0002      	movs	r2, r0
 8005826:	2408      	movs	r4, #8
 8005828:	193b      	adds	r3, r7, r4
 800582a:	0011      	movs	r1, r2
 800582c:	0018      	movs	r0, r3
 800582e:	f00d fa00 	bl	8012c32 <strcpy>
		if((GPRS_Enabled == TRUE)&&(strlen(cellnum) > 4)&&(MessageLog[MesQue_Tail].Retries < MAX_GPRS_MESSAGE_RETRIES)) {
 8005832:	4baa      	ldr	r3, [pc, #680]	; (8005adc <Send_Message+0x3e0>)
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d000      	beq.n	800583c <Send_Message+0x140>
 800583a:	e0d2      	b.n	80059e2 <Send_Message+0x2e6>
 800583c:	193b      	adds	r3, r7, r4
 800583e:	0018      	movs	r0, r3
 8005840:	f7fa fc62 	bl	8000108 <strlen>
 8005844:	0003      	movs	r3, r0
 8005846:	2b04      	cmp	r3, #4
 8005848:	d800      	bhi.n	800584c <Send_Message+0x150>
 800584a:	e0ca      	b.n	80059e2 <Send_Message+0x2e6>
 800584c:	4ba1      	ldr	r3, [pc, #644]	; (8005ad4 <Send_Message+0x3d8>)
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	0019      	movs	r1, r3
 8005852:	4aa1      	ldr	r2, [pc, #644]	; (8005ad8 <Send_Message+0x3dc>)
 8005854:	000b      	movs	r3, r1
 8005856:	011b      	lsls	r3, r3, #4
 8005858:	1a5b      	subs	r3, r3, r1
 800585a:	18d3      	adds	r3, r2, r3
 800585c:	330c      	adds	r3, #12
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	2b03      	cmp	r3, #3
 8005862:	d900      	bls.n	8005866 <Send_Message+0x16a>
 8005864:	e0bd      	b.n	80059e2 <Send_Message+0x2e6>
			if(strlen(message) > 3) {
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	0018      	movs	r0, r3
 800586a:	f7fa fc4d 	bl	8000108 <strlen>
 800586e:	0003      	movs	r3, r0
 8005870:	2b03      	cmp	r3, #3
 8005872:	d800      	bhi.n	8005876 <Send_Message+0x17a>
 8005874:	e08a      	b.n	800598c <Send_Message+0x290>
				MessageLog[MesQue_Tail].Retries++;
 8005876:	4b97      	ldr	r3, [pc, #604]	; (8005ad4 <Send_Message+0x3d8>)
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	001a      	movs	r2, r3
 800587c:	4996      	ldr	r1, [pc, #600]	; (8005ad8 <Send_Message+0x3dc>)
 800587e:	0013      	movs	r3, r2
 8005880:	011b      	lsls	r3, r3, #4
 8005882:	1a9b      	subs	r3, r3, r2
 8005884:	18cb      	adds	r3, r1, r3
 8005886:	330c      	adds	r3, #12
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	3301      	adds	r3, #1
 800588c:	b2d8      	uxtb	r0, r3
 800588e:	4992      	ldr	r1, [pc, #584]	; (8005ad8 <Send_Message+0x3dc>)
 8005890:	0013      	movs	r3, r2
 8005892:	011b      	lsls	r3, r3, #4
 8005894:	1a9b      	subs	r3, r3, r2
 8005896:	18cb      	adds	r3, r1, r3
 8005898:	330c      	adds	r3, #12
 800589a:	1c02      	adds	r2, r0, #0
 800589c:	701a      	strb	r2, [r3, #0]
				if(GPRS_Barear_Started) {
 800589e:	4b90      	ldr	r3, [pc, #576]	; (8005ae0 <Send_Message+0x3e4>)
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d101      	bne.n	80058aa <Send_Message+0x1ae>
 80058a6:	f000 fbe7 	bl	8006078 <Send_Message+0x97c>
					if(!Send_GPRS_SIM800(cellnum, message, 0)) {
 80058aa:	6879      	ldr	r1, [r7, #4]
 80058ac:	193b      	adds	r3, r7, r4
 80058ae:	2200      	movs	r2, #0
 80058b0:	0018      	movs	r0, r3
 80058b2:	f003 fc8f 	bl	80091d4 <Send_GPRS_SIM800>
 80058b6:	1e03      	subs	r3, r0, #0
 80058b8:	d142      	bne.n	8005940 <Send_Message+0x244>
						if(MessageLog[MesQue_Tail].Retries > MAX_GPRS_MESSAGE_RETRIES) {
 80058ba:	4b86      	ldr	r3, [pc, #536]	; (8005ad4 <Send_Message+0x3d8>)
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	0019      	movs	r1, r3
 80058c0:	4a85      	ldr	r2, [pc, #532]	; (8005ad8 <Send_Message+0x3dc>)
 80058c2:	000b      	movs	r3, r1
 80058c4:	011b      	lsls	r3, r3, #4
 80058c6:	1a5b      	subs	r3, r3, r1
 80058c8:	18d3      	adds	r3, r2, r3
 80058ca:	330c      	adds	r3, #12
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	2b04      	cmp	r3, #4
 80058d0:	d924      	bls.n	800591c <Send_Message+0x220>
							MessageLog[MesQue_Tail].Retries = 0;
 80058d2:	4b80      	ldr	r3, [pc, #512]	; (8005ad4 <Send_Message+0x3d8>)
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	0019      	movs	r1, r3
 80058d8:	4a7f      	ldr	r2, [pc, #508]	; (8005ad8 <Send_Message+0x3dc>)
 80058da:	000b      	movs	r3, r1
 80058dc:	011b      	lsls	r3, r3, #4
 80058de:	1a5b      	subs	r3, r3, r1
 80058e0:	18d3      	adds	r3, r2, r3
 80058e2:	330c      	adds	r3, #12
 80058e4:	2200      	movs	r2, #0
 80058e6:	701a      	strb	r2, [r3, #0]
							MessageLog[MesQue_Tail].Send_Flags &= Mask_Flags;
 80058e8:	4b7a      	ldr	r3, [pc, #488]	; (8005ad4 <Send_Message+0x3d8>)
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	0019      	movs	r1, r3
 80058ee:	4a7a      	ldr	r2, [pc, #488]	; (8005ad8 <Send_Message+0x3dc>)
 80058f0:	000b      	movs	r3, r1
 80058f2:	011b      	lsls	r3, r3, #4
 80058f4:	1a5b      	subs	r3, r3, r1
 80058f6:	18d3      	adds	r3, r2, r3
 80058f8:	330d      	adds	r3, #13
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	4a75      	ldr	r2, [pc, #468]	; (8005ad4 <Send_Message+0x3d8>)
 80058fe:	7812      	ldrb	r2, [r2, #0]
 8005900:	0011      	movs	r1, r2
 8005902:	224e      	movs	r2, #78	; 0x4e
 8005904:	18ba      	adds	r2, r7, r2
 8005906:	7812      	ldrb	r2, [r2, #0]
 8005908:	4013      	ands	r3, r2
 800590a:	b2d8      	uxtb	r0, r3
 800590c:	4a72      	ldr	r2, [pc, #456]	; (8005ad8 <Send_Message+0x3dc>)
 800590e:	000b      	movs	r3, r1
 8005910:	011b      	lsls	r3, r3, #4
 8005912:	1a5b      	subs	r3, r3, r1
 8005914:	18d3      	adds	r3, r2, r3
 8005916:	330d      	adds	r3, #13
 8005918:	1c02      	adds	r2, r0, #0
 800591a:	701a      	strb	r2, [r3, #0]
						}
						if(MessageLog[MesQue_Tail].Retries == (MAX_GPRS_MESSAGE_RETRIES - 1)) {
 800591c:	4b6d      	ldr	r3, [pc, #436]	; (8005ad4 <Send_Message+0x3d8>)
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	0019      	movs	r1, r3
 8005922:	4a6d      	ldr	r2, [pc, #436]	; (8005ad8 <Send_Message+0x3dc>)
 8005924:	000b      	movs	r3, r1
 8005926:	011b      	lsls	r3, r3, #4
 8005928:	1a5b      	subs	r3, r3, r1
 800592a:	18d3      	adds	r3, r2, r3
 800592c:	330c      	adds	r3, #12
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	2b03      	cmp	r3, #3
 8005932:	d000      	beq.n	8005936 <Send_Message+0x23a>
 8005934:	e3a0      	b.n	8006078 <Send_Message+0x97c>
							Reset_GSM_Flag = 1;
 8005936:	4b6b      	ldr	r3, [pc, #428]	; (8005ae4 <Send_Message+0x3e8>)
 8005938:	2201      	movs	r2, #1
 800593a:	701a      	strb	r2, [r3, #0]
							return(0);
 800593c:	2300      	movs	r3, #0
 800593e:	e39f      	b.n	8006080 <Send_Message+0x984>
						}
					} else {
						MessageLog[MesQue_Tail].Send_Flags &= Mask_Flags;
 8005940:	4b64      	ldr	r3, [pc, #400]	; (8005ad4 <Send_Message+0x3d8>)
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	0019      	movs	r1, r3
 8005946:	4a64      	ldr	r2, [pc, #400]	; (8005ad8 <Send_Message+0x3dc>)
 8005948:	000b      	movs	r3, r1
 800594a:	011b      	lsls	r3, r3, #4
 800594c:	1a5b      	subs	r3, r3, r1
 800594e:	18d3      	adds	r3, r2, r3
 8005950:	330d      	adds	r3, #13
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	4a5f      	ldr	r2, [pc, #380]	; (8005ad4 <Send_Message+0x3d8>)
 8005956:	7812      	ldrb	r2, [r2, #0]
 8005958:	0011      	movs	r1, r2
 800595a:	224e      	movs	r2, #78	; 0x4e
 800595c:	18ba      	adds	r2, r7, r2
 800595e:	7812      	ldrb	r2, [r2, #0]
 8005960:	4013      	ands	r3, r2
 8005962:	b2d8      	uxtb	r0, r3
 8005964:	4a5c      	ldr	r2, [pc, #368]	; (8005ad8 <Send_Message+0x3dc>)
 8005966:	000b      	movs	r3, r1
 8005968:	011b      	lsls	r3, r3, #4
 800596a:	1a5b      	subs	r3, r3, r1
 800596c:	18d3      	adds	r3, r2, r3
 800596e:	330d      	adds	r3, #13
 8005970:	1c02      	adds	r2, r0, #0
 8005972:	701a      	strb	r2, [r3, #0]
						MessageLog[MesQue_Tail].Retries = 0;
 8005974:	4b57      	ldr	r3, [pc, #348]	; (8005ad4 <Send_Message+0x3d8>)
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	0019      	movs	r1, r3
 800597a:	4a57      	ldr	r2, [pc, #348]	; (8005ad8 <Send_Message+0x3dc>)
 800597c:	000b      	movs	r3, r1
 800597e:	011b      	lsls	r3, r3, #4
 8005980:	1a5b      	subs	r3, r3, r1
 8005982:	18d3      	adds	r3, r2, r3
 8005984:	330c      	adds	r3, #12
 8005986:	2200      	movs	r2, #0
 8005988:	701a      	strb	r2, [r3, #0]
			if(strlen(message) > 3) {
 800598a:	e375      	b.n	8006078 <Send_Message+0x97c>
					//	//UARTX_TX(Message);

					}
				}
			} else {
				MessageLog[MesQue_Tail].Send = TRUE;
 800598c:	4b51      	ldr	r3, [pc, #324]	; (8005ad4 <Send_Message+0x3d8>)
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	0019      	movs	r1, r3
 8005992:	4a51      	ldr	r2, [pc, #324]	; (8005ad8 <Send_Message+0x3dc>)
 8005994:	000b      	movs	r3, r1
 8005996:	011b      	lsls	r3, r3, #4
 8005998:	1a5b      	subs	r3, r3, r1
 800599a:	18d3      	adds	r3, r2, r3
 800599c:	330b      	adds	r3, #11
 800599e:	2201      	movs	r2, #1
 80059a0:	701a      	strb	r2, [r3, #0]
				MessageLog[MesQue_Tail].Cellnumber = 0;
 80059a2:	4b4c      	ldr	r3, [pc, #304]	; (8005ad4 <Send_Message+0x3d8>)
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	0019      	movs	r1, r3
 80059a8:	4a4b      	ldr	r2, [pc, #300]	; (8005ad8 <Send_Message+0x3dc>)
 80059aa:	000b      	movs	r3, r1
 80059ac:	011b      	lsls	r3, r3, #4
 80059ae:	1a5b      	subs	r3, r3, r1
 80059b0:	18d3      	adds	r3, r2, r3
 80059b2:	330a      	adds	r3, #10
 80059b4:	2200      	movs	r2, #0
 80059b6:	701a      	strb	r2, [r3, #0]
				MessageLog[MesQue_Tail].Message[0] = 0;
 80059b8:	4b46      	ldr	r3, [pc, #280]	; (8005ad4 <Send_Message+0x3d8>)
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	0019      	movs	r1, r3
 80059be:	4a46      	ldr	r2, [pc, #280]	; (8005ad8 <Send_Message+0x3dc>)
 80059c0:	000b      	movs	r3, r1
 80059c2:	011b      	lsls	r3, r3, #4
 80059c4:	1a5b      	subs	r3, r3, r1
 80059c6:	2100      	movs	r1, #0
 80059c8:	5499      	strb	r1, [r3, r2]
				MessageLog[MesQue_Tail].Send_Flags = 0;
 80059ca:	4b42      	ldr	r3, [pc, #264]	; (8005ad4 <Send_Message+0x3d8>)
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	0019      	movs	r1, r3
 80059d0:	4a41      	ldr	r2, [pc, #260]	; (8005ad8 <Send_Message+0x3dc>)
 80059d2:	000b      	movs	r3, r1
 80059d4:	011b      	lsls	r3, r3, #4
 80059d6:	1a5b      	subs	r3, r3, r1
 80059d8:	18d3      	adds	r3, r2, r3
 80059da:	330d      	adds	r3, #13
 80059dc:	2200      	movs	r2, #0
 80059de:	701a      	strb	r2, [r3, #0]
			if(strlen(message) > 3) {
 80059e0:	e34a      	b.n	8006078 <Send_Message+0x97c>
			}
		} else {
		    strcpy(cellnum, Read_Settings(EE_SMS_BASE));
 80059e2:	2013      	movs	r0, #19
 80059e4:	f7fe fb30 	bl	8004048 <Read_Settings>
 80059e8:	0002      	movs	r2, r0
 80059ea:	2408      	movs	r4, #8
 80059ec:	193b      	adds	r3, r7, r4
 80059ee:	0011      	movs	r1, r2
 80059f0:	0018      	movs	r0, r3
 80059f2:	f00d f91e 	bl	8012c32 <strcpy>
		    if((strlen(cellnum) > 4)&&(!MessageLog[MesQue_Tail].Send_Only_GPRS)) {
 80059f6:	193b      	adds	r3, r7, r4
 80059f8:	0018      	movs	r0, r3
 80059fa:	f7fa fb85 	bl	8000108 <strlen>
 80059fe:	0003      	movs	r3, r0
 8005a00:	2b04      	cmp	r3, #4
 8005a02:	d800      	bhi.n	8005a06 <Send_Message+0x30a>
 8005a04:	e0c1      	b.n	8005b8a <Send_Message+0x48e>
 8005a06:	4b33      	ldr	r3, [pc, #204]	; (8005ad4 <Send_Message+0x3d8>)
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	0019      	movs	r1, r3
 8005a0c:	4a32      	ldr	r2, [pc, #200]	; (8005ad8 <Send_Message+0x3dc>)
 8005a0e:	000b      	movs	r3, r1
 8005a10:	011b      	lsls	r3, r3, #4
 8005a12:	1a5b      	subs	r3, r3, r1
 8005a14:	18d3      	adds	r3, r2, r3
 8005a16:	330e      	adds	r3, #14
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d000      	beq.n	8005a20 <Send_Message+0x324>
 8005a1e:	e0b4      	b.n	8005b8a <Send_Message+0x48e>
				if(strlen(message) > 3) {
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	0018      	movs	r0, r3
 8005a24:	f7fa fb70 	bl	8000108 <strlen>
 8005a28:	0003      	movs	r3, r0
 8005a2a:	2b03      	cmp	r3, #3
 8005a2c:	d800      	bhi.n	8005a30 <Send_Message+0x334>
 8005a2e:	e081      	b.n	8005b34 <Send_Message+0x438>
					MessageLog[MesQue_Tail].Retries++;
 8005a30:	4b28      	ldr	r3, [pc, #160]	; (8005ad4 <Send_Message+0x3d8>)
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	001a      	movs	r2, r3
 8005a36:	4928      	ldr	r1, [pc, #160]	; (8005ad8 <Send_Message+0x3dc>)
 8005a38:	0013      	movs	r3, r2
 8005a3a:	011b      	lsls	r3, r3, #4
 8005a3c:	1a9b      	subs	r3, r3, r2
 8005a3e:	18cb      	adds	r3, r1, r3
 8005a40:	330c      	adds	r3, #12
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	3301      	adds	r3, #1
 8005a46:	b2d8      	uxtb	r0, r3
 8005a48:	4923      	ldr	r1, [pc, #140]	; (8005ad8 <Send_Message+0x3dc>)
 8005a4a:	0013      	movs	r3, r2
 8005a4c:	011b      	lsls	r3, r3, #4
 8005a4e:	1a9b      	subs	r3, r3, r2
 8005a50:	18cb      	adds	r3, r1, r3
 8005a52:	330c      	adds	r3, #12
 8005a54:	1c02      	adds	r2, r0, #0
 8005a56:	701a      	strb	r2, [r3, #0]
					if(!SIM800H_Send_SMS(cellnum, message)) {
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	193b      	adds	r3, r7, r4
 8005a5c:	0011      	movs	r1, r2
 8005a5e:	0018      	movs	r0, r3
 8005a60:	f003 f8f6 	bl	8008c50 <SIM800H_Send_SMS>
 8005a64:	1e03      	subs	r3, r0, #0
 8005a66:	d13f      	bne.n	8005ae8 <Send_Message+0x3ec>
						if(MessageLog[MesQue_Tail].Retries > MAX_SMS_MESSAGE_RETRIES) {
 8005a68:	4b1a      	ldr	r3, [pc, #104]	; (8005ad4 <Send_Message+0x3d8>)
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	0019      	movs	r1, r3
 8005a6e:	4a1a      	ldr	r2, [pc, #104]	; (8005ad8 <Send_Message+0x3dc>)
 8005a70:	000b      	movs	r3, r1
 8005a72:	011b      	lsls	r3, r3, #4
 8005a74:	1a5b      	subs	r3, r3, r1
 8005a76:	18d3      	adds	r3, r2, r3
 8005a78:	330c      	adds	r3, #12
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	2b06      	cmp	r3, #6
 8005a7e:	d924      	bls.n	8005aca <Send_Message+0x3ce>
							MessageLog[MesQue_Tail].Retries = 0;
 8005a80:	4b14      	ldr	r3, [pc, #80]	; (8005ad4 <Send_Message+0x3d8>)
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	0019      	movs	r1, r3
 8005a86:	4a14      	ldr	r2, [pc, #80]	; (8005ad8 <Send_Message+0x3dc>)
 8005a88:	000b      	movs	r3, r1
 8005a8a:	011b      	lsls	r3, r3, #4
 8005a8c:	1a5b      	subs	r3, r3, r1
 8005a8e:	18d3      	adds	r3, r2, r3
 8005a90:	330c      	adds	r3, #12
 8005a92:	2200      	movs	r2, #0
 8005a94:	701a      	strb	r2, [r3, #0]
							MessageLog[MesQue_Tail].Send_Flags &= Mask_Flags;
 8005a96:	4b0f      	ldr	r3, [pc, #60]	; (8005ad4 <Send_Message+0x3d8>)
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	0019      	movs	r1, r3
 8005a9c:	4a0e      	ldr	r2, [pc, #56]	; (8005ad8 <Send_Message+0x3dc>)
 8005a9e:	000b      	movs	r3, r1
 8005aa0:	011b      	lsls	r3, r3, #4
 8005aa2:	1a5b      	subs	r3, r3, r1
 8005aa4:	18d3      	adds	r3, r2, r3
 8005aa6:	330d      	adds	r3, #13
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	4a0a      	ldr	r2, [pc, #40]	; (8005ad4 <Send_Message+0x3d8>)
 8005aac:	7812      	ldrb	r2, [r2, #0]
 8005aae:	0011      	movs	r1, r2
 8005ab0:	224e      	movs	r2, #78	; 0x4e
 8005ab2:	18ba      	adds	r2, r7, r2
 8005ab4:	7812      	ldrb	r2, [r2, #0]
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	b2d8      	uxtb	r0, r3
 8005aba:	4a07      	ldr	r2, [pc, #28]	; (8005ad8 <Send_Message+0x3dc>)
 8005abc:	000b      	movs	r3, r1
 8005abe:	011b      	lsls	r3, r3, #4
 8005ac0:	1a5b      	subs	r3, r3, r1
 8005ac2:	18d3      	adds	r3, r2, r3
 8005ac4:	330d      	adds	r3, #13
 8005ac6:	1c02      	adds	r2, r0, #0
 8005ac8:	701a      	strb	r2, [r3, #0]
						}
						Reset_GSM_Flag = 1;
 8005aca:	4b06      	ldr	r3, [pc, #24]	; (8005ae4 <Send_Message+0x3e8>)
 8005acc:	2201      	movs	r2, #1
 8005ace:	701a      	strb	r2, [r3, #0]
						return(0);
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	e2d5      	b.n	8006080 <Send_Message+0x984>
 8005ad4:	200016bd 	.word	0x200016bd
 8005ad8:	200020cc 	.word	0x200020cc
 8005adc:	20000793 	.word	0x20000793
 8005ae0:	20000794 	.word	0x20000794
 8005ae4:	20000792 	.word	0x20000792
					} else {   // if message is send
						MessageLog[MesQue_Tail].Retries = 0;
 8005ae8:	4be8      	ldr	r3, [pc, #928]	; (8005e8c <Send_Message+0x790>)
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	0019      	movs	r1, r3
 8005aee:	4ae8      	ldr	r2, [pc, #928]	; (8005e90 <Send_Message+0x794>)
 8005af0:	000b      	movs	r3, r1
 8005af2:	011b      	lsls	r3, r3, #4
 8005af4:	1a5b      	subs	r3, r3, r1
 8005af6:	18d3      	adds	r3, r2, r3
 8005af8:	330c      	adds	r3, #12
 8005afa:	2200      	movs	r2, #0
 8005afc:	701a      	strb	r2, [r3, #0]
						MessageLog[MesQue_Tail].Send_Flags &= Mask_Flags;
 8005afe:	4be3      	ldr	r3, [pc, #908]	; (8005e8c <Send_Message+0x790>)
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	0019      	movs	r1, r3
 8005b04:	4ae2      	ldr	r2, [pc, #904]	; (8005e90 <Send_Message+0x794>)
 8005b06:	000b      	movs	r3, r1
 8005b08:	011b      	lsls	r3, r3, #4
 8005b0a:	1a5b      	subs	r3, r3, r1
 8005b0c:	18d3      	adds	r3, r2, r3
 8005b0e:	330d      	adds	r3, #13
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	4ade      	ldr	r2, [pc, #888]	; (8005e8c <Send_Message+0x790>)
 8005b14:	7812      	ldrb	r2, [r2, #0]
 8005b16:	0011      	movs	r1, r2
 8005b18:	224e      	movs	r2, #78	; 0x4e
 8005b1a:	18ba      	adds	r2, r7, r2
 8005b1c:	7812      	ldrb	r2, [r2, #0]
 8005b1e:	4013      	ands	r3, r2
 8005b20:	b2d8      	uxtb	r0, r3
 8005b22:	4adb      	ldr	r2, [pc, #876]	; (8005e90 <Send_Message+0x794>)
 8005b24:	000b      	movs	r3, r1
 8005b26:	011b      	lsls	r3, r3, #4
 8005b28:	1a5b      	subs	r3, r3, r1
 8005b2a:	18d3      	adds	r3, r2, r3
 8005b2c:	330d      	adds	r3, #13
 8005b2e:	1c02      	adds	r2, r0, #0
 8005b30:	701a      	strb	r2, [r3, #0]
				if(strlen(message) > 3) {
 8005b32:	e2a2      	b.n	800607a <Send_Message+0x97e>
					}
				} else {
						MessageLog[MesQue_Tail].Send = TRUE;
 8005b34:	4bd5      	ldr	r3, [pc, #852]	; (8005e8c <Send_Message+0x790>)
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	0019      	movs	r1, r3
 8005b3a:	4ad5      	ldr	r2, [pc, #852]	; (8005e90 <Send_Message+0x794>)
 8005b3c:	000b      	movs	r3, r1
 8005b3e:	011b      	lsls	r3, r3, #4
 8005b40:	1a5b      	subs	r3, r3, r1
 8005b42:	18d3      	adds	r3, r2, r3
 8005b44:	330b      	adds	r3, #11
 8005b46:	2201      	movs	r2, #1
 8005b48:	701a      	strb	r2, [r3, #0]
						MessageLog[MesQue_Tail].Cellnumber = 0;
 8005b4a:	4bd0      	ldr	r3, [pc, #832]	; (8005e8c <Send_Message+0x790>)
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	0019      	movs	r1, r3
 8005b50:	4acf      	ldr	r2, [pc, #828]	; (8005e90 <Send_Message+0x794>)
 8005b52:	000b      	movs	r3, r1
 8005b54:	011b      	lsls	r3, r3, #4
 8005b56:	1a5b      	subs	r3, r3, r1
 8005b58:	18d3      	adds	r3, r2, r3
 8005b5a:	330a      	adds	r3, #10
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	701a      	strb	r2, [r3, #0]
						MessageLog[MesQue_Tail].Message[0] = 0;
 8005b60:	4bca      	ldr	r3, [pc, #808]	; (8005e8c <Send_Message+0x790>)
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	0019      	movs	r1, r3
 8005b66:	4aca      	ldr	r2, [pc, #808]	; (8005e90 <Send_Message+0x794>)
 8005b68:	000b      	movs	r3, r1
 8005b6a:	011b      	lsls	r3, r3, #4
 8005b6c:	1a5b      	subs	r3, r3, r1
 8005b6e:	2100      	movs	r1, #0
 8005b70:	5499      	strb	r1, [r3, r2]
						MessageLog[MesQue_Tail].Send_Flags = 0;
 8005b72:	4bc6      	ldr	r3, [pc, #792]	; (8005e8c <Send_Message+0x790>)
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	0019      	movs	r1, r3
 8005b78:	4ac5      	ldr	r2, [pc, #788]	; (8005e90 <Send_Message+0x794>)
 8005b7a:	000b      	movs	r3, r1
 8005b7c:	011b      	lsls	r3, r3, #4
 8005b7e:	1a5b      	subs	r3, r3, r1
 8005b80:	18d3      	adds	r3, r2, r3
 8005b82:	330d      	adds	r3, #13
 8005b84:	2200      	movs	r2, #0
 8005b86:	701a      	strb	r2, [r3, #0]
				if(strlen(message) > 3) {
 8005b88:	e277      	b.n	800607a <Send_Message+0x97e>
				}
			} else {
				MessageLog[MesQue_Tail].Send_Flags &= Mask_Flags;
 8005b8a:	4bc0      	ldr	r3, [pc, #768]	; (8005e8c <Send_Message+0x790>)
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	0019      	movs	r1, r3
 8005b90:	4abf      	ldr	r2, [pc, #764]	; (8005e90 <Send_Message+0x794>)
 8005b92:	000b      	movs	r3, r1
 8005b94:	011b      	lsls	r3, r3, #4
 8005b96:	1a5b      	subs	r3, r3, r1
 8005b98:	18d3      	adds	r3, r2, r3
 8005b9a:	330d      	adds	r3, #13
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	4abb      	ldr	r2, [pc, #748]	; (8005e8c <Send_Message+0x790>)
 8005ba0:	7812      	ldrb	r2, [r2, #0]
 8005ba2:	0011      	movs	r1, r2
 8005ba4:	224e      	movs	r2, #78	; 0x4e
 8005ba6:	18ba      	adds	r2, r7, r2
 8005ba8:	7812      	ldrb	r2, [r2, #0]
 8005baa:	4013      	ands	r3, r2
 8005bac:	b2d8      	uxtb	r0, r3
 8005bae:	4ab8      	ldr	r2, [pc, #736]	; (8005e90 <Send_Message+0x794>)
 8005bb0:	000b      	movs	r3, r1
 8005bb2:	011b      	lsls	r3, r3, #4
 8005bb4:	1a5b      	subs	r3, r3, r1
 8005bb6:	18d3      	adds	r3, r2, r3
 8005bb8:	330d      	adds	r3, #13
 8005bba:	1c02      	adds	r2, r0, #0
 8005bbc:	701a      	strb	r2, [r3, #0]
 8005bbe:	e25c      	b.n	800607a <Send_Message+0x97e>
			}
		}
	} else {
		if((SendFlag_Pos > 1)&&(SendFlag_Pos < 8)) {
 8005bc0:	244d      	movs	r4, #77	; 0x4d
 8005bc2:	193b      	adds	r3, r7, r4
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d800      	bhi.n	8005bcc <Send_Message+0x4d0>
 8005bca:	e127      	b.n	8005e1c <Send_Message+0x720>
 8005bcc:	193b      	adds	r3, r7, r4
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	2b07      	cmp	r3, #7
 8005bd2:	d900      	bls.n	8005bd6 <Send_Message+0x4da>
 8005bd4:	e122      	b.n	8005e1c <Send_Message+0x720>
			strcpy(cellnum, Read_Settings(EE_SMS_CELL1 + (SendFlag_Pos - 2)));
 8005bd6:	193b      	adds	r3, r7, r4
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	3312      	adds	r3, #18
 8005bdc:	0018      	movs	r0, r3
 8005bde:	f7fe fa33 	bl	8004048 <Read_Settings>
 8005be2:	0002      	movs	r2, r0
 8005be4:	2508      	movs	r5, #8
 8005be6:	197b      	adds	r3, r7, r5
 8005be8:	0011      	movs	r1, r2
 8005bea:	0018      	movs	r0, r3
 8005bec:	f00d f821 	bl	8012c32 <strcpy>
			if((strlen(cellnum) > 4)&&(!MessageLog[MesQue_Tail].Send_Only_GPRS)) {
 8005bf0:	197b      	adds	r3, r7, r5
 8005bf2:	0018      	movs	r0, r3
 8005bf4:	f7fa fa88 	bl	8000108 <strlen>
 8005bf8:	0003      	movs	r3, r0
 8005bfa:	2b04      	cmp	r3, #4
 8005bfc:	d800      	bhi.n	8005c00 <Send_Message+0x504>
 8005bfe:	e0e6      	b.n	8005dce <Send_Message+0x6d2>
 8005c00:	4ba2      	ldr	r3, [pc, #648]	; (8005e8c <Send_Message+0x790>)
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	0019      	movs	r1, r3
 8005c06:	4aa2      	ldr	r2, [pc, #648]	; (8005e90 <Send_Message+0x794>)
 8005c08:	000b      	movs	r3, r1
 8005c0a:	011b      	lsls	r3, r3, #4
 8005c0c:	1a5b      	subs	r3, r3, r1
 8005c0e:	18d3      	adds	r3, r2, r3
 8005c10:	330e      	adds	r3, #14
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d000      	beq.n	8005c1a <Send_Message+0x51e>
 8005c18:	e0d9      	b.n	8005dce <Send_Message+0x6d2>
				if(strlen(message) > 3) {
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	0018      	movs	r0, r3
 8005c1e:	f7fa fa73 	bl	8000108 <strlen>
 8005c22:	0003      	movs	r3, r0
 8005c24:	2b03      	cmp	r3, #3
 8005c26:	d800      	bhi.n	8005c2a <Send_Message+0x52e>
 8005c28:	e0a6      	b.n	8005d78 <Send_Message+0x67c>
					MessageLog[MesQue_Tail].Retries++;
 8005c2a:	4b98      	ldr	r3, [pc, #608]	; (8005e8c <Send_Message+0x790>)
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	001a      	movs	r2, r3
 8005c30:	4997      	ldr	r1, [pc, #604]	; (8005e90 <Send_Message+0x794>)
 8005c32:	0013      	movs	r3, r2
 8005c34:	011b      	lsls	r3, r3, #4
 8005c36:	1a9b      	subs	r3, r3, r2
 8005c38:	18cb      	adds	r3, r1, r3
 8005c3a:	330c      	adds	r3, #12
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	b2d8      	uxtb	r0, r3
 8005c42:	4993      	ldr	r1, [pc, #588]	; (8005e90 <Send_Message+0x794>)
 8005c44:	0013      	movs	r3, r2
 8005c46:	011b      	lsls	r3, r3, #4
 8005c48:	1a9b      	subs	r3, r3, r2
 8005c4a:	18cb      	adds	r3, r1, r3
 8005c4c:	330c      	adds	r3, #12
 8005c4e:	1c02      	adds	r2, r0, #0
 8005c50:	701a      	strb	r2, [r3, #0]
					if(SIMA76_HTTP_Send_Message(cellnum, Whats_Message, SendFlag_Pos)) {
 8005c52:	193b      	adds	r3, r7, r4
 8005c54:	781a      	ldrb	r2, [r3, #0]
 8005c56:	498f      	ldr	r1, [pc, #572]	; (8005e94 <Send_Message+0x798>)
 8005c58:	197b      	adds	r3, r7, r5
 8005c5a:	0018      	movs	r0, r3
 8005c5c:	f002 fb24 	bl	80082a8 <SIMA76_HTTP_Send_Message>
 8005c60:	1e03      	subs	r3, r0, #0
 8005c62:	d063      	beq.n	8005d2c <Send_Message+0x630>
						if(!SIM800H_Send_SMS(cellnum, message)) {
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	197b      	adds	r3, r7, r5
 8005c68:	0011      	movs	r1, r2
 8005c6a:	0018      	movs	r0, r3
 8005c6c:	f002 fff0 	bl	8008c50 <SIM800H_Send_SMS>
 8005c70:	1e03      	subs	r3, r0, #0
 8005c72:	d135      	bne.n	8005ce0 <Send_Message+0x5e4>
							if(MessageLog[MesQue_Tail].Retries > MAX_SMS_MESSAGE_RETRIES) {
 8005c74:	4b85      	ldr	r3, [pc, #532]	; (8005e8c <Send_Message+0x790>)
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	0019      	movs	r1, r3
 8005c7a:	4a85      	ldr	r2, [pc, #532]	; (8005e90 <Send_Message+0x794>)
 8005c7c:	000b      	movs	r3, r1
 8005c7e:	011b      	lsls	r3, r3, #4
 8005c80:	1a5b      	subs	r3, r3, r1
 8005c82:	18d3      	adds	r3, r2, r3
 8005c84:	330c      	adds	r3, #12
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	2b06      	cmp	r3, #6
 8005c8a:	d924      	bls.n	8005cd6 <Send_Message+0x5da>
								MessageLog[MesQue_Tail].Retries = 0;
 8005c8c:	4b7f      	ldr	r3, [pc, #508]	; (8005e8c <Send_Message+0x790>)
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	0019      	movs	r1, r3
 8005c92:	4a7f      	ldr	r2, [pc, #508]	; (8005e90 <Send_Message+0x794>)
 8005c94:	000b      	movs	r3, r1
 8005c96:	011b      	lsls	r3, r3, #4
 8005c98:	1a5b      	subs	r3, r3, r1
 8005c9a:	18d3      	adds	r3, r2, r3
 8005c9c:	330c      	adds	r3, #12
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	701a      	strb	r2, [r3, #0]
								MessageLog[MesQue_Tail].Send_Flags &= Mask_Flags;
 8005ca2:	4b7a      	ldr	r3, [pc, #488]	; (8005e8c <Send_Message+0x790>)
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	0019      	movs	r1, r3
 8005ca8:	4a79      	ldr	r2, [pc, #484]	; (8005e90 <Send_Message+0x794>)
 8005caa:	000b      	movs	r3, r1
 8005cac:	011b      	lsls	r3, r3, #4
 8005cae:	1a5b      	subs	r3, r3, r1
 8005cb0:	18d3      	adds	r3, r2, r3
 8005cb2:	330d      	adds	r3, #13
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	4a75      	ldr	r2, [pc, #468]	; (8005e8c <Send_Message+0x790>)
 8005cb8:	7812      	ldrb	r2, [r2, #0]
 8005cba:	0011      	movs	r1, r2
 8005cbc:	224e      	movs	r2, #78	; 0x4e
 8005cbe:	18ba      	adds	r2, r7, r2
 8005cc0:	7812      	ldrb	r2, [r2, #0]
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	b2d8      	uxtb	r0, r3
 8005cc6:	4a72      	ldr	r2, [pc, #456]	; (8005e90 <Send_Message+0x794>)
 8005cc8:	000b      	movs	r3, r1
 8005cca:	011b      	lsls	r3, r3, #4
 8005ccc:	1a5b      	subs	r3, r3, r1
 8005cce:	18d3      	adds	r3, r2, r3
 8005cd0:	330d      	adds	r3, #13
 8005cd2:	1c02      	adds	r2, r0, #0
 8005cd4:	701a      	strb	r2, [r3, #0]
							}
							Reset_GSM_Flag = 1;
 8005cd6:	4b70      	ldr	r3, [pc, #448]	; (8005e98 <Send_Message+0x79c>)
 8005cd8:	2201      	movs	r2, #1
 8005cda:	701a      	strb	r2, [r3, #0]
							return(0);
 8005cdc:	2300      	movs	r3, #0
 8005cde:	e1cf      	b.n	8006080 <Send_Message+0x984>
						} else {   // if message is send
							MessageLog[MesQue_Tail].Retries = 0;
 8005ce0:	4b6a      	ldr	r3, [pc, #424]	; (8005e8c <Send_Message+0x790>)
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	0019      	movs	r1, r3
 8005ce6:	4a6a      	ldr	r2, [pc, #424]	; (8005e90 <Send_Message+0x794>)
 8005ce8:	000b      	movs	r3, r1
 8005cea:	011b      	lsls	r3, r3, #4
 8005cec:	1a5b      	subs	r3, r3, r1
 8005cee:	18d3      	adds	r3, r2, r3
 8005cf0:	330c      	adds	r3, #12
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	701a      	strb	r2, [r3, #0]
							MessageLog[MesQue_Tail].Send_Flags &= Mask_Flags;
 8005cf6:	4b65      	ldr	r3, [pc, #404]	; (8005e8c <Send_Message+0x790>)
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	0019      	movs	r1, r3
 8005cfc:	4a64      	ldr	r2, [pc, #400]	; (8005e90 <Send_Message+0x794>)
 8005cfe:	000b      	movs	r3, r1
 8005d00:	011b      	lsls	r3, r3, #4
 8005d02:	1a5b      	subs	r3, r3, r1
 8005d04:	18d3      	adds	r3, r2, r3
 8005d06:	330d      	adds	r3, #13
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	4a60      	ldr	r2, [pc, #384]	; (8005e8c <Send_Message+0x790>)
 8005d0c:	7812      	ldrb	r2, [r2, #0]
 8005d0e:	0011      	movs	r1, r2
 8005d10:	224e      	movs	r2, #78	; 0x4e
 8005d12:	18ba      	adds	r2, r7, r2
 8005d14:	7812      	ldrb	r2, [r2, #0]
 8005d16:	4013      	ands	r3, r2
 8005d18:	b2d8      	uxtb	r0, r3
 8005d1a:	4a5d      	ldr	r2, [pc, #372]	; (8005e90 <Send_Message+0x794>)
 8005d1c:	000b      	movs	r3, r1
 8005d1e:	011b      	lsls	r3, r3, #4
 8005d20:	1a5b      	subs	r3, r3, r1
 8005d22:	18d3      	adds	r3, r2, r3
 8005d24:	330d      	adds	r3, #13
 8005d26:	1c02      	adds	r2, r0, #0
 8005d28:	701a      	strb	r2, [r3, #0]
				if(strlen(message) > 3) {
 8005d2a:	e076      	b.n	8005e1a <Send_Message+0x71e>
						}
				  }else {   // if message is send
						MessageLog[MesQue_Tail].Retries = 0;
 8005d2c:	4b57      	ldr	r3, [pc, #348]	; (8005e8c <Send_Message+0x790>)
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	0019      	movs	r1, r3
 8005d32:	4a57      	ldr	r2, [pc, #348]	; (8005e90 <Send_Message+0x794>)
 8005d34:	000b      	movs	r3, r1
 8005d36:	011b      	lsls	r3, r3, #4
 8005d38:	1a5b      	subs	r3, r3, r1
 8005d3a:	18d3      	adds	r3, r2, r3
 8005d3c:	330c      	adds	r3, #12
 8005d3e:	2200      	movs	r2, #0
 8005d40:	701a      	strb	r2, [r3, #0]
						MessageLog[MesQue_Tail].Send_Flags &= Mask_Flags;
 8005d42:	4b52      	ldr	r3, [pc, #328]	; (8005e8c <Send_Message+0x790>)
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	0019      	movs	r1, r3
 8005d48:	4a51      	ldr	r2, [pc, #324]	; (8005e90 <Send_Message+0x794>)
 8005d4a:	000b      	movs	r3, r1
 8005d4c:	011b      	lsls	r3, r3, #4
 8005d4e:	1a5b      	subs	r3, r3, r1
 8005d50:	18d3      	adds	r3, r2, r3
 8005d52:	330d      	adds	r3, #13
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	4a4d      	ldr	r2, [pc, #308]	; (8005e8c <Send_Message+0x790>)
 8005d58:	7812      	ldrb	r2, [r2, #0]
 8005d5a:	0011      	movs	r1, r2
 8005d5c:	224e      	movs	r2, #78	; 0x4e
 8005d5e:	18ba      	adds	r2, r7, r2
 8005d60:	7812      	ldrb	r2, [r2, #0]
 8005d62:	4013      	ands	r3, r2
 8005d64:	b2d8      	uxtb	r0, r3
 8005d66:	4a4a      	ldr	r2, [pc, #296]	; (8005e90 <Send_Message+0x794>)
 8005d68:	000b      	movs	r3, r1
 8005d6a:	011b      	lsls	r3, r3, #4
 8005d6c:	1a5b      	subs	r3, r3, r1
 8005d6e:	18d3      	adds	r3, r2, r3
 8005d70:	330d      	adds	r3, #13
 8005d72:	1c02      	adds	r2, r0, #0
 8005d74:	701a      	strb	r2, [r3, #0]
				if(strlen(message) > 3) {
 8005d76:	e050      	b.n	8005e1a <Send_Message+0x71e>
					}
				} else {
						MessageLog[MesQue_Tail].Send = TRUE;
 8005d78:	4b44      	ldr	r3, [pc, #272]	; (8005e8c <Send_Message+0x790>)
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	0019      	movs	r1, r3
 8005d7e:	4a44      	ldr	r2, [pc, #272]	; (8005e90 <Send_Message+0x794>)
 8005d80:	000b      	movs	r3, r1
 8005d82:	011b      	lsls	r3, r3, #4
 8005d84:	1a5b      	subs	r3, r3, r1
 8005d86:	18d3      	adds	r3, r2, r3
 8005d88:	330b      	adds	r3, #11
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	701a      	strb	r2, [r3, #0]
						MessageLog[MesQue_Tail].Cellnumber = 0;
 8005d8e:	4b3f      	ldr	r3, [pc, #252]	; (8005e8c <Send_Message+0x790>)
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	0019      	movs	r1, r3
 8005d94:	4a3e      	ldr	r2, [pc, #248]	; (8005e90 <Send_Message+0x794>)
 8005d96:	000b      	movs	r3, r1
 8005d98:	011b      	lsls	r3, r3, #4
 8005d9a:	1a5b      	subs	r3, r3, r1
 8005d9c:	18d3      	adds	r3, r2, r3
 8005d9e:	330a      	adds	r3, #10
 8005da0:	2200      	movs	r2, #0
 8005da2:	701a      	strb	r2, [r3, #0]
						MessageLog[MesQue_Tail].Message[0] = 0;
 8005da4:	4b39      	ldr	r3, [pc, #228]	; (8005e8c <Send_Message+0x790>)
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	0019      	movs	r1, r3
 8005daa:	4a39      	ldr	r2, [pc, #228]	; (8005e90 <Send_Message+0x794>)
 8005dac:	000b      	movs	r3, r1
 8005dae:	011b      	lsls	r3, r3, #4
 8005db0:	1a5b      	subs	r3, r3, r1
 8005db2:	2100      	movs	r1, #0
 8005db4:	5499      	strb	r1, [r3, r2]
						MessageLog[MesQue_Tail].Send_Flags = 0;
 8005db6:	4b35      	ldr	r3, [pc, #212]	; (8005e8c <Send_Message+0x790>)
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	0019      	movs	r1, r3
 8005dbc:	4a34      	ldr	r2, [pc, #208]	; (8005e90 <Send_Message+0x794>)
 8005dbe:	000b      	movs	r3, r1
 8005dc0:	011b      	lsls	r3, r3, #4
 8005dc2:	1a5b      	subs	r3, r3, r1
 8005dc4:	18d3      	adds	r3, r2, r3
 8005dc6:	330d      	adds	r3, #13
 8005dc8:	2200      	movs	r2, #0
 8005dca:	701a      	strb	r2, [r3, #0]
				if(strlen(message) > 3) {
 8005dcc:	e025      	b.n	8005e1a <Send_Message+0x71e>
				}
			} else {
				MessageLog[MesQue_Tail].Send_Flags &= Mask_Flags;
 8005dce:	4b2f      	ldr	r3, [pc, #188]	; (8005e8c <Send_Message+0x790>)
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	0019      	movs	r1, r3
 8005dd4:	4a2e      	ldr	r2, [pc, #184]	; (8005e90 <Send_Message+0x794>)
 8005dd6:	000b      	movs	r3, r1
 8005dd8:	011b      	lsls	r3, r3, #4
 8005dda:	1a5b      	subs	r3, r3, r1
 8005ddc:	18d3      	adds	r3, r2, r3
 8005dde:	330d      	adds	r3, #13
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	4a2a      	ldr	r2, [pc, #168]	; (8005e8c <Send_Message+0x790>)
 8005de4:	7812      	ldrb	r2, [r2, #0]
 8005de6:	0011      	movs	r1, r2
 8005de8:	224e      	movs	r2, #78	; 0x4e
 8005dea:	18ba      	adds	r2, r7, r2
 8005dec:	7812      	ldrb	r2, [r2, #0]
 8005dee:	4013      	ands	r3, r2
 8005df0:	b2d8      	uxtb	r0, r3
 8005df2:	4a27      	ldr	r2, [pc, #156]	; (8005e90 <Send_Message+0x794>)
 8005df4:	000b      	movs	r3, r1
 8005df6:	011b      	lsls	r3, r3, #4
 8005df8:	1a5b      	subs	r3, r3, r1
 8005dfa:	18d3      	adds	r3, r2, r3
 8005dfc:	330d      	adds	r3, #13
 8005dfe:	1c02      	adds	r2, r0, #0
 8005e00:	701a      	strb	r2, [r3, #0]
				MessageLog[MesQue_Tail].Retries = 0;
 8005e02:	4b22      	ldr	r3, [pc, #136]	; (8005e8c <Send_Message+0x790>)
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	0019      	movs	r1, r3
 8005e08:	4a21      	ldr	r2, [pc, #132]	; (8005e90 <Send_Message+0x794>)
 8005e0a:	000b      	movs	r3, r1
 8005e0c:	011b      	lsls	r3, r3, #4
 8005e0e:	1a5b      	subs	r3, r3, r1
 8005e10:	18d3      	adds	r3, r2, r3
 8005e12:	330c      	adds	r3, #12
 8005e14:	2200      	movs	r2, #0
 8005e16:	701a      	strb	r2, [r3, #0]
			if((strlen(cellnum) > 4)&&(!MessageLog[MesQue_Tail].Send_Only_GPRS)) {
 8005e18:	e12f      	b.n	800607a <Send_Message+0x97e>
 8005e1a:	e12e      	b.n	800607a <Send_Message+0x97e>
			}
		} else if((SendFlag_Pos == 8)) {
 8005e1c:	234d      	movs	r3, #77	; 0x4d
 8005e1e:	18fb      	adds	r3, r7, r3
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	2b08      	cmp	r3, #8
 8005e24:	d000      	beq.n	8005e28 <Send_Message+0x72c>
 8005e26:	e128      	b.n	800607a <Send_Message+0x97e>
			if(MessageLog[MesQue_Tail].Cellnumber == 0) {
 8005e28:	4b18      	ldr	r3, [pc, #96]	; (8005e8c <Send_Message+0x790>)
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	0019      	movs	r1, r3
 8005e2e:	4a18      	ldr	r2, [pc, #96]	; (8005e90 <Send_Message+0x794>)
 8005e30:	000b      	movs	r3, r1
 8005e32:	011b      	lsls	r3, r3, #4
 8005e34:	1a5b      	subs	r3, r3, r1
 8005e36:	18d3      	adds	r3, r2, r3
 8005e38:	330a      	adds	r3, #10
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d12d      	bne.n	8005e9c <Send_Message+0x7a0>
				MessageLog[MesQue_Tail].Send_Flags &= Mask_Flags;
 8005e40:	4b12      	ldr	r3, [pc, #72]	; (8005e8c <Send_Message+0x790>)
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	0019      	movs	r1, r3
 8005e46:	4a12      	ldr	r2, [pc, #72]	; (8005e90 <Send_Message+0x794>)
 8005e48:	000b      	movs	r3, r1
 8005e4a:	011b      	lsls	r3, r3, #4
 8005e4c:	1a5b      	subs	r3, r3, r1
 8005e4e:	18d3      	adds	r3, r2, r3
 8005e50:	330d      	adds	r3, #13
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	4a0d      	ldr	r2, [pc, #52]	; (8005e8c <Send_Message+0x790>)
 8005e56:	7812      	ldrb	r2, [r2, #0]
 8005e58:	0011      	movs	r1, r2
 8005e5a:	224e      	movs	r2, #78	; 0x4e
 8005e5c:	18ba      	adds	r2, r7, r2
 8005e5e:	7812      	ldrb	r2, [r2, #0]
 8005e60:	4013      	ands	r3, r2
 8005e62:	b2d8      	uxtb	r0, r3
 8005e64:	4a0a      	ldr	r2, [pc, #40]	; (8005e90 <Send_Message+0x794>)
 8005e66:	000b      	movs	r3, r1
 8005e68:	011b      	lsls	r3, r3, #4
 8005e6a:	1a5b      	subs	r3, r3, r1
 8005e6c:	18d3      	adds	r3, r2, r3
 8005e6e:	330d      	adds	r3, #13
 8005e70:	1c02      	adds	r2, r0, #0
 8005e72:	701a      	strb	r2, [r3, #0]
				MessageLog[MesQue_Tail].Retries = 0;
 8005e74:	4b05      	ldr	r3, [pc, #20]	; (8005e8c <Send_Message+0x790>)
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	0019      	movs	r1, r3
 8005e7a:	4a05      	ldr	r2, [pc, #20]	; (8005e90 <Send_Message+0x794>)
 8005e7c:	000b      	movs	r3, r1
 8005e7e:	011b      	lsls	r3, r3, #4
 8005e80:	1a5b      	subs	r3, r3, r1
 8005e82:	18d3      	adds	r3, r2, r3
 8005e84:	330c      	adds	r3, #12
 8005e86:	2200      	movs	r2, #0
 8005e88:	701a      	strb	r2, [r3, #0]
 8005e8a:	e0f6      	b.n	800607a <Send_Message+0x97e>
 8005e8c:	200016bd 	.word	0x200016bd
 8005e90:	200020cc 	.word	0x200020cc
 8005e94:	200016c0 	.word	0x200016c0
 8005e98:	20000792 	.word	0x20000792

			} else {
				strcpy(cellnum, Read_Settings(MessageLog[MesQue_Tail].Cellnumber));
 8005e9c:	4b7a      	ldr	r3, [pc, #488]	; (8006088 <Send_Message+0x98c>)
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	0019      	movs	r1, r3
 8005ea2:	4a7a      	ldr	r2, [pc, #488]	; (800608c <Send_Message+0x990>)
 8005ea4:	000b      	movs	r3, r1
 8005ea6:	011b      	lsls	r3, r3, #4
 8005ea8:	1a5b      	subs	r3, r3, r1
 8005eaa:	18d3      	adds	r3, r2, r3
 8005eac:	330a      	adds	r3, #10
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	0018      	movs	r0, r3
 8005eb2:	f7fe f8c9 	bl	8004048 <Read_Settings>
 8005eb6:	0002      	movs	r2, r0
 8005eb8:	2408      	movs	r4, #8
 8005eba:	193b      	adds	r3, r7, r4
 8005ebc:	0011      	movs	r1, r2
 8005ebe:	0018      	movs	r0, r3
 8005ec0:	f00c feb7 	bl	8012c32 <strcpy>
				MessageLog[MesQue_Tail].Retries++;
 8005ec4:	4b70      	ldr	r3, [pc, #448]	; (8006088 <Send_Message+0x98c>)
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	001a      	movs	r2, r3
 8005eca:	4970      	ldr	r1, [pc, #448]	; (800608c <Send_Message+0x990>)
 8005ecc:	0013      	movs	r3, r2
 8005ece:	011b      	lsls	r3, r3, #4
 8005ed0:	1a9b      	subs	r3, r3, r2
 8005ed2:	18cb      	adds	r3, r1, r3
 8005ed4:	330c      	adds	r3, #12
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	3301      	adds	r3, #1
 8005eda:	b2d8      	uxtb	r0, r3
 8005edc:	496b      	ldr	r1, [pc, #428]	; (800608c <Send_Message+0x990>)
 8005ede:	0013      	movs	r3, r2
 8005ee0:	011b      	lsls	r3, r3, #4
 8005ee2:	1a9b      	subs	r3, r3, r2
 8005ee4:	18cb      	adds	r3, r1, r3
 8005ee6:	330c      	adds	r3, #12
 8005ee8:	1c02      	adds	r2, r0, #0
 8005eea:	701a      	strb	r2, [r3, #0]
				if((strlen(cellnum) > 4)&&(!MessageLog[MesQue_Tail].Send_Only_GPRS)) {
 8005eec:	193b      	adds	r3, r7, r4
 8005eee:	0018      	movs	r0, r3
 8005ef0:	f7fa f90a 	bl	8000108 <strlen>
 8005ef4:	0003      	movs	r3, r0
 8005ef6:	2b04      	cmp	r3, #4
 8005ef8:	d800      	bhi.n	8005efc <Send_Message+0x800>
 8005efa:	e0a2      	b.n	8006042 <Send_Message+0x946>
 8005efc:	4b62      	ldr	r3, [pc, #392]	; (8006088 <Send_Message+0x98c>)
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	0019      	movs	r1, r3
 8005f02:	4a62      	ldr	r2, [pc, #392]	; (800608c <Send_Message+0x990>)
 8005f04:	000b      	movs	r3, r1
 8005f06:	011b      	lsls	r3, r3, #4
 8005f08:	1a5b      	subs	r3, r3, r1
 8005f0a:	18d3      	adds	r3, r2, r3
 8005f0c:	330e      	adds	r3, #14
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d000      	beq.n	8005f16 <Send_Message+0x81a>
 8005f14:	e095      	b.n	8006042 <Send_Message+0x946>
					if(strlen(message) > 3) {
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	0018      	movs	r0, r3
 8005f1a:	f7fa f8f5 	bl	8000108 <strlen>
 8005f1e:	0003      	movs	r3, r0
 8005f20:	2b03      	cmp	r3, #3
 8005f22:	d963      	bls.n	8005fec <Send_Message+0x8f0>
						if(!SIM800H_Send_SMS(cellnum, message)) {
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	193b      	adds	r3, r7, r4
 8005f28:	0011      	movs	r1, r2
 8005f2a:	0018      	movs	r0, r3
 8005f2c:	f002 fe90 	bl	8008c50 <SIM800H_Send_SMS>
 8005f30:	1e03      	subs	r3, r0, #0
 8005f32:	d135      	bne.n	8005fa0 <Send_Message+0x8a4>
							if(MessageLog[MesQue_Tail].Retries > MAX_SMS_MESSAGE_RETRIES) {
 8005f34:	4b54      	ldr	r3, [pc, #336]	; (8006088 <Send_Message+0x98c>)
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	0019      	movs	r1, r3
 8005f3a:	4a54      	ldr	r2, [pc, #336]	; (800608c <Send_Message+0x990>)
 8005f3c:	000b      	movs	r3, r1
 8005f3e:	011b      	lsls	r3, r3, #4
 8005f40:	1a5b      	subs	r3, r3, r1
 8005f42:	18d3      	adds	r3, r2, r3
 8005f44:	330c      	adds	r3, #12
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	2b06      	cmp	r3, #6
 8005f4a:	d924      	bls.n	8005f96 <Send_Message+0x89a>
								MessageLog[MesQue_Tail].Retries = 0;
 8005f4c:	4b4e      	ldr	r3, [pc, #312]	; (8006088 <Send_Message+0x98c>)
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	0019      	movs	r1, r3
 8005f52:	4a4e      	ldr	r2, [pc, #312]	; (800608c <Send_Message+0x990>)
 8005f54:	000b      	movs	r3, r1
 8005f56:	011b      	lsls	r3, r3, #4
 8005f58:	1a5b      	subs	r3, r3, r1
 8005f5a:	18d3      	adds	r3, r2, r3
 8005f5c:	330c      	adds	r3, #12
 8005f5e:	2200      	movs	r2, #0
 8005f60:	701a      	strb	r2, [r3, #0]
								MessageLog[MesQue_Tail].Send_Flags &= Mask_Flags;
 8005f62:	4b49      	ldr	r3, [pc, #292]	; (8006088 <Send_Message+0x98c>)
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	0019      	movs	r1, r3
 8005f68:	4a48      	ldr	r2, [pc, #288]	; (800608c <Send_Message+0x990>)
 8005f6a:	000b      	movs	r3, r1
 8005f6c:	011b      	lsls	r3, r3, #4
 8005f6e:	1a5b      	subs	r3, r3, r1
 8005f70:	18d3      	adds	r3, r2, r3
 8005f72:	330d      	adds	r3, #13
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	4a44      	ldr	r2, [pc, #272]	; (8006088 <Send_Message+0x98c>)
 8005f78:	7812      	ldrb	r2, [r2, #0]
 8005f7a:	0011      	movs	r1, r2
 8005f7c:	224e      	movs	r2, #78	; 0x4e
 8005f7e:	18ba      	adds	r2, r7, r2
 8005f80:	7812      	ldrb	r2, [r2, #0]
 8005f82:	4013      	ands	r3, r2
 8005f84:	b2d8      	uxtb	r0, r3
 8005f86:	4a41      	ldr	r2, [pc, #260]	; (800608c <Send_Message+0x990>)
 8005f88:	000b      	movs	r3, r1
 8005f8a:	011b      	lsls	r3, r3, #4
 8005f8c:	1a5b      	subs	r3, r3, r1
 8005f8e:	18d3      	adds	r3, r2, r3
 8005f90:	330d      	adds	r3, #13
 8005f92:	1c02      	adds	r2, r0, #0
 8005f94:	701a      	strb	r2, [r3, #0]
							}
							Reset_GSM_Flag = 1;
 8005f96:	4b3e      	ldr	r3, [pc, #248]	; (8006090 <Send_Message+0x994>)
 8005f98:	2201      	movs	r2, #1
 8005f9a:	701a      	strb	r2, [r3, #0]
							return(0);
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	e06f      	b.n	8006080 <Send_Message+0x984>
						} else {   // if message is send
							MessageLog[MesQue_Tail].Retries = 0;
 8005fa0:	4b39      	ldr	r3, [pc, #228]	; (8006088 <Send_Message+0x98c>)
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	0019      	movs	r1, r3
 8005fa6:	4a39      	ldr	r2, [pc, #228]	; (800608c <Send_Message+0x990>)
 8005fa8:	000b      	movs	r3, r1
 8005faa:	011b      	lsls	r3, r3, #4
 8005fac:	1a5b      	subs	r3, r3, r1
 8005fae:	18d3      	adds	r3, r2, r3
 8005fb0:	330c      	adds	r3, #12
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	701a      	strb	r2, [r3, #0]
							MessageLog[MesQue_Tail].Send_Flags &= Mask_Flags;
 8005fb6:	4b34      	ldr	r3, [pc, #208]	; (8006088 <Send_Message+0x98c>)
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	0019      	movs	r1, r3
 8005fbc:	4a33      	ldr	r2, [pc, #204]	; (800608c <Send_Message+0x990>)
 8005fbe:	000b      	movs	r3, r1
 8005fc0:	011b      	lsls	r3, r3, #4
 8005fc2:	1a5b      	subs	r3, r3, r1
 8005fc4:	18d3      	adds	r3, r2, r3
 8005fc6:	330d      	adds	r3, #13
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	4a2f      	ldr	r2, [pc, #188]	; (8006088 <Send_Message+0x98c>)
 8005fcc:	7812      	ldrb	r2, [r2, #0]
 8005fce:	0011      	movs	r1, r2
 8005fd0:	224e      	movs	r2, #78	; 0x4e
 8005fd2:	18ba      	adds	r2, r7, r2
 8005fd4:	7812      	ldrb	r2, [r2, #0]
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	b2d8      	uxtb	r0, r3
 8005fda:	4a2c      	ldr	r2, [pc, #176]	; (800608c <Send_Message+0x990>)
 8005fdc:	000b      	movs	r3, r1
 8005fde:	011b      	lsls	r3, r3, #4
 8005fe0:	1a5b      	subs	r3, r3, r1
 8005fe2:	18d3      	adds	r3, r2, r3
 8005fe4:	330d      	adds	r3, #13
 8005fe6:	1c02      	adds	r2, r0, #0
 8005fe8:	701a      	strb	r2, [r3, #0]
					if(strlen(message) > 3) {
 8005fea:	e046      	b.n	800607a <Send_Message+0x97e>
						}
					} else {
						MessageLog[MesQue_Tail].Send = TRUE;
 8005fec:	4b26      	ldr	r3, [pc, #152]	; (8006088 <Send_Message+0x98c>)
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	0019      	movs	r1, r3
 8005ff2:	4a26      	ldr	r2, [pc, #152]	; (800608c <Send_Message+0x990>)
 8005ff4:	000b      	movs	r3, r1
 8005ff6:	011b      	lsls	r3, r3, #4
 8005ff8:	1a5b      	subs	r3, r3, r1
 8005ffa:	18d3      	adds	r3, r2, r3
 8005ffc:	330b      	adds	r3, #11
 8005ffe:	2201      	movs	r2, #1
 8006000:	701a      	strb	r2, [r3, #0]
						MessageLog[MesQue_Tail].Cellnumber = 0;
 8006002:	4b21      	ldr	r3, [pc, #132]	; (8006088 <Send_Message+0x98c>)
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	0019      	movs	r1, r3
 8006008:	4a20      	ldr	r2, [pc, #128]	; (800608c <Send_Message+0x990>)
 800600a:	000b      	movs	r3, r1
 800600c:	011b      	lsls	r3, r3, #4
 800600e:	1a5b      	subs	r3, r3, r1
 8006010:	18d3      	adds	r3, r2, r3
 8006012:	330a      	adds	r3, #10
 8006014:	2200      	movs	r2, #0
 8006016:	701a      	strb	r2, [r3, #0]
						MessageLog[MesQue_Tail].Message[0] = 0;
 8006018:	4b1b      	ldr	r3, [pc, #108]	; (8006088 <Send_Message+0x98c>)
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	0019      	movs	r1, r3
 800601e:	4a1b      	ldr	r2, [pc, #108]	; (800608c <Send_Message+0x990>)
 8006020:	000b      	movs	r3, r1
 8006022:	011b      	lsls	r3, r3, #4
 8006024:	1a5b      	subs	r3, r3, r1
 8006026:	2100      	movs	r1, #0
 8006028:	5499      	strb	r1, [r3, r2]
						MessageLog[MesQue_Tail].Send_Flags = 0;
 800602a:	4b17      	ldr	r3, [pc, #92]	; (8006088 <Send_Message+0x98c>)
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	0019      	movs	r1, r3
 8006030:	4a16      	ldr	r2, [pc, #88]	; (800608c <Send_Message+0x990>)
 8006032:	000b      	movs	r3, r1
 8006034:	011b      	lsls	r3, r3, #4
 8006036:	1a5b      	subs	r3, r3, r1
 8006038:	18d3      	adds	r3, r2, r3
 800603a:	330d      	adds	r3, #13
 800603c:	2200      	movs	r2, #0
 800603e:	701a      	strb	r2, [r3, #0]
					if(strlen(message) > 3) {
 8006040:	e01b      	b.n	800607a <Send_Message+0x97e>
					}
				} else {
					MessageLog[MesQue_Tail].Send_Flags &= Mask_Flags;
 8006042:	4b11      	ldr	r3, [pc, #68]	; (8006088 <Send_Message+0x98c>)
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	0019      	movs	r1, r3
 8006048:	4a10      	ldr	r2, [pc, #64]	; (800608c <Send_Message+0x990>)
 800604a:	000b      	movs	r3, r1
 800604c:	011b      	lsls	r3, r3, #4
 800604e:	1a5b      	subs	r3, r3, r1
 8006050:	18d3      	adds	r3, r2, r3
 8006052:	330d      	adds	r3, #13
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	4a0c      	ldr	r2, [pc, #48]	; (8006088 <Send_Message+0x98c>)
 8006058:	7812      	ldrb	r2, [r2, #0]
 800605a:	0011      	movs	r1, r2
 800605c:	224e      	movs	r2, #78	; 0x4e
 800605e:	18ba      	adds	r2, r7, r2
 8006060:	7812      	ldrb	r2, [r2, #0]
 8006062:	4013      	ands	r3, r2
 8006064:	b2d8      	uxtb	r0, r3
 8006066:	4a09      	ldr	r2, [pc, #36]	; (800608c <Send_Message+0x990>)
 8006068:	000b      	movs	r3, r1
 800606a:	011b      	lsls	r3, r3, #4
 800606c:	1a5b      	subs	r3, r3, r1
 800606e:	18d3      	adds	r3, r2, r3
 8006070:	330d      	adds	r3, #13
 8006072:	1c02      	adds	r2, r0, #0
 8006074:	701a      	strb	r2, [r3, #0]
 8006076:	e000      	b.n	800607a <Send_Message+0x97e>
			if(strlen(message) > 3) {
 8006078:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}
	}
	SIM800H_Clear_Buffers();
 800607a:	f003 f885 	bl	8009188 <SIM800H_Clear_Buffers>

	return(TRUE);
 800607e:	2301      	movs	r3, #1
}
 8006080:	0018      	movs	r0, r3
 8006082:	46bd      	mov	sp, r7
 8006084:	b015      	add	sp, #84	; 0x54
 8006086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006088:	200016bd 	.word	0x200016bd
 800608c:	200020cc 	.word	0x200020cc
 8006090:	20000792 	.word	0x20000792

08006094 <Get_DateTime>:

void Get_DateTime(void)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b086      	sub	sp, #24
 8006098:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800609a:	1d39      	adds	r1, r7, #4
 800609c:	4b13      	ldr	r3, [pc, #76]	; (80060ec <Get_DateTime+0x58>)
 800609e:	2200      	movs	r2, #0
 80060a0:	0018      	movs	r0, r3
 80060a2:	f008 f8c5 	bl	800e230 <HAL_RTC_GetTime>
	hours = sTime.Hours;
 80060a6:	1d3b      	adds	r3, r7, #4
 80060a8:	781a      	ldrb	r2, [r3, #0]
 80060aa:	4b11      	ldr	r3, [pc, #68]	; (80060f0 <Get_DateTime+0x5c>)
 80060ac:	701a      	strb	r2, [r3, #0]
	minutes = sTime.Minutes;
 80060ae:	1d3b      	adds	r3, r7, #4
 80060b0:	785a      	ldrb	r2, [r3, #1]
 80060b2:	4b10      	ldr	r3, [pc, #64]	; (80060f4 <Get_DateTime+0x60>)
 80060b4:	701a      	strb	r2, [r3, #0]
	seconds = sTime.Seconds;
 80060b6:	1d3b      	adds	r3, r7, #4
 80060b8:	789a      	ldrb	r2, [r3, #2]
 80060ba:	4b0f      	ldr	r3, [pc, #60]	; (80060f8 <Get_DateTime+0x64>)
 80060bc:	701a      	strb	r2, [r3, #0]

	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80060be:	0039      	movs	r1, r7
 80060c0:	4b0a      	ldr	r3, [pc, #40]	; (80060ec <Get_DateTime+0x58>)
 80060c2:	2200      	movs	r2, #0
 80060c4:	0018      	movs	r0, r3
 80060c6:	f008 fa63 	bl	800e590 <HAL_RTC_GetDate>
	month = sDate.Month;
 80060ca:	003b      	movs	r3, r7
 80060cc:	785a      	ldrb	r2, [r3, #1]
 80060ce:	4b0b      	ldr	r3, [pc, #44]	; (80060fc <Get_DateTime+0x68>)
 80060d0:	701a      	strb	r2, [r3, #0]
	day = sDate.Date;
 80060d2:	003b      	movs	r3, r7
 80060d4:	789a      	ldrb	r2, [r3, #2]
 80060d6:	4b0a      	ldr	r3, [pc, #40]	; (8006100 <Get_DateTime+0x6c>)
 80060d8:	701a      	strb	r2, [r3, #0]
	year = sDate.Year;
 80060da:	003b      	movs	r3, r7
 80060dc:	78db      	ldrb	r3, [r3, #3]
 80060de:	001a      	movs	r2, r3
 80060e0:	4b08      	ldr	r3, [pc, #32]	; (8006104 <Get_DateTime+0x70>)
 80060e2:	601a      	str	r2, [r3, #0]
}
 80060e4:	46c0      	nop			; (mov r8, r8)
 80060e6:	46bd      	mov	sp, r7
 80060e8:	b006      	add	sp, #24
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	20000858 	.word	0x20000858
 80060f0:	200007a6 	.word	0x200007a6
 80060f4:	200007a7 	.word	0x200007a7
 80060f8:	200007a8 	.word	0x200007a8
 80060fc:	200007a4 	.word	0x200007a4
 8006100:	200007a5 	.word	0x200007a5
 8006104:	200007a0 	.word	0x200007a0

08006108 <Build_Message>:

char * Build_Message(char * InStr, char * mes)
{  unsigned char tp, x, j;
 8006108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800610a:	b08d      	sub	sp, #52	; 0x34
 800610c:	af04      	add	r7, sp, #16
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
   unsigned char length;
   char tempstr[10];
   char * temppoint;

	tp = 0;
 8006112:	231f      	movs	r3, #31
 8006114:	18fb      	adds	r3, r7, r3
 8006116:	2200      	movs	r2, #0
 8006118:	701a      	strb	r2, [r3, #0]
	mes[0] = 0;
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	2200      	movs	r2, #0
 800611e:	701a      	strb	r2, [r3, #0]
	while(InStr[0] != 0) {
 8006120:	f000 fe9a 	bl	8006e58 <Build_Message+0xd50>
		if(InStr[0] < EE_END) {
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	2b5d      	cmp	r3, #93	; 0x5d
 800612a:	d85d      	bhi.n	80061e8 <Build_Message+0xe0>
			temppoint = Read_Settings(InStr[0]);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	0018      	movs	r0, r3
 8006132:	f7fd ff89 	bl	8004048 <Read_Settings>
 8006136:	0003      	movs	r3, r0
 8006138:	61bb      	str	r3, [r7, #24]
			if(tp == 0) {
 800613a:	231f      	movs	r3, #31
 800613c:	18fb      	adds	r3, r7, r3
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d136      	bne.n	80061b2 <Build_Message+0xaa>
				strncpy(tempstr, temppoint, 8);
 8006144:	69b9      	ldr	r1, [r7, #24]
 8006146:	230c      	movs	r3, #12
 8006148:	18fb      	adds	r3, r7, r3
 800614a:	2208      	movs	r2, #8
 800614c:	0018      	movs	r0, r3
 800614e:	f00c fd8a 	bl	8012c66 <strncpy>
				x = 0;
 8006152:	231e      	movs	r3, #30
 8006154:	18fb      	adds	r3, r7, r3
 8006156:	2200      	movs	r2, #0
 8006158:	701a      	strb	r2, [r3, #0]
				for(j = 0; j < 8; j++) {
 800615a:	231d      	movs	r3, #29
 800615c:	18fb      	adds	r3, r7, r3
 800615e:	2200      	movs	r2, #0
 8006160:	701a      	strb	r2, [r3, #0]
 8006162:	e019      	b.n	8006198 <Build_Message+0x90>
					if((tempstr[j] == '0')||(tempstr[j] == '1')) {
 8006164:	211d      	movs	r1, #29
 8006166:	187b      	adds	r3, r7, r1
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	200c      	movs	r0, #12
 800616c:	183a      	adds	r2, r7, r0
 800616e:	5cd3      	ldrb	r3, [r2, r3]
 8006170:	2b30      	cmp	r3, #48	; 0x30
 8006172:	d005      	beq.n	8006180 <Build_Message+0x78>
 8006174:	187b      	adds	r3, r7, r1
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	183a      	adds	r2, r7, r0
 800617a:	5cd3      	ldrb	r3, [r2, r3]
 800617c:	2b31      	cmp	r3, #49	; 0x31
 800617e:	d105      	bne.n	800618c <Build_Message+0x84>
						x++;
 8006180:	211e      	movs	r1, #30
 8006182:	187b      	adds	r3, r7, r1
 8006184:	781a      	ldrb	r2, [r3, #0]
 8006186:	187b      	adds	r3, r7, r1
 8006188:	3201      	adds	r2, #1
 800618a:	701a      	strb	r2, [r3, #0]
				for(j = 0; j < 8; j++) {
 800618c:	211d      	movs	r1, #29
 800618e:	187b      	adds	r3, r7, r1
 8006190:	781a      	ldrb	r2, [r3, #0]
 8006192:	187b      	adds	r3, r7, r1
 8006194:	3201      	adds	r2, #1
 8006196:	701a      	strb	r2, [r3, #0]
 8006198:	231d      	movs	r3, #29
 800619a:	18fb      	adds	r3, r7, r3
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	2b07      	cmp	r3, #7
 80061a0:	d9e0      	bls.n	8006164 <Build_Message+0x5c>
					}
				}
				if(x == 8) {
 80061a2:	231e      	movs	r3, #30
 80061a4:	18fb      	adds	r3, r7, r3
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	2b08      	cmp	r3, #8
 80061aa:	d102      	bne.n	80061b2 <Build_Message+0xaa>
					temppoint = temppoint + 8;
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	3308      	adds	r3, #8
 80061b0:	61bb      	str	r3, [r7, #24]
				}
			}
			if(strlen(mes) > 0) strcat(mes, " ");
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00e      	beq.n	80061d8 <Build_Message+0xd0>
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	0018      	movs	r0, r3
 80061be:	f7f9 ffa3 	bl	8000108 <strlen>
 80061c2:	0003      	movs	r3, r0
 80061c4:	001a      	movs	r2, r3
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	189a      	adds	r2, r3, r2
 80061ca:	4bd6      	ldr	r3, [pc, #856]	; (8006524 <Build_Message+0x41c>)
 80061cc:	0010      	movs	r0, r2
 80061ce:	0019      	movs	r1, r3
 80061d0:	2302      	movs	r3, #2
 80061d2:	001a      	movs	r2, r3
 80061d4:	f00b ff09 	bl	8011fea <memcpy>
			strcat(mes, temppoint);
 80061d8:	69ba      	ldr	r2, [r7, #24]
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	0011      	movs	r1, r2
 80061de:	0018      	movs	r0, r3
 80061e0:	f00c fd0c 	bl	8012bfc <strcat>
 80061e4:	f000 fe2b 	bl	8006e3e <Build_Message+0xd36>
		} else if(InStr[0] == TIMESYNC_SMS) {
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	2b64      	cmp	r3, #100	; 0x64
 80061ee:	d109      	bne.n	8006204 <Build_Message+0xfc>
			strcpy(mes, "TIME SYNC");
 80061f0:	683a      	ldr	r2, [r7, #0]
 80061f2:	4bcd      	ldr	r3, [pc, #820]	; (8006528 <Build_Message+0x420>)
 80061f4:	0010      	movs	r0, r2
 80061f6:	0019      	movs	r1, r3
 80061f8:	230a      	movs	r3, #10
 80061fa:	001a      	movs	r2, r3
 80061fc:	f00b fef5 	bl	8011fea <memcpy>
 8006200:	f000 fe1d 	bl	8006e3e <Build_Message+0xd36>
		} else if(InStr[0] == CELLREQ) {
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	2b6e      	cmp	r3, #110	; 0x6e
 800620a:	d000      	beq.n	800620e <Build_Message+0x106>
 800620c:	e0e4      	b.n	80063d8 <Build_Message+0x2d0>
			strcpy(mes, "Cell 1:");
 800620e:	683a      	ldr	r2, [r7, #0]
 8006210:	4bc6      	ldr	r3, [pc, #792]	; (800652c <Build_Message+0x424>)
 8006212:	0010      	movs	r0, r2
 8006214:	0019      	movs	r1, r3
 8006216:	2308      	movs	r3, #8
 8006218:	001a      	movs	r2, r3
 800621a:	f00b fee6 	bl	8011fea <memcpy>
			temppoint = Read_Settings(EE_SMS_CELL1);
 800621e:	2014      	movs	r0, #20
 8006220:	f7fd ff12 	bl	8004048 <Read_Settings>
 8006224:	0003      	movs	r3, r0
 8006226:	61bb      	str	r3, [r7, #24]
			if((strlen(temppoint) > 0)&&(temppoint[0] > 31)&&(temppoint[0] < 127)) {
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00d      	beq.n	800624c <Build_Message+0x144>
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	2b1f      	cmp	r3, #31
 8006236:	d909      	bls.n	800624c <Build_Message+0x144>
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	2b7e      	cmp	r3, #126	; 0x7e
 800623e:	d805      	bhi.n	800624c <Build_Message+0x144>
				strcat(mes, temppoint);
 8006240:	69ba      	ldr	r2, [r7, #24]
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	0011      	movs	r1, r2
 8006246:	0018      	movs	r0, r3
 8006248:	f00c fcd8 	bl	8012bfc <strcat>
			}
			strcat(mes, ", Cell 2:");
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	0018      	movs	r0, r3
 8006250:	f7f9 ff5a 	bl	8000108 <strlen>
 8006254:	0003      	movs	r3, r0
 8006256:	001a      	movs	r2, r3
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	189a      	adds	r2, r3, r2
 800625c:	4bb4      	ldr	r3, [pc, #720]	; (8006530 <Build_Message+0x428>)
 800625e:	0010      	movs	r0, r2
 8006260:	0019      	movs	r1, r3
 8006262:	230a      	movs	r3, #10
 8006264:	001a      	movs	r2, r3
 8006266:	f00b fec0 	bl	8011fea <memcpy>
			temppoint = Read_Settings(EE_SMS_CELL2);
 800626a:	2015      	movs	r0, #21
 800626c:	f7fd feec 	bl	8004048 <Read_Settings>
 8006270:	0003      	movs	r3, r0
 8006272:	61bb      	str	r3, [r7, #24]
			if((strlen(temppoint) > 0)&&(temppoint[0] > 31)&&(temppoint[0] < 127)) {
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d00d      	beq.n	8006298 <Build_Message+0x190>
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	2b1f      	cmp	r3, #31
 8006282:	d909      	bls.n	8006298 <Build_Message+0x190>
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	2b7e      	cmp	r3, #126	; 0x7e
 800628a:	d805      	bhi.n	8006298 <Build_Message+0x190>
				strcat(mes, temppoint);
 800628c:	69ba      	ldr	r2, [r7, #24]
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	0011      	movs	r1, r2
 8006292:	0018      	movs	r0, r3
 8006294:	f00c fcb2 	bl	8012bfc <strcat>
			}
			strcat(mes, ", Cell 3:");
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	0018      	movs	r0, r3
 800629c:	f7f9 ff34 	bl	8000108 <strlen>
 80062a0:	0003      	movs	r3, r0
 80062a2:	001a      	movs	r2, r3
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	189a      	adds	r2, r3, r2
 80062a8:	4ba2      	ldr	r3, [pc, #648]	; (8006534 <Build_Message+0x42c>)
 80062aa:	0010      	movs	r0, r2
 80062ac:	0019      	movs	r1, r3
 80062ae:	230a      	movs	r3, #10
 80062b0:	001a      	movs	r2, r3
 80062b2:	f00b fe9a 	bl	8011fea <memcpy>
			temppoint = Read_Settings(EE_SMS_CELL3);
 80062b6:	2016      	movs	r0, #22
 80062b8:	f7fd fec6 	bl	8004048 <Read_Settings>
 80062bc:	0003      	movs	r3, r0
 80062be:	61bb      	str	r3, [r7, #24]
			if((strlen(temppoint) > 0)&&(temppoint[0] > 31)&&(temppoint[0] < 127)) {
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d00d      	beq.n	80062e4 <Build_Message+0x1dc>
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	2b1f      	cmp	r3, #31
 80062ce:	d909      	bls.n	80062e4 <Build_Message+0x1dc>
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	2b7e      	cmp	r3, #126	; 0x7e
 80062d6:	d805      	bhi.n	80062e4 <Build_Message+0x1dc>
				strcat(mes, temppoint);
 80062d8:	69ba      	ldr	r2, [r7, #24]
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	0011      	movs	r1, r2
 80062de:	0018      	movs	r0, r3
 80062e0:	f00c fc8c 	bl	8012bfc <strcat>
			}
			strcat(mes, ", Cell 4:");
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	0018      	movs	r0, r3
 80062e8:	f7f9 ff0e 	bl	8000108 <strlen>
 80062ec:	0003      	movs	r3, r0
 80062ee:	001a      	movs	r2, r3
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	189a      	adds	r2, r3, r2
 80062f4:	4b90      	ldr	r3, [pc, #576]	; (8006538 <Build_Message+0x430>)
 80062f6:	0010      	movs	r0, r2
 80062f8:	0019      	movs	r1, r3
 80062fa:	230a      	movs	r3, #10
 80062fc:	001a      	movs	r2, r3
 80062fe:	f00b fe74 	bl	8011fea <memcpy>
			temppoint = Read_Settings(EE_SMS_CELL4);
 8006302:	2017      	movs	r0, #23
 8006304:	f7fd fea0 	bl	8004048 <Read_Settings>
 8006308:	0003      	movs	r3, r0
 800630a:	61bb      	str	r3, [r7, #24]
			if((strlen(temppoint) > 0)&&(temppoint[0] > 31)&&(temppoint[0] < 127)) {
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00d      	beq.n	8006330 <Build_Message+0x228>
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	2b1f      	cmp	r3, #31
 800631a:	d909      	bls.n	8006330 <Build_Message+0x228>
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	2b7e      	cmp	r3, #126	; 0x7e
 8006322:	d805      	bhi.n	8006330 <Build_Message+0x228>
				strcat(mes, temppoint);
 8006324:	69ba      	ldr	r2, [r7, #24]
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	0011      	movs	r1, r2
 800632a:	0018      	movs	r0, r3
 800632c:	f00c fc66 	bl	8012bfc <strcat>
			}
			strcat(mes, ", Cell 5:");
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	0018      	movs	r0, r3
 8006334:	f7f9 fee8 	bl	8000108 <strlen>
 8006338:	0003      	movs	r3, r0
 800633a:	001a      	movs	r2, r3
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	189a      	adds	r2, r3, r2
 8006340:	4b7e      	ldr	r3, [pc, #504]	; (800653c <Build_Message+0x434>)
 8006342:	0010      	movs	r0, r2
 8006344:	0019      	movs	r1, r3
 8006346:	230a      	movs	r3, #10
 8006348:	001a      	movs	r2, r3
 800634a:	f00b fe4e 	bl	8011fea <memcpy>
			temppoint = Read_Settings(EE_SMS_CELL5);
 800634e:	2018      	movs	r0, #24
 8006350:	f7fd fe7a 	bl	8004048 <Read_Settings>
 8006354:	0003      	movs	r3, r0
 8006356:	61bb      	str	r3, [r7, #24]
			if((strlen(temppoint) > 0)&&(temppoint[0] > 31)&&(temppoint[0] < 127)) {
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00d      	beq.n	800637c <Build_Message+0x274>
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	2b1f      	cmp	r3, #31
 8006366:	d909      	bls.n	800637c <Build_Message+0x274>
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	2b7e      	cmp	r3, #126	; 0x7e
 800636e:	d805      	bhi.n	800637c <Build_Message+0x274>
				strcat(mes, temppoint);
 8006370:	69ba      	ldr	r2, [r7, #24]
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	0011      	movs	r1, r2
 8006376:	0018      	movs	r0, r3
 8006378:	f00c fc40 	bl	8012bfc <strcat>
			}
			strcat(mes, ", Cell 6:");
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	0018      	movs	r0, r3
 8006380:	f7f9 fec2 	bl	8000108 <strlen>
 8006384:	0003      	movs	r3, r0
 8006386:	001a      	movs	r2, r3
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	189a      	adds	r2, r3, r2
 800638c:	4b6c      	ldr	r3, [pc, #432]	; (8006540 <Build_Message+0x438>)
 800638e:	0010      	movs	r0, r2
 8006390:	0019      	movs	r1, r3
 8006392:	230a      	movs	r3, #10
 8006394:	001a      	movs	r2, r3
 8006396:	f00b fe28 	bl	8011fea <memcpy>
			temppoint = Read_Settings(EE_SMS_CELL6);
 800639a:	2019      	movs	r0, #25
 800639c:	f7fd fe54 	bl	8004048 <Read_Settings>
 80063a0:	0003      	movs	r3, r0
 80063a2:	61bb      	str	r3, [r7, #24]
			if((strlen(temppoint) > 0)&&(temppoint[0] > 31)&&(temppoint[0] < 127)) {
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d101      	bne.n	80063b0 <Build_Message+0x2a8>
 80063ac:	f000 fd47 	bl	8006e3e <Build_Message+0xd36>
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	2b1f      	cmp	r3, #31
 80063b6:	d801      	bhi.n	80063bc <Build_Message+0x2b4>
 80063b8:	f000 fd41 	bl	8006e3e <Build_Message+0xd36>
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	2b7e      	cmp	r3, #126	; 0x7e
 80063c2:	d901      	bls.n	80063c8 <Build_Message+0x2c0>
 80063c4:	f000 fd3b 	bl	8006e3e <Build_Message+0xd36>
				strcat(mes, temppoint);
 80063c8:	69ba      	ldr	r2, [r7, #24]
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	0011      	movs	r1, r2
 80063ce:	0018      	movs	r0, r3
 80063d0:	f00c fc14 	bl	8012bfc <strcat>
 80063d4:	f000 fd33 	bl	8006e3e <Build_Message+0xd36>
			}
		} else if(InStr[0] == ZONESETUP) {
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	2b74      	cmp	r3, #116	; 0x74
 80063de:	d148      	bne.n	8006472 <Build_Message+0x36a>
			strcpy(mes, "Away Mode Zones:");
 80063e0:	683a      	ldr	r2, [r7, #0]
 80063e2:	4b58      	ldr	r3, [pc, #352]	; (8006544 <Build_Message+0x43c>)
 80063e4:	0010      	movs	r0, r2
 80063e6:	0019      	movs	r1, r3
 80063e8:	2311      	movs	r3, #17
 80063ea:	001a      	movs	r2, r3
 80063ec:	f00b fdfd 	bl	8011fea <memcpy>
			temppoint = Read_Settings(EE_AWAY_MODE_ZONES_ENABLED);
 80063f0:	2021      	movs	r0, #33	; 0x21
 80063f2:	f7fd fe29 	bl	8004048 <Read_Settings>
 80063f6:	0003      	movs	r3, r0
 80063f8:	61bb      	str	r3, [r7, #24]
			strcat(mes, temppoint);
 80063fa:	69ba      	ldr	r2, [r7, #24]
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	0011      	movs	r1, r2
 8006400:	0018      	movs	r0, r3
 8006402:	f00c fbfb 	bl	8012bfc <strcat>

			strcat(mes, ", Chime Mode Zones:");
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	0018      	movs	r0, r3
 800640a:	f7f9 fe7d 	bl	8000108 <strlen>
 800640e:	0003      	movs	r3, r0
 8006410:	001a      	movs	r2, r3
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	189a      	adds	r2, r3, r2
 8006416:	4b4c      	ldr	r3, [pc, #304]	; (8006548 <Build_Message+0x440>)
 8006418:	0010      	movs	r0, r2
 800641a:	0019      	movs	r1, r3
 800641c:	2314      	movs	r3, #20
 800641e:	001a      	movs	r2, r3
 8006420:	f00b fde3 	bl	8011fea <memcpy>
			temppoint = Read_Settings(EE_CHIME_MODE_ZONES_ENABLED);
 8006424:	2022      	movs	r0, #34	; 0x22
 8006426:	f7fd fe0f 	bl	8004048 <Read_Settings>
 800642a:	0003      	movs	r3, r0
 800642c:	61bb      	str	r3, [r7, #24]
			strcat(mes, temppoint);
 800642e:	69ba      	ldr	r2, [r7, #24]
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	0011      	movs	r1, r2
 8006434:	0018      	movs	r0, r3
 8006436:	f00c fbe1 	bl	8012bfc <strcat>

			strcat(mes, ", Chime Away Mode Zones:");
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	0018      	movs	r0, r3
 800643e:	f7f9 fe63 	bl	8000108 <strlen>
 8006442:	0003      	movs	r3, r0
 8006444:	001a      	movs	r2, r3
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	189a      	adds	r2, r3, r2
 800644a:	4b40      	ldr	r3, [pc, #256]	; (800654c <Build_Message+0x444>)
 800644c:	0010      	movs	r0, r2
 800644e:	0019      	movs	r1, r3
 8006450:	2319      	movs	r3, #25
 8006452:	001a      	movs	r2, r3
 8006454:	f00b fdc9 	bl	8011fea <memcpy>
			temppoint = Read_Settings(EE_CHIME_ANYMODE_ZONES);
 8006458:	2023      	movs	r0, #35	; 0x23
 800645a:	f7fd fdf5 	bl	8004048 <Read_Settings>
 800645e:	0003      	movs	r3, r0
 8006460:	61bb      	str	r3, [r7, #24]
			strcat(mes, temppoint);
 8006462:	69ba      	ldr	r2, [r7, #24]
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	0011      	movs	r1, r2
 8006468:	0018      	movs	r0, r3
 800646a:	f00c fbc7 	bl	8012bfc <strcat>
 800646e:	f000 fce6 	bl	8006e3e <Build_Message+0xd36>

		} else if(InStr[0] == PASSWORDS) {
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	2b65      	cmp	r3, #101	; 0x65
 8006478:	d170      	bne.n	800655c <Build_Message+0x454>
			strcpy(mes, "Program Password:");
 800647a:	683a      	ldr	r2, [r7, #0]
 800647c:	4b34      	ldr	r3, [pc, #208]	; (8006550 <Build_Message+0x448>)
 800647e:	0010      	movs	r0, r2
 8006480:	0019      	movs	r1, r3
 8006482:	2312      	movs	r3, #18
 8006484:	001a      	movs	r2, r3
 8006486:	f00b fdb0 	bl	8011fea <memcpy>
			temppoint = Read_Settings(EE_PROG_PASS);
 800648a:	2024      	movs	r0, #36	; 0x24
 800648c:	f7fd fddc 	bl	8004048 <Read_Settings>
 8006490:	0003      	movs	r3, r0
 8006492:	61bb      	str	r3, [r7, #24]
			if((strlen(temppoint) > 0)&&(temppoint[0] > 31)&&(temppoint[0] < 127)) {
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d00d      	beq.n	80064b8 <Build_Message+0x3b0>
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	2b1f      	cmp	r3, #31
 80064a2:	d909      	bls.n	80064b8 <Build_Message+0x3b0>
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	2b7e      	cmp	r3, #126	; 0x7e
 80064aa:	d805      	bhi.n	80064b8 <Build_Message+0x3b0>
				strcat(mes, temppoint);
 80064ac:	69ba      	ldr	r2, [r7, #24]
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	0011      	movs	r1, r2
 80064b2:	0018      	movs	r0, r3
 80064b4:	f00c fba2 	bl	8012bfc <strcat>
			}
			strcat(mes, ", User Password:");
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	0018      	movs	r0, r3
 80064bc:	f7f9 fe24 	bl	8000108 <strlen>
 80064c0:	0003      	movs	r3, r0
 80064c2:	001a      	movs	r2, r3
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	189a      	adds	r2, r3, r2
 80064c8:	4b22      	ldr	r3, [pc, #136]	; (8006554 <Build_Message+0x44c>)
 80064ca:	0010      	movs	r0, r2
 80064cc:	0019      	movs	r1, r3
 80064ce:	2311      	movs	r3, #17
 80064d0:	001a      	movs	r2, r3
 80064d2:	f00b fd8a 	bl	8011fea <memcpy>
			temppoint = Read_Settings(EE_USER_PASS);
 80064d6:	2025      	movs	r0, #37	; 0x25
 80064d8:	f7fd fdb6 	bl	8004048 <Read_Settings>
 80064dc:	0003      	movs	r3, r0
 80064de:	61bb      	str	r3, [r7, #24]
			strcat(mes, temppoint);
 80064e0:	69ba      	ldr	r2, [r7, #24]
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	0011      	movs	r1, r2
 80064e6:	0018      	movs	r0, r3
 80064e8:	f00c fb88 	bl	8012bfc <strcat>

			strcat(mes, ", Own Number:");
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	0018      	movs	r0, r3
 80064f0:	f7f9 fe0a 	bl	8000108 <strlen>
 80064f4:	0003      	movs	r3, r0
 80064f6:	001a      	movs	r2, r3
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	189a      	adds	r2, r3, r2
 80064fc:	4b16      	ldr	r3, [pc, #88]	; (8006558 <Build_Message+0x450>)
 80064fe:	0010      	movs	r0, r2
 8006500:	0019      	movs	r1, r3
 8006502:	230e      	movs	r3, #14
 8006504:	001a      	movs	r2, r3
 8006506:	f00b fd70 	bl	8011fea <memcpy>
			temppoint = Read_Settings(EE_OWN_NUMBER);
 800650a:	201a      	movs	r0, #26
 800650c:	f7fd fd9c 	bl	8004048 <Read_Settings>
 8006510:	0003      	movs	r3, r0
 8006512:	61bb      	str	r3, [r7, #24]
			strcat(mes, temppoint);
 8006514:	69ba      	ldr	r2, [r7, #24]
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	0011      	movs	r1, r2
 800651a:	0018      	movs	r0, r3
 800651c:	f00c fb6e 	bl	8012bfc <strcat>
 8006520:	f000 fc8d 	bl	8006e3e <Build_Message+0xd36>
 8006524:	08016764 	.word	0x08016764
 8006528:	08016768 	.word	0x08016768
 800652c:	08016774 	.word	0x08016774
 8006530:	0801677c 	.word	0x0801677c
 8006534:	08016788 	.word	0x08016788
 8006538:	08016794 	.word	0x08016794
 800653c:	080167a0 	.word	0x080167a0
 8006540:	080167ac 	.word	0x080167ac
 8006544:	080167b8 	.word	0x080167b8
 8006548:	080167cc 	.word	0x080167cc
 800654c:	080167e0 	.word	0x080167e0
 8006550:	080167fc 	.word	0x080167fc
 8006554:	08016810 	.word	0x08016810
 8006558:	08016824 	.word	0x08016824
		} else if(InStr[0] == BASE) {
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	2b66      	cmp	r3, #102	; 0x66
 8006562:	d14c      	bne.n	80065fe <Build_Message+0x4f6>
			strcpy(mes, "GPRS Base:");
 8006564:	683a      	ldr	r2, [r7, #0]
 8006566:	4be7      	ldr	r3, [pc, #924]	; (8006904 <Build_Message+0x7fc>)
 8006568:	0010      	movs	r0, r2
 800656a:	0019      	movs	r1, r3
 800656c:	230b      	movs	r3, #11
 800656e:	001a      	movs	r2, r3
 8006570:	f00b fd3b 	bl	8011fea <memcpy>
			temppoint = Read_Settings(EE_GPRS_BASE);
 8006574:	2012      	movs	r0, #18
 8006576:	f7fd fd67 	bl	8004048 <Read_Settings>
 800657a:	0003      	movs	r3, r0
 800657c:	61bb      	str	r3, [r7, #24]
			if((strlen(temppoint) > 0)&&(temppoint[0] > 31)&&(temppoint[0] < 127)) {
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00d      	beq.n	80065a2 <Build_Message+0x49a>
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	2b1f      	cmp	r3, #31
 800658c:	d909      	bls.n	80065a2 <Build_Message+0x49a>
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	2b7e      	cmp	r3, #126	; 0x7e
 8006594:	d805      	bhi.n	80065a2 <Build_Message+0x49a>
				strcat(mes, temppoint);
 8006596:	69ba      	ldr	r2, [r7, #24]
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	0011      	movs	r1, r2
 800659c:	0018      	movs	r0, r3
 800659e:	f00c fb2d 	bl	8012bfc <strcat>
			}
			strcat(mes, ", SMS Base:");
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	0018      	movs	r0, r3
 80065a6:	f7f9 fdaf 	bl	8000108 <strlen>
 80065aa:	0003      	movs	r3, r0
 80065ac:	001a      	movs	r2, r3
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	189a      	adds	r2, r3, r2
 80065b2:	4bd5      	ldr	r3, [pc, #852]	; (8006908 <Build_Message+0x800>)
 80065b4:	0010      	movs	r0, r2
 80065b6:	0019      	movs	r1, r3
 80065b8:	230c      	movs	r3, #12
 80065ba:	001a      	movs	r2, r3
 80065bc:	f00b fd15 	bl	8011fea <memcpy>
			temppoint = Read_Settings(EE_SMS_BASE);
 80065c0:	2013      	movs	r0, #19
 80065c2:	f7fd fd41 	bl	8004048 <Read_Settings>
 80065c6:	0003      	movs	r3, r0
 80065c8:	61bb      	str	r3, [r7, #24]
			if((strlen(temppoint) > 0)&&(temppoint[0] > 31)&&(temppoint[0] < 127)) {
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d101      	bne.n	80065d6 <Build_Message+0x4ce>
 80065d2:	f000 fc34 	bl	8006e3e <Build_Message+0xd36>
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	2b1f      	cmp	r3, #31
 80065dc:	d801      	bhi.n	80065e2 <Build_Message+0x4da>
 80065de:	f000 fc2e 	bl	8006e3e <Build_Message+0xd36>
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	2b7e      	cmp	r3, #126	; 0x7e
 80065e8:	d901      	bls.n	80065ee <Build_Message+0x4e6>
 80065ea:	f000 fc28 	bl	8006e3e <Build_Message+0xd36>
				strcat(mes, temppoint);
 80065ee:	69ba      	ldr	r2, [r7, #24]
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	0011      	movs	r1, r2
 80065f4:	0018      	movs	r0, r3
 80065f6:	f00c fb01 	bl	8012bfc <strcat>
 80065fa:	f000 fc20 	bl	8006e3e <Build_Message+0xd36>
			}

		} else if(InStr[0] == GPRS_SETTINGS_MESSAGE) {
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	2b70      	cmp	r3, #112	; 0x70
 8006604:	d000      	beq.n	8006608 <Build_Message+0x500>
 8006606:	e0af      	b.n	8006768 <Build_Message+0x660>
			strcpy(mes, "GPRS APN:");
 8006608:	683a      	ldr	r2, [r7, #0]
 800660a:	4bc0      	ldr	r3, [pc, #768]	; (800690c <Build_Message+0x804>)
 800660c:	0010      	movs	r0, r2
 800660e:	0019      	movs	r1, r3
 8006610:	230a      	movs	r3, #10
 8006612:	001a      	movs	r2, r3
 8006614:	f00b fce9 	bl	8011fea <memcpy>
			temppoint = Read_Settings(EE_APN_NAME);
 8006618:	202c      	movs	r0, #44	; 0x2c
 800661a:	f7fd fd15 	bl	8004048 <Read_Settings>
 800661e:	0003      	movs	r3, r0
 8006620:	61bb      	str	r3, [r7, #24]
			strcat(mes, temppoint);
 8006622:	69ba      	ldr	r2, [r7, #24]
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	0011      	movs	r1, r2
 8006628:	0018      	movs	r0, r3
 800662a:	f00c fae7 	bl	8012bfc <strcat>
			strcat(mes, ", Username:");
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	0018      	movs	r0, r3
 8006632:	f7f9 fd69 	bl	8000108 <strlen>
 8006636:	0003      	movs	r3, r0
 8006638:	001a      	movs	r2, r3
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	189a      	adds	r2, r3, r2
 800663e:	4bb4      	ldr	r3, [pc, #720]	; (8006910 <Build_Message+0x808>)
 8006640:	0010      	movs	r0, r2
 8006642:	0019      	movs	r1, r3
 8006644:	230c      	movs	r3, #12
 8006646:	001a      	movs	r2, r3
 8006648:	f00b fccf 	bl	8011fea <memcpy>
			temppoint = Read_Settings(EE_APN_USERNAME);
 800664c:	202d      	movs	r0, #45	; 0x2d
 800664e:	f7fd fcfb 	bl	8004048 <Read_Settings>
 8006652:	0003      	movs	r3, r0
 8006654:	61bb      	str	r3, [r7, #24]
			strcat(mes, temppoint);
 8006656:	69ba      	ldr	r2, [r7, #24]
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	0011      	movs	r1, r2
 800665c:	0018      	movs	r0, r3
 800665e:	f00c facd 	bl	8012bfc <strcat>
			strcat(mes, ", Password:");
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	0018      	movs	r0, r3
 8006666:	f7f9 fd4f 	bl	8000108 <strlen>
 800666a:	0003      	movs	r3, r0
 800666c:	001a      	movs	r2, r3
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	189a      	adds	r2, r3, r2
 8006672:	4ba8      	ldr	r3, [pc, #672]	; (8006914 <Build_Message+0x80c>)
 8006674:	0010      	movs	r0, r2
 8006676:	0019      	movs	r1, r3
 8006678:	230c      	movs	r3, #12
 800667a:	001a      	movs	r2, r3
 800667c:	f00b fcb5 	bl	8011fea <memcpy>
			temppoint = Read_Settings(EE_APN_PASSWORD);
 8006680:	202e      	movs	r0, #46	; 0x2e
 8006682:	f7fd fce1 	bl	8004048 <Read_Settings>
 8006686:	0003      	movs	r3, r0
 8006688:	61bb      	str	r3, [r7, #24]
			strcat(mes, temppoint);
 800668a:	69ba      	ldr	r2, [r7, #24]
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	0011      	movs	r1, r2
 8006690:	0018      	movs	r0, r3
 8006692:	f00c fab3 	bl	8012bfc <strcat>
			strcat(mes, ", HTTP Serv:");
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	0018      	movs	r0, r3
 800669a:	f7f9 fd35 	bl	8000108 <strlen>
 800669e:	0003      	movs	r3, r0
 80066a0:	001a      	movs	r2, r3
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	189a      	adds	r2, r3, r2
 80066a6:	4b9c      	ldr	r3, [pc, #624]	; (8006918 <Build_Message+0x810>)
 80066a8:	0010      	movs	r0, r2
 80066aa:	0019      	movs	r1, r3
 80066ac:	230d      	movs	r3, #13
 80066ae:	001a      	movs	r2, r3
 80066b0:	f00b fc9b 	bl	8011fea <memcpy>
			temppoint = Read_Settings(EE_TCP_SERV);
 80066b4:	2031      	movs	r0, #49	; 0x31
 80066b6:	f7fd fcc7 	bl	8004048 <Read_Settings>
 80066ba:	0003      	movs	r3, r0
 80066bc:	61bb      	str	r3, [r7, #24]
			strcat(mes, temppoint);
 80066be:	69ba      	ldr	r2, [r7, #24]
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	0011      	movs	r1, r2
 80066c4:	0018      	movs	r0, r3
 80066c6:	f00c fa99 	bl	8012bfc <strcat>
			strcat(mes, ", HTTP Port:");
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	0018      	movs	r0, r3
 80066ce:	f7f9 fd1b 	bl	8000108 <strlen>
 80066d2:	0003      	movs	r3, r0
 80066d4:	001a      	movs	r2, r3
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	189a      	adds	r2, r3, r2
 80066da:	4b90      	ldr	r3, [pc, #576]	; (800691c <Build_Message+0x814>)
 80066dc:	0010      	movs	r0, r2
 80066de:	0019      	movs	r1, r3
 80066e0:	230d      	movs	r3, #13
 80066e2:	001a      	movs	r2, r3
 80066e4:	f00b fc81 	bl	8011fea <memcpy>
			temppoint = Read_Settings(EE_TCP_PORT);
 80066e8:	2032      	movs	r0, #50	; 0x32
 80066ea:	f7fd fcad 	bl	8004048 <Read_Settings>
 80066ee:	0003      	movs	r3, r0
 80066f0:	61bb      	str	r3, [r7, #24]
			strcat(mes, temppoint);
 80066f2:	69ba      	ldr	r2, [r7, #24]
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	0011      	movs	r1, r2
 80066f8:	0018      	movs	r0, r3
 80066fa:	f00c fa7f 	bl	8012bfc <strcat>
			strcat(mes, ", HTTP Username:");
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	0018      	movs	r0, r3
 8006702:	f7f9 fd01 	bl	8000108 <strlen>
 8006706:	0003      	movs	r3, r0
 8006708:	001a      	movs	r2, r3
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	189a      	adds	r2, r3, r2
 800670e:	4b84      	ldr	r3, [pc, #528]	; (8006920 <Build_Message+0x818>)
 8006710:	0010      	movs	r0, r2
 8006712:	0019      	movs	r1, r3
 8006714:	2311      	movs	r3, #17
 8006716:	001a      	movs	r2, r3
 8006718:	f00b fc67 	bl	8011fea <memcpy>
			temppoint = Read_Settings(EE_HTTP_USERNAME);
 800671c:	202f      	movs	r0, #47	; 0x2f
 800671e:	f7fd fc93 	bl	8004048 <Read_Settings>
 8006722:	0003      	movs	r3, r0
 8006724:	61bb      	str	r3, [r7, #24]
			strcat(mes, temppoint);
 8006726:	69ba      	ldr	r2, [r7, #24]
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	0011      	movs	r1, r2
 800672c:	0018      	movs	r0, r3
 800672e:	f00c fa65 	bl	8012bfc <strcat>
			strcat(mes, ", HTTP Password:");
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	0018      	movs	r0, r3
 8006736:	f7f9 fce7 	bl	8000108 <strlen>
 800673a:	0003      	movs	r3, r0
 800673c:	001a      	movs	r2, r3
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	189a      	adds	r2, r3, r2
 8006742:	4b78      	ldr	r3, [pc, #480]	; (8006924 <Build_Message+0x81c>)
 8006744:	0010      	movs	r0, r2
 8006746:	0019      	movs	r1, r3
 8006748:	2311      	movs	r3, #17
 800674a:	001a      	movs	r2, r3
 800674c:	f00b fc4d 	bl	8011fea <memcpy>
			temppoint = Read_Settings(EE_HTTP_PASSWORD);
 8006750:	2030      	movs	r0, #48	; 0x30
 8006752:	f7fd fc79 	bl	8004048 <Read_Settings>
 8006756:	0003      	movs	r3, r0
 8006758:	61bb      	str	r3, [r7, #24]
			strcat(mes, temppoint);
 800675a:	69ba      	ldr	r2, [r7, #24]
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	0011      	movs	r1, r2
 8006760:	0018      	movs	r0, r3
 8006762:	f00c fa4b 	bl	8012bfc <strcat>
 8006766:	e36a      	b.n	8006e3e <Build_Message+0xd36>

		} else if(InStr[0] == GPRS_STATUS_MESSAGE) {
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	2b71      	cmp	r3, #113	; 0x71
 800676e:	d14e      	bne.n	800680e <Build_Message+0x706>
			strcpy(mes, "GPRS Status:");
 8006770:	683a      	ldr	r2, [r7, #0]
 8006772:	4b6d      	ldr	r3, [pc, #436]	; (8006928 <Build_Message+0x820>)
 8006774:	0010      	movs	r0, r2
 8006776:	0019      	movs	r1, r3
 8006778:	230d      	movs	r3, #13
 800677a:	001a      	movs	r2, r3
 800677c:	f00b fc35 	bl	8011fea <memcpy>
			if(GPRS_Enabled) {
 8006780:	4b6a      	ldr	r3, [pc, #424]	; (800692c <Build_Message+0x824>)
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00f      	beq.n	80067a8 <Build_Message+0x6a0>
				strcat(mes, "Enabled");
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	0018      	movs	r0, r3
 800678c:	f7f9 fcbc 	bl	8000108 <strlen>
 8006790:	0003      	movs	r3, r0
 8006792:	001a      	movs	r2, r3
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	189a      	adds	r2, r3, r2
 8006798:	4b65      	ldr	r3, [pc, #404]	; (8006930 <Build_Message+0x828>)
 800679a:	0010      	movs	r0, r2
 800679c:	0019      	movs	r1, r3
 800679e:	2308      	movs	r3, #8
 80067a0:	001a      	movs	r2, r3
 80067a2:	f00b fc22 	bl	8011fea <memcpy>
 80067a6:	e00e      	b.n	80067c6 <Build_Message+0x6be>
			} else strcat(mes, "Disabled");
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	0018      	movs	r0, r3
 80067ac:	f7f9 fcac 	bl	8000108 <strlen>
 80067b0:	0003      	movs	r3, r0
 80067b2:	001a      	movs	r2, r3
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	189a      	adds	r2, r3, r2
 80067b8:	4b5e      	ldr	r3, [pc, #376]	; (8006934 <Build_Message+0x82c>)
 80067ba:	0010      	movs	r0, r2
 80067bc:	0019      	movs	r1, r3
 80067be:	2309      	movs	r3, #9
 80067c0:	001a      	movs	r2, r3
 80067c2:	f00b fc12 	bl	8011fea <memcpy>

			if(GPRS_Barear_Started) {
 80067c6:	4b5c      	ldr	r3, [pc, #368]	; (8006938 <Build_Message+0x830>)
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00f      	beq.n	80067ee <Build_Message+0x6e6>
				strcat(mes, ", GPRS is Connected.");
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	0018      	movs	r0, r3
 80067d2:	f7f9 fc99 	bl	8000108 <strlen>
 80067d6:	0003      	movs	r3, r0
 80067d8:	001a      	movs	r2, r3
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	189a      	adds	r2, r3, r2
 80067de:	4b57      	ldr	r3, [pc, #348]	; (800693c <Build_Message+0x834>)
 80067e0:	0010      	movs	r0, r2
 80067e2:	0019      	movs	r1, r3
 80067e4:	2315      	movs	r3, #21
 80067e6:	001a      	movs	r2, r3
 80067e8:	f00b fbff 	bl	8011fea <memcpy>
 80067ec:	e327      	b.n	8006e3e <Build_Message+0xd36>
			} else strcat(mes, ", GPRS is Disconnected");
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	0018      	movs	r0, r3
 80067f2:	f7f9 fc89 	bl	8000108 <strlen>
 80067f6:	0003      	movs	r3, r0
 80067f8:	001a      	movs	r2, r3
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	189a      	adds	r2, r3, r2
 80067fe:	4b50      	ldr	r3, [pc, #320]	; (8006940 <Build_Message+0x838>)
 8006800:	0010      	movs	r0, r2
 8006802:	0019      	movs	r1, r3
 8006804:	2317      	movs	r3, #23
 8006806:	001a      	movs	r2, r3
 8006808:	f00b fbef 	bl	8011fea <memcpy>
 800680c:	e317      	b.n	8006e3e <Build_Message+0xd36>
		} else if(InStr[0] == STATUS) {
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	2b72      	cmp	r3, #114	; 0x72
 8006814:	d000      	beq.n	8006818 <Build_Message+0x710>
 8006816:	e179      	b.n	8006b0c <Build_Message+0xa04>
			tp = 0;
 8006818:	241f      	movs	r4, #31
 800681a:	193b      	adds	r3, r7, r4
 800681c:	2200      	movs	r2, #0
 800681e:	701a      	strb	r2, [r3, #0]
			temppoint = Read_Settings(EE_HEALTH_TEST_PREPAID_MESSAGE);
 8006820:	200f      	movs	r0, #15
 8006822:	f7fd fc11 	bl	8004048 <Read_Settings>
 8006826:	0003      	movs	r3, r0
 8006828:	61bb      	str	r3, [r7, #24]
			if(tp == 0) {
 800682a:	193b      	adds	r3, r7, r4
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d136      	bne.n	80068a0 <Build_Message+0x798>
				strncpy(tempstr, temppoint, 8);
 8006832:	69b9      	ldr	r1, [r7, #24]
 8006834:	230c      	movs	r3, #12
 8006836:	18fb      	adds	r3, r7, r3
 8006838:	2208      	movs	r2, #8
 800683a:	0018      	movs	r0, r3
 800683c:	f00c fa13 	bl	8012c66 <strncpy>
				x = 0;
 8006840:	231e      	movs	r3, #30
 8006842:	18fb      	adds	r3, r7, r3
 8006844:	2200      	movs	r2, #0
 8006846:	701a      	strb	r2, [r3, #0]
				for(j = 0; j < 8; j++) {
 8006848:	231d      	movs	r3, #29
 800684a:	18fb      	adds	r3, r7, r3
 800684c:	2200      	movs	r2, #0
 800684e:	701a      	strb	r2, [r3, #0]
 8006850:	e019      	b.n	8006886 <Build_Message+0x77e>
					if((tempstr[j] == '0')||(tempstr[j] == '1')) {
 8006852:	211d      	movs	r1, #29
 8006854:	187b      	adds	r3, r7, r1
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	200c      	movs	r0, #12
 800685a:	183a      	adds	r2, r7, r0
 800685c:	5cd3      	ldrb	r3, [r2, r3]
 800685e:	2b30      	cmp	r3, #48	; 0x30
 8006860:	d005      	beq.n	800686e <Build_Message+0x766>
 8006862:	187b      	adds	r3, r7, r1
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	183a      	adds	r2, r7, r0
 8006868:	5cd3      	ldrb	r3, [r2, r3]
 800686a:	2b31      	cmp	r3, #49	; 0x31
 800686c:	d105      	bne.n	800687a <Build_Message+0x772>
						x++;
 800686e:	211e      	movs	r1, #30
 8006870:	187b      	adds	r3, r7, r1
 8006872:	781a      	ldrb	r2, [r3, #0]
 8006874:	187b      	adds	r3, r7, r1
 8006876:	3201      	adds	r2, #1
 8006878:	701a      	strb	r2, [r3, #0]
				for(j = 0; j < 8; j++) {
 800687a:	211d      	movs	r1, #29
 800687c:	187b      	adds	r3, r7, r1
 800687e:	781a      	ldrb	r2, [r3, #0]
 8006880:	187b      	adds	r3, r7, r1
 8006882:	3201      	adds	r2, #1
 8006884:	701a      	strb	r2, [r3, #0]
 8006886:	231d      	movs	r3, #29
 8006888:	18fb      	adds	r3, r7, r3
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	2b07      	cmp	r3, #7
 800688e:	d9e0      	bls.n	8006852 <Build_Message+0x74a>
					}
				}
				if(x == 8) {
 8006890:	231e      	movs	r3, #30
 8006892:	18fb      	adds	r3, r7, r3
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	2b08      	cmp	r3, #8
 8006898:	d102      	bne.n	80068a0 <Build_Message+0x798>
					temppoint = temppoint + 8;
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	3308      	adds	r3, #8
 800689e:	61bb      	str	r3, [r7, #24]
				}
			}
			if(strlen(mes) > 0) strcat(mes, ", ");
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00e      	beq.n	80068c6 <Build_Message+0x7be>
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	0018      	movs	r0, r3
 80068ac:	f7f9 fc2c 	bl	8000108 <strlen>
 80068b0:	0003      	movs	r3, r0
 80068b2:	001a      	movs	r2, r3
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	189a      	adds	r2, r3, r2
 80068b8:	4b22      	ldr	r3, [pc, #136]	; (8006944 <Build_Message+0x83c>)
 80068ba:	0010      	movs	r0, r2
 80068bc:	0019      	movs	r1, r3
 80068be:	2303      	movs	r3, #3
 80068c0:	001a      	movs	r2, r3
 80068c2:	f00b fb92 	bl	8011fea <memcpy>
			strcpy(mes, temppoint);
 80068c6:	69ba      	ldr	r2, [r7, #24]
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	0011      	movs	r1, r2
 80068cc:	0018      	movs	r0, r3
 80068ce:	f00c f9b0 	bl	8012c32 <strcpy>

			tp = 0;
 80068d2:	231f      	movs	r3, #31
 80068d4:	18fb      	adds	r3, r7, r3
 80068d6:	2200      	movs	r2, #0
 80068d8:	701a      	strb	r2, [r3, #0]
			if(Arm_Status == 1) {
 80068da:	4b1b      	ldr	r3, [pc, #108]	; (8006948 <Build_Message+0x840>)
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d105      	bne.n	80068ee <Build_Message+0x7e6>
				temppoint = Read_Settings(EE_AWAY_MODE);
 80068e2:	2002      	movs	r0, #2
 80068e4:	f7fd fbb0 	bl	8004048 <Read_Settings>
 80068e8:	0003      	movs	r3, r0
 80068ea:	61bb      	str	r3, [r7, #24]
 80068ec:	e033      	b.n	8006956 <Build_Message+0x84e>
			} else if (Arm_Status == 2) {
 80068ee:	4b16      	ldr	r3, [pc, #88]	; (8006948 <Build_Message+0x840>)
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	2b02      	cmp	r3, #2
 80068f4:	d12a      	bne.n	800694c <Build_Message+0x844>
				temppoint = Read_Settings(EE_MONITOR_MODE);
 80068f6:	2003      	movs	r0, #3
 80068f8:	f7fd fba6 	bl	8004048 <Read_Settings>
 80068fc:	0003      	movs	r3, r0
 80068fe:	61bb      	str	r3, [r7, #24]
 8006900:	e029      	b.n	8006956 <Build_Message+0x84e>
 8006902:	46c0      	nop			; (mov r8, r8)
 8006904:	08016834 	.word	0x08016834
 8006908:	08016840 	.word	0x08016840
 800690c:	0801684c 	.word	0x0801684c
 8006910:	08016858 	.word	0x08016858
 8006914:	08016864 	.word	0x08016864
 8006918:	08016870 	.word	0x08016870
 800691c:	08016880 	.word	0x08016880
 8006920:	08016890 	.word	0x08016890
 8006924:	080168a4 	.word	0x080168a4
 8006928:	080168b8 	.word	0x080168b8
 800692c:	20000793 	.word	0x20000793
 8006930:	080168c8 	.word	0x080168c8
 8006934:	080168d0 	.word	0x080168d0
 8006938:	20000794 	.word	0x20000794
 800693c:	080168dc 	.word	0x080168dc
 8006940:	080168f4 	.word	0x080168f4
 8006944:	0801690c 	.word	0x0801690c
 8006948:	200007b8 	.word	0x200007b8
			} else {
				temppoint = Read_Settings(EE_SYSTEM_OFF_MODE);
 800694c:	2004      	movs	r0, #4
 800694e:	f7fd fb7b 	bl	8004048 <Read_Settings>
 8006952:	0003      	movs	r3, r0
 8006954:	61bb      	str	r3, [r7, #24]
			}

			if(tp == 0) {
 8006956:	231f      	movs	r3, #31
 8006958:	18fb      	adds	r3, r7, r3
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d136      	bne.n	80069ce <Build_Message+0x8c6>
				strncpy(tempstr, temppoint, 8);
 8006960:	69b9      	ldr	r1, [r7, #24]
 8006962:	230c      	movs	r3, #12
 8006964:	18fb      	adds	r3, r7, r3
 8006966:	2208      	movs	r2, #8
 8006968:	0018      	movs	r0, r3
 800696a:	f00c f97c 	bl	8012c66 <strncpy>
				x = 0;
 800696e:	231e      	movs	r3, #30
 8006970:	18fb      	adds	r3, r7, r3
 8006972:	2200      	movs	r2, #0
 8006974:	701a      	strb	r2, [r3, #0]
				for(j = 0; j < 8; j++) {
 8006976:	231d      	movs	r3, #29
 8006978:	18fb      	adds	r3, r7, r3
 800697a:	2200      	movs	r2, #0
 800697c:	701a      	strb	r2, [r3, #0]
 800697e:	e019      	b.n	80069b4 <Build_Message+0x8ac>
					if((tempstr[j] == '0')||(tempstr[j] == '1')) {
 8006980:	211d      	movs	r1, #29
 8006982:	187b      	adds	r3, r7, r1
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	200c      	movs	r0, #12
 8006988:	183a      	adds	r2, r7, r0
 800698a:	5cd3      	ldrb	r3, [r2, r3]
 800698c:	2b30      	cmp	r3, #48	; 0x30
 800698e:	d005      	beq.n	800699c <Build_Message+0x894>
 8006990:	187b      	adds	r3, r7, r1
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	183a      	adds	r2, r7, r0
 8006996:	5cd3      	ldrb	r3, [r2, r3]
 8006998:	2b31      	cmp	r3, #49	; 0x31
 800699a:	d105      	bne.n	80069a8 <Build_Message+0x8a0>
						x++;
 800699c:	211e      	movs	r1, #30
 800699e:	187b      	adds	r3, r7, r1
 80069a0:	781a      	ldrb	r2, [r3, #0]
 80069a2:	187b      	adds	r3, r7, r1
 80069a4:	3201      	adds	r2, #1
 80069a6:	701a      	strb	r2, [r3, #0]
				for(j = 0; j < 8; j++) {
 80069a8:	211d      	movs	r1, #29
 80069aa:	187b      	adds	r3, r7, r1
 80069ac:	781a      	ldrb	r2, [r3, #0]
 80069ae:	187b      	adds	r3, r7, r1
 80069b0:	3201      	adds	r2, #1
 80069b2:	701a      	strb	r2, [r3, #0]
 80069b4:	231d      	movs	r3, #29
 80069b6:	18fb      	adds	r3, r7, r3
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	2b07      	cmp	r3, #7
 80069bc:	d9e0      	bls.n	8006980 <Build_Message+0x878>
					}
				}
				if(x == 8) {
 80069be:	231e      	movs	r3, #30
 80069c0:	18fb      	adds	r3, r7, r3
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	2b08      	cmp	r3, #8
 80069c6:	d102      	bne.n	80069ce <Build_Message+0x8c6>
					temppoint = temppoint + 8;
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	3308      	adds	r3, #8
 80069cc:	61bb      	str	r3, [r7, #24]
				}
			}
			if(strlen(mes) > 0) strcat(mes, ", ");
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00e      	beq.n	80069f4 <Build_Message+0x8ec>
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	0018      	movs	r0, r3
 80069da:	f7f9 fb95 	bl	8000108 <strlen>
 80069de:	0003      	movs	r3, r0
 80069e0:	001a      	movs	r2, r3
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	189a      	adds	r2, r3, r2
 80069e6:	4bdf      	ldr	r3, [pc, #892]	; (8006d64 <Build_Message+0xc5c>)
 80069e8:	0010      	movs	r0, r2
 80069ea:	0019      	movs	r1, r3
 80069ec:	2303      	movs	r3, #3
 80069ee:	001a      	movs	r2, r3
 80069f0:	f00b fafb 	bl	8011fea <memcpy>
			strcat(mes, temppoint);
 80069f4:	69ba      	ldr	r2, [r7, #24]
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	0011      	movs	r1, r2
 80069fa:	0018      	movs	r0, r3
 80069fc:	f00c f8fe 	bl	8012bfc <strcat>

			if(Prev_Mains == 1) {
 8006a00:	4bd9      	ldr	r3, [pc, #868]	; (8006d68 <Build_Message+0xc60>)
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d105      	bne.n	8006a14 <Build_Message+0x90c>
				temppoint = Read_Settings(EE_MAINS_ON);
 8006a08:	2006      	movs	r0, #6
 8006a0a:	f7fd fb1d 	bl	8004048 <Read_Settings>
 8006a0e:	0003      	movs	r3, r0
 8006a10:	61bb      	str	r3, [r7, #24]
 8006a12:	e004      	b.n	8006a1e <Build_Message+0x916>
			} else {
				temppoint = Read_Settings(EE_MAINS_OFF);
 8006a14:	2007      	movs	r0, #7
 8006a16:	f7fd fb17 	bl	8004048 <Read_Settings>
 8006a1a:	0003      	movs	r3, r0
 8006a1c:	61bb      	str	r3, [r7, #24]
			}

			if(tp == 0) {
 8006a1e:	231f      	movs	r3, #31
 8006a20:	18fb      	adds	r3, r7, r3
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d136      	bne.n	8006a96 <Build_Message+0x98e>
				strncpy(tempstr, temppoint, 8);
 8006a28:	69b9      	ldr	r1, [r7, #24]
 8006a2a:	230c      	movs	r3, #12
 8006a2c:	18fb      	adds	r3, r7, r3
 8006a2e:	2208      	movs	r2, #8
 8006a30:	0018      	movs	r0, r3
 8006a32:	f00c f918 	bl	8012c66 <strncpy>
				x = 0;
 8006a36:	231e      	movs	r3, #30
 8006a38:	18fb      	adds	r3, r7, r3
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	701a      	strb	r2, [r3, #0]
				for(j = 0; j < 8; j++) {
 8006a3e:	231d      	movs	r3, #29
 8006a40:	18fb      	adds	r3, r7, r3
 8006a42:	2200      	movs	r2, #0
 8006a44:	701a      	strb	r2, [r3, #0]
 8006a46:	e019      	b.n	8006a7c <Build_Message+0x974>
					if((tempstr[j] == '0')||(tempstr[j] == '1')) {
 8006a48:	211d      	movs	r1, #29
 8006a4a:	187b      	adds	r3, r7, r1
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	200c      	movs	r0, #12
 8006a50:	183a      	adds	r2, r7, r0
 8006a52:	5cd3      	ldrb	r3, [r2, r3]
 8006a54:	2b30      	cmp	r3, #48	; 0x30
 8006a56:	d005      	beq.n	8006a64 <Build_Message+0x95c>
 8006a58:	187b      	adds	r3, r7, r1
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	183a      	adds	r2, r7, r0
 8006a5e:	5cd3      	ldrb	r3, [r2, r3]
 8006a60:	2b31      	cmp	r3, #49	; 0x31
 8006a62:	d105      	bne.n	8006a70 <Build_Message+0x968>
						x++;
 8006a64:	211e      	movs	r1, #30
 8006a66:	187b      	adds	r3, r7, r1
 8006a68:	781a      	ldrb	r2, [r3, #0]
 8006a6a:	187b      	adds	r3, r7, r1
 8006a6c:	3201      	adds	r2, #1
 8006a6e:	701a      	strb	r2, [r3, #0]
				for(j = 0; j < 8; j++) {
 8006a70:	211d      	movs	r1, #29
 8006a72:	187b      	adds	r3, r7, r1
 8006a74:	781a      	ldrb	r2, [r3, #0]
 8006a76:	187b      	adds	r3, r7, r1
 8006a78:	3201      	adds	r2, #1
 8006a7a:	701a      	strb	r2, [r3, #0]
 8006a7c:	231d      	movs	r3, #29
 8006a7e:	18fb      	adds	r3, r7, r3
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	2b07      	cmp	r3, #7
 8006a84:	d9e0      	bls.n	8006a48 <Build_Message+0x940>
					}
				}
				if(x == 8) {
 8006a86:	231e      	movs	r3, #30
 8006a88:	18fb      	adds	r3, r7, r3
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	2b08      	cmp	r3, #8
 8006a8e:	d102      	bne.n	8006a96 <Build_Message+0x98e>
					temppoint = temppoint + 8;
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	3308      	adds	r3, #8
 8006a94:	61bb      	str	r3, [r7, #24]
				}
			}
			if(strlen(mes) > 0) strcat(mes, ", ");
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00e      	beq.n	8006abc <Build_Message+0x9b4>
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	0018      	movs	r0, r3
 8006aa2:	f7f9 fb31 	bl	8000108 <strlen>
 8006aa6:	0003      	movs	r3, r0
 8006aa8:	001a      	movs	r2, r3
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	189a      	adds	r2, r3, r2
 8006aae:	4bad      	ldr	r3, [pc, #692]	; (8006d64 <Build_Message+0xc5c>)
 8006ab0:	0010      	movs	r0, r2
 8006ab2:	0019      	movs	r1, r3
 8006ab4:	2303      	movs	r3, #3
 8006ab6:	001a      	movs	r2, r3
 8006ab8:	f00b fa97 	bl	8011fea <memcpy>
			strcat(mes, temppoint);
 8006abc:	69ba      	ldr	r2, [r7, #24]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	0011      	movs	r1, r2
 8006ac2:	0018      	movs	r0, r3
 8006ac4:	f00c f89a 	bl	8012bfc <strcat>


			strcat(mes, ", Bat Volts: ");
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	0018      	movs	r0, r3
 8006acc:	f7f9 fb1c 	bl	8000108 <strlen>
 8006ad0:	0003      	movs	r3, r0
 8006ad2:	001a      	movs	r2, r3
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	189a      	adds	r2, r3, r2
 8006ad8:	4ba4      	ldr	r3, [pc, #656]	; (8006d6c <Build_Message+0xc64>)
 8006ada:	0010      	movs	r0, r2
 8006adc:	0019      	movs	r1, r3
 8006ade:	230e      	movs	r3, #14
 8006ae0:	001a      	movs	r2, r3
 8006ae2:	f00b fa82 	bl	8011fea <memcpy>
			sprintf(tempstr, "%1.1fV", BatteryVoltage);
 8006ae6:	4ba2      	ldr	r3, [pc, #648]	; (8006d70 <Build_Message+0xc68>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	1c18      	adds	r0, r3, #0
 8006aec:	f7fb fcac 	bl	8002448 <__aeabi_f2d>
 8006af0:	0002      	movs	r2, r0
 8006af2:	000b      	movs	r3, r1
 8006af4:	499f      	ldr	r1, [pc, #636]	; (8006d74 <Build_Message+0xc6c>)
 8006af6:	240c      	movs	r4, #12
 8006af8:	1938      	adds	r0, r7, r4
 8006afa:	f00c f813 	bl	8012b24 <siprintf>
			strcat(mes, tempstr);
 8006afe:	193a      	adds	r2, r7, r4
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	0011      	movs	r1, r2
 8006b04:	0018      	movs	r0, r3
 8006b06:	f00c f879 	bl	8012bfc <strcat>
 8006b0a:	e198      	b.n	8006e3e <Build_Message+0xd36>
		} else if(InStr[0] == TIME_24H_MESSAGE) {
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	2b67      	cmp	r3, #103	; 0x67
 8006b12:	d14e      	bne.n	8006bb2 <Build_Message+0xaaa>
			strcpy(mes, "24H Test Message Time:");
 8006b14:	683a      	ldr	r2, [r7, #0]
 8006b16:	4b98      	ldr	r3, [pc, #608]	; (8006d78 <Build_Message+0xc70>)
 8006b18:	0010      	movs	r0, r2
 8006b1a:	0019      	movs	r1, r3
 8006b1c:	2317      	movs	r3, #23
 8006b1e:	001a      	movs	r2, r3
 8006b20:	f00b fa63 	bl	8011fea <memcpy>
			temppoint = Read_Settings(EE_HEALTH_REPORT_TIME);
 8006b24:	2011      	movs	r0, #17
 8006b26:	f7fd fa8f 	bl	8004048 <Read_Settings>
 8006b2a:	0003      	movs	r3, r0
 8006b2c:	61bb      	str	r3, [r7, #24]
			strcat(mes, temppoint);
 8006b2e:	69ba      	ldr	r2, [r7, #24]
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	0011      	movs	r1, r2
 8006b34:	0018      	movs	r0, r3
 8006b36:	f00c f861 	bl	8012bfc <strcat>
			strcat(mes, ", Report Days:");
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	0018      	movs	r0, r3
 8006b3e:	f7f9 fae3 	bl	8000108 <strlen>
 8006b42:	0003      	movs	r3, r0
 8006b44:	001a      	movs	r2, r3
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	189a      	adds	r2, r3, r2
 8006b4a:	4b8c      	ldr	r3, [pc, #560]	; (8006d7c <Build_Message+0xc74>)
 8006b4c:	0010      	movs	r0, r2
 8006b4e:	0019      	movs	r1, r3
 8006b50:	230f      	movs	r3, #15
 8006b52:	001a      	movs	r2, r3
 8006b54:	f00b fa49 	bl	8011fea <memcpy>
			temppoint = Read_Settings(EE_HEALTH_REPORT_DAYS);
 8006b58:	2010      	movs	r0, #16
 8006b5a:	f7fd fa75 	bl	8004048 <Read_Settings>
 8006b5e:	0003      	movs	r3, r0
 8006b60:	61bb      	str	r3, [r7, #24]
			strcat(mes, temppoint);
 8006b62:	69ba      	ldr	r2, [r7, #24]
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	0011      	movs	r1, r2
 8006b68:	0018      	movs	r0, r3
 8006b6a:	f00c f847 	bl	8012bfc <strcat>
			strcat(mes, ", Bat Volts: ");
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	0018      	movs	r0, r3
 8006b72:	f7f9 fac9 	bl	8000108 <strlen>
 8006b76:	0003      	movs	r3, r0
 8006b78:	001a      	movs	r2, r3
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	189a      	adds	r2, r3, r2
 8006b7e:	4b7b      	ldr	r3, [pc, #492]	; (8006d6c <Build_Message+0xc64>)
 8006b80:	0010      	movs	r0, r2
 8006b82:	0019      	movs	r1, r3
 8006b84:	230e      	movs	r3, #14
 8006b86:	001a      	movs	r2, r3
 8006b88:	f00b fa2f 	bl	8011fea <memcpy>
			sprintf(tempstr, "%1.1fV", BatteryVoltage);
 8006b8c:	4b78      	ldr	r3, [pc, #480]	; (8006d70 <Build_Message+0xc68>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	1c18      	adds	r0, r3, #0
 8006b92:	f7fb fc59 	bl	8002448 <__aeabi_f2d>
 8006b96:	0002      	movs	r2, r0
 8006b98:	000b      	movs	r3, r1
 8006b9a:	4976      	ldr	r1, [pc, #472]	; (8006d74 <Build_Message+0xc6c>)
 8006b9c:	240c      	movs	r4, #12
 8006b9e:	1938      	adds	r0, r7, r4
 8006ba0:	f00b ffc0 	bl	8012b24 <siprintf>
			strcat(mes, tempstr);
 8006ba4:	193a      	adds	r2, r7, r4
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	0011      	movs	r1, r2
 8006baa:	0018      	movs	r0, r3
 8006bac:	f00c f826 	bl	8012bfc <strcat>
 8006bb0:	e145      	b.n	8006e3e <Build_Message+0xd36>
		} else if(InStr[0] == SIGNAL_STRENGTH) {
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	2b6a      	cmp	r3, #106	; 0x6a
 8006bb8:	d10a      	bne.n	8006bd0 <Build_Message+0xac8>
			SIM800H_CSQ();
 8006bba:	f001 feb3 	bl	8008924 <SIM800H_CSQ>
			sprintf(mes, "Signal Strength: %d/31", GSM_Signal);
 8006bbe:	4b70      	ldr	r3, [pc, #448]	; (8006d80 <Build_Message+0xc78>)
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	001a      	movs	r2, r3
 8006bc4:	496f      	ldr	r1, [pc, #444]	; (8006d84 <Build_Message+0xc7c>)
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	0018      	movs	r0, r3
 8006bca:	f00b ffab 	bl	8012b24 <siprintf>
 8006bce:	e136      	b.n	8006e3e <Build_Message+0xd36>
		} else if(InStr[0] == SOFTWARE_VERSION) {
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	2b6b      	cmp	r3, #107	; 0x6b
 8006bd6:	d122      	bne.n	8006c1e <Build_Message+0xb16>
			strcpy(mes, FIRMWAREVERSION);
 8006bd8:	683a      	ldr	r2, [r7, #0]
 8006bda:	4b6b      	ldr	r3, [pc, #428]	; (8006d88 <Build_Message+0xc80>)
 8006bdc:	0010      	movs	r0, r2
 8006bde:	0019      	movs	r1, r3
 8006be0:	2310      	movs	r3, #16
 8006be2:	001a      	movs	r2, r3
 8006be4:	f00b fa01 	bl	8011fea <memcpy>
			strcat(mes, " ");
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	0018      	movs	r0, r3
 8006bec:	f7f9 fa8c 	bl	8000108 <strlen>
 8006bf0:	0003      	movs	r3, r0
 8006bf2:	001a      	movs	r2, r3
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	189a      	adds	r2, r3, r2
 8006bf8:	4b64      	ldr	r3, [pc, #400]	; (8006d8c <Build_Message+0xc84>)
 8006bfa:	0010      	movs	r0, r2
 8006bfc:	0019      	movs	r1, r3
 8006bfe:	2302      	movs	r3, #2
 8006c00:	001a      	movs	r2, r3
 8006c02:	f00b f9f2 	bl	8011fea <memcpy>
			temppoint = Read_Settings(EE_AT_MESSAGE);
 8006c06:	2033      	movs	r0, #51	; 0x33
 8006c08:	f7fd fa1e 	bl	8004048 <Read_Settings>
 8006c0c:	0003      	movs	r3, r0
 8006c0e:	61bb      	str	r3, [r7, #24]
			strcat(mes, temppoint);
 8006c10:	69ba      	ldr	r2, [r7, #24]
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	0011      	movs	r1, r2
 8006c16:	0018      	movs	r0, r3
 8006c18:	f00b fff0 	bl	8012bfc <strcat>
 8006c1c:	e10f      	b.n	8006e3e <Build_Message+0xd36>
		} else if(InStr[0] == AIRTIME) {
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	2b6c      	cmp	r3, #108	; 0x6c
 8006c24:	d122      	bne.n	8006c6c <Build_Message+0xb64>
			if(Airtime_Req_Timer == 0) {
 8006c26:	4b5a      	ldr	r3, [pc, #360]	; (8006d90 <Build_Message+0xc88>)
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d108      	bne.n	8006c40 <Build_Message+0xb38>
		    	Get_AirTime();
 8006c2e:	f001 fa37 	bl	80080a0 <Get_AirTime>
		    	if(!Airtime_Failure) {
 8006c32:	4b58      	ldr	r3, [pc, #352]	; (8006d94 <Build_Message+0xc8c>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d102      	bne.n	8006c40 <Build_Message+0xb38>
		    		Airtime_Req_Timer = 120;
 8006c3a:	4b55      	ldr	r3, [pc, #340]	; (8006d90 <Build_Message+0xc88>)
 8006c3c:	2278      	movs	r2, #120	; 0x78
 8006c3e:	701a      	strb	r2, [r3, #0]
		    	}
		    }
		    sprintf(mes, "%s", AirTime);
 8006c40:	4a55      	ldr	r2, [pc, #340]	; (8006d98 <Build_Message+0xc90>)
 8006c42:	4956      	ldr	r1, [pc, #344]	; (8006d9c <Build_Message+0xc94>)
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	0018      	movs	r0, r3
 8006c48:	f00b ff6c 	bl	8012b24 <siprintf>
			strcat(mes, " ");
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	0018      	movs	r0, r3
 8006c50:	f7f9 fa5a 	bl	8000108 <strlen>
 8006c54:	0003      	movs	r3, r0
 8006c56:	001a      	movs	r2, r3
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	189a      	adds	r2, r3, r2
 8006c5c:	4b4b      	ldr	r3, [pc, #300]	; (8006d8c <Build_Message+0xc84>)
 8006c5e:	0010      	movs	r0, r2
 8006c60:	0019      	movs	r1, r3
 8006c62:	2302      	movs	r3, #2
 8006c64:	001a      	movs	r2, r3
 8006c66:	f00b f9c0 	bl	8011fea <memcpy>
 8006c6a:	e0e8      	b.n	8006e3e <Build_Message+0xd36>
		} else if(InStr[0] == DATETIME) {
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	2b6d      	cmp	r3, #109	; 0x6d
 8006c72:	d126      	bne.n	8006cc2 <Build_Message+0xbba>
			Get_DateTime();
 8006c74:	f7ff fa0e 	bl	8006094 <Get_DateTime>
			sprintf(mes, "Date Time: %02d/%02d/%02d %02d:%02d:%02d ", year, month, day, hours, minutes, seconds);
 8006c78:	4b49      	ldr	r3, [pc, #292]	; (8006da0 <Build_Message+0xc98>)
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	4b49      	ldr	r3, [pc, #292]	; (8006da4 <Build_Message+0xc9c>)
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	469c      	mov	ip, r3
 8006c82:	4b49      	ldr	r3, [pc, #292]	; (8006da8 <Build_Message+0xca0>)
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	001c      	movs	r4, r3
 8006c88:	4b48      	ldr	r3, [pc, #288]	; (8006dac <Build_Message+0xca4>)
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	001d      	movs	r5, r3
 8006c8e:	4b48      	ldr	r3, [pc, #288]	; (8006db0 <Build_Message+0xca8>)
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	001e      	movs	r6, r3
 8006c94:	4b47      	ldr	r3, [pc, #284]	; (8006db4 <Build_Message+0xcac>)
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	4947      	ldr	r1, [pc, #284]	; (8006db8 <Build_Message+0xcb0>)
 8006c9a:	6838      	ldr	r0, [r7, #0]
 8006c9c:	9303      	str	r3, [sp, #12]
 8006c9e:	9602      	str	r6, [sp, #8]
 8006ca0:	9501      	str	r5, [sp, #4]
 8006ca2:	9400      	str	r4, [sp, #0]
 8006ca4:	4663      	mov	r3, ip
 8006ca6:	f00b ff3d 	bl	8012b24 <siprintf>
			temppoint = Read_Settings(EE_AT_MESSAGE);
 8006caa:	2033      	movs	r0, #51	; 0x33
 8006cac:	f7fd f9cc 	bl	8004048 <Read_Settings>
 8006cb0:	0003      	movs	r3, r0
 8006cb2:	61bb      	str	r3, [r7, #24]
			strcat(mes, temppoint);
 8006cb4:	69ba      	ldr	r2, [r7, #24]
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	0011      	movs	r1, r2
 8006cba:	0018      	movs	r0, r3
 8006cbc:	f00b ff9e 	bl	8012bfc <strcat>
 8006cc0:	e0bd      	b.n	8006e3e <Build_Message+0xd36>
		} else if(InStr[0] == 127) {  // Cellnumber will follow to include in message
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	2b7f      	cmp	r3, #127	; 0x7f
 8006cc8:	d178      	bne.n	8006dbc <Build_Message+0xcb4>
			InStr++;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	607b      	str	r3, [r7, #4]
			length = InStr[0];
 8006cd0:	231c      	movs	r3, #28
 8006cd2:	18fb      	adds	r3, r7, r3
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	7812      	ldrb	r2, [r2, #0]
 8006cd8:	701a      	strb	r2, [r3, #0]
			InStr++;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	3301      	adds	r3, #1
 8006cde:	607b      	str	r3, [r7, #4]
			strcat(mes, " ");
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	0018      	movs	r0, r3
 8006ce4:	f7f9 fa10 	bl	8000108 <strlen>
 8006ce8:	0003      	movs	r3, r0
 8006cea:	001a      	movs	r2, r3
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	189a      	adds	r2, r3, r2
 8006cf0:	4b26      	ldr	r3, [pc, #152]	; (8006d8c <Build_Message+0xc84>)
 8006cf2:	0010      	movs	r0, r2
 8006cf4:	0019      	movs	r1, r3
 8006cf6:	2302      	movs	r3, #2
 8006cf8:	001a      	movs	r2, r3
 8006cfa:	f00b f976 	bl	8011fea <memcpy>
			x = strlen(mes);
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	0018      	movs	r0, r3
 8006d02:	f7f9 fa01 	bl	8000108 <strlen>
 8006d06:	0002      	movs	r2, r0
 8006d08:	231e      	movs	r3, #30
 8006d0a:	18fb      	adds	r3, r7, r3
 8006d0c:	701a      	strb	r2, [r3, #0]
			while(length > 0) {
 8006d0e:	e01b      	b.n	8006d48 <Build_Message+0xc40>
				mes[x] = InStr[0];
 8006d10:	211e      	movs	r1, #30
 8006d12:	187b      	adds	r3, r7, r1
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	683a      	ldr	r2, [r7, #0]
 8006d18:	18d3      	adds	r3, r2, r3
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	7812      	ldrb	r2, [r2, #0]
 8006d1e:	701a      	strb	r2, [r3, #0]
				InStr++;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	3301      	adds	r3, #1
 8006d24:	607b      	str	r3, [r7, #4]
				tp++;
 8006d26:	201f      	movs	r0, #31
 8006d28:	183b      	adds	r3, r7, r0
 8006d2a:	781a      	ldrb	r2, [r3, #0]
 8006d2c:	183b      	adds	r3, r7, r0
 8006d2e:	3201      	adds	r2, #1
 8006d30:	701a      	strb	r2, [r3, #0]
				x++;
 8006d32:	187b      	adds	r3, r7, r1
 8006d34:	781a      	ldrb	r2, [r3, #0]
 8006d36:	187b      	adds	r3, r7, r1
 8006d38:	3201      	adds	r2, #1
 8006d3a:	701a      	strb	r2, [r3, #0]
				length--;
 8006d3c:	211c      	movs	r1, #28
 8006d3e:	187b      	adds	r3, r7, r1
 8006d40:	781a      	ldrb	r2, [r3, #0]
 8006d42:	187b      	adds	r3, r7, r1
 8006d44:	3a01      	subs	r2, #1
 8006d46:	701a      	strb	r2, [r3, #0]
			while(length > 0) {
 8006d48:	231c      	movs	r3, #28
 8006d4a:	18fb      	adds	r3, r7, r3
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d1de      	bne.n	8006d10 <Build_Message+0xc08>
			}
			mes[x] = 0;
 8006d52:	231e      	movs	r3, #30
 8006d54:	18fb      	adds	r3, r7, r3
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	683a      	ldr	r2, [r7, #0]
 8006d5a:	18d3      	adds	r3, r2, r3
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	701a      	strb	r2, [r3, #0]
 8006d60:	e06d      	b.n	8006e3e <Build_Message+0xd36>
 8006d62:	46c0      	nop			; (mov r8, r8)
 8006d64:	0801690c 	.word	0x0801690c
 8006d68:	20000000 	.word	0x20000000
 8006d6c:	08016910 	.word	0x08016910
 8006d70:	20002470 	.word	0x20002470
 8006d74:	08016920 	.word	0x08016920
 8006d78:	08016928 	.word	0x08016928
 8006d7c:	08016940 	.word	0x08016940
 8006d80:	20001803 	.word	0x20001803
 8006d84:	08016950 	.word	0x08016950
 8006d88:	08016968 	.word	0x08016968
 8006d8c:	08016764 	.word	0x08016764
 8006d90:	200007aa 	.word	0x200007aa
 8006d94:	200018d0 	.word	0x200018d0
 8006d98:	20001808 	.word	0x20001808
 8006d9c:	08016978 	.word	0x08016978
 8006da0:	200007a0 	.word	0x200007a0
 8006da4:	200007a4 	.word	0x200007a4
 8006da8:	200007a5 	.word	0x200007a5
 8006dac:	200007a6 	.word	0x200007a6
 8006db0:	200007a7 	.word	0x200007a7
 8006db4:	200007a8 	.word	0x200007a8
 8006db8:	0801697c 	.word	0x0801697c
		} else if(InStr[tp] == 126) {   // ';'
 8006dbc:	231f      	movs	r3, #31
 8006dbe:	18fb      	adds	r3, r7, r3
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	18d3      	adds	r3, r2, r3
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	2b7e      	cmp	r3, #126	; 0x7e
 8006dca:	d10f      	bne.n	8006dec <Build_Message+0xce4>
			strcat(mes, ";");
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	0018      	movs	r0, r3
 8006dd0:	f7f9 f99a 	bl	8000108 <strlen>
 8006dd4:	0003      	movs	r3, r0
 8006dd6:	001a      	movs	r2, r3
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	189a      	adds	r2, r3, r2
 8006ddc:	4b25      	ldr	r3, [pc, #148]	; (8006e74 <Build_Message+0xd6c>)
 8006dde:	0010      	movs	r0, r2
 8006de0:	0019      	movs	r1, r3
 8006de2:	2302      	movs	r3, #2
 8006de4:	001a      	movs	r2, r3
 8006de6:	f00b f900 	bl	8011fea <memcpy>
 8006dea:	e028      	b.n	8006e3e <Build_Message+0xd36>
		} else if(InStr[tp] == 125) {   // Battery Spanning
 8006dec:	231f      	movs	r3, #31
 8006dee:	18fb      	adds	r3, r7, r3
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	18d3      	adds	r3, r2, r3
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	2b7d      	cmp	r3, #125	; 0x7d
 8006dfa:	d120      	bne.n	8006e3e <Build_Message+0xd36>
			strcat(mes, " ");
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	0018      	movs	r0, r3
 8006e00:	f7f9 f982 	bl	8000108 <strlen>
 8006e04:	0003      	movs	r3, r0
 8006e06:	001a      	movs	r2, r3
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	189a      	adds	r2, r3, r2
 8006e0c:	4b1a      	ldr	r3, [pc, #104]	; (8006e78 <Build_Message+0xd70>)
 8006e0e:	0010      	movs	r0, r2
 8006e10:	0019      	movs	r1, r3
 8006e12:	2302      	movs	r3, #2
 8006e14:	001a      	movs	r2, r3
 8006e16:	f00b f8e8 	bl	8011fea <memcpy>
			sprintf(tempstr, "%1.1fV", BatteryVoltage);
 8006e1a:	4b18      	ldr	r3, [pc, #96]	; (8006e7c <Build_Message+0xd74>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	1c18      	adds	r0, r3, #0
 8006e20:	f7fb fb12 	bl	8002448 <__aeabi_f2d>
 8006e24:	0002      	movs	r2, r0
 8006e26:	000b      	movs	r3, r1
 8006e28:	4915      	ldr	r1, [pc, #84]	; (8006e80 <Build_Message+0xd78>)
 8006e2a:	240c      	movs	r4, #12
 8006e2c:	1938      	adds	r0, r7, r4
 8006e2e:	f00b fe79 	bl	8012b24 <siprintf>
			strcat(mes, tempstr);
 8006e32:	193a      	adds	r2, r7, r4
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	0011      	movs	r1, r2
 8006e38:	0018      	movs	r0, r3
 8006e3a:	f00b fedf 	bl	8012bfc <strcat>
		}
		InStr++;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	3301      	adds	r3, #1
 8006e42:	607b      	str	r3, [r7, #4]
		tp++;
 8006e44:	211f      	movs	r1, #31
 8006e46:	187b      	adds	r3, r7, r1
 8006e48:	781a      	ldrb	r2, [r3, #0]
 8006e4a:	187b      	adds	r3, r7, r1
 8006e4c:	3201      	adds	r2, #1
 8006e4e:	701a      	strb	r2, [r3, #0]
		if(tp > 8) break;
 8006e50:	187b      	adds	r3, r7, r1
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	2b08      	cmp	r3, #8
 8006e56:	d806      	bhi.n	8006e66 <Build_Message+0xd5e>
	while(InStr[0] != 0) {
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d001      	beq.n	8006e64 <Build_Message+0xd5c>
 8006e60:	f7ff f960 	bl	8006124 <Build_Message+0x1c>
 8006e64:	e000      	b.n	8006e68 <Build_Message+0xd60>
		if(tp > 8) break;
 8006e66:	46c0      	nop			; (mov r8, r8)
	}
	return mes;
 8006e68:	683b      	ldr	r3, [r7, #0]
}
 8006e6a:	0018      	movs	r0, r3
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	b009      	add	sp, #36	; 0x24
 8006e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e72:	46c0      	nop			; (mov r8, r8)
 8006e74:	080169a8 	.word	0x080169a8
 8006e78:	08016764 	.word	0x08016764
 8006e7c:	20002470 	.word	0x20002470
 8006e80:	08016920 	.word	0x08016920

08006e84 <Get_SendFlags>:


unsigned char Get_SendFlags(unsigned char mespos)
{ unsigned char result;
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b086      	sub	sp, #24
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	0002      	movs	r2, r0
 8006e8c:	1dfb      	adds	r3, r7, #7
 8006e8e:	701a      	strb	r2, [r3, #0]
  unsigned char j;
  char tempbuf[9];

	result = 0;
 8006e90:	2317      	movs	r3, #23
 8006e92:	18fb      	adds	r3, r7, r3
 8006e94:	2200      	movs	r2, #0
 8006e96:	701a      	strb	r2, [r3, #0]
	strncpy(tempbuf, Read_Settings(mespos), 8);
 8006e98:	1dfb      	adds	r3, r7, #7
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	0018      	movs	r0, r3
 8006e9e:	f7fd f8d3 	bl	8004048 <Read_Settings>
 8006ea2:	0001      	movs	r1, r0
 8006ea4:	230c      	movs	r3, #12
 8006ea6:	18fb      	adds	r3, r7, r3
 8006ea8:	2208      	movs	r2, #8
 8006eaa:	0018      	movs	r0, r3
 8006eac:	f00b fedb 	bl	8012c66 <strncpy>
	for(j = 0; j < 8; j++) {
 8006eb0:	2316      	movs	r3, #22
 8006eb2:	18fb      	adds	r3, r7, r3
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	701a      	strb	r2, [r3, #0]
 8006eb8:	e02b      	b.n	8006f12 <Get_SendFlags+0x8e>
		if((tempbuf[j] == '0')||(tempbuf[j] == '1')) {
 8006eba:	2116      	movs	r1, #22
 8006ebc:	187b      	adds	r3, r7, r1
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	200c      	movs	r0, #12
 8006ec2:	183a      	adds	r2, r7, r0
 8006ec4:	5cd3      	ldrb	r3, [r2, r3]
 8006ec6:	2b30      	cmp	r3, #48	; 0x30
 8006ec8:	d005      	beq.n	8006ed6 <Get_SendFlags+0x52>
 8006eca:	187b      	adds	r3, r7, r1
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	183a      	adds	r2, r7, r0
 8006ed0:	5cd3      	ldrb	r3, [r2, r3]
 8006ed2:	2b31      	cmp	r3, #49	; 0x31
 8006ed4:	d11b      	bne.n	8006f0e <Get_SendFlags+0x8a>
			result <<= 1;
 8006ed6:	2117      	movs	r1, #23
 8006ed8:	187a      	adds	r2, r7, r1
 8006eda:	187b      	adds	r3, r7, r1
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	18db      	adds	r3, r3, r3
 8006ee0:	7013      	strb	r3, [r2, #0]
			result |= (tempbuf[j] - 0x30);
 8006ee2:	2016      	movs	r0, #22
 8006ee4:	183b      	adds	r3, r7, r0
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	220c      	movs	r2, #12
 8006eea:	18ba      	adds	r2, r7, r2
 8006eec:	5cd3      	ldrb	r3, [r2, r3]
 8006eee:	3b30      	subs	r3, #48	; 0x30
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	b25a      	sxtb	r2, r3
 8006ef4:	187b      	adds	r3, r7, r1
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	b25b      	sxtb	r3, r3
 8006efa:	4313      	orrs	r3, r2
 8006efc:	b25a      	sxtb	r2, r3
 8006efe:	187b      	adds	r3, r7, r1
 8006f00:	701a      	strb	r2, [r3, #0]
	for(j = 0; j < 8; j++) {
 8006f02:	183b      	adds	r3, r7, r0
 8006f04:	781a      	ldrb	r2, [r3, #0]
 8006f06:	183b      	adds	r3, r7, r0
 8006f08:	3201      	adds	r2, #1
 8006f0a:	701a      	strb	r2, [r3, #0]
 8006f0c:	e001      	b.n	8006f12 <Get_SendFlags+0x8e>
		} else {
			return(0xFF);
 8006f0e:	23ff      	movs	r3, #255	; 0xff
 8006f10:	e007      	b.n	8006f22 <Get_SendFlags+0x9e>
	for(j = 0; j < 8; j++) {
 8006f12:	2316      	movs	r3, #22
 8006f14:	18fb      	adds	r3, r7, r3
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	2b07      	cmp	r3, #7
 8006f1a:	d9ce      	bls.n	8006eba <Get_SendFlags+0x36>
		}
	}
	return(result);
 8006f1c:	2317      	movs	r3, #23
 8006f1e:	18fb      	adds	r3, r7, r3
 8006f20:	781b      	ldrb	r3, [r3, #0]
}
 8006f22:	0018      	movs	r0, r3
 8006f24:	46bd      	mov	sp, r7
 8006f26:	b006      	add	sp, #24
 8006f28:	bd80      	pop	{r7, pc}
	...

08006f2c <Add_Message_to_Que>:

void Add_Message_to_Que(char * in_mes, unsigned char Send_Only_To_Sender, unsigned char CellNumber, unsigned char Send_Only_GPRS, unsigned char reply_message_flag)
{ unsigned char temp;
 8006f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f2e:	b08b      	sub	sp, #44	; 0x2c
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	000c      	movs	r4, r1
 8006f36:	0010      	movs	r0, r2
 8006f38:	0019      	movs	r1, r3
 8006f3a:	1cfb      	adds	r3, r7, #3
 8006f3c:	1c22      	adds	r2, r4, #0
 8006f3e:	701a      	strb	r2, [r3, #0]
 8006f40:	1cbb      	adds	r3, r7, #2
 8006f42:	1c02      	adds	r2, r0, #0
 8006f44:	701a      	strb	r2, [r3, #0]
 8006f46:	1c7b      	adds	r3, r7, #1
 8006f48:	1c0a      	adds	r2, r1, #0
 8006f4a:	701a      	strb	r2, [r3, #0]
  unsigned char i = 0;
 8006f4c:	2326      	movs	r3, #38	; 0x26
 8006f4e:	18fb      	adds	r3, r7, r3
 8006f50:	2200      	movs	r2, #0
 8006f52:	701a      	strb	r2, [r3, #0]
  unsigned char found = 0;
 8006f54:	2322      	movs	r3, #34	; 0x22
 8006f56:	18fb      	adds	r3, r7, r3
 8006f58:	2200      	movs	r2, #0
 8006f5a:	701a      	strb	r2, [r3, #0]
  unsigned char tpos;
  unsigned char cellnumber = 0;
 8006f5c:	2524      	movs	r5, #36	; 0x24
 8006f5e:	197b      	adds	r3, r7, r5
 8006f60:	2200      	movs	r2, #0
 8006f62:	701a      	strb	r2, [r3, #0]
  unsigned char byte1 = 0;
 8006f64:	2421      	movs	r4, #33	; 0x21
 8006f66:	193b      	adds	r3, r7, r4
 8006f68:	2200      	movs	r2, #0
 8006f6a:	701a      	strb	r2, [r3, #0]
  unsigned char Send_Flags = 0;
 8006f6c:	2323      	movs	r3, #35	; 0x23
 8006f6e:	18fb      	adds	r3, r7, r3
 8006f70:	2200      	movs	r2, #0
 8006f72:	701a      	strb	r2, [r3, #0]
  unsigned char tempstr[20] = {0};
 8006f74:	230c      	movs	r3, #12
 8006f76:	18fb      	adds	r3, r7, r3
 8006f78:	2200      	movs	r2, #0
 8006f7a:	601a      	str	r2, [r3, #0]
 8006f7c:	3304      	adds	r3, #4
 8006f7e:	2210      	movs	r2, #16
 8006f80:	2100      	movs	r1, #0
 8006f82:	0018      	movs	r0, r3
 8006f84:	f00b f83a 	bl	8011ffc <memset>
    temp = 0;
 8006f88:	2627      	movs	r6, #39	; 0x27
 8006f8a:	19bb      	adds	r3, r7, r6
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	701a      	strb	r2, [r3, #0]
    cellnumber = CellNumber;
 8006f90:	197b      	adds	r3, r7, r5
 8006f92:	1cba      	adds	r2, r7, #2
 8006f94:	7812      	ldrb	r2, [r2, #0]
 8006f96:	701a      	strb	r2, [r3, #0]
    byte1 = in_mes[0];
 8006f98:	193b      	adds	r3, r7, r4
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	7812      	ldrb	r2, [r2, #0]
 8006f9e:	701a      	strb	r2, [r3, #0]
    if(byte1 < EE_END) {		// checked
 8006fa0:	193b      	adds	r3, r7, r4
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	2b5d      	cmp	r3, #93	; 0x5d
 8006fa6:	d80b      	bhi.n	8006fc0 <Add_Message_to_Que+0x94>
    	if(strlen(Read_Settings(byte1)) == 0) {
 8006fa8:	193b      	adds	r3, r7, r4
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	0018      	movs	r0, r3
 8006fae:	f7fd f84b 	bl	8004048 <Read_Settings>
 8006fb2:	0003      	movs	r3, r0
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d102      	bne.n	8006fc0 <Add_Message_to_Que+0x94>
	    	temp = 30;  // exit proc
 8006fba:	19bb      	adds	r3, r7, r6
 8006fbc:	221e      	movs	r2, #30
 8006fbe:	701a      	strb	r2, [r3, #0]
		}
    }

    __HAL_DBGMCU_FREEZE_IWDG();
 8006fc0:	4bc1      	ldr	r3, [pc, #772]	; (80072c8 <Add_Message_to_Que+0x39c>)
 8006fc2:	689a      	ldr	r2, [r3, #8]
 8006fc4:	4bc0      	ldr	r3, [pc, #768]	; (80072c8 <Add_Message_to_Que+0x39c>)
 8006fc6:	2180      	movs	r1, #128	; 0x80
 8006fc8:	0149      	lsls	r1, r1, #5
 8006fca:	430a      	orrs	r2, r1
 8006fcc:	609a      	str	r2, [r3, #8]

    if(Send_Only_To_Sender == 1) {
 8006fce:	1cfb      	adds	r3, r7, #3
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d158      	bne.n	8007088 <Add_Message_to_Que+0x15c>
    	Send_Flags = 1;
 8006fd6:	2323      	movs	r3, #35	; 0x23
 8006fd8:	18fb      	adds	r3, r7, r3
 8006fda:	2201      	movs	r2, #1
 8006fdc:	701a      	strb	r2, [r3, #0]
	    if(CellNumber == 0) {
 8006fde:	1cbb      	adds	r3, r7, #2
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d104      	bne.n	8006ff0 <Add_Message_to_Que+0xc4>
		    temp = 30;
 8006fe6:	2327      	movs	r3, #39	; 0x27
 8006fe8:	18fb      	adds	r3, r7, r3
 8006fea:	221e      	movs	r2, #30
 8006fec:	701a      	strb	r2, [r3, #0]
 8006fee:	e00c      	b.n	800700a <Add_Message_to_Que+0xde>
		} else if(strlen(Read_Settings(CellNumber)) == 0) {
 8006ff0:	1cbb      	adds	r3, r7, #2
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	0018      	movs	r0, r3
 8006ff6:	f7fd f827 	bl	8004048 <Read_Settings>
 8006ffa:	0003      	movs	r3, r0
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d103      	bne.n	800700a <Add_Message_to_Que+0xde>
			temp = 30;
 8007002:	2327      	movs	r3, #39	; 0x27
 8007004:	18fb      	adds	r3, r7, r3
 8007006:	221e      	movs	r2, #30
 8007008:	701a      	strb	r2, [r3, #0]
		}
    	strcpy(tempstr, Read_Settings(CellNumber));
 800700a:	1cbb      	adds	r3, r7, #2
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	0018      	movs	r0, r3
 8007010:	f7fd f81a 	bl	8004048 <Read_Settings>
 8007014:	0002      	movs	r2, r0
 8007016:	230c      	movs	r3, #12
 8007018:	18fb      	adds	r3, r7, r3
 800701a:	0011      	movs	r1, r2
 800701c:	0018      	movs	r0, r3
 800701e:	f00b fe08 	bl	8012c32 <strcpy>
		for(i = 0; i < 6; i++) {
 8007022:	2326      	movs	r3, #38	; 0x26
 8007024:	18fb      	adds	r3, r7, r3
 8007026:	2200      	movs	r2, #0
 8007028:	701a      	strb	r2, [r3, #0]
 800702a:	e027      	b.n	800707c <Add_Message_to_Que+0x150>
			if(strstr(Read_Settings(EE_SMS_CELL1 + i), &tempstr[3]) != NULL) {
 800702c:	2426      	movs	r4, #38	; 0x26
 800702e:	193b      	adds	r3, r7, r4
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	3314      	adds	r3, #20
 8007034:	0018      	movs	r0, r3
 8007036:	f7fd f807 	bl	8004048 <Read_Settings>
 800703a:	0002      	movs	r2, r0
 800703c:	230c      	movs	r3, #12
 800703e:	18fb      	adds	r3, r7, r3
 8007040:	3303      	adds	r3, #3
 8007042:	0019      	movs	r1, r3
 8007044:	0010      	movs	r0, r2
 8007046:	f00b fe22 	bl	8012c8e <strstr>
 800704a:	1e03      	subs	r3, r0, #0
 800704c:	d010      	beq.n	8007070 <Add_Message_to_Que+0x144>
				cellnumber = 0;
 800704e:	2324      	movs	r3, #36	; 0x24
 8007050:	18fb      	adds	r3, r7, r3
 8007052:	2200      	movs	r2, #0
 8007054:	701a      	strb	r2, [r3, #0]
				Send_Flags = 0x80;
 8007056:	2123      	movs	r1, #35	; 0x23
 8007058:	187b      	adds	r3, r7, r1
 800705a:	2280      	movs	r2, #128	; 0x80
 800705c:	701a      	strb	r2, [r3, #0]
				Send_Flags >>= (i+1);
 800705e:	187b      	adds	r3, r7, r1
 8007060:	781a      	ldrb	r2, [r3, #0]
 8007062:	193b      	adds	r3, r7, r4
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	3301      	adds	r3, #1
 8007068:	411a      	asrs	r2, r3
 800706a:	187b      	adds	r3, r7, r1
 800706c:	701a      	strb	r2, [r3, #0]
				break;
 800706e:	e065      	b.n	800713c <Add_Message_to_Que+0x210>
		for(i = 0; i < 6; i++) {
 8007070:	2126      	movs	r1, #38	; 0x26
 8007072:	187b      	adds	r3, r7, r1
 8007074:	781a      	ldrb	r2, [r3, #0]
 8007076:	187b      	adds	r3, r7, r1
 8007078:	3201      	adds	r2, #1
 800707a:	701a      	strb	r2, [r3, #0]
 800707c:	2326      	movs	r3, #38	; 0x26
 800707e:	18fb      	adds	r3, r7, r3
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	2b05      	cmp	r3, #5
 8007084:	d9d2      	bls.n	800702c <Add_Message_to_Que+0x100>
 8007086:	e059      	b.n	800713c <Add_Message_to_Que+0x210>
			}
		}
	} else {
		if(in_mes[0] == AIRTIME) {
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	2b6c      	cmp	r3, #108	; 0x6c
 800708e:	d107      	bne.n	80070a0 <Add_Message_to_Que+0x174>
			Send_Flags = Get_SendFlags(EE_HEALTH_TEST_PREPAID_MESSAGE);
 8007090:	2323      	movs	r3, #35	; 0x23
 8007092:	18fc      	adds	r4, r7, r3
 8007094:	200f      	movs	r0, #15
 8007096:	f7ff fef5 	bl	8006e84 <Get_SendFlags>
 800709a:	0003      	movs	r3, r0
 800709c:	7023      	strb	r3, [r4, #0]
 800709e:	e04d      	b.n	800713c <Add_Message_to_Que+0x210>
		} else {
			Send_Flags = Get_SendFlags(in_mes[0]);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	2223      	movs	r2, #35	; 0x23
 80070a6:	18bc      	adds	r4, r7, r2
 80070a8:	0018      	movs	r0, r3
 80070aa:	f7ff feeb 	bl	8006e84 <Get_SendFlags>
 80070ae:	0003      	movs	r3, r0
 80070b0:	7023      	strb	r3, [r4, #0]
			strcpy(tempstr, Read_Settings(CellNumber));
 80070b2:	1cbb      	adds	r3, r7, #2
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	0018      	movs	r0, r3
 80070b8:	f7fc ffc6 	bl	8004048 <Read_Settings>
 80070bc:	0002      	movs	r2, r0
 80070be:	230c      	movs	r3, #12
 80070c0:	18fb      	adds	r3, r7, r3
 80070c2:	0011      	movs	r1, r2
 80070c4:	0018      	movs	r0, r3
 80070c6:	f00b fdb4 	bl	8012c32 <strcpy>
			for(i = 0; i < 6; i++) {
 80070ca:	2326      	movs	r3, #38	; 0x26
 80070cc:	18fb      	adds	r3, r7, r3
 80070ce:	2200      	movs	r2, #0
 80070d0:	701a      	strb	r2, [r3, #0]
 80070d2:	e021      	b.n	8007118 <Add_Message_to_Que+0x1ec>
				if(strstr(Read_Settings(EE_SMS_CELL1 + i), &tempstr[3]) != NULL) {
 80070d4:	2326      	movs	r3, #38	; 0x26
 80070d6:	18fb      	adds	r3, r7, r3
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	3314      	adds	r3, #20
 80070dc:	0018      	movs	r0, r3
 80070de:	f7fc ffb3 	bl	8004048 <Read_Settings>
 80070e2:	0002      	movs	r2, r0
 80070e4:	230c      	movs	r3, #12
 80070e6:	18fb      	adds	r3, r7, r3
 80070e8:	3303      	adds	r3, #3
 80070ea:	0019      	movs	r1, r3
 80070ec:	0010      	movs	r0, r2
 80070ee:	f00b fdce 	bl	8012c8e <strstr>
 80070f2:	1e03      	subs	r3, r0, #0
 80070f4:	d00a      	beq.n	800710c <Add_Message_to_Que+0x1e0>
					//found = 1;
					HAL_GPIO_TogglePin(GSM_PWR_GPIO_Port, GSM_PWR_Pin);
 80070f6:	2390      	movs	r3, #144	; 0x90
 80070f8:	05db      	lsls	r3, r3, #23
 80070fa:	2110      	movs	r1, #16
 80070fc:	0018      	movs	r0, r3
 80070fe:	f003 fee9 	bl	800aed4 <HAL_GPIO_TogglePin>
					cellnumber = 0;
 8007102:	2324      	movs	r3, #36	; 0x24
 8007104:	18fb      	adds	r3, r7, r3
 8007106:	2200      	movs	r2, #0
 8007108:	701a      	strb	r2, [r3, #0]
					break;
 800710a:	e00a      	b.n	8007122 <Add_Message_to_Que+0x1f6>
			for(i = 0; i < 6; i++) {
 800710c:	2126      	movs	r1, #38	; 0x26
 800710e:	187b      	adds	r3, r7, r1
 8007110:	781a      	ldrb	r2, [r3, #0]
 8007112:	187b      	adds	r3, r7, r1
 8007114:	3201      	adds	r2, #1
 8007116:	701a      	strb	r2, [r3, #0]
 8007118:	2326      	movs	r3, #38	; 0x26
 800711a:	18fb      	adds	r3, r7, r3
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	2b05      	cmp	r3, #5
 8007120:	d9d8      	bls.n	80070d4 <Add_Message_to_Que+0x1a8>
				}
			}
			if(found == 0) {
 8007122:	2322      	movs	r3, #34	; 0x22
 8007124:	18fb      	adds	r3, r7, r3
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d107      	bne.n	800713c <Add_Message_to_Que+0x210>
				Send_Flags = Send_Flags | 0x80;//if cannot find a stored number, sends to base
 800712c:	2223      	movs	r2, #35	; 0x23
 800712e:	18bb      	adds	r3, r7, r2
 8007130:	18ba      	adds	r2, r7, r2
 8007132:	7812      	ldrb	r2, [r2, #0]
 8007134:	2180      	movs	r1, #128	; 0x80
 8007136:	4249      	negs	r1, r1
 8007138:	430a      	orrs	r2, r1
 800713a:	701a      	strb	r2, [r3, #0]

		}

	}

    if(temp == 0) {
 800713c:	2327      	movs	r3, #39	; 0x27
 800713e:	18fb      	adds	r3, r7, r3
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d000      	beq.n	8007148 <Add_Message_to_Que+0x21c>
 8007146:	e130      	b.n	80073aa <Add_Message_to_Que+0x47e>
    	MesQue_Head++;
 8007148:	4b60      	ldr	r3, [pc, #384]	; (80072cc <Add_Message_to_Que+0x3a0>)
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	3301      	adds	r3, #1
 800714e:	b2da      	uxtb	r2, r3
 8007150:	4b5e      	ldr	r3, [pc, #376]	; (80072cc <Add_Message_to_Que+0x3a0>)
 8007152:	701a      	strb	r2, [r3, #0]
		tpos = MesQue_Head;
 8007154:	2125      	movs	r1, #37	; 0x25
 8007156:	187b      	adds	r3, r7, r1
 8007158:	4a5c      	ldr	r2, [pc, #368]	; (80072cc <Add_Message_to_Que+0x3a0>)
 800715a:	7812      	ldrb	r2, [r2, #0]
 800715c:	701a      	strb	r2, [r3, #0]
		if(tpos > 24) {
 800715e:	000a      	movs	r2, r1
 8007160:	18bb      	adds	r3, r7, r2
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	2b18      	cmp	r3, #24
 8007166:	d800      	bhi.n	800716a <Add_Message_to_Que+0x23e>
 8007168:	e11f      	b.n	80073aa <Add_Message_to_Que+0x47e>
       		tpos = 0;
 800716a:	18bb      	adds	r3, r7, r2
 800716c:	2200      	movs	r2, #0
 800716e:	701a      	strb	r2, [r3, #0]
    	}
	}

	while(temp < 25) {
 8007170:	e11b      	b.n	80073aa <Add_Message_to_Que+0x47e>
		if(MessageLog[tpos].Message[0] == 0) {
 8007172:	2025      	movs	r0, #37	; 0x25
 8007174:	183b      	adds	r3, r7, r0
 8007176:	781a      	ldrb	r2, [r3, #0]
 8007178:	4955      	ldr	r1, [pc, #340]	; (80072d0 <Add_Message_to_Que+0x3a4>)
 800717a:	0013      	movs	r3, r2
 800717c:	011b      	lsls	r3, r3, #4
 800717e:	1a9b      	subs	r3, r3, r2
 8007180:	5c5b      	ldrb	r3, [r3, r1]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d149      	bne.n	800721a <Add_Message_to_Que+0x2ee>
			MessageLog[tpos].Retries = 0;
 8007186:	183b      	adds	r3, r7, r0
 8007188:	781a      	ldrb	r2, [r3, #0]
 800718a:	4951      	ldr	r1, [pc, #324]	; (80072d0 <Add_Message_to_Que+0x3a4>)
 800718c:	0013      	movs	r3, r2
 800718e:	011b      	lsls	r3, r3, #4
 8007190:	1a9b      	subs	r3, r3, r2
 8007192:	18cb      	adds	r3, r1, r3
 8007194:	330c      	adds	r3, #12
 8007196:	2200      	movs	r2, #0
 8007198:	701a      	strb	r2, [r3, #0]
			MessageLog[tpos].Send = FALSE;
 800719a:	183b      	adds	r3, r7, r0
 800719c:	781a      	ldrb	r2, [r3, #0]
 800719e:	494c      	ldr	r1, [pc, #304]	; (80072d0 <Add_Message_to_Que+0x3a4>)
 80071a0:	0013      	movs	r3, r2
 80071a2:	011b      	lsls	r3, r3, #4
 80071a4:	1a9b      	subs	r3, r3, r2
 80071a6:	18cb      	adds	r3, r1, r3
 80071a8:	330b      	adds	r3, #11
 80071aa:	2200      	movs	r2, #0
 80071ac:	701a      	strb	r2, [r3, #0]
			strcpy(MessageLog[tpos].Message, in_mes);
 80071ae:	0004      	movs	r4, r0
 80071b0:	183b      	adds	r3, r7, r0
 80071b2:	781a      	ldrb	r2, [r3, #0]
 80071b4:	0013      	movs	r3, r2
 80071b6:	011b      	lsls	r3, r3, #4
 80071b8:	1a9b      	subs	r3, r3, r2
 80071ba:	4a45      	ldr	r2, [pc, #276]	; (80072d0 <Add_Message_to_Que+0x3a4>)
 80071bc:	189b      	adds	r3, r3, r2
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	0011      	movs	r1, r2
 80071c2:	0018      	movs	r0, r3
 80071c4:	f00b fd35 	bl	8012c32 <strcpy>
			MessageLog[tpos].Send_Flags = Send_Flags;
 80071c8:	0020      	movs	r0, r4
 80071ca:	183b      	adds	r3, r7, r0
 80071cc:	781a      	ldrb	r2, [r3, #0]
 80071ce:	4940      	ldr	r1, [pc, #256]	; (80072d0 <Add_Message_to_Que+0x3a4>)
 80071d0:	0013      	movs	r3, r2
 80071d2:	011b      	lsls	r3, r3, #4
 80071d4:	1a9b      	subs	r3, r3, r2
 80071d6:	18cb      	adds	r3, r1, r3
 80071d8:	330d      	adds	r3, #13
 80071da:	2223      	movs	r2, #35	; 0x23
 80071dc:	18ba      	adds	r2, r7, r2
 80071de:	7812      	ldrb	r2, [r2, #0]
 80071e0:	701a      	strb	r2, [r3, #0]
			MessageLog[tpos].Send_Only_GPRS = Send_Only_GPRS;
 80071e2:	183b      	adds	r3, r7, r0
 80071e4:	781a      	ldrb	r2, [r3, #0]
 80071e6:	493a      	ldr	r1, [pc, #232]	; (80072d0 <Add_Message_to_Que+0x3a4>)
 80071e8:	0013      	movs	r3, r2
 80071ea:	011b      	lsls	r3, r3, #4
 80071ec:	1a9b      	subs	r3, r3, r2
 80071ee:	18cb      	adds	r3, r1, r3
 80071f0:	330e      	adds	r3, #14
 80071f2:	1c7a      	adds	r2, r7, #1
 80071f4:	7812      	ldrb	r2, [r2, #0]
 80071f6:	701a      	strb	r2, [r3, #0]
			MessageLog[tpos].Cellnumber = cellnumber;
 80071f8:	183b      	adds	r3, r7, r0
 80071fa:	781a      	ldrb	r2, [r3, #0]
 80071fc:	4934      	ldr	r1, [pc, #208]	; (80072d0 <Add_Message_to_Que+0x3a4>)
 80071fe:	0013      	movs	r3, r2
 8007200:	011b      	lsls	r3, r3, #4
 8007202:	1a9b      	subs	r3, r3, r2
 8007204:	18cb      	adds	r3, r1, r3
 8007206:	330a      	adds	r3, #10
 8007208:	2224      	movs	r2, #36	; 0x24
 800720a:	18ba      	adds	r2, r7, r2
 800720c:	7812      	ldrb	r2, [r2, #0]
 800720e:	701a      	strb	r2, [r3, #0]
			MesQue_Head = tpos;
 8007210:	4b2e      	ldr	r3, [pc, #184]	; (80072cc <Add_Message_to_Que+0x3a0>)
 8007212:	183a      	adds	r2, r7, r0
 8007214:	7812      	ldrb	r2, [r2, #0]
 8007216:	701a      	strb	r2, [r3, #0]
			break;
 8007218:	e0cd      	b.n	80073b6 <Add_Message_to_Que+0x48a>
		} else if(MessageLog[tpos].Send == TRUE) {
 800721a:	2025      	movs	r0, #37	; 0x25
 800721c:	183b      	adds	r3, r7, r0
 800721e:	781a      	ldrb	r2, [r3, #0]
 8007220:	492b      	ldr	r1, [pc, #172]	; (80072d0 <Add_Message_to_Que+0x3a4>)
 8007222:	0013      	movs	r3, r2
 8007224:	011b      	lsls	r3, r3, #4
 8007226:	1a9b      	subs	r3, r3, r2
 8007228:	18cb      	adds	r3, r1, r3
 800722a:	330b      	adds	r3, #11
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	2b01      	cmp	r3, #1
 8007230:	d150      	bne.n	80072d4 <Add_Message_to_Que+0x3a8>
            MessageLog[tpos].Retries = 0;
 8007232:	183b      	adds	r3, r7, r0
 8007234:	781a      	ldrb	r2, [r3, #0]
 8007236:	4926      	ldr	r1, [pc, #152]	; (80072d0 <Add_Message_to_Que+0x3a4>)
 8007238:	0013      	movs	r3, r2
 800723a:	011b      	lsls	r3, r3, #4
 800723c:	1a9b      	subs	r3, r3, r2
 800723e:	18cb      	adds	r3, r1, r3
 8007240:	330c      	adds	r3, #12
 8007242:	2200      	movs	r2, #0
 8007244:	701a      	strb	r2, [r3, #0]
			MessageLog[tpos].Send = FALSE;
 8007246:	183b      	adds	r3, r7, r0
 8007248:	781a      	ldrb	r2, [r3, #0]
 800724a:	4921      	ldr	r1, [pc, #132]	; (80072d0 <Add_Message_to_Que+0x3a4>)
 800724c:	0013      	movs	r3, r2
 800724e:	011b      	lsls	r3, r3, #4
 8007250:	1a9b      	subs	r3, r3, r2
 8007252:	18cb      	adds	r3, r1, r3
 8007254:	330b      	adds	r3, #11
 8007256:	2200      	movs	r2, #0
 8007258:	701a      	strb	r2, [r3, #0]
			strcpy(MessageLog[tpos].Message, in_mes);
 800725a:	0004      	movs	r4, r0
 800725c:	183b      	adds	r3, r7, r0
 800725e:	781a      	ldrb	r2, [r3, #0]
 8007260:	0013      	movs	r3, r2
 8007262:	011b      	lsls	r3, r3, #4
 8007264:	1a9b      	subs	r3, r3, r2
 8007266:	4a1a      	ldr	r2, [pc, #104]	; (80072d0 <Add_Message_to_Que+0x3a4>)
 8007268:	189b      	adds	r3, r3, r2
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	0011      	movs	r1, r2
 800726e:	0018      	movs	r0, r3
 8007270:	f00b fcdf 	bl	8012c32 <strcpy>
			MessageLog[tpos].Send_Flags = Send_Flags;
 8007274:	0020      	movs	r0, r4
 8007276:	183b      	adds	r3, r7, r0
 8007278:	781a      	ldrb	r2, [r3, #0]
 800727a:	4915      	ldr	r1, [pc, #84]	; (80072d0 <Add_Message_to_Que+0x3a4>)
 800727c:	0013      	movs	r3, r2
 800727e:	011b      	lsls	r3, r3, #4
 8007280:	1a9b      	subs	r3, r3, r2
 8007282:	18cb      	adds	r3, r1, r3
 8007284:	330d      	adds	r3, #13
 8007286:	2223      	movs	r2, #35	; 0x23
 8007288:	18ba      	adds	r2, r7, r2
 800728a:	7812      	ldrb	r2, [r2, #0]
 800728c:	701a      	strb	r2, [r3, #0]
			MessageLog[tpos].Send_Only_GPRS = Send_Only_GPRS;
 800728e:	183b      	adds	r3, r7, r0
 8007290:	781a      	ldrb	r2, [r3, #0]
 8007292:	490f      	ldr	r1, [pc, #60]	; (80072d0 <Add_Message_to_Que+0x3a4>)
 8007294:	0013      	movs	r3, r2
 8007296:	011b      	lsls	r3, r3, #4
 8007298:	1a9b      	subs	r3, r3, r2
 800729a:	18cb      	adds	r3, r1, r3
 800729c:	330e      	adds	r3, #14
 800729e:	1c7a      	adds	r2, r7, #1
 80072a0:	7812      	ldrb	r2, [r2, #0]
 80072a2:	701a      	strb	r2, [r3, #0]
			MessageLog[tpos].Cellnumber = cellnumber;
 80072a4:	183b      	adds	r3, r7, r0
 80072a6:	781a      	ldrb	r2, [r3, #0]
 80072a8:	4909      	ldr	r1, [pc, #36]	; (80072d0 <Add_Message_to_Que+0x3a4>)
 80072aa:	0013      	movs	r3, r2
 80072ac:	011b      	lsls	r3, r3, #4
 80072ae:	1a9b      	subs	r3, r3, r2
 80072b0:	18cb      	adds	r3, r1, r3
 80072b2:	330a      	adds	r3, #10
 80072b4:	2224      	movs	r2, #36	; 0x24
 80072b6:	18ba      	adds	r2, r7, r2
 80072b8:	7812      	ldrb	r2, [r2, #0]
 80072ba:	701a      	strb	r2, [r3, #0]
			MesQue_Head = tpos;
 80072bc:	4b03      	ldr	r3, [pc, #12]	; (80072cc <Add_Message_to_Que+0x3a0>)
 80072be:	183a      	adds	r2, r7, r0
 80072c0:	7812      	ldrb	r2, [r2, #0]
 80072c2:	701a      	strb	r2, [r3, #0]
			break;
 80072c4:	e077      	b.n	80073b6 <Add_Message_to_Que+0x48a>
 80072c6:	46c0      	nop			; (mov r8, r8)
 80072c8:	40015800 	.word	0x40015800
 80072cc:	200016bc 	.word	0x200016bc
 80072d0:	200020cc 	.word	0x200020cc
        } else if(MessageLog[tpos].Retries > MAX_GSM_MESSAGE_RETRIES) {
 80072d4:	2025      	movs	r0, #37	; 0x25
 80072d6:	183b      	adds	r3, r7, r0
 80072d8:	781a      	ldrb	r2, [r3, #0]
 80072da:	4969      	ldr	r1, [pc, #420]	; (8007480 <Add_Message_to_Que+0x554>)
 80072dc:	0013      	movs	r3, r2
 80072de:	011b      	lsls	r3, r3, #4
 80072e0:	1a9b      	subs	r3, r3, r2
 80072e2:	18cb      	adds	r3, r1, r3
 80072e4:	330c      	adds	r3, #12
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	2b06      	cmp	r3, #6
 80072ea:	d949      	bls.n	8007380 <Add_Message_to_Que+0x454>
            MessageLog[tpos].Retries = 0;
 80072ec:	183b      	adds	r3, r7, r0
 80072ee:	781a      	ldrb	r2, [r3, #0]
 80072f0:	4963      	ldr	r1, [pc, #396]	; (8007480 <Add_Message_to_Que+0x554>)
 80072f2:	0013      	movs	r3, r2
 80072f4:	011b      	lsls	r3, r3, #4
 80072f6:	1a9b      	subs	r3, r3, r2
 80072f8:	18cb      	adds	r3, r1, r3
 80072fa:	330c      	adds	r3, #12
 80072fc:	2200      	movs	r2, #0
 80072fe:	701a      	strb	r2, [r3, #0]
			MessageLog[tpos].Send = FALSE;
 8007300:	183b      	adds	r3, r7, r0
 8007302:	781a      	ldrb	r2, [r3, #0]
 8007304:	495e      	ldr	r1, [pc, #376]	; (8007480 <Add_Message_to_Que+0x554>)
 8007306:	0013      	movs	r3, r2
 8007308:	011b      	lsls	r3, r3, #4
 800730a:	1a9b      	subs	r3, r3, r2
 800730c:	18cb      	adds	r3, r1, r3
 800730e:	330b      	adds	r3, #11
 8007310:	2200      	movs	r2, #0
 8007312:	701a      	strb	r2, [r3, #0]
			strcpy(MessageLog[tpos].Message, in_mes);
 8007314:	0004      	movs	r4, r0
 8007316:	183b      	adds	r3, r7, r0
 8007318:	781a      	ldrb	r2, [r3, #0]
 800731a:	0013      	movs	r3, r2
 800731c:	011b      	lsls	r3, r3, #4
 800731e:	1a9b      	subs	r3, r3, r2
 8007320:	4a57      	ldr	r2, [pc, #348]	; (8007480 <Add_Message_to_Que+0x554>)
 8007322:	189b      	adds	r3, r3, r2
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	0011      	movs	r1, r2
 8007328:	0018      	movs	r0, r3
 800732a:	f00b fc82 	bl	8012c32 <strcpy>
			MessageLog[tpos].Send_Flags = Send_Flags;
 800732e:	0020      	movs	r0, r4
 8007330:	183b      	adds	r3, r7, r0
 8007332:	781a      	ldrb	r2, [r3, #0]
 8007334:	4952      	ldr	r1, [pc, #328]	; (8007480 <Add_Message_to_Que+0x554>)
 8007336:	0013      	movs	r3, r2
 8007338:	011b      	lsls	r3, r3, #4
 800733a:	1a9b      	subs	r3, r3, r2
 800733c:	18cb      	adds	r3, r1, r3
 800733e:	330d      	adds	r3, #13
 8007340:	2223      	movs	r2, #35	; 0x23
 8007342:	18ba      	adds	r2, r7, r2
 8007344:	7812      	ldrb	r2, [r2, #0]
 8007346:	701a      	strb	r2, [r3, #0]
			MessageLog[tpos].Send_Only_GPRS = Send_Only_GPRS;
 8007348:	183b      	adds	r3, r7, r0
 800734a:	781a      	ldrb	r2, [r3, #0]
 800734c:	494c      	ldr	r1, [pc, #304]	; (8007480 <Add_Message_to_Que+0x554>)
 800734e:	0013      	movs	r3, r2
 8007350:	011b      	lsls	r3, r3, #4
 8007352:	1a9b      	subs	r3, r3, r2
 8007354:	18cb      	adds	r3, r1, r3
 8007356:	330e      	adds	r3, #14
 8007358:	1c7a      	adds	r2, r7, #1
 800735a:	7812      	ldrb	r2, [r2, #0]
 800735c:	701a      	strb	r2, [r3, #0]
			MessageLog[tpos].Cellnumber = cellnumber;
 800735e:	183b      	adds	r3, r7, r0
 8007360:	781a      	ldrb	r2, [r3, #0]
 8007362:	4947      	ldr	r1, [pc, #284]	; (8007480 <Add_Message_to_Que+0x554>)
 8007364:	0013      	movs	r3, r2
 8007366:	011b      	lsls	r3, r3, #4
 8007368:	1a9b      	subs	r3, r3, r2
 800736a:	18cb      	adds	r3, r1, r3
 800736c:	330a      	adds	r3, #10
 800736e:	2224      	movs	r2, #36	; 0x24
 8007370:	18ba      	adds	r2, r7, r2
 8007372:	7812      	ldrb	r2, [r2, #0]
 8007374:	701a      	strb	r2, [r3, #0]
			MesQue_Head = tpos;
 8007376:	4b43      	ldr	r3, [pc, #268]	; (8007484 <Add_Message_to_Que+0x558>)
 8007378:	183a      	adds	r2, r7, r0
 800737a:	7812      	ldrb	r2, [r2, #0]
 800737c:	701a      	strb	r2, [r3, #0]
			break;
 800737e:	e01a      	b.n	80073b6 <Add_Message_to_Que+0x48a>
        }
        if(tpos > 23) {
 8007380:	2225      	movs	r2, #37	; 0x25
 8007382:	18bb      	adds	r3, r7, r2
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	2b17      	cmp	r3, #23
 8007388:	d903      	bls.n	8007392 <Add_Message_to_Que+0x466>
       		tpos = 0;
 800738a:	18bb      	adds	r3, r7, r2
 800738c:	2200      	movs	r2, #0
 800738e:	701a      	strb	r2, [r3, #0]
 8007390:	e005      	b.n	800739e <Add_Message_to_Que+0x472>
    	} else tpos++;
 8007392:	2125      	movs	r1, #37	; 0x25
 8007394:	187b      	adds	r3, r7, r1
 8007396:	781a      	ldrb	r2, [r3, #0]
 8007398:	187b      	adds	r3, r7, r1
 800739a:	3201      	adds	r2, #1
 800739c:	701a      	strb	r2, [r3, #0]
	    temp++;
 800739e:	2127      	movs	r1, #39	; 0x27
 80073a0:	187b      	adds	r3, r7, r1
 80073a2:	781a      	ldrb	r2, [r3, #0]
 80073a4:	187b      	adds	r3, r7, r1
 80073a6:	3201      	adds	r2, #1
 80073a8:	701a      	strb	r2, [r3, #0]
	while(temp < 25) {
 80073aa:	2327      	movs	r3, #39	; 0x27
 80073ac:	18fb      	adds	r3, r7, r3
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	2b18      	cmp	r3, #24
 80073b2:	d800      	bhi.n	80073b6 <Add_Message_to_Que+0x48a>
 80073b4:	e6dd      	b.n	8007172 <Add_Message_to_Que+0x246>
    }
	if((temp > 24)&&(temp != 30)) {
 80073b6:	2227      	movs	r2, #39	; 0x27
 80073b8:	18bb      	adds	r3, r7, r2
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	2b18      	cmp	r3, #24
 80073be:	d95a      	bls.n	8007476 <Add_Message_to_Que+0x54a>
 80073c0:	18bb      	adds	r3, r7, r2
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	2b1e      	cmp	r3, #30
 80073c6:	d056      	beq.n	8007476 <Add_Message_to_Que+0x54a>
        tpos = MesQue_Head;
 80073c8:	2125      	movs	r1, #37	; 0x25
 80073ca:	187b      	adds	r3, r7, r1
 80073cc:	4a2d      	ldr	r2, [pc, #180]	; (8007484 <Add_Message_to_Que+0x558>)
 80073ce:	7812      	ldrb	r2, [r2, #0]
 80073d0:	701a      	strb	r2, [r3, #0]
		if(tpos > 24) {
 80073d2:	000a      	movs	r2, r1
 80073d4:	18bb      	adds	r3, r7, r2
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	2b18      	cmp	r3, #24
 80073da:	d902      	bls.n	80073e2 <Add_Message_to_Que+0x4b6>
       		tpos = 0;
 80073dc:	18bb      	adds	r3, r7, r2
 80073de:	2200      	movs	r2, #0
 80073e0:	701a      	strb	r2, [r3, #0]
    	}
		MessageLog[tpos].Retries = 0;
 80073e2:	2025      	movs	r0, #37	; 0x25
 80073e4:	183b      	adds	r3, r7, r0
 80073e6:	781a      	ldrb	r2, [r3, #0]
 80073e8:	4925      	ldr	r1, [pc, #148]	; (8007480 <Add_Message_to_Que+0x554>)
 80073ea:	0013      	movs	r3, r2
 80073ec:	011b      	lsls	r3, r3, #4
 80073ee:	1a9b      	subs	r3, r3, r2
 80073f0:	18cb      	adds	r3, r1, r3
 80073f2:	330c      	adds	r3, #12
 80073f4:	2200      	movs	r2, #0
 80073f6:	701a      	strb	r2, [r3, #0]
		MessageLog[tpos].Send = FALSE;
 80073f8:	183b      	adds	r3, r7, r0
 80073fa:	781a      	ldrb	r2, [r3, #0]
 80073fc:	4920      	ldr	r1, [pc, #128]	; (8007480 <Add_Message_to_Que+0x554>)
 80073fe:	0013      	movs	r3, r2
 8007400:	011b      	lsls	r3, r3, #4
 8007402:	1a9b      	subs	r3, r3, r2
 8007404:	18cb      	adds	r3, r1, r3
 8007406:	330b      	adds	r3, #11
 8007408:	2200      	movs	r2, #0
 800740a:	701a      	strb	r2, [r3, #0]
		strcpy(MessageLog[tpos].Message, in_mes);
 800740c:	0004      	movs	r4, r0
 800740e:	183b      	adds	r3, r7, r0
 8007410:	781a      	ldrb	r2, [r3, #0]
 8007412:	0013      	movs	r3, r2
 8007414:	011b      	lsls	r3, r3, #4
 8007416:	1a9b      	subs	r3, r3, r2
 8007418:	4a19      	ldr	r2, [pc, #100]	; (8007480 <Add_Message_to_Que+0x554>)
 800741a:	189b      	adds	r3, r3, r2
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	0011      	movs	r1, r2
 8007420:	0018      	movs	r0, r3
 8007422:	f00b fc06 	bl	8012c32 <strcpy>
		MessageLog[tpos].Send_Flags = Send_Flags;
 8007426:	0020      	movs	r0, r4
 8007428:	183b      	adds	r3, r7, r0
 800742a:	781a      	ldrb	r2, [r3, #0]
 800742c:	4914      	ldr	r1, [pc, #80]	; (8007480 <Add_Message_to_Que+0x554>)
 800742e:	0013      	movs	r3, r2
 8007430:	011b      	lsls	r3, r3, #4
 8007432:	1a9b      	subs	r3, r3, r2
 8007434:	18cb      	adds	r3, r1, r3
 8007436:	330d      	adds	r3, #13
 8007438:	2223      	movs	r2, #35	; 0x23
 800743a:	18ba      	adds	r2, r7, r2
 800743c:	7812      	ldrb	r2, [r2, #0]
 800743e:	701a      	strb	r2, [r3, #0]
		MessageLog[tpos].Send_Only_GPRS = Send_Only_GPRS;
 8007440:	183b      	adds	r3, r7, r0
 8007442:	781a      	ldrb	r2, [r3, #0]
 8007444:	490e      	ldr	r1, [pc, #56]	; (8007480 <Add_Message_to_Que+0x554>)
 8007446:	0013      	movs	r3, r2
 8007448:	011b      	lsls	r3, r3, #4
 800744a:	1a9b      	subs	r3, r3, r2
 800744c:	18cb      	adds	r3, r1, r3
 800744e:	330e      	adds	r3, #14
 8007450:	1c7a      	adds	r2, r7, #1
 8007452:	7812      	ldrb	r2, [r2, #0]
 8007454:	701a      	strb	r2, [r3, #0]
		MessageLog[tpos].Cellnumber = cellnumber;
 8007456:	183b      	adds	r3, r7, r0
 8007458:	781a      	ldrb	r2, [r3, #0]
 800745a:	4909      	ldr	r1, [pc, #36]	; (8007480 <Add_Message_to_Que+0x554>)
 800745c:	0013      	movs	r3, r2
 800745e:	011b      	lsls	r3, r3, #4
 8007460:	1a9b      	subs	r3, r3, r2
 8007462:	18cb      	adds	r3, r1, r3
 8007464:	330a      	adds	r3, #10
 8007466:	2224      	movs	r2, #36	; 0x24
 8007468:	18ba      	adds	r2, r7, r2
 800746a:	7812      	ldrb	r2, [r2, #0]
 800746c:	701a      	strb	r2, [r3, #0]
		MesQue_Head = tpos;
 800746e:	4b05      	ldr	r3, [pc, #20]	; (8007484 <Add_Message_to_Que+0x558>)
 8007470:	183a      	adds	r2, r7, r0
 8007472:	7812      	ldrb	r2, [r2, #0]
 8007474:	701a      	strb	r2, [r3, #0]
	}
}
 8007476:	46c0      	nop			; (mov r8, r8)
 8007478:	46bd      	mov	sp, r7
 800747a:	b00b      	add	sp, #44	; 0x2c
 800747c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800747e:	46c0      	nop			; (mov r8, r8)
 8007480:	200020cc 	.word	0x200020cc
 8007484:	200016bc 	.word	0x200016bc

08007488 <Check_MessageQue>:


unsigned char Check_MessageQue(void)
{ unsigned char temp;
 8007488:	b580      	push	{r7, lr}
 800748a:	b082      	sub	sp, #8
 800748c:	af00      	add	r7, sp, #0
	temp = 0;
 800748e:	1dfb      	adds	r3, r7, #7
 8007490:	2200      	movs	r2, #0
 8007492:	701a      	strb	r2, [r3, #0]
    if(MesQue_Tail > 24) {
 8007494:	4b43      	ldr	r3, [pc, #268]	; (80075a4 <Check_MessageQue+0x11c>)
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	2b18      	cmp	r3, #24
 800749a:	d800      	bhi.n	800749e <Check_MessageQue+0x16>
 800749c:	e079      	b.n	8007592 <Check_MessageQue+0x10a>
       MesQue_Tail = 0;
 800749e:	4b41      	ldr	r3, [pc, #260]	; (80075a4 <Check_MessageQue+0x11c>)
 80074a0:	2200      	movs	r2, #0
 80074a2:	701a      	strb	r2, [r3, #0]
    }

	while(temp < 25) {
 80074a4:	e075      	b.n	8007592 <Check_MessageQue+0x10a>
		if((MessageLog[MesQue_Tail].Message[0] != 0)&&(MessageLog[MesQue_Tail].Retries < MAX_GSM_MESSAGE_RETRIES)&&(MessageLog[MesQue_Tail].Send == FALSE)) {
 80074a6:	4b3f      	ldr	r3, [pc, #252]	; (80075a4 <Check_MessageQue+0x11c>)
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	0019      	movs	r1, r3
 80074ac:	4a3e      	ldr	r2, [pc, #248]	; (80075a8 <Check_MessageQue+0x120>)
 80074ae:	000b      	movs	r3, r1
 80074b0:	011b      	lsls	r3, r3, #4
 80074b2:	1a5b      	subs	r3, r3, r1
 80074b4:	5c9b      	ldrb	r3, [r3, r2]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d058      	beq.n	800756c <Check_MessageQue+0xe4>
 80074ba:	4b3a      	ldr	r3, [pc, #232]	; (80075a4 <Check_MessageQue+0x11c>)
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	0019      	movs	r1, r3
 80074c0:	4a39      	ldr	r2, [pc, #228]	; (80075a8 <Check_MessageQue+0x120>)
 80074c2:	000b      	movs	r3, r1
 80074c4:	011b      	lsls	r3, r3, #4
 80074c6:	1a5b      	subs	r3, r3, r1
 80074c8:	18d3      	adds	r3, r2, r3
 80074ca:	330c      	adds	r3, #12
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	2b05      	cmp	r3, #5
 80074d0:	d84c      	bhi.n	800756c <Check_MessageQue+0xe4>
 80074d2:	4b34      	ldr	r3, [pc, #208]	; (80075a4 <Check_MessageQue+0x11c>)
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	0019      	movs	r1, r3
 80074d8:	4a33      	ldr	r2, [pc, #204]	; (80075a8 <Check_MessageQue+0x120>)
 80074da:	000b      	movs	r3, r1
 80074dc:	011b      	lsls	r3, r3, #4
 80074de:	1a5b      	subs	r3, r3, r1
 80074e0:	18d3      	adds	r3, r2, r3
 80074e2:	330b      	adds	r3, #11
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d140      	bne.n	800756c <Check_MessageQue+0xe4>
			MessageLog[MesQue_Tail].Retries++;
 80074ea:	4b2e      	ldr	r3, [pc, #184]	; (80075a4 <Check_MessageQue+0x11c>)
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	001a      	movs	r2, r3
 80074f0:	492d      	ldr	r1, [pc, #180]	; (80075a8 <Check_MessageQue+0x120>)
 80074f2:	0013      	movs	r3, r2
 80074f4:	011b      	lsls	r3, r3, #4
 80074f6:	1a9b      	subs	r3, r3, r2
 80074f8:	18cb      	adds	r3, r1, r3
 80074fa:	330c      	adds	r3, #12
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	3301      	adds	r3, #1
 8007500:	b2d8      	uxtb	r0, r3
 8007502:	4929      	ldr	r1, [pc, #164]	; (80075a8 <Check_MessageQue+0x120>)
 8007504:	0013      	movs	r3, r2
 8007506:	011b      	lsls	r3, r3, #4
 8007508:	1a9b      	subs	r3, r3, r2
 800750a:	18cb      	adds	r3, r1, r3
 800750c:	330c      	adds	r3, #12
 800750e:	1c02      	adds	r2, r0, #0
 8007510:	701a      	strb	r2, [r3, #0]
			memset(Out_Message, 0, 160);
 8007512:	4b26      	ldr	r3, [pc, #152]	; (80075ac <Check_MessageQue+0x124>)
 8007514:	22a0      	movs	r2, #160	; 0xa0
 8007516:	2100      	movs	r1, #0
 8007518:	0018      	movs	r0, r3
 800751a:	f00a fd6f 	bl	8011ffc <memset>

				Build_Message(MessageLog[MesQue_Tail].Message, Out_Message);
 800751e:	4b21      	ldr	r3, [pc, #132]	; (80075a4 <Check_MessageQue+0x11c>)
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	001a      	movs	r2, r3
 8007524:	0013      	movs	r3, r2
 8007526:	011b      	lsls	r3, r3, #4
 8007528:	1a9b      	subs	r3, r3, r2
 800752a:	4a1f      	ldr	r2, [pc, #124]	; (80075a8 <Check_MessageQue+0x120>)
 800752c:	189b      	adds	r3, r3, r2
 800752e:	4a1f      	ldr	r2, [pc, #124]	; (80075ac <Check_MessageQue+0x124>)
 8007530:	0011      	movs	r1, r2
 8007532:	0018      	movs	r0, r3
 8007534:	f7fe fde8 	bl	8006108 <Build_Message>
				Replace_Spaces_Plus(Out_Message);
 8007538:	4b1c      	ldr	r3, [pc, #112]	; (80075ac <Check_MessageQue+0x124>)
 800753a:	0018      	movs	r0, r3
 800753c:	f000 fe6e 	bl	800821c <Replace_Spaces_Plus>
				if(strlen(Out_Message) < 3) {
 8007540:	4b1a      	ldr	r3, [pc, #104]	; (80075ac <Check_MessageQue+0x124>)
 8007542:	0018      	movs	r0, r3
 8007544:	f7f8 fde0 	bl	8000108 <strlen>
 8007548:	0003      	movs	r3, r0
 800754a:	2b02      	cmp	r3, #2
 800754c:	d80c      	bhi.n	8007568 <Check_MessageQue+0xe0>
					MessageLog[MesQue_Tail].Retries = MAX_GSM_MESSAGE_RETRIES;
 800754e:	4b15      	ldr	r3, [pc, #84]	; (80075a4 <Check_MessageQue+0x11c>)
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	0019      	movs	r1, r3
 8007554:	4a14      	ldr	r2, [pc, #80]	; (80075a8 <Check_MessageQue+0x120>)
 8007556:	000b      	movs	r3, r1
 8007558:	011b      	lsls	r3, r3, #4
 800755a:	1a5b      	subs	r3, r3, r1
 800755c:	18d3      	adds	r3, r2, r3
 800755e:	330c      	adds	r3, #12
 8007560:	2206      	movs	r2, #6
 8007562:	701a      	strb	r2, [r3, #0]
					return(FALSE);
 8007564:	2300      	movs	r3, #0
 8007566:	e019      	b.n	800759c <Check_MessageQue+0x114>
				} else {
					return(TRUE);   // message in que to send
 8007568:	2301      	movs	r3, #1
 800756a:	e017      	b.n	800759c <Check_MessageQue+0x114>
				}
		}
        if(MesQue_Tail > 23) {
 800756c:	4b0d      	ldr	r3, [pc, #52]	; (80075a4 <Check_MessageQue+0x11c>)
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	2b17      	cmp	r3, #23
 8007572:	d903      	bls.n	800757c <Check_MessageQue+0xf4>
       		MesQue_Tail = 0;
 8007574:	4b0b      	ldr	r3, [pc, #44]	; (80075a4 <Check_MessageQue+0x11c>)
 8007576:	2200      	movs	r2, #0
 8007578:	701a      	strb	r2, [r3, #0]
 800757a:	e005      	b.n	8007588 <Check_MessageQue+0x100>
    	} else MesQue_Tail++;
 800757c:	4b09      	ldr	r3, [pc, #36]	; (80075a4 <Check_MessageQue+0x11c>)
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	3301      	adds	r3, #1
 8007582:	b2da      	uxtb	r2, r3
 8007584:	4b07      	ldr	r3, [pc, #28]	; (80075a4 <Check_MessageQue+0x11c>)
 8007586:	701a      	strb	r2, [r3, #0]
	    temp++;
 8007588:	1dfb      	adds	r3, r7, #7
 800758a:	781a      	ldrb	r2, [r3, #0]
 800758c:	1dfb      	adds	r3, r7, #7
 800758e:	3201      	adds	r2, #1
 8007590:	701a      	strb	r2, [r3, #0]
	while(temp < 25) {
 8007592:	1dfb      	adds	r3, r7, #7
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	2b18      	cmp	r3, #24
 8007598:	d985      	bls.n	80074a6 <Check_MessageQue+0x1e>
    }
	return(FALSE);	// no message in que to send
 800759a:	2300      	movs	r3, #0
}
 800759c:	0018      	movs	r0, r3
 800759e:	46bd      	mov	sp, r7
 80075a0:	b002      	add	sp, #8
 80075a2:	bd80      	pop	{r7, pc}
 80075a4:	200016bd 	.word	0x200016bd
 80075a8:	200020cc 	.word	0x200020cc
 80075ac:	20001760 	.word	0x20001760

080075b0 <Check_for_Messages>:


unsigned char Check_for_Messages(void)
{
 80075b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075b2:	b099      	sub	sp, #100	; 0x64
 80075b4:	af02      	add	r7, sp, #8
   unsigned char UserPass_Flag = FALSE;
 80075b6:	2557      	movs	r5, #87	; 0x57
 80075b8:	197b      	adds	r3, r7, r5
 80075ba:	2200      	movs	r2, #0
 80075bc:	701a      	strb	r2, [r3, #0]
   unsigned char ProgPass_Flag = FALSE;
 80075be:	2656      	movs	r6, #86	; 0x56
 80075c0:	19bb      	adds	r3, r7, r6
 80075c2:	2200      	movs	r2, #0
 80075c4:	701a      	strb	r2, [r3, #0]
   unsigned char BackdoorPass_Flag = FALSE;
 80075c6:	2455      	movs	r4, #85	; 0x55
 80075c8:	193b      	adds	r3, r7, r4
 80075ca:	2200      	movs	r2, #0
 80075cc:	701a      	strb	r2, [r3, #0]
   unsigned int tempyear = 0;
 80075ce:	2300      	movs	r3, #0
 80075d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   unsigned int tempmonth = 0;
 80075d2:	2300      	movs	r3, #0
 80075d4:	64bb      	str	r3, [r7, #72]	; 0x48
   unsigned int tempday = 0;
 80075d6:	2300      	movs	r3, #0
 80075d8:	647b      	str	r3, [r7, #68]	; 0x44
   unsigned int temphour = 0;
 80075da:	2300      	movs	r3, #0
 80075dc:	643b      	str	r3, [r7, #64]	; 0x40
   unsigned int tempminute = 0;
 80075de:	2300      	movs	r3, #0
 80075e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   unsigned int tempsecond = 0;
 80075e2:	2300      	movs	r3, #0
 80075e4:	63bb      	str	r3, [r7, #56]	; 0x38
   unsigned int tempres = 0;
 80075e6:	2300      	movs	r3, #0
 80075e8:	637b      	str	r3, [r7, #52]	; 0x34
   unsigned int num = 0;
 80075ea:	2300      	movs	r3, #0
 80075ec:	633b      	str	r3, [r7, #48]	; 0x30
   char * smspoint;
   char * temppassword;
   char * pointer;


	SIM800H_Clear_Buffers();
 80075ee:	f001 fdcb 	bl	8009188 <SIM800H_Clear_Buffers>
	smspoint = SIM800H_Check_SMS();
 80075f2:	f001 fa4b 	bl	8008a8c <SIM800H_Check_SMS>
 80075f6:	0003      	movs	r3, r0
 80075f8:	653b      	str	r3, [r7, #80]	; 0x50
		if(smspoint != NULL) {
 80075fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d101      	bne.n	8007604 <Check_for_Messages+0x54>
 8007600:	f000 fd22 	bl	8008048 <Check_for_Messages+0xa98>
			strcpy(Incomming_SMS_Number, CellnumPoint);
 8007604:	4be1      	ldr	r3, [pc, #900]	; (800798c <Check_for_Messages+0x3dc>)
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	4be1      	ldr	r3, [pc, #900]	; (8007990 <Check_for_Messages+0x3e0>)
 800760a:	0011      	movs	r1, r2
 800760c:	0018      	movs	r0, r3
 800760e:	f00b fb10 	bl	8012c32 <strcpy>
			BackdoorPass_Flag = FALSE;
 8007612:	193b      	adds	r3, r7, r4
 8007614:	2200      	movs	r2, #0
 8007616:	701a      	strb	r2, [r3, #0]
			UserPass_Flag = FALSE;
 8007618:	197b      	adds	r3, r7, r5
 800761a:	2200      	movs	r2, #0
 800761c:	701a      	strb	r2, [r3, #0]
			ProgPass_Flag = FALSE;
 800761e:	19bb      	adds	r3, r7, r6
 8007620:	2200      	movs	r2, #0
 8007622:	701a      	strb	r2, [r3, #0]
			temppassword = Read_Settings(EE_USER_PASS);
 8007624:	2025      	movs	r0, #37	; 0x25
 8007626:	f7fc fd0f 	bl	8004048 <Read_Settings>
 800762a:	0003      	movs	r3, r0
 800762c:	62fb      	str	r3, [r7, #44]	; 0x2c
			strcpy(passw, "#");
 800762e:	211c      	movs	r1, #28
 8007630:	187b      	adds	r3, r7, r1
 8007632:	2223      	movs	r2, #35	; 0x23
 8007634:	801a      	strh	r2, [r3, #0]
			strcat(passw, temppassword);
 8007636:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007638:	187b      	adds	r3, r7, r1
 800763a:	0011      	movs	r1, r2
 800763c:	0018      	movs	r0, r3
 800763e:	f00b fadd 	bl	8012bfc <strcat>
			if(strncmp(smspoint, "#7050", 5) == 0) {
 8007642:	49d4      	ldr	r1, [pc, #848]	; (8007994 <Check_for_Messages+0x3e4>)
 8007644:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007646:	2205      	movs	r2, #5
 8007648:	0018      	movs	r0, r3
 800764a:	f00b fafa 	bl	8012c42 <strncmp>
 800764e:	1e03      	subs	r3, r0, #0
 8007650:	d103      	bne.n	800765a <Check_for_Messages+0xaa>
				BackdoorPass_Flag = TRUE;
 8007652:	193b      	adds	r3, r7, r4
 8007654:	2201      	movs	r2, #1
 8007656:	701a      	strb	r2, [r3, #0]
 8007658:	e029      	b.n	80076ae <Check_for_Messages+0xfe>
			} else if(strncmp(smspoint, passw, 5) == 0) {
 800765a:	231c      	movs	r3, #28
 800765c:	18f9      	adds	r1, r7, r3
 800765e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007660:	2205      	movs	r2, #5
 8007662:	0018      	movs	r0, r3
 8007664:	f00b faed 	bl	8012c42 <strncmp>
 8007668:	1e03      	subs	r3, r0, #0
 800766a:	d104      	bne.n	8007676 <Check_for_Messages+0xc6>
				UserPass_Flag = TRUE;
 800766c:	2357      	movs	r3, #87	; 0x57
 800766e:	18fb      	adds	r3, r7, r3
 8007670:	2201      	movs	r2, #1
 8007672:	701a      	strb	r2, [r3, #0]
 8007674:	e01b      	b.n	80076ae <Check_for_Messages+0xfe>
			} else {
				temppassword = Read_Settings(EE_PROG_PASS);
 8007676:	2024      	movs	r0, #36	; 0x24
 8007678:	f7fc fce6 	bl	8004048 <Read_Settings>
 800767c:	0003      	movs	r3, r0
 800767e:	62fb      	str	r3, [r7, #44]	; 0x2c
				strcpy(passw, "#");
 8007680:	211c      	movs	r1, #28
 8007682:	187b      	adds	r3, r7, r1
 8007684:	2223      	movs	r2, #35	; 0x23
 8007686:	801a      	strh	r2, [r3, #0]
				strcat(passw, temppassword);
 8007688:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800768a:	000c      	movs	r4, r1
 800768c:	187b      	adds	r3, r7, r1
 800768e:	0011      	movs	r1, r2
 8007690:	0018      	movs	r0, r3
 8007692:	f00b fab3 	bl	8012bfc <strcat>
				if(strncmp(smspoint, passw, 5) == 0) {
 8007696:	1939      	adds	r1, r7, r4
 8007698:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800769a:	2205      	movs	r2, #5
 800769c:	0018      	movs	r0, r3
 800769e:	f00b fad0 	bl	8012c42 <strncmp>
 80076a2:	1e03      	subs	r3, r0, #0
 80076a4:	d103      	bne.n	80076ae <Check_for_Messages+0xfe>
					ProgPass_Flag = TRUE;
 80076a6:	2356      	movs	r3, #86	; 0x56
 80076a8:	18fb      	adds	r3, r7, r3
 80076aa:	2201      	movs	r2, #1
 80076ac:	701a      	strb	r2, [r3, #0]
				}
			}

			if((ProgPass_Flag == TRUE)||(BackdoorPass_Flag == TRUE)) {
 80076ae:	2356      	movs	r3, #86	; 0x56
 80076b0:	18fb      	adds	r3, r7, r3
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d005      	beq.n	80076c4 <Check_for_Messages+0x114>
 80076b8:	2355      	movs	r3, #85	; 0x55
 80076ba:	18fb      	adds	r3, r7, r3
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d000      	beq.n	80076c4 <Check_for_Messages+0x114>
 80076c2:	e079      	b.n	80077b8 <Check_for_Messages+0x208>
				Update_Settings_Timer = 60;   // 1 minute after programming the unit will update the settings from ram
 80076c4:	4bb4      	ldr	r3, [pc, #720]	; (8007998 <Check_for_Messages+0x3e8>)
 80076c6:	223c      	movs	r2, #60	; 0x3c
 80076c8:	701a      	strb	r2, [r3, #0]
				smspoint = smspoint + 5;  // move pointer to begining of prg
 80076ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076cc:	3305      	adds	r3, #5
 80076ce:	653b      	str	r3, [r7, #80]	; 0x50
				if(strstr(smspoint, "prg") != NULL) {  // the string after the pasword starts with "prg"
 80076d0:	4ab2      	ldr	r2, [pc, #712]	; (800799c <Check_for_Messages+0x3ec>)
 80076d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076d4:	0011      	movs	r1, r2
 80076d6:	0018      	movs	r0, r3
 80076d8:	f00b fad9 	bl	8012c8e <strstr>
 80076dc:	1e03      	subs	r3, r0, #0
 80076de:	d06b      	beq.n	80077b8 <Check_for_Messages+0x208>
					smspoint = smspoint + 3;  // move to beginnig of prog number (3 digits)
 80076e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076e2:	3303      	adds	r3, #3
 80076e4:	653b      	str	r3, [r7, #80]	; 0x50
					smspoint = strtok(smspoint, "\"");
 80076e6:	4aae      	ldr	r2, [pc, #696]	; (80079a0 <Check_for_Messages+0x3f0>)
 80076e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076ea:	0011      	movs	r1, r2
 80076ec:	0018      	movs	r0, r3
 80076ee:	f00c f91f 	bl	8013930 <strtok>
 80076f2:	0003      	movs	r3, r0
 80076f4:	653b      	str	r3, [r7, #80]	; 0x50
					num = atoi(smspoint);
 80076f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076f8:	0018      	movs	r0, r3
 80076fa:	f00a fb24 	bl	8011d46 <atoi>
 80076fe:	0003      	movs	r3, r0
 8007700:	633b      	str	r3, [r7, #48]	; 0x30
					if(smspoint[4] == '"') {  // if clean setting
 8007702:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007704:	3304      	adds	r3, #4
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	2b22      	cmp	r3, #34	; 0x22
 800770a:	d107      	bne.n	800771c <Check_for_Messages+0x16c>
						smspoint[4] = ' ';
 800770c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800770e:	3304      	adds	r3, #4
 8007710:	2220      	movs	r2, #32
 8007712:	701a      	strb	r2, [r3, #0]
						smspoint[5] = '"';
 8007714:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007716:	3305      	adds	r3, #5
 8007718:	2222      	movs	r2, #34	; 0x22
 800771a:	701a      	strb	r2, [r3, #0]
					}
					smspoint = strtok(NULL, "\"");
 800771c:	4ba0      	ldr	r3, [pc, #640]	; (80079a0 <Check_for_Messages+0x3f0>)
 800771e:	0019      	movs	r1, r3
 8007720:	2000      	movs	r0, #0
 8007722:	f00c f905 	bl	8013930 <strtok>
 8007726:	0003      	movs	r3, r0
 8007728:	653b      	str	r3, [r7, #80]	; 0x50
					if(num < EE_END) {
 800772a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772c:	2b5d      	cmp	r3, #93	; 0x5d
 800772e:	d80d      	bhi.n	800774c <Check_for_Messages+0x19c>
						Save_Settings(num, smspoint);
 8007730:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007734:	0011      	movs	r1, r2
 8007736:	0018      	movs	r0, r3
 8007738:	f7fc fc36 	bl	8003fa8 <Save_Settings>
						UserPass_Flag = FALSE;
 800773c:	2357      	movs	r3, #87	; 0x57
 800773e:	18fb      	adds	r3, r7, r3
 8007740:	2200      	movs	r2, #0
 8007742:	701a      	strb	r2, [r3, #0]
						BackdoorPass_Flag = FALSE;
 8007744:	2355      	movs	r3, #85	; 0x55
 8007746:	18fb      	adds	r3, r7, r3
 8007748:	2200      	movs	r2, #0
 800774a:	701a      	strb	r2, [r3, #0]
					}
					if(num > 99) {   // if numbers for drop call list
 800774c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800774e:	2b63      	cmp	r3, #99	; 0x63
 8007750:	d90d      	bls.n	800776e <Check_for_Messages+0x1be>
						Save_Settings(num, smspoint);
 8007752:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007756:	0011      	movs	r1, r2
 8007758:	0018      	movs	r0, r3
 800775a:	f7fc fc25 	bl	8003fa8 <Save_Settings>
						UserPass_Flag = FALSE;
 800775e:	2357      	movs	r3, #87	; 0x57
 8007760:	18fb      	adds	r3, r7, r3
 8007762:	2200      	movs	r2, #0
 8007764:	701a      	strb	r2, [r3, #0]
						BackdoorPass_Flag = FALSE;
 8007766:	2355      	movs	r3, #85	; 0x55
 8007768:	18fb      	adds	r3, r7, r3
 800776a:	2200      	movs	r2, #0
 800776c:	701a      	strb	r2, [r3, #0]
					}
					if(num == EE_OWN_NUMBER) {
 800776e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007770:	2b1a      	cmp	r3, #26
 8007772:	d11e      	bne.n	80077b2 <Check_for_Messages+0x202>
						Message[0] = TIMESYNC_SMS;
 8007774:	4b8b      	ldr	r3, [pc, #556]	; (80079a4 <Check_for_Messages+0x3f4>)
 8007776:	2264      	movs	r2, #100	; 0x64
 8007778:	701a      	strb	r2, [r3, #0]
						Message[1] = 0;
 800777a:	4b8a      	ldr	r3, [pc, #552]	; (80079a4 <Check_for_Messages+0x3f4>)
 800777c:	2200      	movs	r2, #0
 800777e:	705a      	strb	r2, [r3, #1]
						Add_Message_to_Que(Message, 0x01, EE_OWN_NUMBER, 0, TRUE);
 8007780:	4888      	ldr	r0, [pc, #544]	; (80079a4 <Check_for_Messages+0x3f4>)
 8007782:	2301      	movs	r3, #1
 8007784:	9300      	str	r3, [sp, #0]
 8007786:	2300      	movs	r3, #0
 8007788:	221a      	movs	r2, #26
 800778a:	2101      	movs	r1, #1
 800778c:	f7ff fbce 	bl	8006f2c <Add_Message_to_Que>
						strcpy(Own_Number, Read_Settings(EE_OWN_NUMBER));
 8007790:	201a      	movs	r0, #26
 8007792:	f7fc fc59 	bl	8004048 <Read_Settings>
 8007796:	0002      	movs	r2, r0
 8007798:	4b83      	ldr	r3, [pc, #524]	; (80079a8 <Check_for_Messages+0x3f8>)
 800779a:	0011      	movs	r1, r2
 800779c:	0018      	movs	r0, r3
 800779e:	f00b fa48 	bl	8012c32 <strcpy>
						UserPass_Flag = FALSE;
 80077a2:	2357      	movs	r3, #87	; 0x57
 80077a4:	18fb      	adds	r3, r7, r3
 80077a6:	2200      	movs	r2, #0
 80077a8:	701a      	strb	r2, [r3, #0]
						BackdoorPass_Flag = FALSE;
 80077aa:	2355      	movs	r3, #85	; 0x55
 80077ac:	18fb      	adds	r3, r7, r3
 80077ae:	2200      	movs	r2, #0
 80077b0:	701a      	strb	r2, [r3, #0]
					}
					Update_Mem_Flag = TRUE;
 80077b2:	4b7e      	ldr	r3, [pc, #504]	; (80079ac <Check_for_Messages+0x3fc>)
 80077b4:	2201      	movs	r2, #1
 80077b6:	701a      	strb	r2, [r3, #0]
				}
			}

			if((UserPass_Flag == TRUE)||(BackdoorPass_Flag == TRUE)) {
 80077b8:	2357      	movs	r3, #87	; 0x57
 80077ba:	18fb      	adds	r3, r7, r3
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d005      	beq.n	80077ce <Check_for_Messages+0x21e>
 80077c2:	2355      	movs	r3, #85	; 0x55
 80077c4:	18fb      	adds	r3, r7, r3
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d000      	beq.n	80077ce <Check_for_Messages+0x21e>
 80077cc:	e37b      	b.n	8007ec6 <Check_for_Messages+0x916>
				if(ProgPass_Flag != TRUE) {
 80077ce:	2356      	movs	r3, #86	; 0x56
 80077d0:	18fb      	adds	r3, r7, r3
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d007      	beq.n	80077e8 <Check_for_Messages+0x238>
					if(BackdoorPass_Flag != TRUE) {
 80077d8:	2355      	movs	r3, #85	; 0x55
 80077da:	18fb      	adds	r3, r7, r3
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d002      	beq.n	80077e8 <Check_for_Messages+0x238>
						smspoint = smspoint + 5;  // move pointer to begining of rest of message
 80077e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077e4:	3305      	adds	r3, #5
 80077e6:	653b      	str	r3, [r7, #80]	; 0x50
					}
				}
				if((smspoint[0] == ';')&&(smspoint[1] == '#')) {	// change user password
 80077e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	2b3b      	cmp	r3, #59	; 0x3b
 80077ee:	d11c      	bne.n	800782a <Check_for_Messages+0x27a>
 80077f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077f2:	3301      	adds	r3, #1
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	2b23      	cmp	r3, #35	; 0x23
 80077f8:	d117      	bne.n	800782a <Check_for_Messages+0x27a>
					smspoint = smspoint + 2;
 80077fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077fc:	3302      	adds	r3, #2
 80077fe:	653b      	str	r3, [r7, #80]	; 0x50
					strcpy(passw, smspoint);
 8007800:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007802:	241c      	movs	r4, #28
 8007804:	193b      	adds	r3, r7, r4
 8007806:	0011      	movs	r1, r2
 8007808:	0018      	movs	r0, r3
 800780a:	f00b fa12 	bl	8012c32 <strcpy>
					if(strlen(passw) == 4) {
 800780e:	193b      	adds	r3, r7, r4
 8007810:	0018      	movs	r0, r3
 8007812:	f7f8 fc79 	bl	8000108 <strlen>
 8007816:	0003      	movs	r3, r0
 8007818:	2b04      	cmp	r3, #4
 800781a:	d000      	beq.n	800781e <Check_for_Messages+0x26e>
 800781c:	e353      	b.n	8007ec6 <Check_for_Messages+0x916>
						Save_Settings(EE_USER_PASS, passw);
 800781e:	193b      	adds	r3, r7, r4
 8007820:	0019      	movs	r1, r3
 8007822:	2025      	movs	r0, #37	; 0x25
 8007824:	f7fc fbc0 	bl	8003fa8 <Save_Settings>
					if(strlen(passw) == 4) {
 8007828:	e34d      	b.n	8007ec6 <Check_for_Messages+0x916>
					}
				} else if(smspoint[0] == 'L') {  // return Status to sender
 800782a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	2b4c      	cmp	r3, #76	; 0x4c
 8007830:	d11e      	bne.n	8007870 <Check_for_Messages+0x2c0>
					Save_Settings(EE_INCOMMING_MESSAGE_NUMBER, Incomming_SMS_Number);
 8007832:	4b57      	ldr	r3, [pc, #348]	; (8007990 <Check_for_Messages+0x3e0>)
 8007834:	0019      	movs	r1, r3
 8007836:	205d      	movs	r0, #93	; 0x5d
 8007838:	f7fc fbb6 	bl	8003fa8 <Save_Settings>
				    Message[0] = STATUS;
 800783c:	4b59      	ldr	r3, [pc, #356]	; (80079a4 <Check_for_Messages+0x3f4>)
 800783e:	2272      	movs	r2, #114	; 0x72
 8007840:	701a      	strb	r2, [r3, #0]
				    Message[1] = EE_AT_MESSAGE;
 8007842:	4b58      	ldr	r3, [pc, #352]	; (80079a4 <Check_for_Messages+0x3f4>)
 8007844:	2233      	movs	r2, #51	; 0x33
 8007846:	705a      	strb	r2, [r3, #1]
				    Message[2] = 0;
 8007848:	4b56      	ldr	r3, [pc, #344]	; (80079a4 <Check_for_Messages+0x3f4>)
 800784a:	2200      	movs	r2, #0
 800784c:	709a      	strb	r2, [r3, #2]
					Add_Message_to_Que(Message, BackdoorPass_Flag, EE_INCOMMING_MESSAGE_NUMBER, 0, !UserPass_Flag);
 800784e:	2357      	movs	r3, #87	; 0x57
 8007850:	18fb      	adds	r3, r7, r3
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	425a      	negs	r2, r3
 8007856:	4153      	adcs	r3, r2
 8007858:	b2db      	uxtb	r3, r3
 800785a:	001a      	movs	r2, r3
 800785c:	2355      	movs	r3, #85	; 0x55
 800785e:	18fb      	adds	r3, r7, r3
 8007860:	7819      	ldrb	r1, [r3, #0]
 8007862:	4850      	ldr	r0, [pc, #320]	; (80079a4 <Check_for_Messages+0x3f4>)
 8007864:	9200      	str	r2, [sp, #0]
 8007866:	2300      	movs	r3, #0
 8007868:	225d      	movs	r2, #93	; 0x5d
 800786a:	f7ff fb5f 	bl	8006f2c <Add_Message_to_Que>
 800786e:	e32a      	b.n	8007ec6 <Check_for_Messages+0x916>
				} else if(smspoint[0] == 'I') {  // return Base number to sender
 8007870:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	2b49      	cmp	r3, #73	; 0x49
 8007876:	d11b      	bne.n	80078b0 <Check_for_Messages+0x300>
					Save_Settings(EE_INCOMMING_MESSAGE_NUMBER, Incomming_SMS_Number);
 8007878:	4b45      	ldr	r3, [pc, #276]	; (8007990 <Check_for_Messages+0x3e0>)
 800787a:	0019      	movs	r1, r3
 800787c:	205d      	movs	r0, #93	; 0x5d
 800787e:	f7fc fb93 	bl	8003fa8 <Save_Settings>
				    Message[0] = BASE;
 8007882:	4b48      	ldr	r3, [pc, #288]	; (80079a4 <Check_for_Messages+0x3f4>)
 8007884:	2266      	movs	r2, #102	; 0x66
 8007886:	701a      	strb	r2, [r3, #0]
					Message[1] = 0;
 8007888:	4b46      	ldr	r3, [pc, #280]	; (80079a4 <Check_for_Messages+0x3f4>)
 800788a:	2200      	movs	r2, #0
 800788c:	705a      	strb	r2, [r3, #1]

					Add_Message_to_Que(Message, BackdoorPass_Flag, EE_INCOMMING_MESSAGE_NUMBER, 0, !UserPass_Flag);
 800788e:	2357      	movs	r3, #87	; 0x57
 8007890:	18fb      	adds	r3, r7, r3
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	425a      	negs	r2, r3
 8007896:	4153      	adcs	r3, r2
 8007898:	b2db      	uxtb	r3, r3
 800789a:	001a      	movs	r2, r3
 800789c:	2355      	movs	r3, #85	; 0x55
 800789e:	18fb      	adds	r3, r7, r3
 80078a0:	7819      	ldrb	r1, [r3, #0]
 80078a2:	4840      	ldr	r0, [pc, #256]	; (80079a4 <Check_for_Messages+0x3f4>)
 80078a4:	9200      	str	r2, [sp, #0]
 80078a6:	2300      	movs	r3, #0
 80078a8:	225d      	movs	r2, #93	; 0x5d
 80078aa:	f7ff fb3f 	bl	8006f2c <Add_Message_to_Que>
 80078ae:	e30a      	b.n	8007ec6 <Check_for_Messages+0x916>
				} else if(smspoint[0] == 'J') {  // return List of Cell numbers, Call and SMS numbers to sender
 80078b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	2b4a      	cmp	r3, #74	; 0x4a
 80078b6:	d11b      	bne.n	80078f0 <Check_for_Messages+0x340>
					Save_Settings(EE_INCOMMING_MESSAGE_NUMBER, Incomming_SMS_Number);
 80078b8:	4b35      	ldr	r3, [pc, #212]	; (8007990 <Check_for_Messages+0x3e0>)
 80078ba:	0019      	movs	r1, r3
 80078bc:	205d      	movs	r0, #93	; 0x5d
 80078be:	f7fc fb73 	bl	8003fa8 <Save_Settings>
				    Message[0] = CELLREQ;
 80078c2:	4b38      	ldr	r3, [pc, #224]	; (80079a4 <Check_for_Messages+0x3f4>)
 80078c4:	226e      	movs	r2, #110	; 0x6e
 80078c6:	701a      	strb	r2, [r3, #0]
					Message[1] = 0;
 80078c8:	4b36      	ldr	r3, [pc, #216]	; (80079a4 <Check_for_Messages+0x3f4>)
 80078ca:	2200      	movs	r2, #0
 80078cc:	705a      	strb	r2, [r3, #1]
					Add_Message_to_Que(Message, BackdoorPass_Flag, EE_INCOMMING_MESSAGE_NUMBER, 0, !UserPass_Flag);
 80078ce:	2357      	movs	r3, #87	; 0x57
 80078d0:	18fb      	adds	r3, r7, r3
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	425a      	negs	r2, r3
 80078d6:	4153      	adcs	r3, r2
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	001a      	movs	r2, r3
 80078dc:	2355      	movs	r3, #85	; 0x55
 80078de:	18fb      	adds	r3, r7, r3
 80078e0:	7819      	ldrb	r1, [r3, #0]
 80078e2:	4830      	ldr	r0, [pc, #192]	; (80079a4 <Check_for_Messages+0x3f4>)
 80078e4:	9200      	str	r2, [sp, #0]
 80078e6:	2300      	movs	r3, #0
 80078e8:	225d      	movs	r2, #93	; 0x5d
 80078ea:	f7ff fb1f 	bl	8006f2c <Add_Message_to_Que>
 80078ee:	e2ea      	b.n	8007ec6 <Check_for_Messages+0x916>
				} else if(smspoint[0] == 'K') {  // return Passwords to sender and own number
 80078f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	2b4b      	cmp	r3, #75	; 0x4b
 80078f6:	d11b      	bne.n	8007930 <Check_for_Messages+0x380>
					Save_Settings(EE_INCOMMING_MESSAGE_NUMBER, Incomming_SMS_Number);
 80078f8:	4b25      	ldr	r3, [pc, #148]	; (8007990 <Check_for_Messages+0x3e0>)
 80078fa:	0019      	movs	r1, r3
 80078fc:	205d      	movs	r0, #93	; 0x5d
 80078fe:	f7fc fb53 	bl	8003fa8 <Save_Settings>
				    Message[0] = PASSWORDS;
 8007902:	4b28      	ldr	r3, [pc, #160]	; (80079a4 <Check_for_Messages+0x3f4>)
 8007904:	2265      	movs	r2, #101	; 0x65
 8007906:	701a      	strb	r2, [r3, #0]
					Message[1] = 0;
 8007908:	4b26      	ldr	r3, [pc, #152]	; (80079a4 <Check_for_Messages+0x3f4>)
 800790a:	2200      	movs	r2, #0
 800790c:	705a      	strb	r2, [r3, #1]
					Add_Message_to_Que(Message, BackdoorPass_Flag, EE_INCOMMING_MESSAGE_NUMBER, 0, !UserPass_Flag);
 800790e:	2357      	movs	r3, #87	; 0x57
 8007910:	18fb      	adds	r3, r7, r3
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	425a      	negs	r2, r3
 8007916:	4153      	adcs	r3, r2
 8007918:	b2db      	uxtb	r3, r3
 800791a:	001a      	movs	r2, r3
 800791c:	2355      	movs	r3, #85	; 0x55
 800791e:	18fb      	adds	r3, r7, r3
 8007920:	7819      	ldrb	r1, [r3, #0]
 8007922:	4820      	ldr	r0, [pc, #128]	; (80079a4 <Check_for_Messages+0x3f4>)
 8007924:	9200      	str	r2, [sp, #0]
 8007926:	2300      	movs	r3, #0
 8007928:	225d      	movs	r2, #93	; 0x5d
 800792a:	f7ff faff 	bl	8006f2c <Add_Message_to_Que>
 800792e:	e2ca      	b.n	8007ec6 <Check_for_Messages+0x916>
				} else if((smspoint[0] == 'G')&&(smspoint[1] == '1')) {  // Set GPRS as Main Coms method and save setting!!
 8007930:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	2b47      	cmp	r3, #71	; 0x47
 8007936:	d13d      	bne.n	80079b4 <Check_for_Messages+0x404>
 8007938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800793a:	3301      	adds	r3, #1
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	2b31      	cmp	r3, #49	; 0x31
 8007940:	d138      	bne.n	80079b4 <Check_for_Messages+0x404>
				    Save_Settings(EE_SETTING_COMMS_GPRS, "GPRS");
 8007942:	4b1b      	ldr	r3, [pc, #108]	; (80079b0 <Check_for_Messages+0x400>)
 8007944:	0019      	movs	r1, r3
 8007946:	205c      	movs	r0, #92	; 0x5c
 8007948:	f7fc fb2e 	bl	8003fa8 <Save_Settings>
					Save_Settings(EE_INCOMMING_MESSAGE_NUMBER, Incomming_SMS_Number);
 800794c:	4b10      	ldr	r3, [pc, #64]	; (8007990 <Check_for_Messages+0x3e0>)
 800794e:	0019      	movs	r1, r3
 8007950:	205d      	movs	r0, #93	; 0x5d
 8007952:	f7fc fb29 	bl	8003fa8 <Save_Settings>
				    Message[0] = EE_GPRS_ENABLED;
 8007956:	4b13      	ldr	r3, [pc, #76]	; (80079a4 <Check_for_Messages+0x3f4>)
 8007958:	2226      	movs	r2, #38	; 0x26
 800795a:	701a      	strb	r2, [r3, #0]
					Message[1] = EE_AT_MESSAGE;
 800795c:	4b11      	ldr	r3, [pc, #68]	; (80079a4 <Check_for_Messages+0x3f4>)
 800795e:	2233      	movs	r2, #51	; 0x33
 8007960:	705a      	strb	r2, [r3, #1]
					Message[2] = 0;
 8007962:	4b10      	ldr	r3, [pc, #64]	; (80079a4 <Check_for_Messages+0x3f4>)
 8007964:	2200      	movs	r2, #0
 8007966:	709a      	strb	r2, [r3, #2]
					Add_Message_to_Que(Message, BackdoorPass_Flag, EE_INCOMMING_MESSAGE_NUMBER, 0, !UserPass_Flag);
 8007968:	2357      	movs	r3, #87	; 0x57
 800796a:	18fb      	adds	r3, r7, r3
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	425a      	negs	r2, r3
 8007970:	4153      	adcs	r3, r2
 8007972:	b2db      	uxtb	r3, r3
 8007974:	001a      	movs	r2, r3
 8007976:	2355      	movs	r3, #85	; 0x55
 8007978:	18fb      	adds	r3, r7, r3
 800797a:	7819      	ldrb	r1, [r3, #0]
 800797c:	4809      	ldr	r0, [pc, #36]	; (80079a4 <Check_for_Messages+0x3f4>)
 800797e:	9200      	str	r2, [sp, #0]
 8007980:	2300      	movs	r3, #0
 8007982:	225d      	movs	r2, #93	; 0x5d
 8007984:	f7ff fad2 	bl	8006f2c <Add_Message_to_Que>
				} else if((smspoint[0] == 'G')&&(smspoint[1] == '1')) {  // Set GPRS as Main Coms method and save setting!!
 8007988:	e29d      	b.n	8007ec6 <Check_for_Messages+0x916>
 800798a:	46c0      	nop			; (mov r8, r8)
 800798c:	200020c4 	.word	0x200020c4
 8007990:	20001698 	.word	0x20001698
 8007994:	080169ac 	.word	0x080169ac
 8007998:	20001802 	.word	0x20001802
 800799c:	080169b4 	.word	0x080169b4
 80079a0:	080169b8 	.word	0x080169b8
 80079a4:	200006c8 	.word	0x200006c8
 80079a8:	200018d4 	.word	0x200018d4
 80079ac:	2000079c 	.word	0x2000079c
 80079b0:	080169bc 	.word	0x080169bc
				} else if((smspoint[0] == 'G')&&(smspoint[1] == '0')) {  // Set SMS as Main Coms method and save setting!!
 80079b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	2b47      	cmp	r3, #71	; 0x47
 80079ba:	d128      	bne.n	8007a0e <Check_for_Messages+0x45e>
 80079bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079be:	3301      	adds	r3, #1
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	2b30      	cmp	r3, #48	; 0x30
 80079c4:	d123      	bne.n	8007a0e <Check_for_Messages+0x45e>
				    Save_Settings(EE_SETTING_COMMS_GPRS, "SMS");
 80079c6:	4bea      	ldr	r3, [pc, #936]	; (8007d70 <Check_for_Messages+0x7c0>)
 80079c8:	0019      	movs	r1, r3
 80079ca:	205c      	movs	r0, #92	; 0x5c
 80079cc:	f7fc faec 	bl	8003fa8 <Save_Settings>
					Save_Settings(EE_INCOMMING_MESSAGE_NUMBER, Incomming_SMS_Number);
 80079d0:	4be8      	ldr	r3, [pc, #928]	; (8007d74 <Check_for_Messages+0x7c4>)
 80079d2:	0019      	movs	r1, r3
 80079d4:	205d      	movs	r0, #93	; 0x5d
 80079d6:	f7fc fae7 	bl	8003fa8 <Save_Settings>
				    Message[0] = EE_GPRS_DISABLED;
 80079da:	4be7      	ldr	r3, [pc, #924]	; (8007d78 <Check_for_Messages+0x7c8>)
 80079dc:	2227      	movs	r2, #39	; 0x27
 80079de:	701a      	strb	r2, [r3, #0]
					Message[1] = EE_AT_MESSAGE;
 80079e0:	4be5      	ldr	r3, [pc, #916]	; (8007d78 <Check_for_Messages+0x7c8>)
 80079e2:	2233      	movs	r2, #51	; 0x33
 80079e4:	705a      	strb	r2, [r3, #1]
					Message[2] = 0;
 80079e6:	4be4      	ldr	r3, [pc, #912]	; (8007d78 <Check_for_Messages+0x7c8>)
 80079e8:	2200      	movs	r2, #0
 80079ea:	709a      	strb	r2, [r3, #2]
					Add_Message_to_Que(Message, BackdoorPass_Flag, EE_INCOMMING_MESSAGE_NUMBER, 0, !UserPass_Flag);
 80079ec:	2357      	movs	r3, #87	; 0x57
 80079ee:	18fb      	adds	r3, r7, r3
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	425a      	negs	r2, r3
 80079f4:	4153      	adcs	r3, r2
 80079f6:	b2db      	uxtb	r3, r3
 80079f8:	001a      	movs	r2, r3
 80079fa:	2355      	movs	r3, #85	; 0x55
 80079fc:	18fb      	adds	r3, r7, r3
 80079fe:	7819      	ldrb	r1, [r3, #0]
 8007a00:	48dd      	ldr	r0, [pc, #884]	; (8007d78 <Check_for_Messages+0x7c8>)
 8007a02:	9200      	str	r2, [sp, #0]
 8007a04:	2300      	movs	r3, #0
 8007a06:	225d      	movs	r2, #93	; 0x5d
 8007a08:	f7ff fa90 	bl	8006f2c <Add_Message_to_Que>
				} else if((smspoint[0] == 'G')&&(smspoint[1] == '0')) {  // Set SMS as Main Coms method and save setting!!
 8007a0c:	e25b      	b.n	8007ec6 <Check_for_Messages+0x916>
				} else if(smspoint[0] == 'T') {  // return Signal strength to sender
 8007a0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	2b54      	cmp	r3, #84	; 0x54
 8007a14:	d11b      	bne.n	8007a4e <Check_for_Messages+0x49e>
					Save_Settings(EE_INCOMMING_MESSAGE_NUMBER, Incomming_SMS_Number);
 8007a16:	4bd7      	ldr	r3, [pc, #860]	; (8007d74 <Check_for_Messages+0x7c4>)
 8007a18:	0019      	movs	r1, r3
 8007a1a:	205d      	movs	r0, #93	; 0x5d
 8007a1c:	f7fc fac4 	bl	8003fa8 <Save_Settings>
				    Message[0] = SIGNAL_STRENGTH;
 8007a20:	4bd5      	ldr	r3, [pc, #852]	; (8007d78 <Check_for_Messages+0x7c8>)
 8007a22:	226a      	movs	r2, #106	; 0x6a
 8007a24:	701a      	strb	r2, [r3, #0]
					Message[1] = 0;
 8007a26:	4bd4      	ldr	r3, [pc, #848]	; (8007d78 <Check_for_Messages+0x7c8>)
 8007a28:	2200      	movs	r2, #0
 8007a2a:	705a      	strb	r2, [r3, #1]
					Add_Message_to_Que(Message, BackdoorPass_Flag, EE_INCOMMING_MESSAGE_NUMBER, 0, !UserPass_Flag);
 8007a2c:	2357      	movs	r3, #87	; 0x57
 8007a2e:	18fb      	adds	r3, r7, r3
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	425a      	negs	r2, r3
 8007a34:	4153      	adcs	r3, r2
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	001a      	movs	r2, r3
 8007a3a:	2355      	movs	r3, #85	; 0x55
 8007a3c:	18fb      	adds	r3, r7, r3
 8007a3e:	7819      	ldrb	r1, [r3, #0]
 8007a40:	48cd      	ldr	r0, [pc, #820]	; (8007d78 <Check_for_Messages+0x7c8>)
 8007a42:	9200      	str	r2, [sp, #0]
 8007a44:	2300      	movs	r3, #0
 8007a46:	225d      	movs	r2, #93	; 0x5d
 8007a48:	f7ff fa70 	bl	8006f2c <Add_Message_to_Que>
 8007a4c:	e23b      	b.n	8007ec6 <Check_for_Messages+0x916>
				} else if(smspoint[0] == 'v') {  // return Version and Product ID to sender
 8007a4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	2b76      	cmp	r3, #118	; 0x76
 8007a54:	d11b      	bne.n	8007a8e <Check_for_Messages+0x4de>
					Save_Settings(EE_INCOMMING_MESSAGE_NUMBER, Incomming_SMS_Number);
 8007a56:	4bc7      	ldr	r3, [pc, #796]	; (8007d74 <Check_for_Messages+0x7c4>)
 8007a58:	0019      	movs	r1, r3
 8007a5a:	205d      	movs	r0, #93	; 0x5d
 8007a5c:	f7fc faa4 	bl	8003fa8 <Save_Settings>
				    Message[0] = SOFTWARE_VERSION;
 8007a60:	4bc5      	ldr	r3, [pc, #788]	; (8007d78 <Check_for_Messages+0x7c8>)
 8007a62:	226b      	movs	r2, #107	; 0x6b
 8007a64:	701a      	strb	r2, [r3, #0]
					Message[1] = 0;
 8007a66:	4bc4      	ldr	r3, [pc, #784]	; (8007d78 <Check_for_Messages+0x7c8>)
 8007a68:	2200      	movs	r2, #0
 8007a6a:	705a      	strb	r2, [r3, #1]
					Add_Message_to_Que(Message, BackdoorPass_Flag, EE_INCOMMING_MESSAGE_NUMBER, 0, !UserPass_Flag);
 8007a6c:	2357      	movs	r3, #87	; 0x57
 8007a6e:	18fb      	adds	r3, r7, r3
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	425a      	negs	r2, r3
 8007a74:	4153      	adcs	r3, r2
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	001a      	movs	r2, r3
 8007a7a:	2355      	movs	r3, #85	; 0x55
 8007a7c:	18fb      	adds	r3, r7, r3
 8007a7e:	7819      	ldrb	r1, [r3, #0]
 8007a80:	48bd      	ldr	r0, [pc, #756]	; (8007d78 <Check_for_Messages+0x7c8>)
 8007a82:	9200      	str	r2, [sp, #0]
 8007a84:	2300      	movs	r3, #0
 8007a86:	225d      	movs	r2, #93	; 0x5d
 8007a88:	f7ff fa50 	bl	8006f2c <Add_Message_to_Que>
 8007a8c:	e21b      	b.n	8007ec6 <Check_for_Messages+0x916>
				} else if(smspoint[0] == 't') {  // return Date Time to sender
 8007a8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	2b74      	cmp	r3, #116	; 0x74
 8007a94:	d11b      	bne.n	8007ace <Check_for_Messages+0x51e>
					Save_Settings(EE_INCOMMING_MESSAGE_NUMBER, Incomming_SMS_Number);
 8007a96:	4bb7      	ldr	r3, [pc, #732]	; (8007d74 <Check_for_Messages+0x7c4>)
 8007a98:	0019      	movs	r1, r3
 8007a9a:	205d      	movs	r0, #93	; 0x5d
 8007a9c:	f7fc fa84 	bl	8003fa8 <Save_Settings>
				    Message[0] = DATETIME;
 8007aa0:	4bb5      	ldr	r3, [pc, #724]	; (8007d78 <Check_for_Messages+0x7c8>)
 8007aa2:	226d      	movs	r2, #109	; 0x6d
 8007aa4:	701a      	strb	r2, [r3, #0]
					Message[1] = 0;
 8007aa6:	4bb4      	ldr	r3, [pc, #720]	; (8007d78 <Check_for_Messages+0x7c8>)
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	705a      	strb	r2, [r3, #1]
					Add_Message_to_Que(Message, BackdoorPass_Flag, EE_INCOMMING_MESSAGE_NUMBER, 0, !UserPass_Flag);
 8007aac:	2357      	movs	r3, #87	; 0x57
 8007aae:	18fb      	adds	r3, r7, r3
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	425a      	negs	r2, r3
 8007ab4:	4153      	adcs	r3, r2
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	001a      	movs	r2, r3
 8007aba:	2355      	movs	r3, #85	; 0x55
 8007abc:	18fb      	adds	r3, r7, r3
 8007abe:	7819      	ldrb	r1, [r3, #0]
 8007ac0:	48ad      	ldr	r0, [pc, #692]	; (8007d78 <Check_for_Messages+0x7c8>)
 8007ac2:	9200      	str	r2, [sp, #0]
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	225d      	movs	r2, #93	; 0x5d
 8007ac8:	f7ff fa30 	bl	8006f2c <Add_Message_to_Que>
 8007acc:	e1fb      	b.n	8007ec6 <Check_for_Messages+0x916>
				} else if(smspoint[0] == 's') {  // return zone setup
 8007ace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	2b73      	cmp	r3, #115	; 0x73
 8007ad4:	d11b      	bne.n	8007b0e <Check_for_Messages+0x55e>
					Save_Settings(EE_INCOMMING_MESSAGE_NUMBER, Incomming_SMS_Number);
 8007ad6:	4ba7      	ldr	r3, [pc, #668]	; (8007d74 <Check_for_Messages+0x7c4>)
 8007ad8:	0019      	movs	r1, r3
 8007ada:	205d      	movs	r0, #93	; 0x5d
 8007adc:	f7fc fa64 	bl	8003fa8 <Save_Settings>
				    Message[0] = ZONESETUP;
 8007ae0:	4ba5      	ldr	r3, [pc, #660]	; (8007d78 <Check_for_Messages+0x7c8>)
 8007ae2:	2274      	movs	r2, #116	; 0x74
 8007ae4:	701a      	strb	r2, [r3, #0]
					Message[1] = 0;
 8007ae6:	4ba4      	ldr	r3, [pc, #656]	; (8007d78 <Check_for_Messages+0x7c8>)
 8007ae8:	2200      	movs	r2, #0
 8007aea:	705a      	strb	r2, [r3, #1]
					Add_Message_to_Que(Message, BackdoorPass_Flag, EE_INCOMMING_MESSAGE_NUMBER, 0, !UserPass_Flag);
 8007aec:	2357      	movs	r3, #87	; 0x57
 8007aee:	18fb      	adds	r3, r7, r3
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	425a      	negs	r2, r3
 8007af4:	4153      	adcs	r3, r2
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	001a      	movs	r2, r3
 8007afa:	2355      	movs	r3, #85	; 0x55
 8007afc:	18fb      	adds	r3, r7, r3
 8007afe:	7819      	ldrb	r1, [r3, #0]
 8007b00:	489d      	ldr	r0, [pc, #628]	; (8007d78 <Check_for_Messages+0x7c8>)
 8007b02:	9200      	str	r2, [sp, #0]
 8007b04:	2300      	movs	r3, #0
 8007b06:	225d      	movs	r2, #93	; 0x5d
 8007b08:	f7ff fa10 	bl	8006f2c <Add_Message_to_Que>
 8007b0c:	e1db      	b.n	8007ec6 <Check_for_Messages+0x916>
				} else if(smspoint[0] == 'Z') {  // return AirTime
 8007b0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	2b5a      	cmp	r3, #90	; 0x5a
 8007b14:	d11e      	bne.n	8007b54 <Check_for_Messages+0x5a4>
					Save_Settings(EE_INCOMMING_MESSAGE_NUMBER, Incomming_SMS_Number);
 8007b16:	4b97      	ldr	r3, [pc, #604]	; (8007d74 <Check_for_Messages+0x7c4>)
 8007b18:	0019      	movs	r1, r3
 8007b1a:	205d      	movs	r0, #93	; 0x5d
 8007b1c:	f7fc fa44 	bl	8003fa8 <Save_Settings>
				    Message[0] = AIRTIME;
 8007b20:	4b95      	ldr	r3, [pc, #596]	; (8007d78 <Check_for_Messages+0x7c8>)
 8007b22:	226c      	movs	r2, #108	; 0x6c
 8007b24:	701a      	strb	r2, [r3, #0]
					Message[1] = 0;
 8007b26:	4b94      	ldr	r3, [pc, #592]	; (8007d78 <Check_for_Messages+0x7c8>)
 8007b28:	2200      	movs	r2, #0
 8007b2a:	705a      	strb	r2, [r3, #1]
					Add_Message_to_Que(Message, BackdoorPass_Flag, EE_INCOMMING_MESSAGE_NUMBER, 0, !UserPass_Flag);
 8007b2c:	2357      	movs	r3, #87	; 0x57
 8007b2e:	18fb      	adds	r3, r7, r3
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	425a      	negs	r2, r3
 8007b34:	4153      	adcs	r3, r2
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	001a      	movs	r2, r3
 8007b3a:	2355      	movs	r3, #85	; 0x55
 8007b3c:	18fb      	adds	r3, r7, r3
 8007b3e:	7819      	ldrb	r1, [r3, #0]
 8007b40:	488d      	ldr	r0, [pc, #564]	; (8007d78 <Check_for_Messages+0x7c8>)
 8007b42:	9200      	str	r2, [sp, #0]
 8007b44:	2300      	movs	r3, #0
 8007b46:	225d      	movs	r2, #93	; 0x5d
 8007b48:	f7ff f9f0 	bl	8006f2c <Add_Message_to_Que>
					Request_AitTime_Flag = TRUE;
 8007b4c:	4b8b      	ldr	r3, [pc, #556]	; (8007d7c <Check_for_Messages+0x7cc>)
 8007b4e:	2201      	movs	r2, #1
 8007b50:	701a      	strb	r2, [r3, #0]
 8007b52:	e1b8      	b.n	8007ec6 <Check_for_Messages+0x916>
				} else if(smspoint[0] == 'C') {  // Enable or Disable SMS in Chime mode
 8007b54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	2b43      	cmp	r3, #67	; 0x43
 8007b5a:	d15f      	bne.n	8007c1c <Check_for_Messages+0x66c>
					Save_Settings(EE_INCOMMING_MESSAGE_NUMBER, Incomming_SMS_Number);
 8007b5c:	4b85      	ldr	r3, [pc, #532]	; (8007d74 <Check_for_Messages+0x7c4>)
 8007b5e:	0019      	movs	r1, r3
 8007b60:	205d      	movs	r0, #93	; 0x5d
 8007b62:	f7fc fa21 	bl	8003fa8 <Save_Settings>
					if(smspoint[1] == '1') {
 8007b66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b68:	3301      	adds	r3, #1
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	2b31      	cmp	r3, #49	; 0x31
 8007b6e:	d127      	bne.n	8007bc0 <Check_for_Messages+0x610>
						ChimeSMS_Enabled = 1;
 8007b70:	4b83      	ldr	r3, [pc, #524]	; (8007d80 <Check_for_Messages+0x7d0>)
 8007b72:	2201      	movs	r2, #1
 8007b74:	701a      	strb	r2, [r3, #0]
						Save_Settings(EE_SETTING_SEND_SMS_IN_CHIME, "1");
 8007b76:	4b83      	ldr	r3, [pc, #524]	; (8007d84 <Check_for_Messages+0x7d4>)
 8007b78:	0019      	movs	r1, r3
 8007b7a:	205b      	movs	r0, #91	; 0x5b
 8007b7c:	f7fc fa14 	bl	8003fa8 <Save_Settings>

						Message[0] = EE_SMS_IN_CHIME_MODE;
 8007b80:	4b7d      	ldr	r3, [pc, #500]	; (8007d78 <Check_for_Messages+0x7c8>)
 8007b82:	222a      	movs	r2, #42	; 0x2a
 8007b84:	701a      	strb	r2, [r3, #0]
						Message[1] = EE_BY_MESSAGE;
 8007b86:	4b7c      	ldr	r3, [pc, #496]	; (8007d78 <Check_for_Messages+0x7c8>)
 8007b88:	220d      	movs	r2, #13
 8007b8a:	705a      	strb	r2, [r3, #1]
						Message[2] = EE_INCOMMING_MESSAGE_NUMBER;
 8007b8c:	4b7a      	ldr	r3, [pc, #488]	; (8007d78 <Check_for_Messages+0x7c8>)
 8007b8e:	225d      	movs	r2, #93	; 0x5d
 8007b90:	709a      	strb	r2, [r3, #2]
						Message[3] = EE_AT_MESSAGE;
 8007b92:	4b79      	ldr	r3, [pc, #484]	; (8007d78 <Check_for_Messages+0x7c8>)
 8007b94:	2233      	movs	r2, #51	; 0x33
 8007b96:	70da      	strb	r2, [r3, #3]
						Message[4] = 0;
 8007b98:	4b77      	ldr	r3, [pc, #476]	; (8007d78 <Check_for_Messages+0x7c8>)
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	711a      	strb	r2, [r3, #4]
						Add_Message_to_Que(Message, BackdoorPass_Flag, EE_INCOMMING_MESSAGE_NUMBER, 0, !UserPass_Flag);
 8007b9e:	2357      	movs	r3, #87	; 0x57
 8007ba0:	18fb      	adds	r3, r7, r3
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	425a      	negs	r2, r3
 8007ba6:	4153      	adcs	r3, r2
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	001a      	movs	r2, r3
 8007bac:	2355      	movs	r3, #85	; 0x55
 8007bae:	18fb      	adds	r3, r7, r3
 8007bb0:	7819      	ldrb	r1, [r3, #0]
 8007bb2:	4871      	ldr	r0, [pc, #452]	; (8007d78 <Check_for_Messages+0x7c8>)
 8007bb4:	9200      	str	r2, [sp, #0]
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	225d      	movs	r2, #93	; 0x5d
 8007bba:	f7ff f9b7 	bl	8006f2c <Add_Message_to_Que>
 8007bbe:	e182      	b.n	8007ec6 <Check_for_Messages+0x916>
					} else if(smspoint[1] == '0') {
 8007bc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	2b30      	cmp	r3, #48	; 0x30
 8007bc8:	d000      	beq.n	8007bcc <Check_for_Messages+0x61c>
 8007bca:	e17c      	b.n	8007ec6 <Check_for_Messages+0x916>
						ChimeSMS_Enabled = 0;
 8007bcc:	4b6c      	ldr	r3, [pc, #432]	; (8007d80 <Check_for_Messages+0x7d0>)
 8007bce:	2200      	movs	r2, #0
 8007bd0:	701a      	strb	r2, [r3, #0]
						Save_Settings(EE_SETTING_SEND_SMS_IN_CHIME, "0");
 8007bd2:	4b6d      	ldr	r3, [pc, #436]	; (8007d88 <Check_for_Messages+0x7d8>)
 8007bd4:	0019      	movs	r1, r3
 8007bd6:	205b      	movs	r0, #91	; 0x5b
 8007bd8:	f7fc f9e6 	bl	8003fa8 <Save_Settings>

						Message[0] = EE_SMS_NOT_IN_CHIME_MODE;
 8007bdc:	4b66      	ldr	r3, [pc, #408]	; (8007d78 <Check_for_Messages+0x7c8>)
 8007bde:	222b      	movs	r2, #43	; 0x2b
 8007be0:	701a      	strb	r2, [r3, #0]
						Message[1] = EE_BY_MESSAGE;
 8007be2:	4b65      	ldr	r3, [pc, #404]	; (8007d78 <Check_for_Messages+0x7c8>)
 8007be4:	220d      	movs	r2, #13
 8007be6:	705a      	strb	r2, [r3, #1]
						Message[2] = EE_INCOMMING_MESSAGE_NUMBER;
 8007be8:	4b63      	ldr	r3, [pc, #396]	; (8007d78 <Check_for_Messages+0x7c8>)
 8007bea:	225d      	movs	r2, #93	; 0x5d
 8007bec:	709a      	strb	r2, [r3, #2]
						Message[3] = EE_AT_MESSAGE;
 8007bee:	4b62      	ldr	r3, [pc, #392]	; (8007d78 <Check_for_Messages+0x7c8>)
 8007bf0:	2233      	movs	r2, #51	; 0x33
 8007bf2:	70da      	strb	r2, [r3, #3]
						Message[4] = 0;
 8007bf4:	4b60      	ldr	r3, [pc, #384]	; (8007d78 <Check_for_Messages+0x7c8>)
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	711a      	strb	r2, [r3, #4]
						Add_Message_to_Que(Message, BackdoorPass_Flag, EE_INCOMMING_MESSAGE_NUMBER, 0, !UserPass_Flag);
 8007bfa:	2357      	movs	r3, #87	; 0x57
 8007bfc:	18fb      	adds	r3, r7, r3
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	425a      	negs	r2, r3
 8007c02:	4153      	adcs	r3, r2
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	001a      	movs	r2, r3
 8007c08:	2355      	movs	r3, #85	; 0x55
 8007c0a:	18fb      	adds	r3, r7, r3
 8007c0c:	7819      	ldrb	r1, [r3, #0]
 8007c0e:	485a      	ldr	r0, [pc, #360]	; (8007d78 <Check_for_Messages+0x7c8>)
 8007c10:	9200      	str	r2, [sp, #0]
 8007c12:	2300      	movs	r3, #0
 8007c14:	225d      	movs	r2, #93	; 0x5d
 8007c16:	f7ff f989 	bl	8006f2c <Add_Message_to_Que>
 8007c1a:	e154      	b.n	8007ec6 <Check_for_Messages+0x916>
					}

				} else if(smspoint[0] == 'A') {  // ARM
 8007c1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	2b41      	cmp	r3, #65	; 0x41
 8007c22:	d137      	bne.n	8007c94 <Check_for_Messages+0x6e4>
					if(Arm_Status != 1) {
 8007c24:	4b59      	ldr	r3, [pc, #356]	; (8007d8c <Check_for_Messages+0x7dc>)
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d100      	bne.n	8007c2e <Check_for_Messages+0x67e>
 8007c2c:	e14b      	b.n	8007ec6 <Check_for_Messages+0x916>
						Save_Settings(EE_INCOMMING_MESSAGE_NUMBER, Incomming_SMS_Number);
 8007c2e:	4b51      	ldr	r3, [pc, #324]	; (8007d74 <Check_for_Messages+0x7c4>)
 8007c30:	0019      	movs	r1, r3
 8007c32:	205d      	movs	r0, #93	; 0x5d
 8007c34:	f7fc f9b8 	bl	8003fa8 <Save_Settings>
						Message[0] = EE_AWAY_MODE;
 8007c38:	4b4f      	ldr	r3, [pc, #316]	; (8007d78 <Check_for_Messages+0x7c8>)
 8007c3a:	2202      	movs	r2, #2
 8007c3c:	701a      	strb	r2, [r3, #0]
						Message[1] = EE_BY_MESSAGE;
 8007c3e:	4b4e      	ldr	r3, [pc, #312]	; (8007d78 <Check_for_Messages+0x7c8>)
 8007c40:	220d      	movs	r2, #13
 8007c42:	705a      	strb	r2, [r3, #1]
						Message[2] = EE_INCOMMING_MESSAGE_NUMBER;
 8007c44:	4b4c      	ldr	r3, [pc, #304]	; (8007d78 <Check_for_Messages+0x7c8>)
 8007c46:	225d      	movs	r2, #93	; 0x5d
 8007c48:	709a      	strb	r2, [r3, #2]
						Message[3] = EE_AT_MESSAGE;
 8007c4a:	4b4b      	ldr	r3, [pc, #300]	; (8007d78 <Check_for_Messages+0x7c8>)
 8007c4c:	2233      	movs	r2, #51	; 0x33
 8007c4e:	70da      	strb	r2, [r3, #3]
						Message[4] = 0;
 8007c50:	4b49      	ldr	r3, [pc, #292]	; (8007d78 <Check_for_Messages+0x7c8>)
 8007c52:	2200      	movs	r2, #0
 8007c54:	711a      	strb	r2, [r3, #4]

						Add_Message_to_Que(Message, 0, EE_INCOMMING_MESSAGE_NUMBER, 0, !UserPass_Flag);
 8007c56:	2357      	movs	r3, #87	; 0x57
 8007c58:	18fb      	adds	r3, r7, r3
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	425a      	negs	r2, r3
 8007c5e:	4153      	adcs	r3, r2
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	4845      	ldr	r0, [pc, #276]	; (8007d78 <Check_for_Messages+0x7c8>)
 8007c64:	9300      	str	r3, [sp, #0]
 8007c66:	2300      	movs	r3, #0
 8007c68:	225d      	movs	r2, #93	; 0x5d
 8007c6a:	2100      	movs	r1, #0
 8007c6c:	f7ff f95e 	bl	8006f2c <Add_Message_to_Que>

						HAL_GPIO_WritePin(OUT_ONOFF_GPIO_Port, OUT_ONOFF_Pin, GPIO_PIN_SET);
 8007c70:	2380      	movs	r3, #128	; 0x80
 8007c72:	0219      	lsls	r1, r3, #8
 8007c74:	2390      	movs	r3, #144	; 0x90
 8007c76:	05db      	lsls	r3, r3, #23
 8007c78:	2201      	movs	r2, #1
 8007c7a:	0018      	movs	r0, r3
 8007c7c:	f003 f8ea 	bl	800ae54 <HAL_GPIO_WritePin>
						Siren_Annunciate = 1;
 8007c80:	4b43      	ldr	r3, [pc, #268]	; (8007d90 <Check_for_Messages+0x7e0>)
 8007c82:	2201      	movs	r2, #1
 8007c84:	701a      	strb	r2, [r3, #0]
						Siren_Annunciate_Delay = 0;
 8007c86:	4b43      	ldr	r3, [pc, #268]	; (8007d94 <Check_for_Messages+0x7e4>)
 8007c88:	2200      	movs	r2, #0
 8007c8a:	601a      	str	r2, [r3, #0]
						Arm_Status = 1;
 8007c8c:	4b3f      	ldr	r3, [pc, #252]	; (8007d8c <Check_for_Messages+0x7dc>)
 8007c8e:	2201      	movs	r2, #1
 8007c90:	701a      	strb	r2, [r3, #0]
 8007c92:	e118      	b.n	8007ec6 <Check_for_Messages+0x916>
					}
				} else if(smspoint[0] == 'O') {  // OFF Mode
 8007c94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	2b4f      	cmp	r3, #79	; 0x4f
 8007c9a:	d000      	beq.n	8007c9e <Check_for_Messages+0x6ee>
 8007c9c:	e086      	b.n	8007dac <Check_for_Messages+0x7fc>
					ZoneTriggers[0] = 0;
 8007c9e:	4b3e      	ldr	r3, [pc, #248]	; (8007d98 <Check_for_Messages+0x7e8>)
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	701a      	strb	r2, [r3, #0]
					ZoneTriggers[1] = 0;
 8007ca4:	4b3c      	ldr	r3, [pc, #240]	; (8007d98 <Check_for_Messages+0x7e8>)
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	705a      	strb	r2, [r3, #1]
					ZoneTriggers[2] = 0;
 8007caa:	4b3b      	ldr	r3, [pc, #236]	; (8007d98 <Check_for_Messages+0x7e8>)
 8007cac:	2200      	movs	r2, #0
 8007cae:	709a      	strb	r2, [r3, #2]
					ZoneTriggers[3] = 0;
 8007cb0:	4b39      	ldr	r3, [pc, #228]	; (8007d98 <Check_for_Messages+0x7e8>)
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	70da      	strb	r2, [r3, #3]
					ZoneTriggers[4] = 0;
 8007cb6:	4b38      	ldr	r3, [pc, #224]	; (8007d98 <Check_for_Messages+0x7e8>)
 8007cb8:	2200      	movs	r2, #0
 8007cba:	711a      	strb	r2, [r3, #4]
					ZoneTriggers[5] = 0;
 8007cbc:	4b36      	ldr	r3, [pc, #216]	; (8007d98 <Check_for_Messages+0x7e8>)
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	715a      	strb	r2, [r3, #5]

					if((Arm_Status == 1)||(Arm_Status == 2)) {
 8007cc2:	4b32      	ldr	r3, [pc, #200]	; (8007d8c <Check_for_Messages+0x7dc>)
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d003      	beq.n	8007cd2 <Check_for_Messages+0x722>
 8007cca:	4b30      	ldr	r3, [pc, #192]	; (8007d8c <Check_for_Messages+0x7dc>)
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	d131      	bne.n	8007d36 <Check_for_Messages+0x786>
						Save_Settings(EE_INCOMMING_MESSAGE_NUMBER, Incomming_SMS_Number);
 8007cd2:	4b28      	ldr	r3, [pc, #160]	; (8007d74 <Check_for_Messages+0x7c4>)
 8007cd4:	0019      	movs	r1, r3
 8007cd6:	205d      	movs	r0, #93	; 0x5d
 8007cd8:	f7fc f966 	bl	8003fa8 <Save_Settings>
						Message[0] = EE_SYSTEM_OFF_MODE;
 8007cdc:	4b26      	ldr	r3, [pc, #152]	; (8007d78 <Check_for_Messages+0x7c8>)
 8007cde:	2204      	movs	r2, #4
 8007ce0:	701a      	strb	r2, [r3, #0]
						Message[1] = EE_BY_MESSAGE;
 8007ce2:	4b25      	ldr	r3, [pc, #148]	; (8007d78 <Check_for_Messages+0x7c8>)
 8007ce4:	220d      	movs	r2, #13
 8007ce6:	705a      	strb	r2, [r3, #1]
						Message[2] = EE_INCOMMING_MESSAGE_NUMBER;
 8007ce8:	4b23      	ldr	r3, [pc, #140]	; (8007d78 <Check_for_Messages+0x7c8>)
 8007cea:	225d      	movs	r2, #93	; 0x5d
 8007cec:	709a      	strb	r2, [r3, #2]
						Message[3] = EE_AT_MESSAGE;
 8007cee:	4b22      	ldr	r3, [pc, #136]	; (8007d78 <Check_for_Messages+0x7c8>)
 8007cf0:	2233      	movs	r2, #51	; 0x33
 8007cf2:	70da      	strb	r2, [r3, #3]
						Message[4] = 0;
 8007cf4:	4b20      	ldr	r3, [pc, #128]	; (8007d78 <Check_for_Messages+0x7c8>)
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	711a      	strb	r2, [r3, #4]

						Add_Message_to_Que(Message, 0, EE_INCOMMING_MESSAGE_NUMBER, 0, !UserPass_Flag);
 8007cfa:	2357      	movs	r3, #87	; 0x57
 8007cfc:	18fb      	adds	r3, r7, r3
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	425a      	negs	r2, r3
 8007d02:	4153      	adcs	r3, r2
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	481c      	ldr	r0, [pc, #112]	; (8007d78 <Check_for_Messages+0x7c8>)
 8007d08:	9300      	str	r3, [sp, #0]
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	225d      	movs	r2, #93	; 0x5d
 8007d0e:	2100      	movs	r1, #0
 8007d10:	f7ff f90c 	bl	8006f2c <Add_Message_to_Que>

						if(Arm_Status == 2) {
 8007d14:	4b1d      	ldr	r3, [pc, #116]	; (8007d8c <Check_for_Messages+0x7dc>)
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	2b02      	cmp	r3, #2
 8007d1a:	d103      	bne.n	8007d24 <Check_for_Messages+0x774>
							Buzzer_Annunciate = 2;
 8007d1c:	4b1f      	ldr	r3, [pc, #124]	; (8007d9c <Check_for_Messages+0x7ec>)
 8007d1e:	2202      	movs	r2, #2
 8007d20:	701a      	strb	r2, [r3, #0]
 8007d22:	e002      	b.n	8007d2a <Check_for_Messages+0x77a>
						} else {
							Siren_Annunciate = 2;
 8007d24:	4b1a      	ldr	r3, [pc, #104]	; (8007d90 <Check_for_Messages+0x7e0>)
 8007d26:	2202      	movs	r2, #2
 8007d28:	701a      	strb	r2, [r3, #0]
						}

						Siren_Annunciate_Delay = 0;
 8007d2a:	4b1a      	ldr	r3, [pc, #104]	; (8007d94 <Check_for_Messages+0x7e4>)
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	601a      	str	r2, [r3, #0]
						Arm_Status = 0;
 8007d30:	4b16      	ldr	r3, [pc, #88]	; (8007d8c <Check_for_Messages+0x7dc>)
 8007d32:	2200      	movs	r2, #0
 8007d34:	701a      	strb	r2, [r3, #0]
					}
					HAL_GPIO_WritePin(OUT_ONOFF_GPIO_Port, OUT_ONOFF_Pin, GPIO_PIN_RESET);
 8007d36:	2380      	movs	r3, #128	; 0x80
 8007d38:	0219      	lsls	r1, r3, #8
 8007d3a:	2390      	movs	r3, #144	; 0x90
 8007d3c:	05db      	lsls	r3, r3, #23
 8007d3e:	2200      	movs	r2, #0
 8007d40:	0018      	movs	r0, r3
 8007d42:	f003 f887 	bl	800ae54 <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(GPIOB, RELAY1_Pin, GPIO_PIN_RESET);
 8007d46:	2380      	movs	r3, #128	; 0x80
 8007d48:	019b      	lsls	r3, r3, #6
 8007d4a:	4815      	ldr	r0, [pc, #84]	; (8007da0 <Check_for_Messages+0x7f0>)
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	0019      	movs	r1, r3
 8007d50:	f003 f880 	bl	800ae54 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, RELAY2_Pin, GPIO_PIN_RESET);
 8007d54:	2380      	movs	r3, #128	; 0x80
 8007d56:	015b      	lsls	r3, r3, #5
 8007d58:	4811      	ldr	r0, [pc, #68]	; (8007da0 <Check_for_Messages+0x7f0>)
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	0019      	movs	r1, r3
 8007d5e:	f003 f879 	bl	800ae54 <HAL_GPIO_WritePin>
					Siren_Time = 0;
 8007d62:	4b10      	ldr	r3, [pc, #64]	; (8007da4 <Check_for_Messages+0x7f4>)
 8007d64:	2200      	movs	r2, #0
 8007d66:	601a      	str	r2, [r3, #0]
					Buzzer_Time = 0;
 8007d68:	4b0f      	ldr	r3, [pc, #60]	; (8007da8 <Check_for_Messages+0x7f8>)
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	601a      	str	r2, [r3, #0]
 8007d6e:	e0aa      	b.n	8007ec6 <Check_for_Messages+0x916>
 8007d70:	080169c4 	.word	0x080169c4
 8007d74:	20001698 	.word	0x20001698
 8007d78:	200006c8 	.word	0x200006c8
 8007d7c:	20001804 	.word	0x20001804
 8007d80:	2000134c 	.word	0x2000134c
 8007d84:	080169c8 	.word	0x080169c8
 8007d88:	080169cc 	.word	0x080169cc
 8007d8c:	200007b8 	.word	0x200007b8
 8007d90:	20001686 	.word	0x20001686
 8007d94:	20001688 	.word	0x20001688
 8007d98:	20001638 	.word	0x20001638
 8007d9c:	20001687 	.word	0x20001687
 8007da0:	48000400 	.word	0x48000400
 8007da4:	200007b4 	.word	0x200007b4
 8007da8:	200007b0 	.word	0x200007b0
				} else if(smspoint[0] == 'M') {  // Chime Mode
 8007dac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	2b4d      	cmp	r3, #77	; 0x4d
 8007db2:	d12f      	bne.n	8007e14 <Check_for_Messages+0x864>
					if(Arm_Status != 2) {
 8007db4:	4ba8      	ldr	r3, [pc, #672]	; (8008058 <Check_for_Messages+0xaa8>)
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	d100      	bne.n	8007dbe <Check_for_Messages+0x80e>
 8007dbc:	e083      	b.n	8007ec6 <Check_for_Messages+0x916>
						Save_Settings(EE_INCOMMING_MESSAGE_NUMBER, Incomming_SMS_Number);
 8007dbe:	4ba7      	ldr	r3, [pc, #668]	; (800805c <Check_for_Messages+0xaac>)
 8007dc0:	0019      	movs	r1, r3
 8007dc2:	205d      	movs	r0, #93	; 0x5d
 8007dc4:	f7fc f8f0 	bl	8003fa8 <Save_Settings>
						Message[0] = EE_MONITOR_MODE;
 8007dc8:	4ba5      	ldr	r3, [pc, #660]	; (8008060 <Check_for_Messages+0xab0>)
 8007dca:	2203      	movs	r2, #3
 8007dcc:	701a      	strb	r2, [r3, #0]
						Message[1] = EE_BY_MESSAGE;
 8007dce:	4ba4      	ldr	r3, [pc, #656]	; (8008060 <Check_for_Messages+0xab0>)
 8007dd0:	220d      	movs	r2, #13
 8007dd2:	705a      	strb	r2, [r3, #1]
						Message[2] = EE_INCOMMING_MESSAGE_NUMBER;
 8007dd4:	4ba2      	ldr	r3, [pc, #648]	; (8008060 <Check_for_Messages+0xab0>)
 8007dd6:	225d      	movs	r2, #93	; 0x5d
 8007dd8:	709a      	strb	r2, [r3, #2]
						Message[3] = EE_AT_MESSAGE;
 8007dda:	4ba1      	ldr	r3, [pc, #644]	; (8008060 <Check_for_Messages+0xab0>)
 8007ddc:	2233      	movs	r2, #51	; 0x33
 8007dde:	70da      	strb	r2, [r3, #3]
						Message[4] = 0;
 8007de0:	4b9f      	ldr	r3, [pc, #636]	; (8008060 <Check_for_Messages+0xab0>)
 8007de2:	2200      	movs	r2, #0
 8007de4:	711a      	strb	r2, [r3, #4]

						Add_Message_to_Que(Message, 0, EE_INCOMMING_MESSAGE_NUMBER, 0, !UserPass_Flag);
 8007de6:	2357      	movs	r3, #87	; 0x57
 8007de8:	18fb      	adds	r3, r7, r3
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	425a      	negs	r2, r3
 8007dee:	4153      	adcs	r3, r2
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	489b      	ldr	r0, [pc, #620]	; (8008060 <Check_for_Messages+0xab0>)
 8007df4:	9300      	str	r3, [sp, #0]
 8007df6:	2300      	movs	r3, #0
 8007df8:	225d      	movs	r2, #93	; 0x5d
 8007dfa:	2100      	movs	r1, #0
 8007dfc:	f7ff f896 	bl	8006f2c <Add_Message_to_Que>
						Arm_Status = 2;
 8007e00:	4b95      	ldr	r3, [pc, #596]	; (8008058 <Check_for_Messages+0xaa8>)
 8007e02:	2202      	movs	r2, #2
 8007e04:	701a      	strb	r2, [r3, #0]

						Buzzer_Annunciate = 3;
 8007e06:	4b97      	ldr	r3, [pc, #604]	; (8008064 <Check_for_Messages+0xab4>)
 8007e08:	2203      	movs	r2, #3
 8007e0a:	701a      	strb	r2, [r3, #0]
						Siren_Annunciate_Delay = 0;
 8007e0c:	4b96      	ldr	r3, [pc, #600]	; (8008068 <Check_for_Messages+0xab8>)
 8007e0e:	2200      	movs	r2, #0
 8007e10:	601a      	str	r2, [r3, #0]
 8007e12:	e058      	b.n	8007ec6 <Check_for_Messages+0x916>
					}
				} else if(smspoint[0] == 'P') {  // Panic Mode
 8007e14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	2b50      	cmp	r3, #80	; 0x50
 8007e1a:	d127      	bne.n	8007e6c <Check_for_Messages+0x8bc>
					Save_Settings(EE_INCOMMING_MESSAGE_NUMBER, Incomming_SMS_Number);
 8007e1c:	4b8f      	ldr	r3, [pc, #572]	; (800805c <Check_for_Messages+0xaac>)
 8007e1e:	0019      	movs	r1, r3
 8007e20:	205d      	movs	r0, #93	; 0x5d
 8007e22:	f7fc f8c1 	bl	8003fa8 <Save_Settings>
					Message[0] = EE_PANIC;
 8007e26:	4b8e      	ldr	r3, [pc, #568]	; (8008060 <Check_for_Messages+0xab0>)
 8007e28:	220c      	movs	r2, #12
 8007e2a:	701a      	strb	r2, [r3, #0]
					Message[1] = EE_BY_MESSAGE;
 8007e2c:	4b8c      	ldr	r3, [pc, #560]	; (8008060 <Check_for_Messages+0xab0>)
 8007e2e:	220d      	movs	r2, #13
 8007e30:	705a      	strb	r2, [r3, #1]
					Message[2] = EE_INCOMMING_MESSAGE_NUMBER;
 8007e32:	4b8b      	ldr	r3, [pc, #556]	; (8008060 <Check_for_Messages+0xab0>)
 8007e34:	225d      	movs	r2, #93	; 0x5d
 8007e36:	709a      	strb	r2, [r3, #2]
					Message[3] = EE_AT_MESSAGE;
 8007e38:	4b89      	ldr	r3, [pc, #548]	; (8008060 <Check_for_Messages+0xab0>)
 8007e3a:	2233      	movs	r2, #51	; 0x33
 8007e3c:	70da      	strb	r2, [r3, #3]
					Message[4] = 0;
 8007e3e:	4b88      	ldr	r3, [pc, #544]	; (8008060 <Check_for_Messages+0xab0>)
 8007e40:	2200      	movs	r2, #0
 8007e42:	711a      	strb	r2, [r3, #4]

					Add_Message_to_Que(Message, 0, EE_INCOMMING_MESSAGE_NUMBER, 0, !UserPass_Flag);
 8007e44:	2357      	movs	r3, #87	; 0x57
 8007e46:	18fb      	adds	r3, r7, r3
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	425a      	negs	r2, r3
 8007e4c:	4153      	adcs	r3, r2
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	4883      	ldr	r0, [pc, #524]	; (8008060 <Check_for_Messages+0xab0>)
 8007e52:	9300      	str	r3, [sp, #0]
 8007e54:	2300      	movs	r3, #0
 8007e56:	225d      	movs	r2, #93	; 0x5d
 8007e58:	2100      	movs	r1, #0
 8007e5a:	f7ff f867 	bl	8006f2c <Add_Message_to_Que>
					Panic_Out_Time = OUTPUT_ON_TIME + 1;
 8007e5e:	4b83      	ldr	r3, [pc, #524]	; (800806c <Check_for_Messages+0xabc>)
 8007e60:	2205      	movs	r2, #5
 8007e62:	701a      	strb	r2, [r3, #0]
					Siren_Time = SIREN_SECONDS;
 8007e64:	4b82      	ldr	r3, [pc, #520]	; (8008070 <Check_for_Messages+0xac0>)
 8007e66:	22f0      	movs	r2, #240	; 0xf0
 8007e68:	601a      	str	r2, [r3, #0]
 8007e6a:	e02c      	b.n	8007ec6 <Check_for_Messages+0x916>
				} else if(smspoint[0] == 'H') {  // Silent Panic Mode
 8007e6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	2b48      	cmp	r3, #72	; 0x48
 8007e72:	d128      	bne.n	8007ec6 <Check_for_Messages+0x916>
					Save_Settings(EE_INCOMMING_MESSAGE_NUMBER, Incomming_SMS_Number);
 8007e74:	4b79      	ldr	r3, [pc, #484]	; (800805c <Check_for_Messages+0xaac>)
 8007e76:	0019      	movs	r1, r3
 8007e78:	205d      	movs	r0, #93	; 0x5d
 8007e7a:	f7fc f895 	bl	8003fa8 <Save_Settings>
					Message[0] = EE_SILENT_PANIC;
 8007e7e:	4b78      	ldr	r3, [pc, #480]	; (8008060 <Check_for_Messages+0xab0>)
 8007e80:	2201      	movs	r2, #1
 8007e82:	701a      	strb	r2, [r3, #0]
					Message[1] = EE_BY_MESSAGE;
 8007e84:	4b76      	ldr	r3, [pc, #472]	; (8008060 <Check_for_Messages+0xab0>)
 8007e86:	220d      	movs	r2, #13
 8007e88:	705a      	strb	r2, [r3, #1]
					Message[2] = EE_INCOMMING_MESSAGE_NUMBER;
 8007e8a:	4b75      	ldr	r3, [pc, #468]	; (8008060 <Check_for_Messages+0xab0>)
 8007e8c:	225d      	movs	r2, #93	; 0x5d
 8007e8e:	709a      	strb	r2, [r3, #2]
					Message[3] = EE_AT_MESSAGE;
 8007e90:	4b73      	ldr	r3, [pc, #460]	; (8008060 <Check_for_Messages+0xab0>)
 8007e92:	2233      	movs	r2, #51	; 0x33
 8007e94:	70da      	strb	r2, [r3, #3]
					Message[4] = 0;
 8007e96:	4b72      	ldr	r3, [pc, #456]	; (8008060 <Check_for_Messages+0xab0>)
 8007e98:	2200      	movs	r2, #0
 8007e9a:	711a      	strb	r2, [r3, #4]

					Add_Message_to_Que(Message, 0, 0, EE_INCOMMING_MESSAGE_NUMBER, !UserPass_Flag);
 8007e9c:	2357      	movs	r3, #87	; 0x57
 8007e9e:	18fb      	adds	r3, r7, r3
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	425a      	negs	r2, r3
 8007ea4:	4153      	adcs	r3, r2
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	486d      	ldr	r0, [pc, #436]	; (8008060 <Check_for_Messages+0xab0>)
 8007eaa:	9300      	str	r3, [sp, #0]
 8007eac:	235d      	movs	r3, #93	; 0x5d
 8007eae:	2200      	movs	r2, #0
 8007eb0:	2100      	movs	r1, #0
 8007eb2:	f7ff f83b 	bl	8006f2c <Add_Message_to_Que>
					Buzzer_Time = Silent_Panic_Buzzer_Time;
 8007eb6:	4b6f      	ldr	r3, [pc, #444]	; (8008074 <Check_for_Messages+0xac4>)
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	001a      	movs	r2, r3
 8007ebc:	4b6e      	ldr	r3, [pc, #440]	; (8008078 <Check_for_Messages+0xac8>)
 8007ebe:	601a      	str	r2, [r3, #0]
					Panic_Out_Time = OUTPUT_ON_TIME + 1;
 8007ec0:	4b6a      	ldr	r3, [pc, #424]	; (800806c <Check_for_Messages+0xabc>)
 8007ec2:	2205      	movs	r2, #5
 8007ec4:	701a      	strb	r2, [r3, #0]

				}

			}

			if(strncmp(smspoint, "TIME SYNC", 9) == 0) {
 8007ec6:	496d      	ldr	r1, [pc, #436]	; (800807c <Check_for_Messages+0xacc>)
 8007ec8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007eca:	2209      	movs	r2, #9
 8007ecc:	0018      	movs	r0, r3
 8007ece:	f00a feb8 	bl	8012c42 <strncmp>
 8007ed2:	1e03      	subs	r3, r0, #0
 8007ed4:	d000      	beq.n	8007ed8 <Check_for_Messages+0x928>
 8007ed6:	e0a9      	b.n	800802c <Check_for_Messages+0xa7c>
				// PROBLEM if +272 or 082.....
				if(strstr(Incomming_SMS_Number, Own_Number) != NULL) {   // if this message came fom the unit itself. Sync date time from the message
 8007ed8:	4a69      	ldr	r2, [pc, #420]	; (8008080 <Check_for_Messages+0xad0>)
 8007eda:	4b60      	ldr	r3, [pc, #384]	; (800805c <Check_for_Messages+0xaac>)
 8007edc:	0011      	movs	r1, r2
 8007ede:	0018      	movs	r0, r3
 8007ee0:	f00a fed5 	bl	8012c8e <strstr>
 8007ee4:	1e03      	subs	r3, r0, #0
 8007ee6:	d100      	bne.n	8007eea <Check_for_Messages+0x93a>
 8007ee8:	e0a0      	b.n	800802c <Check_for_Messages+0xa7c>
				//// Sync Time Start
					pointer = strtok(DatePoint, "/");
 8007eea:	4b66      	ldr	r3, [pc, #408]	; (8008084 <Check_for_Messages+0xad4>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a66      	ldr	r2, [pc, #408]	; (8008088 <Check_for_Messages+0xad8>)
 8007ef0:	0011      	movs	r1, r2
 8007ef2:	0018      	movs	r0, r3
 8007ef4:	f00b fd1c 	bl	8013930 <strtok>
 8007ef8:	0003      	movs	r3, r0
 8007efa:	62bb      	str	r3, [r7, #40]	; 0x28
					tempyear = atoi(pointer);
 8007efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efe:	0018      	movs	r0, r3
 8007f00:	f009 ff21 	bl	8011d46 <atoi>
 8007f04:	0003      	movs	r3, r0
 8007f06:	64fb      	str	r3, [r7, #76]	; 0x4c
					pointer = strtok(NULL, "/");
 8007f08:	4b5f      	ldr	r3, [pc, #380]	; (8008088 <Check_for_Messages+0xad8>)
 8007f0a:	0019      	movs	r1, r3
 8007f0c:	2000      	movs	r0, #0
 8007f0e:	f00b fd0f 	bl	8013930 <strtok>
 8007f12:	0003      	movs	r3, r0
 8007f14:	62bb      	str	r3, [r7, #40]	; 0x28
					tempmonth = atoi(pointer);
 8007f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f18:	0018      	movs	r0, r3
 8007f1a:	f009 ff14 	bl	8011d46 <atoi>
 8007f1e:	0003      	movs	r3, r0
 8007f20:	64bb      	str	r3, [r7, #72]	; 0x48
					pointer = strtok(NULL, ",");
 8007f22:	4b5a      	ldr	r3, [pc, #360]	; (800808c <Check_for_Messages+0xadc>)
 8007f24:	0019      	movs	r1, r3
 8007f26:	2000      	movs	r0, #0
 8007f28:	f00b fd02 	bl	8013930 <strtok>
 8007f2c:	0003      	movs	r3, r0
 8007f2e:	62bb      	str	r3, [r7, #40]	; 0x28
					tempday = atoi(pointer);
 8007f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f32:	0018      	movs	r0, r3
 8007f34:	f009 ff07 	bl	8011d46 <atoi>
 8007f38:	0003      	movs	r3, r0
 8007f3a:	647b      	str	r3, [r7, #68]	; 0x44
					pointer = strtok(NULL, ":");
 8007f3c:	4b54      	ldr	r3, [pc, #336]	; (8008090 <Check_for_Messages+0xae0>)
 8007f3e:	0019      	movs	r1, r3
 8007f40:	2000      	movs	r0, #0
 8007f42:	f00b fcf5 	bl	8013930 <strtok>
 8007f46:	0003      	movs	r3, r0
 8007f48:	62bb      	str	r3, [r7, #40]	; 0x28
					temphour = atoi(pointer);
 8007f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f4c:	0018      	movs	r0, r3
 8007f4e:	f009 fefa 	bl	8011d46 <atoi>
 8007f52:	0003      	movs	r3, r0
 8007f54:	643b      	str	r3, [r7, #64]	; 0x40
					pointer = strtok(NULL, ":");
 8007f56:	4b4e      	ldr	r3, [pc, #312]	; (8008090 <Check_for_Messages+0xae0>)
 8007f58:	0019      	movs	r1, r3
 8007f5a:	2000      	movs	r0, #0
 8007f5c:	f00b fce8 	bl	8013930 <strtok>
 8007f60:	0003      	movs	r3, r0
 8007f62:	62bb      	str	r3, [r7, #40]	; 0x28
					tempminute = atoi(pointer);
 8007f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f66:	0018      	movs	r0, r3
 8007f68:	f009 feed 	bl	8011d46 <atoi>
 8007f6c:	0003      	movs	r3, r0
 8007f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
					pointer = strtok(NULL, "+-");
 8007f70:	4b48      	ldr	r3, [pc, #288]	; (8008094 <Check_for_Messages+0xae4>)
 8007f72:	0019      	movs	r1, r3
 8007f74:	2000      	movs	r0, #0
 8007f76:	f00b fcdb 	bl	8013930 <strtok>
 8007f7a:	0003      	movs	r3, r0
 8007f7c:	62bb      	str	r3, [r7, #40]	; 0x28
					tempsecond = atoi(pointer);
 8007f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f80:	0018      	movs	r0, r3
 8007f82:	f009 fee0 	bl	8011d46 <atoi>
 8007f86:	0003      	movs	r3, r0
 8007f88:	63bb      	str	r3, [r7, #56]	; 0x38

					if((tempyear > 10)&&(tempyear < 50)) {
 8007f8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f8c:	2b0a      	cmp	r3, #10
 8007f8e:	d94d      	bls.n	800802c <Check_for_Messages+0xa7c>
 8007f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f92:	2b31      	cmp	r3, #49	; 0x31
 8007f94:	d84a      	bhi.n	800802c <Check_for_Messages+0xa7c>
						if((tempmonth > 0)&&(tempmonth < 13)) {
 8007f96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d047      	beq.n	800802c <Check_for_Messages+0xa7c>
 8007f9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f9e:	2b0c      	cmp	r3, #12
 8007fa0:	d844      	bhi.n	800802c <Check_for_Messages+0xa7c>
							if((tempday > 0)&&(tempday < 32)) {
 8007fa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d041      	beq.n	800802c <Check_for_Messages+0xa7c>
 8007fa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007faa:	2b1f      	cmp	r3, #31
 8007fac:	d83e      	bhi.n	800802c <Check_for_Messages+0xa7c>
								if(temphour < 24) {
 8007fae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fb0:	2b17      	cmp	r3, #23
 8007fb2:	d83b      	bhi.n	800802c <Check_for_Messages+0xa7c>
									if(tempminute < 60) {
 8007fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fb6:	2b3b      	cmp	r3, #59	; 0x3b
 8007fb8:	d838      	bhi.n	800802c <Check_for_Messages+0xa7c>
										if(tempsecond < 60) {
 8007fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fbc:	2b3b      	cmp	r3, #59	; 0x3b
 8007fbe:	d835      	bhi.n	800802c <Check_for_Messages+0xa7c>
											RTC_TimeTypeDef sTime;
											RTC_DateTypeDef sDate;

											sTime.Hours = temphour;
 8007fc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fc2:	b2da      	uxtb	r2, r3
 8007fc4:	2108      	movs	r1, #8
 8007fc6:	187b      	adds	r3, r7, r1
 8007fc8:	701a      	strb	r2, [r3, #0]
											sTime.Minutes = tempminute;
 8007fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fcc:	b2da      	uxtb	r2, r3
 8007fce:	187b      	adds	r3, r7, r1
 8007fd0:	705a      	strb	r2, [r3, #1]
											sTime.Seconds = tempsecond;
 8007fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd4:	b2da      	uxtb	r2, r3
 8007fd6:	187b      	adds	r3, r7, r1
 8007fd8:	709a      	strb	r2, [r3, #2]
											sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8007fda:	187b      	adds	r3, r7, r1
 8007fdc:	2200      	movs	r2, #0
 8007fde:	60da      	str	r2, [r3, #12]
											sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8007fe0:	187b      	adds	r3, r7, r1
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	611a      	str	r2, [r3, #16]
											if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8007fe6:	1879      	adds	r1, r7, r1
 8007fe8:	4b2b      	ldr	r3, [pc, #172]	; (8008098 <Check_for_Messages+0xae8>)
 8007fea:	2200      	movs	r2, #0
 8007fec:	0018      	movs	r0, r3
 8007fee:	f005 ff8d 	bl	800df0c <HAL_RTC_SetTime>
 8007ff2:	1e03      	subs	r3, r0, #0
 8007ff4:	d001      	beq.n	8007ffa <Check_for_Messages+0xa4a>
											{
											  Error_Handler();
 8007ff6:	f7fb faed 	bl	80035d4 <Error_Handler>
											}

											sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8007ffa:	1d3b      	adds	r3, r7, #4
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	701a      	strb	r2, [r3, #0]

											sDate.Month = tempmonth;
 8008000:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008002:	b2da      	uxtb	r2, r3
 8008004:	1d3b      	adds	r3, r7, #4
 8008006:	705a      	strb	r2, [r3, #1]
											sDate.Date = tempday;
 8008008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800800a:	b2da      	uxtb	r2, r3
 800800c:	1d3b      	adds	r3, r7, #4
 800800e:	709a      	strb	r2, [r3, #2]
											sDate.Year = tempyear;
 8008010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008012:	b2da      	uxtb	r2, r3
 8008014:	1d3b      	adds	r3, r7, #4
 8008016:	70da      	strb	r2, [r3, #3]

											if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8008018:	1d39      	adds	r1, r7, #4
 800801a:	4b1f      	ldr	r3, [pc, #124]	; (8008098 <Check_for_Messages+0xae8>)
 800801c:	2200      	movs	r2, #0
 800801e:	0018      	movs	r0, r3
 8008020:	f006 f974 	bl	800e30c <HAL_RTC_SetDate>
 8008024:	1e03      	subs	r3, r0, #0
 8008026:	d001      	beq.n	800802c <Check_for_Messages+0xa7c>
											{
											   Error_Handler();
 8008028:	f7fb fad4 	bl	80035d4 <Error_Handler>
						}
					}
				//// Sync Time end
				}
			}
			osDelay(2000);
 800802c:	23fa      	movs	r3, #250	; 0xfa
 800802e:	00db      	lsls	r3, r3, #3
 8008030:	0018      	movs	r0, r3
 8008032:	f008 fe1d 	bl	8010c70 <osDelay>
			SIM800H_Delete_SMS(SimPos);
 8008036:	4b19      	ldr	r3, [pc, #100]	; (800809c <Check_for_Messages+0xaec>)
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	0018      	movs	r0, r3
 800803c:	f000 fdc0 	bl	8008bc0 <SIM800H_Delete_SMS>
			SIM800H_Clear_Buffers();
 8008040:	f001 f8a2 	bl	8009188 <SIM800H_Clear_Buffers>
			return(TRUE);
 8008044:	2301      	movs	r3, #1
 8008046:	e002      	b.n	800804e <Check_for_Messages+0xa9e>
		}
		SIM800H_Clear_Buffers();
 8008048:	f001 f89e 	bl	8009188 <SIM800H_Clear_Buffers>

		return(FALSE);
 800804c:	2300      	movs	r3, #0
}
 800804e:	0018      	movs	r0, r3
 8008050:	46bd      	mov	sp, r7
 8008052:	b017      	add	sp, #92	; 0x5c
 8008054:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008056:	46c0      	nop			; (mov r8, r8)
 8008058:	200007b8 	.word	0x200007b8
 800805c:	20001698 	.word	0x20001698
 8008060:	200006c8 	.word	0x200006c8
 8008064:	20001687 	.word	0x20001687
 8008068:	20001688 	.word	0x20001688
 800806c:	200007ac 	.word	0x200007ac
 8008070:	200007b4 	.word	0x200007b4
 8008074:	2000166f 	.word	0x2000166f
 8008078:	200007b0 	.word	0x200007b0
 800807c:	08016768 	.word	0x08016768
 8008080:	200018d4 	.word	0x200018d4
 8008084:	200020c8 	.word	0x200020c8
 8008088:	080169d0 	.word	0x080169d0
 800808c:	080169d4 	.word	0x080169d4
 8008090:	080169d8 	.word	0x080169d8
 8008094:	080169dc 	.word	0x080169dc
 8008098:	20000858 	.word	0x20000858
 800809c:	20001800 	.word	0x20001800

080080a0 <Get_AirTime>:


void Get_AirTime(void)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
	 char * tpoint = 0;
 80080a6:	2300      	movs	r3, #0
 80080a8:	60fb      	str	r3, [r7, #12]
	 char * tpointend = 0;
 80080aa:	2300      	movs	r3, #0
 80080ac:	607b      	str	r3, [r7, #4]
	 unsigned int count = 0;
 80080ae:	2300      	movs	r3, #0
 80080b0:	60bb      	str	r3, [r7, #8]

	    SIM800H_TX("AT+CUSD=1,\"");
 80080b2:	4b4c      	ldr	r3, [pc, #304]	; (80081e4 <Get_AirTime+0x144>)
 80080b4:	0018      	movs	r0, r3
 80080b6:	f001 faed 	bl	8009694 <SIM800H_TX>
	    SIM800H_TX(Read_Settings(EE_PREPAID_USSD));
 80080ba:	2029      	movs	r0, #41	; 0x29
 80080bc:	f7fb ffc4 	bl	8004048 <Read_Settings>
 80080c0:	0003      	movs	r3, r0
 80080c2:	0018      	movs	r0, r3
 80080c4:	f001 fae6 	bl	8009694 <SIM800H_TX>
	    SIM800H_TX("\",15\r\n");
 80080c8:	4b47      	ldr	r3, [pc, #284]	; (80081e8 <Get_AirTime+0x148>)
 80080ca:	0018      	movs	r0, r3
 80080cc:	f001 fae2 	bl	8009694 <SIM800H_TX>
	    osDelay(500);
 80080d0:	23fa      	movs	r3, #250	; 0xfa
 80080d2:	005b      	lsls	r3, r3, #1
 80080d4:	0018      	movs	r0, r3
 80080d6:	f008 fdcb 	bl	8010c70 <osDelay>
		SIM800H_Clear_Buffers();
 80080da:	f001 f855 	bl	8009188 <SIM800H_Clear_Buffers>

		if(SIM800_Wait_for_Responce(200)) {
 80080de:	20c8      	movs	r0, #200	; 0xc8
 80080e0:	f000 f9e8 	bl	80084b4 <SIM800_Wait_for_Responce>
 80080e4:	1e03      	subs	r3, r0, #0
 80080e6:	d100      	bne.n	80080ea <Get_AirTime+0x4a>
 80080e8:	e077      	b.n	80081da <Get_AirTime+0x13a>
				U2Transfer_cplt = 0;
 80080ea:	4b40      	ldr	r3, [pc, #256]	; (80081ec <Get_AirTime+0x14c>)
 80080ec:	2200      	movs	r2, #0
 80080ee:	701a      	strb	r2, [r3, #0]
				tpoint = strstr(U2Rx_Buffer, "+CUSD:");
 80080f0:	4a3f      	ldr	r2, [pc, #252]	; (80081f0 <Get_AirTime+0x150>)
 80080f2:	4b40      	ldr	r3, [pc, #256]	; (80081f4 <Get_AirTime+0x154>)
 80080f4:	0011      	movs	r1, r2
 80080f6:	0018      	movs	r0, r3
 80080f8:	f00a fdc9 	bl	8012c8e <strstr>
 80080fc:	0003      	movs	r3, r0
 80080fe:	60fb      	str	r3, [r7, #12]
				if(tpoint != NULL) {
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d069      	beq.n	80081da <Get_AirTime+0x13a>
					memset(AirTime, 0, 80);
 8008106:	4b3c      	ldr	r3, [pc, #240]	; (80081f8 <Get_AirTime+0x158>)
 8008108:	2250      	movs	r2, #80	; 0x50
 800810a:	2100      	movs	r1, #0
 800810c:	0018      	movs	r0, r3
 800810e:	f009 ff75 	bl	8011ffc <memset>
					//Check to see if system returned "unavailable" or "Advertise", if so try again
					if(strstr(U2Rx_Buffer, "Airtime is") || strstr(U2Rx_Buffer, "airtime is") != NULL){
 8008112:	4a3a      	ldr	r2, [pc, #232]	; (80081fc <Get_AirTime+0x15c>)
 8008114:	4b37      	ldr	r3, [pc, #220]	; (80081f4 <Get_AirTime+0x154>)
 8008116:	0011      	movs	r1, r2
 8008118:	0018      	movs	r0, r3
 800811a:	f00a fdb8 	bl	8012c8e <strstr>
 800811e:	1e03      	subs	r3, r0, #0
 8008120:	d107      	bne.n	8008132 <Get_AirTime+0x92>
 8008122:	4a37      	ldr	r2, [pc, #220]	; (8008200 <Get_AirTime+0x160>)
 8008124:	4b33      	ldr	r3, [pc, #204]	; (80081f4 <Get_AirTime+0x154>)
 8008126:	0011      	movs	r1, r2
 8008128:	0018      	movs	r0, r3
 800812a:	f00a fdb0 	bl	8012c8e <strstr>
 800812e:	1e03      	subs	r3, r0, #0
 8008130:	d041      	beq.n	80081b6 <Get_AirTime+0x116>
						if(tpoint[4] != '4') {
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	3304      	adds	r3, #4
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	2b34      	cmp	r3, #52	; 0x34
 800813a:	d045      	beq.n	80081c8 <Get_AirTime+0x128>
							tpoint = strstr(U2Rx_Buffer, "Airtime is");
 800813c:	4a2f      	ldr	r2, [pc, #188]	; (80081fc <Get_AirTime+0x15c>)
 800813e:	4b2d      	ldr	r3, [pc, #180]	; (80081f4 <Get_AirTime+0x154>)
 8008140:	0011      	movs	r1, r2
 8008142:	0018      	movs	r0, r3
 8008144:	f00a fda3 	bl	8012c8e <strstr>
 8008148:	0003      	movs	r3, r0
 800814a:	60fb      	str	r3, [r7, #12]
							tpointend = strstr(U2Rx_Buffer, "SMS") + 3;
 800814c:	4a2d      	ldr	r2, [pc, #180]	; (8008204 <Get_AirTime+0x164>)
 800814e:	4b29      	ldr	r3, [pc, #164]	; (80081f4 <Get_AirTime+0x154>)
 8008150:	0011      	movs	r1, r2
 8008152:	0018      	movs	r0, r3
 8008154:	f00a fd9b 	bl	8012c8e <strstr>
 8008158:	0003      	movs	r3, r0
 800815a:	3303      	adds	r3, #3
 800815c:	607b      	str	r3, [r7, #4]
							while(tpoint != tpointend && count < 60){
 800815e:	e008      	b.n	8008172 <Get_AirTime+0xd2>
								AirTime[count++] = *tpoint++;
 8008160:	68fa      	ldr	r2, [r7, #12]
 8008162:	1c53      	adds	r3, r2, #1
 8008164:	60fb      	str	r3, [r7, #12]
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	1c59      	adds	r1, r3, #1
 800816a:	60b9      	str	r1, [r7, #8]
 800816c:	7811      	ldrb	r1, [r2, #0]
 800816e:	4a22      	ldr	r2, [pc, #136]	; (80081f8 <Get_AirTime+0x158>)
 8008170:	54d1      	strb	r1, [r2, r3]
							while(tpoint != tpointend && count < 60){
 8008172:	68fa      	ldr	r2, [r7, #12]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	429a      	cmp	r2, r3
 8008178:	d002      	beq.n	8008180 <Get_AirTime+0xe0>
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	2b3b      	cmp	r3, #59	; 0x3b
 800817e:	d9ef      	bls.n	8008160 <Get_AirTime+0xc0>
							}
							AirTime[count] = '\0';
 8008180:	4a1d      	ldr	r2, [pc, #116]	; (80081f8 <Get_AirTime+0x158>)
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	18d3      	adds	r3, r2, r3
 8008186:	2200      	movs	r2, #0
 8008188:	701a      	strb	r2, [r3, #0]
							//strncpy(AirTime, tpoint, 60);
							strcat(AirTime, " fineautomation.co.za");
 800818a:	4b1b      	ldr	r3, [pc, #108]	; (80081f8 <Get_AirTime+0x158>)
 800818c:	0018      	movs	r0, r3
 800818e:	f7f7 ffbb 	bl	8000108 <strlen>
 8008192:	0003      	movs	r3, r0
 8008194:	001a      	movs	r2, r3
 8008196:	4b18      	ldr	r3, [pc, #96]	; (80081f8 <Get_AirTime+0x158>)
 8008198:	18d2      	adds	r2, r2, r3
 800819a:	4b1b      	ldr	r3, [pc, #108]	; (8008208 <Get_AirTime+0x168>)
 800819c:	0010      	movs	r0, r2
 800819e:	0019      	movs	r1, r3
 80081a0:	2316      	movs	r3, #22
 80081a2:	001a      	movs	r2, r3
 80081a4:	f009 ff21 	bl	8011fea <memcpy>
							Request_AitTime_Flag = FALSE;
 80081a8:	4b18      	ldr	r3, [pc, #96]	; (800820c <Get_AirTime+0x16c>)
 80081aa:	2200      	movs	r2, #0
 80081ac:	701a      	strb	r2, [r3, #0]
							Airtime_Failure = 0;
 80081ae:	4b18      	ldr	r3, [pc, #96]	; (8008210 <Get_AirTime+0x170>)
 80081b0:	2200      	movs	r2, #0
 80081b2:	601a      	str	r2, [r3, #0]
						if(tpoint[4] != '4') {
 80081b4:	e008      	b.n	80081c8 <Get_AirTime+0x128>
						}
					}
					else{
						sprintf(AirTime,"Service provider did not provide correct details");
 80081b6:	4a17      	ldr	r2, [pc, #92]	; (8008214 <Get_AirTime+0x174>)
 80081b8:	4b0f      	ldr	r3, [pc, #60]	; (80081f8 <Get_AirTime+0x158>)
 80081ba:	0011      	movs	r1, r2
 80081bc:	0018      	movs	r0, r3
 80081be:	f00a fcb1 	bl	8012b24 <siprintf>
						Airtime_Failure = 1;
 80081c2:	4b13      	ldr	r3, [pc, #76]	; (8008210 <Get_AirTime+0x170>)
 80081c4:	2201      	movs	r2, #1
 80081c6:	601a      	str	r2, [r3, #0]
					}

					SIM800H_TX("AT+CUSD=2\r\n");
 80081c8:	4b13      	ldr	r3, [pc, #76]	; (8008218 <Get_AirTime+0x178>)
 80081ca:	0018      	movs	r0, r3
 80081cc:	f001 fa62 	bl	8009694 <SIM800H_TX>
					osDelay(500);
 80081d0:	23fa      	movs	r3, #250	; 0xfa
 80081d2:	005b      	lsls	r3, r3, #1
 80081d4:	0018      	movs	r0, r3
 80081d6:	f008 fd4b 	bl	8010c70 <osDelay>

				}
		}
}
 80081da:	46c0      	nop			; (mov r8, r8)
 80081dc:	46bd      	mov	sp, r7
 80081de:	b004      	add	sp, #16
 80081e0:	bd80      	pop	{r7, pc}
 80081e2:	46c0      	nop			; (mov r8, r8)
 80081e4:	080169e0 	.word	0x080169e0
 80081e8:	080169ec 	.word	0x080169ec
 80081ec:	2000246c 	.word	0x2000246c
 80081f0:	080169f4 	.word	0x080169f4
 80081f4:	2000226c 	.word	0x2000226c
 80081f8:	20001808 	.word	0x20001808
 80081fc:	080169fc 	.word	0x080169fc
 8008200:	08016a08 	.word	0x08016a08
 8008204:	080169c4 	.word	0x080169c4
 8008208:	08016a14 	.word	0x08016a14
 800820c:	20001804 	.word	0x20001804
 8008210:	200018d0 	.word	0x200018d0
 8008214:	08016a2c 	.word	0x08016a2c
 8008218:	08016a60 	.word	0x08016a60

0800821c <Replace_Spaces_Plus>:

char* Replace_Spaces_Plus(char* inputString){
 800821c:	b580      	push	{r7, lr}
 800821e:	b086      	sub	sp, #24
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]

	unsigned int length = 0;
 8008224:	2300      	movs	r3, #0
 8008226:	60fb      	str	r3, [r7, #12]
	unsigned int currentPos = 0;
 8008228:	2300      	movs	r3, #0
 800822a:	617b      	str	r3, [r7, #20]

	length = strlen(inputString);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	0018      	movs	r0, r3
 8008230:	f7f7 ff6a 	bl	8000108 <strlen>
 8008234:	0003      	movs	r3, r0
 8008236:	60fb      	str	r3, [r7, #12]
	for(unsigned int i = 0; i < length; i++){
 8008238:	2300      	movs	r3, #0
 800823a:	613b      	str	r3, [r7, #16]
 800823c:	e024      	b.n	8008288 <Replace_Spaces_Plus+0x6c>
		if(inputString[i] == ' ' || inputString[i] == '#' || inputString[i] == '\''){
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	18d3      	adds	r3, r2, r3
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	2b20      	cmp	r3, #32
 8008248:	d00b      	beq.n	8008262 <Replace_Spaces_Plus+0x46>
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	18d3      	adds	r3, r2, r3
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	2b23      	cmp	r3, #35	; 0x23
 8008254:	d005      	beq.n	8008262 <Replace_Spaces_Plus+0x46>
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	18d3      	adds	r3, r2, r3
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	2b27      	cmp	r3, #39	; 0x27
 8008260:	d106      	bne.n	8008270 <Replace_Spaces_Plus+0x54>
			Whats_Message[currentPos++] = '+';
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	1c5a      	adds	r2, r3, #1
 8008266:	617a      	str	r2, [r7, #20]
 8008268:	4a0e      	ldr	r2, [pc, #56]	; (80082a4 <Replace_Spaces_Plus+0x88>)
 800826a:	212b      	movs	r1, #43	; 0x2b
 800826c:	54d1      	strb	r1, [r2, r3]
 800826e:	e008      	b.n	8008282 <Replace_Spaces_Plus+0x66>
		}
		else{
			Whats_Message[currentPos++] = inputString[i];
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	18d2      	adds	r2, r2, r3
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	1c59      	adds	r1, r3, #1
 800827a:	6179      	str	r1, [r7, #20]
 800827c:	7811      	ldrb	r1, [r2, #0]
 800827e:	4a09      	ldr	r2, [pc, #36]	; (80082a4 <Replace_Spaces_Plus+0x88>)
 8008280:	54d1      	strb	r1, [r2, r3]
	for(unsigned int i = 0; i < length; i++){
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	3301      	adds	r3, #1
 8008286:	613b      	str	r3, [r7, #16]
 8008288:	693a      	ldr	r2, [r7, #16]
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	429a      	cmp	r2, r3
 800828e:	d3d6      	bcc.n	800823e <Replace_Spaces_Plus+0x22>
		}
	}
	Whats_Message[currentPos] = '\0';
 8008290:	4a04      	ldr	r2, [pc, #16]	; (80082a4 <Replace_Spaces_Plus+0x88>)
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	18d3      	adds	r3, r2, r3
 8008296:	2200      	movs	r2, #0
 8008298:	701a      	strb	r2, [r3, #0]

	return Whats_Message;
 800829a:	4b02      	ldr	r3, [pc, #8]	; (80082a4 <Replace_Spaces_Plus+0x88>)
}
 800829c:	0018      	movs	r0, r3
 800829e:	46bd      	mov	sp, r7
 80082a0:	b006      	add	sp, #24
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	200016c0 	.word	0x200016c0

080082a8 <SIMA76_HTTP_Send_Message>:
	}

}

static unsigned char SIMA76_HTTP_Send_Message(char * number, char * message, unsigned char cellPosition)
{
 80082a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082aa:	b0d9      	sub	sp, #356	; 0x164
 80082ac:	af04      	add	r7, sp, #16
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	4b6f      	ldr	r3, [pc, #444]	; (8008470 <SIMA76_HTTP_Send_Message+0x1c8>)
 80082b4:	21a8      	movs	r1, #168	; 0xa8
 80082b6:	0049      	lsls	r1, r1, #1
 80082b8:	185b      	adds	r3, r3, r1
 80082ba:	19db      	adds	r3, r3, r7
 80082bc:	701a      	strb	r2, [r3, #0]
	// it cannot send message. Return (1). If available, try sending HTTP POST at least 3 times
	// before returning a (1). If successfully send message return (0).
	//
	//______________________________________________________________________________________

	if(strlen(Read_Settings(EE_CELL1_API+(cellPosition-2))) < 4){//no valid APIKEY is present return (1)
 80082be:	4b6c      	ldr	r3, [pc, #432]	; (8008470 <SIMA76_HTTP_Send_Message+0x1c8>)
 80082c0:	185b      	adds	r3, r3, r1
 80082c2:	19db      	adds	r3, r3, r7
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	3353      	adds	r3, #83	; 0x53
 80082c8:	0018      	movs	r0, r3
 80082ca:	f7fb febd 	bl	8004048 <Read_Settings>
 80082ce:	0003      	movs	r3, r0
 80082d0:	0018      	movs	r0, r3
 80082d2:	f7f7 ff19 	bl	8000108 <strlen>
 80082d6:	0003      	movs	r3, r0
 80082d8:	2b03      	cmp	r3, #3
 80082da:	d801      	bhi.n	80082e0 <SIMA76_HTTP_Send_Message+0x38>
		return(1);
 80082dc:	2301      	movs	r3, #1
 80082de:	e0c3      	b.n	8008468 <SIMA76_HTTP_Send_Message+0x1c0>
	}

	for(unsigned int i = 0; i < 3; i++){
 80082e0:	2300      	movs	r3, #0
 80082e2:	22a6      	movs	r2, #166	; 0xa6
 80082e4:	0052      	lsls	r2, r2, #1
 80082e6:	18ba      	adds	r2, r7, r2
 80082e8:	6013      	str	r3, [r2, #0]
 80082ea:	e0b5      	b.n	8008458 <SIMA76_HTTP_Send_Message+0x1b0>

		HAL_IWDG_Refresh(&hiwdg);
 80082ec:	4b61      	ldr	r3, [pc, #388]	; (8008474 <SIMA76_HTTP_Send_Message+0x1cc>)
 80082ee:	0018      	movs	r0, r3
 80082f0:	f004 fd0e 	bl	800cd10 <HAL_IWDG_Refresh>
		SIM800H_TX("AT+HTTPINIT\r\n");
 80082f4:	4b60      	ldr	r3, [pc, #384]	; (8008478 <SIMA76_HTTP_Send_Message+0x1d0>)
 80082f6:	0018      	movs	r0, r3
 80082f8:	f001 f9cc 	bl	8009694 <SIM800H_TX>
		osDelay(50);
 80082fc:	2032      	movs	r0, #50	; 0x32
 80082fe:	f008 fcb7 	bl	8010c70 <osDelay>
		char wlgMessage[300];
		char* cellnum = Read_Settings(EE_CELL1_API+(cellPosition-2));
 8008302:	4b5b      	ldr	r3, [pc, #364]	; (8008470 <SIMA76_HTTP_Send_Message+0x1c8>)
 8008304:	22a8      	movs	r2, #168	; 0xa8
 8008306:	0052      	lsls	r2, r2, #1
 8008308:	189b      	adds	r3, r3, r2
 800830a:	19db      	adds	r3, r3, r7
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	3353      	adds	r3, #83	; 0x53
 8008310:	0018      	movs	r0, r3
 8008312:	f7fb fe99 	bl	8004048 <Read_Settings>
 8008316:	0003      	movs	r3, r0
 8008318:	25a0      	movs	r5, #160	; 0xa0
 800831a:	006d      	lsls	r5, r5, #1
 800831c:	197a      	adds	r2, r7, r5
 800831e:	6013      	str	r3, [r2, #0]
		sprintf(wlgMessage,"AT+HTTPPARA=\"URL\",\"%s%s%s%s%s%s\"\r\n",HTTP_URL_1,number,HTTP_URL_2,message,HTTP_URL_3,cellnum);
 8008320:	68fc      	ldr	r4, [r7, #12]
 8008322:	4a56      	ldr	r2, [pc, #344]	; (800847c <SIMA76_HTTP_Send_Message+0x1d4>)
 8008324:	4956      	ldr	r1, [pc, #344]	; (8008480 <SIMA76_HTTP_Send_Message+0x1d8>)
 8008326:	2614      	movs	r6, #20
 8008328:	19b8      	adds	r0, r7, r6
 800832a:	197b      	adds	r3, r7, r5
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	9303      	str	r3, [sp, #12]
 8008330:	4b54      	ldr	r3, [pc, #336]	; (8008484 <SIMA76_HTTP_Send_Message+0x1dc>)
 8008332:	9302      	str	r3, [sp, #8]
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	9301      	str	r3, [sp, #4]
 8008338:	4b53      	ldr	r3, [pc, #332]	; (8008488 <SIMA76_HTTP_Send_Message+0x1e0>)
 800833a:	9300      	str	r3, [sp, #0]
 800833c:	0023      	movs	r3, r4
 800833e:	f00a fbf1 	bl	8012b24 <siprintf>
		SIM800H_TX(wlgMessage);
 8008342:	19bb      	adds	r3, r7, r6
 8008344:	0018      	movs	r0, r3
 8008346:	f001 f9a5 	bl	8009694 <SIM800H_TX>
		SIM800H_Clear_Buffers();
 800834a:	f000 ff1d 	bl	8009188 <SIM800H_Clear_Buffers>

		__HAL_DBGMCU_FREEZE_IWDG();
 800834e:	4b4f      	ldr	r3, [pc, #316]	; (800848c <SIMA76_HTTP_Send_Message+0x1e4>)
 8008350:	689a      	ldr	r2, [r3, #8]
 8008352:	4b4e      	ldr	r3, [pc, #312]	; (800848c <SIMA76_HTTP_Send_Message+0x1e4>)
 8008354:	2180      	movs	r1, #128	; 0x80
 8008356:	0149      	lsls	r1, r1, #5
 8008358:	430a      	orrs	r2, r1
 800835a:	609a      	str	r2, [r3, #8]
		for(unsigned int j = 0; j < 5; j++){
 800835c:	2300      	movs	r3, #0
 800835e:	22a4      	movs	r2, #164	; 0xa4
 8008360:	0052      	lsls	r2, r2, #1
 8008362:	18ba      	adds	r2, r7, r2
 8008364:	6013      	str	r3, [r2, #0]
 8008366:	e06a      	b.n	800843e <SIMA76_HTTP_Send_Message+0x196>
			if(SIM800_Wait_for_Responce(20) || j == 4) {
 8008368:	2014      	movs	r0, #20
 800836a:	f000 f8a3 	bl	80084b4 <SIM800_Wait_for_Responce>
 800836e:	1e03      	subs	r3, r0, #0
 8008370:	d105      	bne.n	800837e <SIMA76_HTTP_Send_Message+0xd6>
 8008372:	23a4      	movs	r3, #164	; 0xa4
 8008374:	005b      	lsls	r3, r3, #1
 8008376:	18fb      	adds	r3, r7, r3
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	2b04      	cmp	r3, #4
 800837c:	d158      	bne.n	8008430 <SIMA76_HTTP_Send_Message+0x188>
				U2Transfer_cplt = 0;
 800837e:	4b44      	ldr	r3, [pc, #272]	; (8008490 <SIMA76_HTTP_Send_Message+0x1e8>)
 8008380:	2200      	movs	r2, #0
 8008382:	701a      	strb	r2, [r3, #0]
				if(strstr(U2Rx_Buffer, "OK") != NULL) {
 8008384:	4a43      	ldr	r2, [pc, #268]	; (8008494 <SIMA76_HTTP_Send_Message+0x1ec>)
 8008386:	4b44      	ldr	r3, [pc, #272]	; (8008498 <SIMA76_HTTP_Send_Message+0x1f0>)
 8008388:	0011      	movs	r1, r2
 800838a:	0018      	movs	r0, r3
 800838c:	f00a fc7f 	bl	8012c8e <strstr>
 8008390:	1e03      	subs	r3, r0, #0
 8008392:	d043      	beq.n	800841c <SIMA76_HTTP_Send_Message+0x174>
					HAL_IWDG_Refresh(&hiwdg);
 8008394:	4b37      	ldr	r3, [pc, #220]	; (8008474 <SIMA76_HTTP_Send_Message+0x1cc>)
 8008396:	0018      	movs	r0, r3
 8008398:	f004 fcba 	bl	800cd10 <HAL_IWDG_Refresh>
					// send HTTP request
					SIM800H_TX("AT+HTTPACTION=0\r\n");
 800839c:	4b3f      	ldr	r3, [pc, #252]	; (800849c <SIMA76_HTTP_Send_Message+0x1f4>)
 800839e:	0018      	movs	r0, r3
 80083a0:	f001 f978 	bl	8009694 <SIM800H_TX>
					SIM800H_Clear_Buffers();
 80083a4:	f000 fef0 	bl	8009188 <SIM800H_Clear_Buffers>
					//This for loop takes place of delay and waits for a response
					//from the unit and therefore less chance that it misses response
					for(unsigned int i = 0; i < 4; i++){
 80083a8:	2300      	movs	r3, #0
 80083aa:	22a2      	movs	r2, #162	; 0xa2
 80083ac:	0052      	lsls	r2, r2, #1
 80083ae:	18ba      	adds	r2, r7, r2
 80083b0:	6013      	str	r3, [r2, #0]
 80083b2:	e02c      	b.n	800840e <SIMA76_HTTP_Send_Message+0x166>
						HAL_IWDG_Refresh(&hiwdg);
 80083b4:	4b2f      	ldr	r3, [pc, #188]	; (8008474 <SIMA76_HTTP_Send_Message+0x1cc>)
 80083b6:	0018      	movs	r0, r3
 80083b8:	f004 fcaa 	bl	800cd10 <HAL_IWDG_Refresh>
					if(SIM800_Wait_for_Responce(100)) {
 80083bc:	2064      	movs	r0, #100	; 0x64
 80083be:	f000 f879 	bl	80084b4 <SIM800_Wait_for_Responce>
 80083c2:	1e03      	subs	r3, r0, #0
 80083c4:	d01c      	beq.n	8008400 <SIMA76_HTTP_Send_Message+0x158>
						U2Transfer_cplt = 0;
 80083c6:	4b32      	ldr	r3, [pc, #200]	; (8008490 <SIMA76_HTTP_Send_Message+0x1e8>)
 80083c8:	2200      	movs	r2, #0
 80083ca:	701a      	strb	r2, [r3, #0]
						if(strstr(U2Rx_Buffer, ",200,") != NULL) {
 80083cc:	4a34      	ldr	r2, [pc, #208]	; (80084a0 <SIMA76_HTTP_Send_Message+0x1f8>)
 80083ce:	4b32      	ldr	r3, [pc, #200]	; (8008498 <SIMA76_HTTP_Send_Message+0x1f0>)
 80083d0:	0011      	movs	r1, r2
 80083d2:	0018      	movs	r0, r3
 80083d4:	f00a fc5b 	bl	8012c8e <strstr>
 80083d8:	1e03      	subs	r3, r0, #0
 80083da:	d001      	beq.n	80083e0 <SIMA76_HTTP_Send_Message+0x138>
							return(0);
 80083dc:	2300      	movs	r3, #0
 80083de:	e043      	b.n	8008468 <SIMA76_HTTP_Send_Message+0x1c0>
						}
						if(strstr(U2Rx_Buffer, ",601,") != NULL) {
 80083e0:	4a30      	ldr	r2, [pc, #192]	; (80084a4 <SIMA76_HTTP_Send_Message+0x1fc>)
 80083e2:	4b2d      	ldr	r3, [pc, #180]	; (8008498 <SIMA76_HTTP_Send_Message+0x1f0>)
 80083e4:	0011      	movs	r1, r2
 80083e6:	0018      	movs	r0, r3
 80083e8:	f00a fc51 	bl	8012c8e <strstr>
 80083ec:	1e03      	subs	r3, r0, #0
 80083ee:	d007      	beq.n	8008400 <SIMA76_HTTP_Send_Message+0x158>
							SIM800H_TX("AT+SAPBR=1,1\r\n");
 80083f0:	4b2d      	ldr	r3, [pc, #180]	; (80084a8 <SIMA76_HTTP_Send_Message+0x200>)
 80083f2:	0018      	movs	r0, r3
 80083f4:	f001 f94e 	bl	8009694 <SIM800H_TX>
							osDelay(3000);
 80083f8:	4b2c      	ldr	r3, [pc, #176]	; (80084ac <SIMA76_HTTP_Send_Message+0x204>)
 80083fa:	0018      	movs	r0, r3
 80083fc:	f008 fc38 	bl	8010c70 <osDelay>
					for(unsigned int i = 0; i < 4; i++){
 8008400:	22a2      	movs	r2, #162	; 0xa2
 8008402:	0052      	lsls	r2, r2, #1
 8008404:	18bb      	adds	r3, r7, r2
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	3301      	adds	r3, #1
 800840a:	18ba      	adds	r2, r7, r2
 800840c:	6013      	str	r3, [r2, #0]
 800840e:	23a2      	movs	r3, #162	; 0xa2
 8008410:	005b      	lsls	r3, r3, #1
 8008412:	18fb      	adds	r3, r7, r3
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	2b03      	cmp	r3, #3
 8008418:	d9cc      	bls.n	80083b4 <SIMA76_HTTP_Send_Message+0x10c>
 800841a:	e009      	b.n	8008430 <SIMA76_HTTP_Send_Message+0x188>
						}
					}
				  }
				}
				else if(strstr(U2Rx_Buffer, "ERROR") != NULL){
 800841c:	4a24      	ldr	r2, [pc, #144]	; (80084b0 <SIMA76_HTTP_Send_Message+0x208>)
 800841e:	4b1e      	ldr	r3, [pc, #120]	; (8008498 <SIMA76_HTTP_Send_Message+0x1f0>)
 8008420:	0011      	movs	r1, r2
 8008422:	0018      	movs	r0, r3
 8008424:	f00a fc33 	bl	8012c8e <strstr>
 8008428:	1e03      	subs	r3, r0, #0
 800842a:	d001      	beq.n	8008430 <SIMA76_HTTP_Send_Message+0x188>
					return(1);
 800842c:	2301      	movs	r3, #1
 800842e:	e01b      	b.n	8008468 <SIMA76_HTTP_Send_Message+0x1c0>
		for(unsigned int j = 0; j < 5; j++){
 8008430:	22a4      	movs	r2, #164	; 0xa4
 8008432:	0052      	lsls	r2, r2, #1
 8008434:	18bb      	adds	r3, r7, r2
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	3301      	adds	r3, #1
 800843a:	18ba      	adds	r2, r7, r2
 800843c:	6013      	str	r3, [r2, #0]
 800843e:	23a4      	movs	r3, #164	; 0xa4
 8008440:	005b      	lsls	r3, r3, #1
 8008442:	18fb      	adds	r3, r7, r3
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	2b04      	cmp	r3, #4
 8008448:	d98e      	bls.n	8008368 <SIMA76_HTTP_Send_Message+0xc0>
	for(unsigned int i = 0; i < 3; i++){
 800844a:	22a6      	movs	r2, #166	; 0xa6
 800844c:	0052      	lsls	r2, r2, #1
 800844e:	18bb      	adds	r3, r7, r2
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	3301      	adds	r3, #1
 8008454:	18ba      	adds	r2, r7, r2
 8008456:	6013      	str	r3, [r2, #0]
 8008458:	23a6      	movs	r3, #166	; 0xa6
 800845a:	005b      	lsls	r3, r3, #1
 800845c:	18fb      	adds	r3, r7, r3
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	2b02      	cmp	r3, #2
 8008462:	d800      	bhi.n	8008466 <SIMA76_HTTP_Send_Message+0x1be>
 8008464:	e742      	b.n	80082ec <SIMA76_HTTP_Send_Message+0x44>
				}
			}
		}
	}

		return(1);
 8008466:	2301      	movs	r3, #1
}
 8008468:	0018      	movs	r0, r3
 800846a:	46bd      	mov	sp, r7
 800846c:	b055      	add	sp, #340	; 0x154
 800846e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008470:	fffffeb7 	.word	0xfffffeb7
 8008474:	20000848 	.word	0x20000848
 8008478:	08016a6c 	.word	0x08016a6c
 800847c:	08016a98 	.word	0x08016a98
 8008480:	08016adc 	.word	0x08016adc
 8008484:	08016b00 	.word	0x08016b00
 8008488:	08016b0c 	.word	0x08016b0c
 800848c:	40015800 	.word	0x40015800
 8008490:	2000246c 	.word	0x2000246c
 8008494:	08016a7c 	.word	0x08016a7c
 8008498:	2000226c 	.word	0x2000226c
 800849c:	08016b14 	.word	0x08016b14
 80084a0:	08016b28 	.word	0x08016b28
 80084a4:	08016b30 	.word	0x08016b30
 80084a8:	08016b38 	.word	0x08016b38
 80084ac:	00000bb8 	.word	0x00000bb8
 80084b0:	08016a80 	.word	0x08016a80

080084b4 <SIM800_Wait_for_Responce>:


unsigned char SIM800_Wait_for_Responce(unsigned int timeout)  // 100ms intervals
{ unsigned int a = 0;
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	2300      	movs	r3, #0
 80084be:	60fb      	str	r3, [r7, #12]
	for(a = 0; a < timeout; a++) {
 80084c0:	2300      	movs	r3, #0
 80084c2:	60fb      	str	r3, [r7, #12]
 80084c4:	e00b      	b.n	80084de <SIM800_Wait_for_Responce+0x2a>
		osDelay(100);
 80084c6:	2064      	movs	r0, #100	; 0x64
 80084c8:	f008 fbd2 	bl	8010c70 <osDelay>
		if(U2Transfer_cplt == 1) {
 80084cc:	4b08      	ldr	r3, [pc, #32]	; (80084f0 <SIM800_Wait_for_Responce+0x3c>)
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d101      	bne.n	80084d8 <SIM800_Wait_for_Responce+0x24>
			return(1);
 80084d4:	2301      	movs	r3, #1
 80084d6:	e007      	b.n	80084e8 <SIM800_Wait_for_Responce+0x34>
	for(a = 0; a < timeout; a++) {
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	3301      	adds	r3, #1
 80084dc:	60fb      	str	r3, [r7, #12]
 80084de:	68fa      	ldr	r2, [r7, #12]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d3ef      	bcc.n	80084c6 <SIM800_Wait_for_Responce+0x12>
		}
	}
	return(0);
 80084e6:	2300      	movs	r3, #0
}
 80084e8:	0018      	movs	r0, r3
 80084ea:	46bd      	mov	sp, r7
 80084ec:	b004      	add	sp, #16
 80084ee:	bd80      	pop	{r7, pc}
 80084f0:	2000246c 	.word	0x2000246c

080084f4 <SIM800H_Start>:


unsigned char SIM800H_Start(void)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	af00      	add	r7, sp, #0
   	HAL_GPIO_WritePin(GSM_PWR_GPIO_Port, GSM_PWR_Pin, 1);
 80084f8:	2390      	movs	r3, #144	; 0x90
 80084fa:	05db      	lsls	r3, r3, #23
 80084fc:	2201      	movs	r2, #1
 80084fe:	2110      	movs	r1, #16
 8008500:	0018      	movs	r0, r3
 8008502:	f002 fca7 	bl	800ae54 <HAL_GPIO_WritePin>
   	osDelay(500);
 8008506:	23fa      	movs	r3, #250	; 0xfa
 8008508:	005b      	lsls	r3, r3, #1
 800850a:	0018      	movs	r0, r3
 800850c:	f008 fbb0 	bl	8010c70 <osDelay>
   	HAL_GPIO_WritePin(GSM_ONOFF_GPIO_Port, GSM_ONOFF_Pin, 1);
 8008510:	2390      	movs	r3, #144	; 0x90
 8008512:	05db      	lsls	r3, r3, #23
 8008514:	2201      	movs	r2, #1
 8008516:	2101      	movs	r1, #1
 8008518:	0018      	movs	r0, r3
 800851a:	f002 fc9b 	bl	800ae54 <HAL_GPIO_WritePin>
   	osDelay(1000);
 800851e:	23fa      	movs	r3, #250	; 0xfa
 8008520:	009b      	lsls	r3, r3, #2
 8008522:	0018      	movs	r0, r3
 8008524:	f008 fba4 	bl	8010c70 <osDelay>
   	HAL_GPIO_WritePin(GSM_ONOFF_GPIO_Port, GSM_ONOFF_Pin, 0);
 8008528:	2390      	movs	r3, #144	; 0x90
 800852a:	05db      	lsls	r3, r3, #23
 800852c:	2200      	movs	r2, #0
 800852e:	2101      	movs	r1, #1
 8008530:	0018      	movs	r0, r3
 8008532:	f002 fc8f 	bl	800ae54 <HAL_GPIO_WritePin>
   	osDelay(3000);
 8008536:	4b44      	ldr	r3, [pc, #272]	; (8008648 <SIM800H_Start+0x154>)
 8008538:	0018      	movs	r0, r3
 800853a:	f008 fb99 	bl	8010c70 <osDelay>
   	U2Rx_indx = 0;
 800853e:	4b43      	ldr	r3, [pc, #268]	; (800864c <SIM800H_Start+0x158>)
 8008540:	2200      	movs	r2, #0
 8008542:	601a      	str	r2, [r3, #0]
	SIM800H_TX("AT\r\n");
 8008544:	4b42      	ldr	r3, [pc, #264]	; (8008650 <SIM800H_Start+0x15c>)
 8008546:	0018      	movs	r0, r3
 8008548:	f001 f8a4 	bl	8009694 <SIM800H_TX>
	osDelay(1000);
 800854c:	23fa      	movs	r3, #250	; 0xfa
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	0018      	movs	r0, r3
 8008552:	f008 fb8d 	bl	8010c70 <osDelay>
	SIM800H_TX("AT\r\n");
 8008556:	4b3e      	ldr	r3, [pc, #248]	; (8008650 <SIM800H_Start+0x15c>)
 8008558:	0018      	movs	r0, r3
 800855a:	f001 f89b 	bl	8009694 <SIM800H_TX>
	osDelay(1000);
 800855e:	23fa      	movs	r3, #250	; 0xfa
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	0018      	movs	r0, r3
 8008564:	f008 fb84 	bl	8010c70 <osDelay>
	HAL_IWDG_Refresh(&hiwdg);
 8008568:	4b3a      	ldr	r3, [pc, #232]	; (8008654 <SIM800H_Start+0x160>)
 800856a:	0018      	movs	r0, r3
 800856c:	f004 fbd0 	bl	800cd10 <HAL_IWDG_Refresh>
	if(U2Rx_indx < 2) {
 8008570:	4b36      	ldr	r3, [pc, #216]	; (800864c <SIM800H_Start+0x158>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2b01      	cmp	r3, #1
 8008576:	d827      	bhi.n	80085c8 <SIM800H_Start+0xd4>
		HAL_GPIO_WritePin(GSM_ONOFF_GPIO_Port, GSM_ONOFF_Pin, 1);
 8008578:	2390      	movs	r3, #144	; 0x90
 800857a:	05db      	lsls	r3, r3, #23
 800857c:	2201      	movs	r2, #1
 800857e:	2101      	movs	r1, #1
 8008580:	0018      	movs	r0, r3
 8008582:	f002 fc67 	bl	800ae54 <HAL_GPIO_WritePin>
		osDelay(1000);
 8008586:	23fa      	movs	r3, #250	; 0xfa
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	0018      	movs	r0, r3
 800858c:	f008 fb70 	bl	8010c70 <osDelay>
		HAL_GPIO_WritePin(GSM_ONOFF_GPIO_Port, GSM_ONOFF_Pin, 0);
 8008590:	2390      	movs	r3, #144	; 0x90
 8008592:	05db      	lsls	r3, r3, #23
 8008594:	2200      	movs	r2, #0
 8008596:	2101      	movs	r1, #1
 8008598:	0018      	movs	r0, r3
 800859a:	f002 fc5b 	bl	800ae54 <HAL_GPIO_WritePin>
		osDelay(2000);
 800859e:	23fa      	movs	r3, #250	; 0xfa
 80085a0:	00db      	lsls	r3, r3, #3
 80085a2:	0018      	movs	r0, r3
 80085a4:	f008 fb64 	bl	8010c70 <osDelay>
		U2Rx_indx = 0;
 80085a8:	4b28      	ldr	r3, [pc, #160]	; (800864c <SIM800H_Start+0x158>)
 80085aa:	2200      	movs	r2, #0
 80085ac:	601a      	str	r2, [r3, #0]
		SIM800H_TX("AT\r\n");
 80085ae:	4b28      	ldr	r3, [pc, #160]	; (8008650 <SIM800H_Start+0x15c>)
 80085b0:	0018      	movs	r0, r3
 80085b2:	f001 f86f 	bl	8009694 <SIM800H_TX>
		osDelay(1000);
 80085b6:	23fa      	movs	r3, #250	; 0xfa
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	0018      	movs	r0, r3
 80085bc:	f008 fb58 	bl	8010c70 <osDelay>
		SIM800H_TX("AT\r\n");
 80085c0:	4b23      	ldr	r3, [pc, #140]	; (8008650 <SIM800H_Start+0x15c>)
 80085c2:	0018      	movs	r0, r3
 80085c4:	f001 f866 	bl	8009694 <SIM800H_TX>
	}
	HAL_IWDG_Refresh(&hiwdg);
 80085c8:	4b22      	ldr	r3, [pc, #136]	; (8008654 <SIM800H_Start+0x160>)
 80085ca:	0018      	movs	r0, r3
 80085cc:	f004 fba0 	bl	800cd10 <HAL_IWDG_Refresh>

	osDelay(6000);
 80085d0:	4b21      	ldr	r3, [pc, #132]	; (8008658 <SIM800H_Start+0x164>)
 80085d2:	0018      	movs	r0, r3
 80085d4:	f008 fb4c 	bl	8010c70 <osDelay>
	HAL_IWDG_Refresh(&hiwdg);
 80085d8:	4b1e      	ldr	r3, [pc, #120]	; (8008654 <SIM800H_Start+0x160>)
 80085da:	0018      	movs	r0, r3
 80085dc:	f004 fb98 	bl	800cd10 <HAL_IWDG_Refresh>
	if(!SIM800H_CPIN()){
 80085e0:	f000 fa0a 	bl	80089f8 <SIM800H_CPIN>
 80085e4:	1e03      	subs	r3, r0, #0
 80085e6:	d122      	bne.n	800862e <SIM800H_Start+0x13a>
		SIM800H_Defaults();
 80085e8:	f000 f87e 	bl	80086e8 <SIM800H_Defaults>
		SIM800H_Register_Status();
 80085ec:	f000 f910 	bl	8008810 <SIM800H_Register_Status>
		strcpy(CCID, SIM800H_CCID());
 80085f0:	f000 f960 	bl	80088b4 <SIM800H_CCID>
 80085f4:	0002      	movs	r2, r0
 80085f6:	4b19      	ldr	r3, [pc, #100]	; (800865c <SIM800H_Start+0x168>)
 80085f8:	0011      	movs	r1, r2
 80085fa:	0018      	movs	r0, r3
 80085fc:	f00a fb19 	bl	8012c32 <strcpy>
		SIM800H_CSQ();
 8008600:	f000 f990 	bl	8008924 <SIM800H_CSQ>
		 HAL_IWDG_Refresh(&hiwdg);
 8008604:	4b13      	ldr	r3, [pc, #76]	; (8008654 <SIM800H_Start+0x160>)
 8008606:	0018      	movs	r0, r3
 8008608:	f004 fb82 	bl	800cd10 <HAL_IWDG_Refresh>
		if(SIM800H_GPRS_Setup() == 0) {
 800860c:	f000 fc48 	bl	8008ea0 <SIM800H_GPRS_Setup>
 8008610:	1e03      	subs	r3, r0, #0
 8008612:	d107      	bne.n	8008624 <SIM800H_Start+0x130>
			GPRS_Barear_Started = FALSE;
 8008614:	4b12      	ldr	r3, [pc, #72]	; (8008660 <SIM800H_Start+0x16c>)
 8008616:	2200      	movs	r2, #0
 8008618:	701a      	strb	r2, [r3, #0]
			Restart_GSM_Connection = TRUE;
 800861a:	4b12      	ldr	r3, [pc, #72]	; (8008664 <SIM800H_Start+0x170>)
 800861c:	2201      	movs	r2, #1
 800861e:	701a      	strb	r2, [r3, #0]
			return(0);
 8008620:	2300      	movs	r3, #0
 8008622:	e00d      	b.n	8008640 <SIM800H_Start+0x14c>
		} else {
			GPRS_Barear_Started = TRUE;
 8008624:	4b0e      	ldr	r3, [pc, #56]	; (8008660 <SIM800H_Start+0x16c>)
 8008626:	2201      	movs	r2, #1
 8008628:	701a      	strb	r2, [r3, #0]
			return(1);
 800862a:	2301      	movs	r3, #1
 800862c:	e008      	b.n	8008640 <SIM800H_Start+0x14c>
		}
	}
	NO_SIM = 1;
 800862e:	4b0e      	ldr	r3, [pc, #56]	; (8008668 <SIM800H_Start+0x174>)
 8008630:	2201      	movs	r2, #1
 8008632:	701a      	strb	r2, [r3, #0]
	osDelay(1000);
 8008634:	23fa      	movs	r3, #250	; 0xfa
 8008636:	009b      	lsls	r3, r3, #2
 8008638:	0018      	movs	r0, r3
 800863a:	f008 fb19 	bl	8010c70 <osDelay>
	return(0);
 800863e:	2300      	movs	r3, #0

}
 8008640:	0018      	movs	r0, r3
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
 8008646:	46c0      	nop			; (mov r8, r8)
 8008648:	00000bb8 	.word	0x00000bb8
 800864c:	20002264 	.word	0x20002264
 8008650:	08016b48 	.word	0x08016b48
 8008654:	20000848 	.word	0x20000848
 8008658:	00001770 	.word	0x00001770
 800865c:	20002244 	.word	0x20002244
 8008660:	20000794 	.word	0x20000794
 8008664:	20001695 	.word	0x20001695
 8008668:	20001694 	.word	0x20001694

0800866c <SIM800H_Restart>:


unsigned char SIM800H_Restart(void)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	af00      	add	r7, sp, #0
	 HAL_IWDG_Refresh(&hiwdg);
 8008670:	4b0d      	ldr	r3, [pc, #52]	; (80086a8 <SIM800H_Restart+0x3c>)
 8008672:	0018      	movs	r0, r3
 8008674:	f004 fb4c 	bl	800cd10 <HAL_IWDG_Refresh>
	SIM800H_Shutdown();
 8008678:	f000 f81a 	bl	80086b0 <SIM800H_Shutdown>
	 HAL_IWDG_Refresh(&hiwdg);
 800867c:	4b0a      	ldr	r3, [pc, #40]	; (80086a8 <SIM800H_Restart+0x3c>)
 800867e:	0018      	movs	r0, r3
 8008680:	f004 fb46 	bl	800cd10 <HAL_IWDG_Refresh>
	osDelay(5000);
 8008684:	4b09      	ldr	r3, [pc, #36]	; (80086ac <SIM800H_Restart+0x40>)
 8008686:	0018      	movs	r0, r3
 8008688:	f008 faf2 	bl	8010c70 <osDelay>
	 HAL_IWDG_Refresh(&hiwdg);
 800868c:	4b06      	ldr	r3, [pc, #24]	; (80086a8 <SIM800H_Restart+0x3c>)
 800868e:	0018      	movs	r0, r3
 8008690:	f004 fb3e 	bl	800cd10 <HAL_IWDG_Refresh>
	if(SIM800H_Start()) {
 8008694:	f7ff ff2e 	bl	80084f4 <SIM800H_Start>
 8008698:	1e03      	subs	r3, r0, #0
 800869a:	d001      	beq.n	80086a0 <SIM800H_Restart+0x34>
		return(1);
 800869c:	2301      	movs	r3, #1
 800869e:	e000      	b.n	80086a2 <SIM800H_Restart+0x36>
	} else {
		return(0);
 80086a0:	2300      	movs	r3, #0
	}
}
 80086a2:	0018      	movs	r0, r3
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}
 80086a8:	20000848 	.word	0x20000848
 80086ac:	00001388 	.word	0x00001388

080086b0 <SIM800H_Shutdown>:


static void SIM800H_Shutdown(void)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	af00      	add	r7, sp, #0
	osDelay(1000);
 80086b4:	23fa      	movs	r3, #250	; 0xfa
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	0018      	movs	r0, r3
 80086ba:	f008 fad9 	bl	8010c70 <osDelay>
	SIM800H_TX("AT+CPOWN=1\r\n");
 80086be:	4b09      	ldr	r3, [pc, #36]	; (80086e4 <SIM800H_Shutdown+0x34>)
 80086c0:	0018      	movs	r0, r3
 80086c2:	f000 ffe7 	bl	8009694 <SIM800H_TX>
	osDelay(2000);
 80086c6:	23fa      	movs	r3, #250	; 0xfa
 80086c8:	00db      	lsls	r3, r3, #3
 80086ca:	0018      	movs	r0, r3
 80086cc:	f008 fad0 	bl	8010c70 <osDelay>
	HAL_GPIO_WritePin(GSM_PWR_GPIO_Port, GSM_PWR_Pin, 0);
 80086d0:	2390      	movs	r3, #144	; 0x90
 80086d2:	05db      	lsls	r3, r3, #23
 80086d4:	2200      	movs	r2, #0
 80086d6:	2110      	movs	r1, #16
 80086d8:	0018      	movs	r0, r3
 80086da:	f002 fbbb 	bl	800ae54 <HAL_GPIO_WritePin>
}
 80086de:	46c0      	nop			; (mov r8, r8)
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}
 80086e4:	08016b50 	.word	0x08016b50

080086e8 <SIM800H_Defaults>:

static void SIM800H_Defaults(void)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
	unsigned int i = 0;
 80086ee:	2300      	movs	r3, #0
 80086f0:	607b      	str	r3, [r7, #4]
	unsigned char a;

	for(i = 0; i < 10; i++) {
 80086f2:	2300      	movs	r3, #0
 80086f4:	607b      	str	r3, [r7, #4]
 80086f6:	e036      	b.n	8008766 <SIM800H_Defaults+0x7e>
		SIM800H_TX(GSM_DEFAULTS);
 80086f8:	4b3f      	ldr	r3, [pc, #252]	; (80087f8 <SIM800H_Defaults+0x110>)
 80086fa:	0018      	movs	r0, r3
 80086fc:	f000 ffca 	bl	8009694 <SIM800H_TX>
		osDelay(5);
 8008700:	2005      	movs	r0, #5
 8008702:	f008 fab5 	bl	8010c70 <osDelay>
		HAL_IWDG_Refresh(&hiwdg);
 8008706:	4b3d      	ldr	r3, [pc, #244]	; (80087fc <SIM800H_Defaults+0x114>)
 8008708:	0018      	movs	r0, r3
 800870a:	f004 fb01 	bl	800cd10 <HAL_IWDG_Refresh>
		SIM800H_Clear_Buffers();
 800870e:	f000 fd3b 	bl	8009188 <SIM800H_Clear_Buffers>
		for(a = 0; a < 10; a++) {
 8008712:	1cfb      	adds	r3, r7, #3
 8008714:	2200      	movs	r2, #0
 8008716:	701a      	strb	r2, [r3, #0]
 8008718:	e014      	b.n	8008744 <SIM800H_Defaults+0x5c>
	  		if(SIM800_Wait_for_Responce(10)) {
 800871a:	200a      	movs	r0, #10
 800871c:	f7ff feca 	bl	80084b4 <SIM800_Wait_for_Responce>
 8008720:	1e03      	subs	r3, r0, #0
 8008722:	d00a      	beq.n	800873a <SIM800H_Defaults+0x52>
	  			U2Transfer_cplt = 0;
 8008724:	4b36      	ldr	r3, [pc, #216]	; (8008800 <SIM800H_Defaults+0x118>)
 8008726:	2200      	movs	r2, #0
 8008728:	701a      	strb	r2, [r3, #0]
	  			if(strstr(U2Rx_Buffer, "OK") != NULL) {
 800872a:	4a36      	ldr	r2, [pc, #216]	; (8008804 <SIM800H_Defaults+0x11c>)
 800872c:	4b36      	ldr	r3, [pc, #216]	; (8008808 <SIM800H_Defaults+0x120>)
 800872e:	0011      	movs	r1, r2
 8008730:	0018      	movs	r0, r3
 8008732:	f00a faac 	bl	8012c8e <strstr>
 8008736:	1e03      	subs	r3, r0, #0
 8008738:	d109      	bne.n	800874e <SIM800H_Defaults+0x66>
		for(a = 0; a < 10; a++) {
 800873a:	1cfb      	adds	r3, r7, #3
 800873c:	781a      	ldrb	r2, [r3, #0]
 800873e:	1cfb      	adds	r3, r7, #3
 8008740:	3201      	adds	r2, #1
 8008742:	701a      	strb	r2, [r3, #0]
 8008744:	1cfb      	adds	r3, r7, #3
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	2b09      	cmp	r3, #9
 800874a:	d9e6      	bls.n	800871a <SIM800H_Defaults+0x32>
 800874c:	e000      	b.n	8008750 <SIM800H_Defaults+0x68>
	  	  			break;
 800874e:	46c0      	nop			; (mov r8, r8)
	  	  		}
	  	  	}
	  	}
		if(strstr(U2Rx_Buffer, "OK") != NULL) {
 8008750:	4a2c      	ldr	r2, [pc, #176]	; (8008804 <SIM800H_Defaults+0x11c>)
 8008752:	4b2d      	ldr	r3, [pc, #180]	; (8008808 <SIM800H_Defaults+0x120>)
 8008754:	0011      	movs	r1, r2
 8008756:	0018      	movs	r0, r3
 8008758:	f00a fa99 	bl	8012c8e <strstr>
 800875c:	1e03      	subs	r3, r0, #0
 800875e:	d106      	bne.n	800876e <SIM800H_Defaults+0x86>
	for(i = 0; i < 10; i++) {
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	3301      	adds	r3, #1
 8008764:	607b      	str	r3, [r7, #4]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2b09      	cmp	r3, #9
 800876a:	d9c5      	bls.n	80086f8 <SIM800H_Defaults+0x10>
 800876c:	e000      	b.n	8008770 <SIM800H_Defaults+0x88>
			break;
 800876e:	46c0      	nop			; (mov r8, r8)
		}
	}

	for(i = 0; i < 10; i++) {
 8008770:	2300      	movs	r3, #0
 8008772:	607b      	str	r3, [r7, #4]
 8008774:	e036      	b.n	80087e4 <SIM800H_Defaults+0xfc>
		SIM800H_TX(GSM_DEFAULTS_HTTP);
 8008776:	4b25      	ldr	r3, [pc, #148]	; (800880c <SIM800H_Defaults+0x124>)
 8008778:	0018      	movs	r0, r3
 800877a:	f000 ff8b 	bl	8009694 <SIM800H_TX>
		osDelay(5);
 800877e:	2005      	movs	r0, #5
 8008780:	f008 fa76 	bl	8010c70 <osDelay>
		HAL_IWDG_Refresh(&hiwdg);
 8008784:	4b1d      	ldr	r3, [pc, #116]	; (80087fc <SIM800H_Defaults+0x114>)
 8008786:	0018      	movs	r0, r3
 8008788:	f004 fac2 	bl	800cd10 <HAL_IWDG_Refresh>
		SIM800H_Clear_Buffers();
 800878c:	f000 fcfc 	bl	8009188 <SIM800H_Clear_Buffers>
		for(a = 0; a < 10; a++) {
 8008790:	1cfb      	adds	r3, r7, #3
 8008792:	2200      	movs	r2, #0
 8008794:	701a      	strb	r2, [r3, #0]
 8008796:	e014      	b.n	80087c2 <SIM800H_Defaults+0xda>
	  		if(SIM800_Wait_for_Responce(10)) {
 8008798:	200a      	movs	r0, #10
 800879a:	f7ff fe8b 	bl	80084b4 <SIM800_Wait_for_Responce>
 800879e:	1e03      	subs	r3, r0, #0
 80087a0:	d00a      	beq.n	80087b8 <SIM800H_Defaults+0xd0>
	  			U2Transfer_cplt = 0;
 80087a2:	4b17      	ldr	r3, [pc, #92]	; (8008800 <SIM800H_Defaults+0x118>)
 80087a4:	2200      	movs	r2, #0
 80087a6:	701a      	strb	r2, [r3, #0]
	  			if(strstr(U2Rx_Buffer, "OK") != NULL) {
 80087a8:	4a16      	ldr	r2, [pc, #88]	; (8008804 <SIM800H_Defaults+0x11c>)
 80087aa:	4b17      	ldr	r3, [pc, #92]	; (8008808 <SIM800H_Defaults+0x120>)
 80087ac:	0011      	movs	r1, r2
 80087ae:	0018      	movs	r0, r3
 80087b0:	f00a fa6d 	bl	8012c8e <strstr>
 80087b4:	1e03      	subs	r3, r0, #0
 80087b6:	d109      	bne.n	80087cc <SIM800H_Defaults+0xe4>
		for(a = 0; a < 10; a++) {
 80087b8:	1cfb      	adds	r3, r7, #3
 80087ba:	781a      	ldrb	r2, [r3, #0]
 80087bc:	1cfb      	adds	r3, r7, #3
 80087be:	3201      	adds	r2, #1
 80087c0:	701a      	strb	r2, [r3, #0]
 80087c2:	1cfb      	adds	r3, r7, #3
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	2b09      	cmp	r3, #9
 80087c8:	d9e6      	bls.n	8008798 <SIM800H_Defaults+0xb0>
 80087ca:	e000      	b.n	80087ce <SIM800H_Defaults+0xe6>
	  	  			break;
 80087cc:	46c0      	nop			; (mov r8, r8)
	  	  		}
	  	  	}
	  	}
		if(strstr(U2Rx_Buffer, "OK") != NULL) {
 80087ce:	4a0d      	ldr	r2, [pc, #52]	; (8008804 <SIM800H_Defaults+0x11c>)
 80087d0:	4b0d      	ldr	r3, [pc, #52]	; (8008808 <SIM800H_Defaults+0x120>)
 80087d2:	0011      	movs	r1, r2
 80087d4:	0018      	movs	r0, r3
 80087d6:	f00a fa5a 	bl	8012c8e <strstr>
 80087da:	1e03      	subs	r3, r0, #0
 80087dc:	d106      	bne.n	80087ec <SIM800H_Defaults+0x104>
	for(i = 0; i < 10; i++) {
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	3301      	adds	r3, #1
 80087e2:	607b      	str	r3, [r7, #4]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2b09      	cmp	r3, #9
 80087e8:	d9c5      	bls.n	8008776 <SIM800H_Defaults+0x8e>
			break;
		}
	}
}
 80087ea:	e000      	b.n	80087ee <SIM800H_Defaults+0x106>
			break;
 80087ec:	46c0      	nop			; (mov r8, r8)
}
 80087ee:	46c0      	nop			; (mov r8, r8)
 80087f0:	46bd      	mov	sp, r7
 80087f2:	b002      	add	sp, #8
 80087f4:	bd80      	pop	{r7, pc}
 80087f6:	46c0      	nop			; (mov r8, r8)
 80087f8:	08016b60 	.word	0x08016b60
 80087fc:	20000848 	.word	0x20000848
 8008800:	2000246c 	.word	0x2000246c
 8008804:	08016a7c 	.word	0x08016a7c
 8008808:	2000226c 	.word	0x2000226c
 800880c:	08016bb0 	.word	0x08016bb0

08008810 <SIM800H_Register_Status>:


unsigned char SIM800H_Register_Status(void)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b082      	sub	sp, #8
 8008814:	af00      	add	r7, sp, #0
	unsigned int i = 0;
 8008816:	2300      	movs	r3, #0
 8008818:	607b      	str	r3, [r7, #4]

	if(creg_timer > 0) {
 800881a:	4b20      	ldr	r3, [pc, #128]	; (800889c <SIM800H_Register_Status+0x8c>)
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d001      	beq.n	8008826 <SIM800H_Register_Status+0x16>
		return(1);
 8008822:	2301      	movs	r3, #1
 8008824:	e036      	b.n	8008894 <SIM800H_Register_Status+0x84>
	}
	for(i = 0; i < 10; i++) {
 8008826:	2300      	movs	r3, #0
 8008828:	607b      	str	r3, [r7, #4]
 800882a:	e02f      	b.n	800888c <SIM800H_Register_Status+0x7c>
		SIM800H_TX("AT+CREG?\r\n");
 800882c:	4b1c      	ldr	r3, [pc, #112]	; (80088a0 <SIM800H_Register_Status+0x90>)
 800882e:	0018      	movs	r0, r3
 8008830:	f000 ff30 	bl	8009694 <SIM800H_TX>
		SIM800H_Clear_Buffers();
 8008834:	f000 fca8 	bl	8009188 <SIM800H_Clear_Buffers>
		if(SIM800_Wait_for_Responce(20)) {
 8008838:	2014      	movs	r0, #20
 800883a:	f7ff fe3b 	bl	80084b4 <SIM800_Wait_for_Responce>
 800883e:	1e03      	subs	r3, r0, #0
 8008840:	d01c      	beq.n	800887c <SIM800H_Register_Status+0x6c>
			U2Transfer_cplt = 0;
 8008842:	4b18      	ldr	r3, [pc, #96]	; (80088a4 <SIM800H_Register_Status+0x94>)
 8008844:	2200      	movs	r2, #0
 8008846:	701a      	strb	r2, [r3, #0]
			if(strstr(U2Rx_Buffer, "+CREG: 0,1") != NULL) {
 8008848:	4a17      	ldr	r2, [pc, #92]	; (80088a8 <SIM800H_Register_Status+0x98>)
 800884a:	4b18      	ldr	r3, [pc, #96]	; (80088ac <SIM800H_Register_Status+0x9c>)
 800884c:	0011      	movs	r1, r2
 800884e:	0018      	movs	r0, r3
 8008850:	f00a fa1d 	bl	8012c8e <strstr>
 8008854:	1e03      	subs	r3, r0, #0
 8008856:	d004      	beq.n	8008862 <SIM800H_Register_Status+0x52>
				creg_timer = 60;
 8008858:	4b10      	ldr	r3, [pc, #64]	; (800889c <SIM800H_Register_Status+0x8c>)
 800885a:	223c      	movs	r2, #60	; 0x3c
 800885c:	701a      	strb	r2, [r3, #0]
				return(1);
 800885e:	2301      	movs	r3, #1
 8008860:	e018      	b.n	8008894 <SIM800H_Register_Status+0x84>
			} else if(strstr(U2Rx_Buffer, "+CREG: 0,5") != NULL) {
 8008862:	4a13      	ldr	r2, [pc, #76]	; (80088b0 <SIM800H_Register_Status+0xa0>)
 8008864:	4b11      	ldr	r3, [pc, #68]	; (80088ac <SIM800H_Register_Status+0x9c>)
 8008866:	0011      	movs	r1, r2
 8008868:	0018      	movs	r0, r3
 800886a:	f00a fa10 	bl	8012c8e <strstr>
 800886e:	1e03      	subs	r3, r0, #0
 8008870:	d004      	beq.n	800887c <SIM800H_Register_Status+0x6c>
				creg_timer = 60;
 8008872:	4b0a      	ldr	r3, [pc, #40]	; (800889c <SIM800H_Register_Status+0x8c>)
 8008874:	223c      	movs	r2, #60	; 0x3c
 8008876:	701a      	strb	r2, [r3, #0]
				return(1);
 8008878:	2301      	movs	r3, #1
 800887a:	e00b      	b.n	8008894 <SIM800H_Register_Status+0x84>
			}
		}
		osDelay(1000);
 800887c:	23fa      	movs	r3, #250	; 0xfa
 800887e:	009b      	lsls	r3, r3, #2
 8008880:	0018      	movs	r0, r3
 8008882:	f008 f9f5 	bl	8010c70 <osDelay>
	for(i = 0; i < 10; i++) {
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	3301      	adds	r3, #1
 800888a:	607b      	str	r3, [r7, #4]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2b09      	cmp	r3, #9
 8008890:	d9cc      	bls.n	800882c <SIM800H_Register_Status+0x1c>
	}
	return(0);
 8008892:	2300      	movs	r3, #0
}
 8008894:	0018      	movs	r0, r3
 8008896:	46bd      	mov	sp, r7
 8008898:	b002      	add	sp, #8
 800889a:	bd80      	pop	{r7, pc}
 800889c:	20001801 	.word	0x20001801
 80088a0:	08016bf8 	.word	0x08016bf8
 80088a4:	2000246c 	.word	0x2000246c
 80088a8:	08016c04 	.word	0x08016c04
 80088ac:	2000226c 	.word	0x2000226c
 80088b0:	08016c10 	.word	0x08016c10

080088b4 <SIM800H_CCID>:

// Register status GPRS


unsigned char * SIM800H_CCID(void)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
	unsigned int i = 0;
 80088ba:	2300      	movs	r3, #0
 80088bc:	607b      	str	r3, [r7, #4]

	for(i = 0; i < 3; i++) {
 80088be:	2300      	movs	r3, #0
 80088c0:	607b      	str	r3, [r7, #4]
 80088c2:	e01f      	b.n	8008904 <SIM800H_CCID+0x50>
		SIM800H_TX("AT+CCID\r\n");
 80088c4:	4b13      	ldr	r3, [pc, #76]	; (8008914 <SIM800H_CCID+0x60>)
 80088c6:	0018      	movs	r0, r3
 80088c8:	f000 fee4 	bl	8009694 <SIM800H_TX>
		SIM800H_Clear_Buffers();
 80088cc:	f000 fc5c 	bl	8009188 <SIM800H_Clear_Buffers>
		if(SIM800_Wait_for_Responce(20)) {
 80088d0:	2014      	movs	r0, #20
 80088d2:	f7ff fdef 	bl	80084b4 <SIM800_Wait_for_Responce>
 80088d6:	1e03      	subs	r3, r0, #0
 80088d8:	d00c      	beq.n	80088f4 <SIM800H_CCID+0x40>
			U2Transfer_cplt = 0;
 80088da:	4b0f      	ldr	r3, [pc, #60]	; (8008918 <SIM800H_CCID+0x64>)
 80088dc:	2200      	movs	r2, #0
 80088de:	701a      	strb	r2, [r3, #0]
			if(strstr(U2Rx_Buffer, "OK") != NULL) {
 80088e0:	4a0e      	ldr	r2, [pc, #56]	; (800891c <SIM800H_CCID+0x68>)
 80088e2:	4b0f      	ldr	r3, [pc, #60]	; (8008920 <SIM800H_CCID+0x6c>)
 80088e4:	0011      	movs	r1, r2
 80088e6:	0018      	movs	r0, r3
 80088e8:	f00a f9d1 	bl	8012c8e <strstr>
 80088ec:	1e03      	subs	r3, r0, #0
 80088ee:	d001      	beq.n	80088f4 <SIM800H_CCID+0x40>
				return(U2Rx_Buffer);
 80088f0:	4b0b      	ldr	r3, [pc, #44]	; (8008920 <SIM800H_CCID+0x6c>)
 80088f2:	e00b      	b.n	800890c <SIM800H_CCID+0x58>
			}
		}
		osDelay(300);
 80088f4:	2396      	movs	r3, #150	; 0x96
 80088f6:	005b      	lsls	r3, r3, #1
 80088f8:	0018      	movs	r0, r3
 80088fa:	f008 f9b9 	bl	8010c70 <osDelay>
	for(i = 0; i < 3; i++) {
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	3301      	adds	r3, #1
 8008902:	607b      	str	r3, [r7, #4]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2b02      	cmp	r3, #2
 8008908:	d9dc      	bls.n	80088c4 <SIM800H_CCID+0x10>
	}
	return(NULL);
 800890a:	2300      	movs	r3, #0
}
 800890c:	0018      	movs	r0, r3
 800890e:	46bd      	mov	sp, r7
 8008910:	b002      	add	sp, #8
 8008912:	bd80      	pop	{r7, pc}
 8008914:	08016c1c 	.word	0x08016c1c
 8008918:	2000246c 	.word	0x2000246c
 800891c:	08016a7c 	.word	0x08016a7c
 8008920:	2000226c 	.word	0x2000226c

08008924 <SIM800H_CSQ>:

unsigned char SIM800H_CSQ(void)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b082      	sub	sp, #8
 8008928:	af00      	add	r7, sp, #0
	unsigned int i = 0;
 800892a:	2300      	movs	r3, #0
 800892c:	607b      	str	r3, [r7, #4]
    char * tpoint;
    HAL_IWDG_Refresh(&hiwdg);
 800892e:	4b2b      	ldr	r3, [pc, #172]	; (80089dc <SIM800H_CSQ+0xb8>)
 8008930:	0018      	movs	r0, r3
 8008932:	f004 f9ed 	bl	800cd10 <HAL_IWDG_Refresh>
	for(i = 0; i < 3; i++) {
 8008936:	2300      	movs	r3, #0
 8008938:	607b      	str	r3, [r7, #4]
 800893a:	e046      	b.n	80089ca <SIM800H_CSQ+0xa6>
		SIM800H_TX("AT+CSQ\r\n");
 800893c:	4b28      	ldr	r3, [pc, #160]	; (80089e0 <SIM800H_CSQ+0xbc>)
 800893e:	0018      	movs	r0, r3
 8008940:	f000 fea8 	bl	8009694 <SIM800H_TX>
		SIM800H_Clear_Buffers();
 8008944:	f000 fc20 	bl	8009188 <SIM800H_Clear_Buffers>
		if(SIM800_Wait_for_Responce(10)) {
 8008948:	200a      	movs	r0, #10
 800894a:	f7ff fdb3 	bl	80084b4 <SIM800_Wait_for_Responce>
 800894e:	1e03      	subs	r3, r0, #0
 8008950:	d033      	beq.n	80089ba <SIM800H_CSQ+0x96>
			U2Transfer_cplt = 0;
 8008952:	4b24      	ldr	r3, [pc, #144]	; (80089e4 <SIM800H_CSQ+0xc0>)
 8008954:	2200      	movs	r2, #0
 8008956:	701a      	strb	r2, [r3, #0]
			tpoint = strstr(U2Rx_Buffer, "+CSQ:");
 8008958:	4a23      	ldr	r2, [pc, #140]	; (80089e8 <SIM800H_CSQ+0xc4>)
 800895a:	4b24      	ldr	r3, [pc, #144]	; (80089ec <SIM800H_CSQ+0xc8>)
 800895c:	0011      	movs	r1, r2
 800895e:	0018      	movs	r0, r3
 8008960:	f00a f995 	bl	8012c8e <strstr>
 8008964:	0003      	movs	r3, r0
 8008966:	603b      	str	r3, [r7, #0]
			if(tpoint != NULL) {
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d025      	beq.n	80089ba <SIM800H_CSQ+0x96>
				osDelay(500);
 800896e:	23fa      	movs	r3, #250	; 0xfa
 8008970:	005b      	lsls	r3, r3, #1
 8008972:	0018      	movs	r0, r3
 8008974:	f008 f97c 	bl	8010c70 <osDelay>
				tpoint = tpoint + 6;
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	3306      	adds	r3, #6
 800897c:	603b      	str	r3, [r7, #0]
				tpoint = strtok(tpoint, ",");
 800897e:	4a1c      	ldr	r2, [pc, #112]	; (80089f0 <SIM800H_CSQ+0xcc>)
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	0011      	movs	r1, r2
 8008984:	0018      	movs	r0, r3
 8008986:	f00a ffd3 	bl	8013930 <strtok>
 800898a:	0003      	movs	r3, r0
 800898c:	603b      	str	r3, [r7, #0]
				if(strlen(tpoint) > 5) {
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	0018      	movs	r0, r3
 8008992:	f7f7 fbb9 	bl	8000108 <strlen>
 8008996:	0003      	movs	r3, r0
 8008998:	2b05      	cmp	r3, #5
 800899a:	d904      	bls.n	80089a6 <SIM800H_CSQ+0x82>
					GSM_Signal = 0;
 800899c:	4b15      	ldr	r3, [pc, #84]	; (80089f4 <SIM800H_CSQ+0xd0>)
 800899e:	2200      	movs	r2, #0
 80089a0:	701a      	strb	r2, [r3, #0]
					return(FALSE);
 80089a2:	2300      	movs	r3, #0
 80089a4:	e015      	b.n	80089d2 <SIM800H_CSQ+0xae>
				} else {
					GSM_Signal = atoi(tpoint);
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	0018      	movs	r0, r3
 80089aa:	f009 f9cc 	bl	8011d46 <atoi>
 80089ae:	0003      	movs	r3, r0
 80089b0:	b2da      	uxtb	r2, r3
 80089b2:	4b10      	ldr	r3, [pc, #64]	; (80089f4 <SIM800H_CSQ+0xd0>)
 80089b4:	701a      	strb	r2, [r3, #0]
				}
				return(1);
 80089b6:	2301      	movs	r3, #1
 80089b8:	e00b      	b.n	80089d2 <SIM800H_CSQ+0xae>
			}
		}
		osDelay(300);
 80089ba:	2396      	movs	r3, #150	; 0x96
 80089bc:	005b      	lsls	r3, r3, #1
 80089be:	0018      	movs	r0, r3
 80089c0:	f008 f956 	bl	8010c70 <osDelay>
	for(i = 0; i < 3; i++) {
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	3301      	adds	r3, #1
 80089c8:	607b      	str	r3, [r7, #4]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2b02      	cmp	r3, #2
 80089ce:	d9b5      	bls.n	800893c <SIM800H_CSQ+0x18>
	}
	return(0);
 80089d0:	2300      	movs	r3, #0
}
 80089d2:	0018      	movs	r0, r3
 80089d4:	46bd      	mov	sp, r7
 80089d6:	b002      	add	sp, #8
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	46c0      	nop			; (mov r8, r8)
 80089dc:	20000848 	.word	0x20000848
 80089e0:	08016c28 	.word	0x08016c28
 80089e4:	2000246c 	.word	0x2000246c
 80089e8:	08016c34 	.word	0x08016c34
 80089ec:	2000226c 	.word	0x2000226c
 80089f0:	080169d4 	.word	0x080169d4
 80089f4:	20001803 	.word	0x20001803

080089f8 <SIM800H_CPIN>:

unsigned char SIM800H_CPIN(void)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
	unsigned int i = 0;
 80089fe:	2300      	movs	r3, #0
 8008a00:	607b      	str	r3, [r7, #4]
    char * tpoint;
    HAL_IWDG_Refresh(&hiwdg);
 8008a02:	4b1c      	ldr	r3, [pc, #112]	; (8008a74 <SIM800H_CPIN+0x7c>)
 8008a04:	0018      	movs	r0, r3
 8008a06:	f004 f983 	bl	800cd10 <HAL_IWDG_Refresh>
	SIM800H_TX("AT+CPIN?\r\n");
 8008a0a:	4b1b      	ldr	r3, [pc, #108]	; (8008a78 <SIM800H_CPIN+0x80>)
 8008a0c:	0018      	movs	r0, r3
 8008a0e:	f000 fe41 	bl	8009694 <SIM800H_TX>
	SIM800H_Clear_Buffers();
 8008a12:	f000 fbb9 	bl	8009188 <SIM800H_Clear_Buffers>
	for(i=0; i<3; i++){
 8008a16:	2300      	movs	r3, #0
 8008a18:	607b      	str	r3, [r7, #4]
 8008a1a:	e01e      	b.n	8008a5a <SIM800H_CPIN+0x62>
		if(SIM800_Wait_for_Responce(10)) {
 8008a1c:	200a      	movs	r0, #10
 8008a1e:	f7ff fd49 	bl	80084b4 <SIM800_Wait_for_Responce>
 8008a22:	1e03      	subs	r3, r0, #0
 8008a24:	d016      	beq.n	8008a54 <SIM800H_CPIN+0x5c>
			U2Transfer_cplt = 0;
 8008a26:	4b15      	ldr	r3, [pc, #84]	; (8008a7c <SIM800H_CPIN+0x84>)
 8008a28:	2200      	movs	r2, #0
 8008a2a:	701a      	strb	r2, [r3, #0]
			if(strstr(U2Rx_Buffer, "OK") != NULL){
 8008a2c:	4a14      	ldr	r2, [pc, #80]	; (8008a80 <SIM800H_CPIN+0x88>)
 8008a2e:	4b15      	ldr	r3, [pc, #84]	; (8008a84 <SIM800H_CPIN+0x8c>)
 8008a30:	0011      	movs	r1, r2
 8008a32:	0018      	movs	r0, r3
 8008a34:	f00a f92b 	bl	8012c8e <strstr>
 8008a38:	1e03      	subs	r3, r0, #0
 8008a3a:	d001      	beq.n	8008a40 <SIM800H_CPIN+0x48>
				return(0);
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	e015      	b.n	8008a6c <SIM800H_CPIN+0x74>
			}
			if(strstr(U2Rx_Buffer, "ERROR") != NULL){
 8008a40:	4a11      	ldr	r2, [pc, #68]	; (8008a88 <SIM800H_CPIN+0x90>)
 8008a42:	4b10      	ldr	r3, [pc, #64]	; (8008a84 <SIM800H_CPIN+0x8c>)
 8008a44:	0011      	movs	r1, r2
 8008a46:	0018      	movs	r0, r3
 8008a48:	f00a f921 	bl	8012c8e <strstr>
 8008a4c:	1e03      	subs	r3, r0, #0
 8008a4e:	d001      	beq.n	8008a54 <SIM800H_CPIN+0x5c>
				return(1);
 8008a50:	2301      	movs	r3, #1
 8008a52:	e00b      	b.n	8008a6c <SIM800H_CPIN+0x74>
	for(i=0; i<3; i++){
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	3301      	adds	r3, #1
 8008a58:	607b      	str	r3, [r7, #4]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2b02      	cmp	r3, #2
 8008a5e:	d9dd      	bls.n	8008a1c <SIM800H_CPIN+0x24>
			}

		}
	}
	osDelay(300);
 8008a60:	2396      	movs	r3, #150	; 0x96
 8008a62:	005b      	lsls	r3, r3, #1
 8008a64:	0018      	movs	r0, r3
 8008a66:	f008 f903 	bl	8010c70 <osDelay>
	return(0);
 8008a6a:	2300      	movs	r3, #0
}
 8008a6c:	0018      	movs	r0, r3
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	b002      	add	sp, #8
 8008a72:	bd80      	pop	{r7, pc}
 8008a74:	20000848 	.word	0x20000848
 8008a78:	08016c3c 	.word	0x08016c3c
 8008a7c:	2000246c 	.word	0x2000246c
 8008a80:	08016a7c 	.word	0x08016a7c
 8008a84:	2000226c 	.word	0x2000226c
 8008a88:	08016a80 	.word	0x08016a80

08008a8c <SIM800H_Check_SMS>:

char * SIM800H_Check_SMS(void)
{  char * startpoint;
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b082      	sub	sp, #8
 8008a90:	af00      	add	r7, sp, #0
	HAL_IWDG_Refresh(&hiwdg);
 8008a92:	4b3f      	ldr	r3, [pc, #252]	; (8008b90 <SIM800H_Check_SMS+0x104>)
 8008a94:	0018      	movs	r0, r3
 8008a96:	f004 f93b 	bl	800cd10 <HAL_IWDG_Refresh>
	SIM800H_TX("AT+CMGL=\"ALL\"\r\n");
 8008a9a:	4b3e      	ldr	r3, [pc, #248]	; (8008b94 <SIM800H_Check_SMS+0x108>)
 8008a9c:	0018      	movs	r0, r3
 8008a9e:	f000 fdf9 	bl	8009694 <SIM800H_TX>
	SIM800H_Clear_Buffers();
 8008aa2:	f000 fb71 	bl	8009188 <SIM800H_Clear_Buffers>
	if(SIM800_Wait_for_Responce(20)) {
 8008aa6:	2014      	movs	r0, #20
 8008aa8:	f7ff fd04 	bl	80084b4 <SIM800_Wait_for_Responce>
 8008aac:	1e03      	subs	r3, r0, #0
 8008aae:	d06a      	beq.n	8008b86 <SIM800H_Check_SMS+0xfa>
		U2Transfer_cplt = 0;
 8008ab0:	4b39      	ldr	r3, [pc, #228]	; (8008b98 <SIM800H_Check_SMS+0x10c>)
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	701a      	strb	r2, [r3, #0]
		startpoint = strstr(U2Rx_Buffer, "+CMGL:");
 8008ab6:	4a39      	ldr	r2, [pc, #228]	; (8008b9c <SIM800H_Check_SMS+0x110>)
 8008ab8:	4b39      	ldr	r3, [pc, #228]	; (8008ba0 <SIM800H_Check_SMS+0x114>)
 8008aba:	0011      	movs	r1, r2
 8008abc:	0018      	movs	r0, r3
 8008abe:	f00a f8e6 	bl	8012c8e <strstr>
 8008ac2:	0003      	movs	r3, r0
 8008ac4:	607b      	str	r3, [r7, #4]
		if(startpoint != NULL) {
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d05c      	beq.n	8008b86 <SIM800H_Check_SMS+0xfa>
			CellnumPoint = strtok(startpoint, " ");
 8008acc:	4a35      	ldr	r2, [pc, #212]	; (8008ba4 <SIM800H_Check_SMS+0x118>)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	0011      	movs	r1, r2
 8008ad2:	0018      	movs	r0, r3
 8008ad4:	f00a ff2c 	bl	8013930 <strtok>
 8008ad8:	0002      	movs	r2, r0
 8008ada:	4b33      	ldr	r3, [pc, #204]	; (8008ba8 <SIM800H_Check_SMS+0x11c>)
 8008adc:	601a      	str	r2, [r3, #0]

			SimPos = atoi(strtok(NULL, ","));
 8008ade:	4b33      	ldr	r3, [pc, #204]	; (8008bac <SIM800H_Check_SMS+0x120>)
 8008ae0:	0019      	movs	r1, r3
 8008ae2:	2000      	movs	r0, #0
 8008ae4:	f00a ff24 	bl	8013930 <strtok>
 8008ae8:	0003      	movs	r3, r0
 8008aea:	0018      	movs	r0, r3
 8008aec:	f009 f92b 	bl	8011d46 <atoi>
 8008af0:	0003      	movs	r3, r0
 8008af2:	b2da      	uxtb	r2, r3
 8008af4:	4b2e      	ldr	r3, [pc, #184]	; (8008bb0 <SIM800H_Check_SMS+0x124>)
 8008af6:	701a      	strb	r2, [r3, #0]

			CellnumPoint = strtok(NULL, "\"");
 8008af8:	4b2e      	ldr	r3, [pc, #184]	; (8008bb4 <SIM800H_Check_SMS+0x128>)
 8008afa:	0019      	movs	r1, r3
 8008afc:	2000      	movs	r0, #0
 8008afe:	f00a ff17 	bl	8013930 <strtok>
 8008b02:	0002      	movs	r2, r0
 8008b04:	4b28      	ldr	r3, [pc, #160]	; (8008ba8 <SIM800H_Check_SMS+0x11c>)
 8008b06:	601a      	str	r2, [r3, #0]
			CellnumPoint = strtok(NULL, "\"");
 8008b08:	4b2a      	ldr	r3, [pc, #168]	; (8008bb4 <SIM800H_Check_SMS+0x128>)
 8008b0a:	0019      	movs	r1, r3
 8008b0c:	2000      	movs	r0, #0
 8008b0e:	f00a ff0f 	bl	8013930 <strtok>
 8008b12:	0002      	movs	r2, r0
 8008b14:	4b24      	ldr	r3, [pc, #144]	; (8008ba8 <SIM800H_Check_SMS+0x11c>)
 8008b16:	601a      	str	r2, [r3, #0]
			CellnumPoint = strtok(NULL, "\"");
 8008b18:	4b26      	ldr	r3, [pc, #152]	; (8008bb4 <SIM800H_Check_SMS+0x128>)
 8008b1a:	0019      	movs	r1, r3
 8008b1c:	2000      	movs	r0, #0
 8008b1e:	f00a ff07 	bl	8013930 <strtok>
 8008b22:	0002      	movs	r2, r0
 8008b24:	4b20      	ldr	r3, [pc, #128]	; (8008ba8 <SIM800H_Check_SMS+0x11c>)
 8008b26:	601a      	str	r2, [r3, #0]

			DatePoint = strtok(NULL, "\"");
 8008b28:	4b22      	ldr	r3, [pc, #136]	; (8008bb4 <SIM800H_Check_SMS+0x128>)
 8008b2a:	0019      	movs	r1, r3
 8008b2c:	2000      	movs	r0, #0
 8008b2e:	f00a feff 	bl	8013930 <strtok>
 8008b32:	0002      	movs	r2, r0
 8008b34:	4b20      	ldr	r3, [pc, #128]	; (8008bb8 <SIM800H_Check_SMS+0x12c>)
 8008b36:	601a      	str	r2, [r3, #0]
			DatePoint = strtok(NULL, "\"");
 8008b38:	4b1e      	ldr	r3, [pc, #120]	; (8008bb4 <SIM800H_Check_SMS+0x128>)
 8008b3a:	0019      	movs	r1, r3
 8008b3c:	2000      	movs	r0, #0
 8008b3e:	f00a fef7 	bl	8013930 <strtok>
 8008b42:	0002      	movs	r2, r0
 8008b44:	4b1c      	ldr	r3, [pc, #112]	; (8008bb8 <SIM800H_Check_SMS+0x12c>)
 8008b46:	601a      	str	r2, [r3, #0]
			DatePoint = strtok(NULL, "\"");
 8008b48:	4b1a      	ldr	r3, [pc, #104]	; (8008bb4 <SIM800H_Check_SMS+0x128>)
 8008b4a:	0019      	movs	r1, r3
 8008b4c:	2000      	movs	r0, #0
 8008b4e:	f00a feef 	bl	8013930 <strtok>
 8008b52:	0002      	movs	r2, r0
 8008b54:	4b18      	ldr	r3, [pc, #96]	; (8008bb8 <SIM800H_Check_SMS+0x12c>)
 8008b56:	601a      	str	r2, [r3, #0]

			startpoint = strtok(NULL, "\r\n");
 8008b58:	4b18      	ldr	r3, [pc, #96]	; (8008bbc <SIM800H_Check_SMS+0x130>)
 8008b5a:	0019      	movs	r1, r3
 8008b5c:	2000      	movs	r0, #0
 8008b5e:	f00a fee7 	bl	8013930 <strtok>
 8008b62:	0003      	movs	r3, r0
 8008b64:	607b      	str	r3, [r7, #4]
			if(startpoint[0] == '\n') {
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	2b0a      	cmp	r3, #10
 8008b6c:	d102      	bne.n	8008b74 <SIM800H_Check_SMS+0xe8>
				startpoint++;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	3301      	adds	r3, #1
 8008b72:	607b      	str	r3, [r7, #4]
			}
			if(strlen(startpoint) == 0) {
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d102      	bne.n	8008b82 <SIM800H_Check_SMS+0xf6>
				startpoint++;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	3301      	adds	r3, #1
 8008b80:	607b      	str	r3, [r7, #4]
			}
			return(startpoint);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	e000      	b.n	8008b88 <SIM800H_Check_SMS+0xfc>
		}
	}
	return(NULL);
 8008b86:	2300      	movs	r3, #0
}
 8008b88:	0018      	movs	r0, r3
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	b002      	add	sp, #8
 8008b8e:	bd80      	pop	{r7, pc}
 8008b90:	20000848 	.word	0x20000848
 8008b94:	08016c48 	.word	0x08016c48
 8008b98:	2000246c 	.word	0x2000246c
 8008b9c:	08016c58 	.word	0x08016c58
 8008ba0:	2000226c 	.word	0x2000226c
 8008ba4:	08016764 	.word	0x08016764
 8008ba8:	200020c4 	.word	0x200020c4
 8008bac:	080169d4 	.word	0x080169d4
 8008bb0:	20001800 	.word	0x20001800
 8008bb4:	080169b8 	.word	0x080169b8
 8008bb8:	200020c8 	.word	0x200020c8
 8008bbc:	08016c60 	.word	0x08016c60

08008bc0 <SIM800H_Delete_SMS>:

unsigned char SIM800H_Delete_SMS(unsigned char simp)
{  char tchar[5] = {0};
 8008bc0:	b590      	push	{r4, r7, lr}
 8008bc2:	b085      	sub	sp, #20
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	0002      	movs	r2, r0
 8008bc8:	1dfb      	adds	r3, r7, #7
 8008bca:	701a      	strb	r2, [r3, #0]
 8008bcc:	2408      	movs	r4, #8
 8008bce:	193b      	adds	r3, r7, r4
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	601a      	str	r2, [r3, #0]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	711a      	strb	r2, [r3, #4]
	HAL_IWDG_Refresh(&hiwdg);
 8008bd8:	4b17      	ldr	r3, [pc, #92]	; (8008c38 <SIM800H_Delete_SMS+0x78>)
 8008bda:	0018      	movs	r0, r3
 8008bdc:	f004 f898 	bl	800cd10 <HAL_IWDG_Refresh>
	SIM800H_TX("AT+CMGD=");
 8008be0:	4b16      	ldr	r3, [pc, #88]	; (8008c3c <SIM800H_Delete_SMS+0x7c>)
 8008be2:	0018      	movs	r0, r3
 8008be4:	f000 fd56 	bl	8009694 <SIM800H_TX>
	itoa(simp, tchar, 10);
 8008be8:	1dfb      	adds	r3, r7, #7
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	1939      	adds	r1, r7, r4
 8008bee:	220a      	movs	r2, #10
 8008bf0:	0018      	movs	r0, r3
 8008bf2:	f009 f9f3 	bl	8011fdc <itoa>
	SIM800H_TX(tchar);
 8008bf6:	193b      	adds	r3, r7, r4
 8008bf8:	0018      	movs	r0, r3
 8008bfa:	f000 fd4b 	bl	8009694 <SIM800H_TX>
	SIM800H_TX("\r\n");
 8008bfe:	4b10      	ldr	r3, [pc, #64]	; (8008c40 <SIM800H_Delete_SMS+0x80>)
 8008c00:	0018      	movs	r0, r3
 8008c02:	f000 fd47 	bl	8009694 <SIM800H_TX>
	SIM800H_Clear_Buffers();
 8008c06:	f000 fabf 	bl	8009188 <SIM800H_Clear_Buffers>
	if(SIM800_Wait_for_Responce(20)) {
 8008c0a:	2014      	movs	r0, #20
 8008c0c:	f7ff fc52 	bl	80084b4 <SIM800_Wait_for_Responce>
 8008c10:	1e03      	subs	r3, r0, #0
 8008c12:	d00c      	beq.n	8008c2e <SIM800H_Delete_SMS+0x6e>
		U2Transfer_cplt = 0;
 8008c14:	4b0b      	ldr	r3, [pc, #44]	; (8008c44 <SIM800H_Delete_SMS+0x84>)
 8008c16:	2200      	movs	r2, #0
 8008c18:	701a      	strb	r2, [r3, #0]
		if(strstr(U2Rx_Buffer, "+CGMD") != NULL) {
 8008c1a:	4a0b      	ldr	r2, [pc, #44]	; (8008c48 <SIM800H_Delete_SMS+0x88>)
 8008c1c:	4b0b      	ldr	r3, [pc, #44]	; (8008c4c <SIM800H_Delete_SMS+0x8c>)
 8008c1e:	0011      	movs	r1, r2
 8008c20:	0018      	movs	r0, r3
 8008c22:	f00a f834 	bl	8012c8e <strstr>
 8008c26:	1e03      	subs	r3, r0, #0
 8008c28:	d001      	beq.n	8008c2e <SIM800H_Delete_SMS+0x6e>
			return(1);
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e000      	b.n	8008c30 <SIM800H_Delete_SMS+0x70>
		}
	}
	return(0);
 8008c2e:	2300      	movs	r3, #0
}
 8008c30:	0018      	movs	r0, r3
 8008c32:	46bd      	mov	sp, r7
 8008c34:	b005      	add	sp, #20
 8008c36:	bd90      	pop	{r4, r7, pc}
 8008c38:	20000848 	.word	0x20000848
 8008c3c:	08016c64 	.word	0x08016c64
 8008c40:	08016c60 	.word	0x08016c60
 8008c44:	2000246c 	.word	0x2000246c
 8008c48:	08016c70 	.word	0x08016c70
 8008c4c:	2000226c 	.word	0x2000226c

08008c50 <SIM800H_Send_SMS>:

static unsigned char SIM800H_Send_SMS(char * number, char * message)
{  unsigned char endchar[2];
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b084      	sub	sp, #16
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
HAL_IWDG_Refresh(&hiwdg);
 8008c5a:	4b26      	ldr	r3, [pc, #152]	; (8008cf4 <SIM800H_Send_SMS+0xa4>)
 8008c5c:	0018      	movs	r0, r3
 8008c5e:	f004 f857 	bl	800cd10 <HAL_IWDG_Refresh>
	SIM800H_TX("AT+CMGS=\"");		SIM800H_TX(number); 	SIM800H_TX("\"\r\n");
 8008c62:	4b25      	ldr	r3, [pc, #148]	; (8008cf8 <SIM800H_Send_SMS+0xa8>)
 8008c64:	0018      	movs	r0, r3
 8008c66:	f000 fd15 	bl	8009694 <SIM800H_TX>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	0018      	movs	r0, r3
 8008c6e:	f000 fd11 	bl	8009694 <SIM800H_TX>
 8008c72:	4b22      	ldr	r3, [pc, #136]	; (8008cfc <SIM800H_Send_SMS+0xac>)
 8008c74:	0018      	movs	r0, r3
 8008c76:	f000 fd0d 	bl	8009694 <SIM800H_TX>
	SIM800H_Clear_Buffers();
 8008c7a:	f000 fa85 	bl	8009188 <SIM800H_Clear_Buffers>
	if(SIM800_Wait_for_Responce(20)) {
 8008c7e:	2014      	movs	r0, #20
 8008c80:	f7ff fc18 	bl	80084b4 <SIM800_Wait_for_Responce>
 8008c84:	1e03      	subs	r3, r0, #0
 8008c86:	d030      	beq.n	8008cea <SIM800H_Send_SMS+0x9a>
		U2Transfer_cplt = 0;
 8008c88:	4b1d      	ldr	r3, [pc, #116]	; (8008d00 <SIM800H_Send_SMS+0xb0>)
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	701a      	strb	r2, [r3, #0]
		if(strstr(U2Rx_Buffer, ">") != NULL) {
 8008c8e:	4b1d      	ldr	r3, [pc, #116]	; (8008d04 <SIM800H_Send_SMS+0xb4>)
 8008c90:	213e      	movs	r1, #62	; 0x3e
 8008c92:	0018      	movs	r0, r3
 8008c94:	f009 ffbf 	bl	8012c16 <strchr>
 8008c98:	1e03      	subs	r3, r0, #0
 8008c9a:	d026      	beq.n	8008cea <SIM800H_Send_SMS+0x9a>
			SIM800H_TX(message);
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	0018      	movs	r0, r3
 8008ca0:	f000 fcf8 	bl	8009694 <SIM800H_TX>
			endchar[0] = 0x1a;
 8008ca4:	210c      	movs	r1, #12
 8008ca6:	187b      	adds	r3, r7, r1
 8008ca8:	221a      	movs	r2, #26
 8008caa:	701a      	strb	r2, [r3, #0]
			endchar[1] = 0;
 8008cac:	187b      	adds	r3, r7, r1
 8008cae:	2200      	movs	r2, #0
 8008cb0:	705a      	strb	r2, [r3, #1]
			SIM800H_TX(endchar);
 8008cb2:	187b      	adds	r3, r7, r1
 8008cb4:	0018      	movs	r0, r3
 8008cb6:	f000 fced 	bl	8009694 <SIM800H_TX>
			HAL_IWDG_Refresh(&hiwdg);
 8008cba:	4b0e      	ldr	r3, [pc, #56]	; (8008cf4 <SIM800H_Send_SMS+0xa4>)
 8008cbc:	0018      	movs	r0, r3
 8008cbe:	f004 f827 	bl	800cd10 <HAL_IWDG_Refresh>
			// send CNTRL Z
			if(SIM800_Wait_for_Responce(100)) {
 8008cc2:	2064      	movs	r0, #100	; 0x64
 8008cc4:	f7ff fbf6 	bl	80084b4 <SIM800_Wait_for_Responce>
 8008cc8:	1e03      	subs	r3, r0, #0
 8008cca:	d00e      	beq.n	8008cea <SIM800H_Send_SMS+0x9a>
				U2Transfer_cplt = 0;
 8008ccc:	4b0c      	ldr	r3, [pc, #48]	; (8008d00 <SIM800H_Send_SMS+0xb0>)
 8008cce:	2200      	movs	r2, #0
 8008cd0:	701a      	strb	r2, [r3, #0]
				if(strstr(U2Rx_Buffer, "+CMGS") != NULL) {
 8008cd2:	4a0d      	ldr	r2, [pc, #52]	; (8008d08 <SIM800H_Send_SMS+0xb8>)
 8008cd4:	4b0b      	ldr	r3, [pc, #44]	; (8008d04 <SIM800H_Send_SMS+0xb4>)
 8008cd6:	0011      	movs	r1, r2
 8008cd8:	0018      	movs	r0, r3
 8008cda:	f009 ffd8 	bl	8012c8e <strstr>
 8008cde:	1e03      	subs	r3, r0, #0
 8008ce0:	d001      	beq.n	8008ce6 <SIM800H_Send_SMS+0x96>
					return(1);
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	e002      	b.n	8008cec <SIM800H_Send_SMS+0x9c>
				} else return(0);
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	e000      	b.n	8008cec <SIM800H_Send_SMS+0x9c>
			}
		}
	}
	return(0);
 8008cea:	2300      	movs	r3, #0
}
 8008cec:	0018      	movs	r0, r3
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	b004      	add	sp, #16
 8008cf2:	bd80      	pop	{r7, pc}
 8008cf4:	20000848 	.word	0x20000848
 8008cf8:	08016c78 	.word	0x08016c78
 8008cfc:	08016c84 	.word	0x08016c84
 8008d00:	2000246c 	.word	0x2000246c
 8008d04:	2000226c 	.word	0x2000226c
 8008d08:	08016c88 	.word	0x08016c88

08008d0c <SIM800H_Connect_Data>:

unsigned char SIM800H_Connect_Data(char * server, char * port)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b082      	sub	sp, #8
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
	HAL_IWDG_Refresh(&hiwdg);
 8008d16:	4b2f      	ldr	r3, [pc, #188]	; (8008dd4 <SIM800H_Connect_Data+0xc8>)
 8008d18:	0018      	movs	r0, r3
 8008d1a:	f003 fff9 	bl	800cd10 <HAL_IWDG_Refresh>
	SIM800H_TX("AT+CIPSTART=\"TCP\",\"");	SIM800H_TX(server); SIM800H_TX("\",");		SIM800H_TX(port);   SIM800H_TX("\r\n");
 8008d1e:	4b2e      	ldr	r3, [pc, #184]	; (8008dd8 <SIM800H_Connect_Data+0xcc>)
 8008d20:	0018      	movs	r0, r3
 8008d22:	f000 fcb7 	bl	8009694 <SIM800H_TX>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	0018      	movs	r0, r3
 8008d2a:	f000 fcb3 	bl	8009694 <SIM800H_TX>
 8008d2e:	4b2b      	ldr	r3, [pc, #172]	; (8008ddc <SIM800H_Connect_Data+0xd0>)
 8008d30:	0018      	movs	r0, r3
 8008d32:	f000 fcaf 	bl	8009694 <SIM800H_TX>
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	0018      	movs	r0, r3
 8008d3a:	f000 fcab 	bl	8009694 <SIM800H_TX>
 8008d3e:	4b28      	ldr	r3, [pc, #160]	; (8008de0 <SIM800H_Connect_Data+0xd4>)
 8008d40:	0018      	movs	r0, r3
 8008d42:	f000 fca7 	bl	8009694 <SIM800H_TX>
	SIM800H_Clear_Buffers();
 8008d46:	f000 fa1f 	bl	8009188 <SIM800H_Clear_Buffers>
	if(SIM800_Wait_for_Responce(1500)) {
 8008d4a:	4b26      	ldr	r3, [pc, #152]	; (8008de4 <SIM800H_Connect_Data+0xd8>)
 8008d4c:	0018      	movs	r0, r3
 8008d4e:	f7ff fbb1 	bl	80084b4 <SIM800_Wait_for_Responce>
 8008d52:	1e03      	subs	r3, r0, #0
 8008d54:	d038      	beq.n	8008dc8 <SIM800H_Connect_Data+0xbc>
		HAL_IWDG_Refresh(&hiwdg);
 8008d56:	4b1f      	ldr	r3, [pc, #124]	; (8008dd4 <SIM800H_Connect_Data+0xc8>)
 8008d58:	0018      	movs	r0, r3
 8008d5a:	f003 ffd9 	bl	800cd10 <HAL_IWDG_Refresh>
		U2Transfer_cplt = 0;
 8008d5e:	4b22      	ldr	r3, [pc, #136]	; (8008de8 <SIM800H_Connect_Data+0xdc>)
 8008d60:	2200      	movs	r2, #0
 8008d62:	701a      	strb	r2, [r3, #0]
		osDelay(200);
 8008d64:	20c8      	movs	r0, #200	; 0xc8
 8008d66:	f007 ff83 	bl	8010c70 <osDelay>
		if(strstr(U2Rx_Buffer, "CONNECT") == NULL) {
 8008d6a:	4a20      	ldr	r2, [pc, #128]	; (8008dec <SIM800H_Connect_Data+0xe0>)
 8008d6c:	4b20      	ldr	r3, [pc, #128]	; (8008df0 <SIM800H_Connect_Data+0xe4>)
 8008d6e:	0011      	movs	r1, r2
 8008d70:	0018      	movs	r0, r3
 8008d72:	f009 ff8c 	bl	8012c8e <strstr>
 8008d76:	1e03      	subs	r3, r0, #0
 8008d78:	d11c      	bne.n	8008db4 <SIM800H_Connect_Data+0xa8>
			if(SIM800_Wait_for_Responce(1500)) {
 8008d7a:	4b1a      	ldr	r3, [pc, #104]	; (8008de4 <SIM800H_Connect_Data+0xd8>)
 8008d7c:	0018      	movs	r0, r3
 8008d7e:	f7ff fb99 	bl	80084b4 <SIM800_Wait_for_Responce>
 8008d82:	1e03      	subs	r3, r0, #0
 8008d84:	d020      	beq.n	8008dc8 <SIM800H_Connect_Data+0xbc>
				if(strstr(U2Rx_Buffer, "CONNECT") != NULL) {
 8008d86:	4a19      	ldr	r2, [pc, #100]	; (8008dec <SIM800H_Connect_Data+0xe0>)
 8008d88:	4b19      	ldr	r3, [pc, #100]	; (8008df0 <SIM800H_Connect_Data+0xe4>)
 8008d8a:	0011      	movs	r1, r2
 8008d8c:	0018      	movs	r0, r3
 8008d8e:	f009 ff7e 	bl	8012c8e <strstr>
 8008d92:	1e03      	subs	r3, r0, #0
 8008d94:	d004      	beq.n	8008da0 <SIM800H_Connect_Data+0x94>
					osDelay(100);
 8008d96:	2064      	movs	r0, #100	; 0x64
 8008d98:	f007 ff6a 	bl	8010c70 <osDelay>
					return(1);
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	e014      	b.n	8008dca <SIM800H_Connect_Data+0xbe>
				} else if(strstr(U2Rx_Buffer, "ERROR") == NULL) {
 8008da0:	4a14      	ldr	r2, [pc, #80]	; (8008df4 <SIM800H_Connect_Data+0xe8>)
 8008da2:	4b13      	ldr	r3, [pc, #76]	; (8008df0 <SIM800H_Connect_Data+0xe4>)
 8008da4:	0011      	movs	r1, r2
 8008da6:	0018      	movs	r0, r3
 8008da8:	f009 ff71 	bl	8012c8e <strstr>
 8008dac:	1e03      	subs	r3, r0, #0
 8008dae:	d10b      	bne.n	8008dc8 <SIM800H_Connect_Data+0xbc>
					return(0);
 8008db0:	2300      	movs	r3, #0
 8008db2:	e00a      	b.n	8008dca <SIM800H_Connect_Data+0xbe>
				}
			}
		} else if(strstr(U2Rx_Buffer, "ERROR") == NULL) {
 8008db4:	4a0f      	ldr	r2, [pc, #60]	; (8008df4 <SIM800H_Connect_Data+0xe8>)
 8008db6:	4b0e      	ldr	r3, [pc, #56]	; (8008df0 <SIM800H_Connect_Data+0xe4>)
 8008db8:	0011      	movs	r1, r2
 8008dba:	0018      	movs	r0, r3
 8008dbc:	f009 ff67 	bl	8012c8e <strstr>
 8008dc0:	1e03      	subs	r3, r0, #0
 8008dc2:	d101      	bne.n	8008dc8 <SIM800H_Connect_Data+0xbc>
			return(0);
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	e000      	b.n	8008dca <SIM800H_Connect_Data+0xbe>
		}
	}
	return(0);
 8008dc8:	2300      	movs	r3, #0
}
 8008dca:	0018      	movs	r0, r3
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	b002      	add	sp, #8
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	46c0      	nop			; (mov r8, r8)
 8008dd4:	20000848 	.word	0x20000848
 8008dd8:	08016c90 	.word	0x08016c90
 8008ddc:	08016ca4 	.word	0x08016ca4
 8008de0:	08016c60 	.word	0x08016c60
 8008de4:	000005dc 	.word	0x000005dc
 8008de8:	2000246c 	.word	0x2000246c
 8008dec:	08016ca8 	.word	0x08016ca8
 8008df0:	2000226c 	.word	0x2000226c
 8008df4:	08016a80 	.word	0x08016a80

08008df8 <SIM800H_Disconnect_Data>:


static unsigned char SIM800H_Disconnect_Data(void)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	af00      	add	r7, sp, #0

	HAL_IWDG_Refresh(&hiwdg);
 8008dfc:	4b22      	ldr	r3, [pc, #136]	; (8008e88 <SIM800H_Disconnect_Data+0x90>)
 8008dfe:	0018      	movs	r0, r3
 8008e00:	f003 ff86 	bl	800cd10 <HAL_IWDG_Refresh>
	osDelay(1000);
 8008e04:	23fa      	movs	r3, #250	; 0xfa
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	0018      	movs	r0, r3
 8008e0a:	f007 ff31 	bl	8010c70 <osDelay>

	SIM800H_TX("+");
 8008e0e:	4b1f      	ldr	r3, [pc, #124]	; (8008e8c <SIM800H_Disconnect_Data+0x94>)
 8008e10:	0018      	movs	r0, r3
 8008e12:	f000 fc3f 	bl	8009694 <SIM800H_TX>
	osDelay(200);
 8008e16:	20c8      	movs	r0, #200	; 0xc8
 8008e18:	f007 ff2a 	bl	8010c70 <osDelay>

	SIM800H_TX("+");
 8008e1c:	4b1b      	ldr	r3, [pc, #108]	; (8008e8c <SIM800H_Disconnect_Data+0x94>)
 8008e1e:	0018      	movs	r0, r3
 8008e20:	f000 fc38 	bl	8009694 <SIM800H_TX>
	osDelay(200);
 8008e24:	20c8      	movs	r0, #200	; 0xc8
 8008e26:	f007 ff23 	bl	8010c70 <osDelay>

	SIM800H_TX("+");
 8008e2a:	4b18      	ldr	r3, [pc, #96]	; (8008e8c <SIM800H_Disconnect_Data+0x94>)
 8008e2c:	0018      	movs	r0, r3
 8008e2e:	f000 fc31 	bl	8009694 <SIM800H_TX>
	osDelay(2000);
 8008e32:	23fa      	movs	r3, #250	; 0xfa
 8008e34:	00db      	lsls	r3, r3, #3
 8008e36:	0018      	movs	r0, r3
 8008e38:	f007 ff1a 	bl	8010c70 <osDelay>

	HAL_IWDG_Refresh(&hiwdg);
 8008e3c:	4b12      	ldr	r3, [pc, #72]	; (8008e88 <SIM800H_Disconnect_Data+0x90>)
 8008e3e:	0018      	movs	r0, r3
 8008e40:	f003 ff66 	bl	800cd10 <HAL_IWDG_Refresh>
	SIM800H_TX("AT+CIPCLOSE\r\n");
 8008e44:	4b12      	ldr	r3, [pc, #72]	; (8008e90 <SIM800H_Disconnect_Data+0x98>)
 8008e46:	0018      	movs	r0, r3
 8008e48:	f000 fc24 	bl	8009694 <SIM800H_TX>
	SIM800H_Clear_Buffers();
 8008e4c:	f000 f99c 	bl	8009188 <SIM800H_Clear_Buffers>
	if(SIM800_Wait_for_Responce(100)) {
 8008e50:	2064      	movs	r0, #100	; 0x64
 8008e52:	f7ff fb2f 	bl	80084b4 <SIM800_Wait_for_Responce>
 8008e56:	1e03      	subs	r3, r0, #0
 8008e58:	d011      	beq.n	8008e7e <SIM800H_Disconnect_Data+0x86>
		U2Transfer_cplt = 0;
 8008e5a:	4b0e      	ldr	r3, [pc, #56]	; (8008e94 <SIM800H_Disconnect_Data+0x9c>)
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	701a      	strb	r2, [r3, #0]
		osDelay(500);
 8008e60:	23fa      	movs	r3, #250	; 0xfa
 8008e62:	005b      	lsls	r3, r3, #1
 8008e64:	0018      	movs	r0, r3
 8008e66:	f007 ff03 	bl	8010c70 <osDelay>
		if(strstr(U2Rx_Buffer, "SHUTDOWN") != NULL) {
 8008e6a:	4a0b      	ldr	r2, [pc, #44]	; (8008e98 <SIM800H_Disconnect_Data+0xa0>)
 8008e6c:	4b0b      	ldr	r3, [pc, #44]	; (8008e9c <SIM800H_Disconnect_Data+0xa4>)
 8008e6e:	0011      	movs	r1, r2
 8008e70:	0018      	movs	r0, r3
 8008e72:	f009 ff0c 	bl	8012c8e <strstr>
 8008e76:	1e03      	subs	r3, r0, #0
 8008e78:	d001      	beq.n	8008e7e <SIM800H_Disconnect_Data+0x86>
			return(1);
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	e000      	b.n	8008e80 <SIM800H_Disconnect_Data+0x88>
		}
	}
	return(0);
 8008e7e:	2300      	movs	r3, #0
}
 8008e80:	0018      	movs	r0, r3
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	46c0      	nop			; (mov r8, r8)
 8008e88:	20000848 	.word	0x20000848
 8008e8c:	08016cb0 	.word	0x08016cb0
 8008e90:	08016cb4 	.word	0x08016cb4
 8008e94:	2000246c 	.word	0x2000246c
 8008e98:	08016cc4 	.word	0x08016cc4
 8008e9c:	2000226c 	.word	0x2000226c

08008ea0 <SIM800H_GPRS_Setup>:
	MQTT_RX_Mode = 1;
	return(1);
}

static unsigned char SIM800H_GPRS_Setup(void)
{ unsigned char a;
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0

    HAL_IWDG_Refresh(&hiwdg);
 8008ea6:	4bac      	ldr	r3, [pc, #688]	; (8009158 <SIM800H_GPRS_Setup+0x2b8>)
 8008ea8:	0018      	movs	r0, r3
 8008eaa:	f003 ff31 	bl	800cd10 <HAL_IWDG_Refresh>
	osDelay(500);
 8008eae:	23fa      	movs	r3, #250	; 0xfa
 8008eb0:	005b      	lsls	r3, r3, #1
 8008eb2:	0018      	movs	r0, r3
 8008eb4:	f007 fedc 	bl	8010c70 <osDelay>
  	SIM800H_TX("AT+CIPSHUT\r\n");
 8008eb8:	4ba8      	ldr	r3, [pc, #672]	; (800915c <SIM800H_GPRS_Setup+0x2bc>)
 8008eba:	0018      	movs	r0, r3
 8008ebc:	f000 fbea 	bl	8009694 <SIM800H_TX>
  	SIM800H_Clear_Buffers();
 8008ec0:	f000 f962 	bl	8009188 <SIM800H_Clear_Buffers>
  	for(a = 0; a < 5; a++) {
 8008ec4:	1dfb      	adds	r3, r7, #7
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	701a      	strb	r2, [r3, #0]
 8008eca:	e014      	b.n	8008ef6 <SIM800H_GPRS_Setup+0x56>
  		if(SIM800_Wait_for_Responce(10)) {
 8008ecc:	200a      	movs	r0, #10
 8008ece:	f7ff faf1 	bl	80084b4 <SIM800_Wait_for_Responce>
 8008ed2:	1e03      	subs	r3, r0, #0
 8008ed4:	d00a      	beq.n	8008eec <SIM800H_GPRS_Setup+0x4c>
   	  		U2Transfer_cplt = 0;
 8008ed6:	4ba2      	ldr	r3, [pc, #648]	; (8009160 <SIM800H_GPRS_Setup+0x2c0>)
 8008ed8:	2200      	movs	r2, #0
 8008eda:	701a      	strb	r2, [r3, #0]
   	  		if(strstr(U2Rx_Buffer, "OK") != NULL) {
 8008edc:	4aa1      	ldr	r2, [pc, #644]	; (8009164 <SIM800H_GPRS_Setup+0x2c4>)
 8008ede:	4ba2      	ldr	r3, [pc, #648]	; (8009168 <SIM800H_GPRS_Setup+0x2c8>)
 8008ee0:	0011      	movs	r1, r2
 8008ee2:	0018      	movs	r0, r3
 8008ee4:	f009 fed3 	bl	8012c8e <strstr>
 8008ee8:	1e03      	subs	r3, r0, #0
 8008eea:	d109      	bne.n	8008f00 <SIM800H_GPRS_Setup+0x60>
  	for(a = 0; a < 5; a++) {
 8008eec:	1dfb      	adds	r3, r7, #7
 8008eee:	781a      	ldrb	r2, [r3, #0]
 8008ef0:	1dfb      	adds	r3, r7, #7
 8008ef2:	3201      	adds	r2, #1
 8008ef4:	701a      	strb	r2, [r3, #0]
 8008ef6:	1dfb      	adds	r3, r7, #7
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	2b04      	cmp	r3, #4
 8008efc:	d9e6      	bls.n	8008ecc <SIM800H_GPRS_Setup+0x2c>
 8008efe:	e000      	b.n	8008f02 <SIM800H_GPRS_Setup+0x62>
   	   			break;
 8008f00:	46c0      	nop			; (mov r8, r8)
   	   		}
   	   	}
   	}

  	osDelay(500);
 8008f02:	23fa      	movs	r3, #250	; 0xfa
 8008f04:	005b      	lsls	r3, r3, #1
 8008f06:	0018      	movs	r0, r3
 8008f08:	f007 feb2 	bl	8010c70 <osDelay>
 	SIM800H_TX("AT+CGATT=1\r\n");
 8008f0c:	4b97      	ldr	r3, [pc, #604]	; (800916c <SIM800H_GPRS_Setup+0x2cc>)
 8008f0e:	0018      	movs	r0, r3
 8008f10:	f000 fbc0 	bl	8009694 <SIM800H_TX>
 	//osDelay(5);
  	SIM800H_Clear_Buffers();
 8008f14:	f000 f938 	bl	8009188 <SIM800H_Clear_Buffers>
   	for(a = 0; a < 10; a++) {
 8008f18:	1dfb      	adds	r3, r7, #7
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	701a      	strb	r2, [r3, #0]
 8008f1e:	e014      	b.n	8008f4a <SIM800H_GPRS_Setup+0xaa>
   		if(SIM800_Wait_for_Responce(10)) {
 8008f20:	200a      	movs	r0, #10
 8008f22:	f7ff fac7 	bl	80084b4 <SIM800_Wait_for_Responce>
 8008f26:	1e03      	subs	r3, r0, #0
 8008f28:	d00a      	beq.n	8008f40 <SIM800H_GPRS_Setup+0xa0>
   	  		U2Transfer_cplt = 0;
 8008f2a:	4b8d      	ldr	r3, [pc, #564]	; (8009160 <SIM800H_GPRS_Setup+0x2c0>)
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	701a      	strb	r2, [r3, #0]
   	  		if(strstr(U2Rx_Buffer, "OK") != NULL) {
 8008f30:	4a8c      	ldr	r2, [pc, #560]	; (8009164 <SIM800H_GPRS_Setup+0x2c4>)
 8008f32:	4b8d      	ldr	r3, [pc, #564]	; (8009168 <SIM800H_GPRS_Setup+0x2c8>)
 8008f34:	0011      	movs	r1, r2
 8008f36:	0018      	movs	r0, r3
 8008f38:	f009 fea9 	bl	8012c8e <strstr>
 8008f3c:	1e03      	subs	r3, r0, #0
 8008f3e:	d109      	bne.n	8008f54 <SIM800H_GPRS_Setup+0xb4>
   	for(a = 0; a < 10; a++) {
 8008f40:	1dfb      	adds	r3, r7, #7
 8008f42:	781a      	ldrb	r2, [r3, #0]
 8008f44:	1dfb      	adds	r3, r7, #7
 8008f46:	3201      	adds	r2, #1
 8008f48:	701a      	strb	r2, [r3, #0]
 8008f4a:	1dfb      	adds	r3, r7, #7
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	2b09      	cmp	r3, #9
 8008f50:	d9e6      	bls.n	8008f20 <SIM800H_GPRS_Setup+0x80>
 8008f52:	e000      	b.n	8008f56 <SIM800H_GPRS_Setup+0xb6>
   	   			break;
 8008f54:	46c0      	nop			; (mov r8, r8)
   	   		}
   	   	}
   	}

   	osDelay(500);
 8008f56:	23fa      	movs	r3, #250	; 0xfa
 8008f58:	005b      	lsls	r3, r3, #1
 8008f5a:	0018      	movs	r0, r3
 8008f5c:	f007 fe88 	bl	8010c70 <osDelay>
   	SIM800H_TX("AT+CIPMUX=0\r\n");
 8008f60:	4b83      	ldr	r3, [pc, #524]	; (8009170 <SIM800H_GPRS_Setup+0x2d0>)
 8008f62:	0018      	movs	r0, r3
 8008f64:	f000 fb96 	bl	8009694 <SIM800H_TX>
   	//osDelay(5);
   	SIM800H_Clear_Buffers();
 8008f68:	f000 f90e 	bl	8009188 <SIM800H_Clear_Buffers>
   	for(a = 0; a < 10; a++) {
 8008f6c:	1dfb      	adds	r3, r7, #7
 8008f6e:	2200      	movs	r2, #0
 8008f70:	701a      	strb	r2, [r3, #0]
 8008f72:	e014      	b.n	8008f9e <SIM800H_GPRS_Setup+0xfe>
   		if(SIM800_Wait_for_Responce(10)) {
 8008f74:	200a      	movs	r0, #10
 8008f76:	f7ff fa9d 	bl	80084b4 <SIM800_Wait_for_Responce>
 8008f7a:	1e03      	subs	r3, r0, #0
 8008f7c:	d00a      	beq.n	8008f94 <SIM800H_GPRS_Setup+0xf4>
   	  		U2Transfer_cplt = 0;
 8008f7e:	4b78      	ldr	r3, [pc, #480]	; (8009160 <SIM800H_GPRS_Setup+0x2c0>)
 8008f80:	2200      	movs	r2, #0
 8008f82:	701a      	strb	r2, [r3, #0]
   	  		if(strstr(U2Rx_Buffer, "OK") != NULL) {
 8008f84:	4a77      	ldr	r2, [pc, #476]	; (8009164 <SIM800H_GPRS_Setup+0x2c4>)
 8008f86:	4b78      	ldr	r3, [pc, #480]	; (8009168 <SIM800H_GPRS_Setup+0x2c8>)
 8008f88:	0011      	movs	r1, r2
 8008f8a:	0018      	movs	r0, r3
 8008f8c:	f009 fe7f 	bl	8012c8e <strstr>
 8008f90:	1e03      	subs	r3, r0, #0
 8008f92:	d109      	bne.n	8008fa8 <SIM800H_GPRS_Setup+0x108>
   	for(a = 0; a < 10; a++) {
 8008f94:	1dfb      	adds	r3, r7, #7
 8008f96:	781a      	ldrb	r2, [r3, #0]
 8008f98:	1dfb      	adds	r3, r7, #7
 8008f9a:	3201      	adds	r2, #1
 8008f9c:	701a      	strb	r2, [r3, #0]
 8008f9e:	1dfb      	adds	r3, r7, #7
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	2b09      	cmp	r3, #9
 8008fa4:	d9e6      	bls.n	8008f74 <SIM800H_GPRS_Setup+0xd4>
 8008fa6:	e000      	b.n	8008faa <SIM800H_GPRS_Setup+0x10a>
   	   			break;
 8008fa8:	46c0      	nop			; (mov r8, r8)
   	   		}
   	   	}
   	}

   	HAL_IWDG_Refresh(&hiwdg);
 8008faa:	4b6b      	ldr	r3, [pc, #428]	; (8009158 <SIM800H_GPRS_Setup+0x2b8>)
 8008fac:	0018      	movs	r0, r3
 8008fae:	f003 feaf 	bl	800cd10 <HAL_IWDG_Refresh>
   	osDelay(500);
 8008fb2:	23fa      	movs	r3, #250	; 0xfa
 8008fb4:	005b      	lsls	r3, r3, #1
 8008fb6:	0018      	movs	r0, r3
 8008fb8:	f007 fe5a 	bl	8010c70 <osDelay>
   	SIM800H_TX("AT+CIPMODE=1\r\n");
 8008fbc:	4b6d      	ldr	r3, [pc, #436]	; (8009174 <SIM800H_GPRS_Setup+0x2d4>)
 8008fbe:	0018      	movs	r0, r3
 8008fc0:	f000 fb68 	bl	8009694 <SIM800H_TX>
   	//osDelay(5);
   	SIM800H_Clear_Buffers();
 8008fc4:	f000 f8e0 	bl	8009188 <SIM800H_Clear_Buffers>
   	for(a = 0; a < 5; a++) {
 8008fc8:	1dfb      	adds	r3, r7, #7
 8008fca:	2200      	movs	r2, #0
 8008fcc:	701a      	strb	r2, [r3, #0]
 8008fce:	e014      	b.n	8008ffa <SIM800H_GPRS_Setup+0x15a>
   		if(SIM800_Wait_for_Responce(10)) {
 8008fd0:	200a      	movs	r0, #10
 8008fd2:	f7ff fa6f 	bl	80084b4 <SIM800_Wait_for_Responce>
 8008fd6:	1e03      	subs	r3, r0, #0
 8008fd8:	d00a      	beq.n	8008ff0 <SIM800H_GPRS_Setup+0x150>
   	  		U2Transfer_cplt = 0;
 8008fda:	4b61      	ldr	r3, [pc, #388]	; (8009160 <SIM800H_GPRS_Setup+0x2c0>)
 8008fdc:	2200      	movs	r2, #0
 8008fde:	701a      	strb	r2, [r3, #0]
   	  		if(strstr(U2Rx_Buffer, "OK") != NULL) {
 8008fe0:	4a60      	ldr	r2, [pc, #384]	; (8009164 <SIM800H_GPRS_Setup+0x2c4>)
 8008fe2:	4b61      	ldr	r3, [pc, #388]	; (8009168 <SIM800H_GPRS_Setup+0x2c8>)
 8008fe4:	0011      	movs	r1, r2
 8008fe6:	0018      	movs	r0, r3
 8008fe8:	f009 fe51 	bl	8012c8e <strstr>
 8008fec:	1e03      	subs	r3, r0, #0
 8008fee:	d109      	bne.n	8009004 <SIM800H_GPRS_Setup+0x164>
   	for(a = 0; a < 5; a++) {
 8008ff0:	1dfb      	adds	r3, r7, #7
 8008ff2:	781a      	ldrb	r2, [r3, #0]
 8008ff4:	1dfb      	adds	r3, r7, #7
 8008ff6:	3201      	adds	r2, #1
 8008ff8:	701a      	strb	r2, [r3, #0]
 8008ffa:	1dfb      	adds	r3, r7, #7
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	2b04      	cmp	r3, #4
 8009000:	d9e6      	bls.n	8008fd0 <SIM800H_GPRS_Setup+0x130>
 8009002:	e000      	b.n	8009006 <SIM800H_GPRS_Setup+0x166>
   	   			break;
 8009004:	46c0      	nop			; (mov r8, r8)
   	   		}
   	   	}
   	}

   	osDelay(500);
 8009006:	23fa      	movs	r3, #250	; 0xfa
 8009008:	005b      	lsls	r3, r3, #1
 800900a:	0018      	movs	r0, r3
 800900c:	f007 fe30 	bl	8010c70 <osDelay>
  	SIM800H_TX("AT+CSTT=\"internet\",\"\",\"\"\r\n");
 8009010:	4b59      	ldr	r3, [pc, #356]	; (8009178 <SIM800H_GPRS_Setup+0x2d8>)
 8009012:	0018      	movs	r0, r3
 8009014:	f000 fb3e 	bl	8009694 <SIM800H_TX>
  	//osDelay(5);
  	SIM800H_Clear_Buffers();
 8009018:	f000 f8b6 	bl	8009188 <SIM800H_Clear_Buffers>
  	for(a = 0; a < 10; a++) {
 800901c:	1dfb      	adds	r3, r7, #7
 800901e:	2200      	movs	r2, #0
 8009020:	701a      	strb	r2, [r3, #0]
 8009022:	e01e      	b.n	8009062 <SIM800H_GPRS_Setup+0x1c2>
  		if(SIM800_Wait_for_Responce(50)) {
 8009024:	2032      	movs	r0, #50	; 0x32
 8009026:	f7ff fa45 	bl	80084b4 <SIM800_Wait_for_Responce>
 800902a:	1e03      	subs	r3, r0, #0
 800902c:	d014      	beq.n	8009058 <SIM800H_GPRS_Setup+0x1b8>
  			U2Transfer_cplt = 0;
 800902e:	4b4c      	ldr	r3, [pc, #304]	; (8009160 <SIM800H_GPRS_Setup+0x2c0>)
 8009030:	2200      	movs	r2, #0
 8009032:	701a      	strb	r2, [r3, #0]
  			if(strstr(U2Rx_Buffer, "OK") != NULL) {
 8009034:	4a4b      	ldr	r2, [pc, #300]	; (8009164 <SIM800H_GPRS_Setup+0x2c4>)
 8009036:	4b4c      	ldr	r3, [pc, #304]	; (8009168 <SIM800H_GPRS_Setup+0x2c8>)
 8009038:	0011      	movs	r1, r2
 800903a:	0018      	movs	r0, r3
 800903c:	f009 fe27 	bl	8012c8e <strstr>
 8009040:	1e03      	subs	r3, r0, #0
 8009042:	d113      	bne.n	800906c <SIM800H_GPRS_Setup+0x1cc>
  	  			break;
  	  		} else if(strstr(U2Rx_Buffer, "ERROR") != NULL) {
 8009044:	4a4d      	ldr	r2, [pc, #308]	; (800917c <SIM800H_GPRS_Setup+0x2dc>)
 8009046:	4b48      	ldr	r3, [pc, #288]	; (8009168 <SIM800H_GPRS_Setup+0x2c8>)
 8009048:	0011      	movs	r1, r2
 800904a:	0018      	movs	r0, r3
 800904c:	f009 fe1f 	bl	8012c8e <strstr>
 8009050:	1e03      	subs	r3, r0, #0
 8009052:	d001      	beq.n	8009058 <SIM800H_GPRS_Setup+0x1b8>
  				return(FALSE);
 8009054:	2300      	movs	r3, #0
 8009056:	e07a      	b.n	800914e <SIM800H_GPRS_Setup+0x2ae>
  	for(a = 0; a < 10; a++) {
 8009058:	1dfb      	adds	r3, r7, #7
 800905a:	781a      	ldrb	r2, [r3, #0]
 800905c:	1dfb      	adds	r3, r7, #7
 800905e:	3201      	adds	r2, #1
 8009060:	701a      	strb	r2, [r3, #0]
 8009062:	1dfb      	adds	r3, r7, #7
 8009064:	781b      	ldrb	r3, [r3, #0]
 8009066:	2b09      	cmp	r3, #9
 8009068:	d9dc      	bls.n	8009024 <SIM800H_GPRS_Setup+0x184>
 800906a:	e000      	b.n	800906e <SIM800H_GPRS_Setup+0x1ce>
  	  			break;
 800906c:	46c0      	nop			; (mov r8, r8)
  			}
  	  	}
  	}

  	HAL_IWDG_Refresh(&hiwdg);
 800906e:	4b3a      	ldr	r3, [pc, #232]	; (8009158 <SIM800H_GPRS_Setup+0x2b8>)
 8009070:	0018      	movs	r0, r3
 8009072:	f003 fe4d 	bl	800cd10 <HAL_IWDG_Refresh>
  	SIM800H_TX("AT+CIICR\r\n");
 8009076:	4b42      	ldr	r3, [pc, #264]	; (8009180 <SIM800H_GPRS_Setup+0x2e0>)
 8009078:	0018      	movs	r0, r3
 800907a:	f000 fb0b 	bl	8009694 <SIM800H_TX>
  	SIM800H_Clear_Buffers();
 800907e:	f000 f883 	bl	8009188 <SIM800H_Clear_Buffers>
  	osDelay(20);
 8009082:	2014      	movs	r0, #20
 8009084:	f007 fdf4 	bl	8010c70 <osDelay>
  	for(a = 0; a < 10; a++) {
 8009088:	1dfb      	adds	r3, r7, #7
 800908a:	2200      	movs	r2, #0
 800908c:	701a      	strb	r2, [r3, #0]
 800908e:	e023      	b.n	80090d8 <SIM800H_GPRS_Setup+0x238>
  		if(SIM800_Wait_for_Responce(100)) {
 8009090:	2064      	movs	r0, #100	; 0x64
 8009092:	f7ff fa0f 	bl	80084b4 <SIM800_Wait_for_Responce>
 8009096:	1e03      	subs	r3, r0, #0
 8009098:	d019      	beq.n	80090ce <SIM800H_GPRS_Setup+0x22e>
  			osDelay(500);
 800909a:	23fa      	movs	r3, #250	; 0xfa
 800909c:	005b      	lsls	r3, r3, #1
 800909e:	0018      	movs	r0, r3
 80090a0:	f007 fde6 	bl	8010c70 <osDelay>
  			U2Transfer_cplt = 0;
 80090a4:	4b2e      	ldr	r3, [pc, #184]	; (8009160 <SIM800H_GPRS_Setup+0x2c0>)
 80090a6:	2200      	movs	r2, #0
 80090a8:	701a      	strb	r2, [r3, #0]
  			if(strstr(U2Rx_Buffer, "OK") != NULL) {
 80090aa:	4a2e      	ldr	r2, [pc, #184]	; (8009164 <SIM800H_GPRS_Setup+0x2c4>)
 80090ac:	4b2e      	ldr	r3, [pc, #184]	; (8009168 <SIM800H_GPRS_Setup+0x2c8>)
 80090ae:	0011      	movs	r1, r2
 80090b0:	0018      	movs	r0, r3
 80090b2:	f009 fdec 	bl	8012c8e <strstr>
 80090b6:	1e03      	subs	r3, r0, #0
 80090b8:	d113      	bne.n	80090e2 <SIM800H_GPRS_Setup+0x242>
  				break;
  			} else if(strstr(U2Rx_Buffer, "ERROR") != NULL) {
 80090ba:	4a30      	ldr	r2, [pc, #192]	; (800917c <SIM800H_GPRS_Setup+0x2dc>)
 80090bc:	4b2a      	ldr	r3, [pc, #168]	; (8009168 <SIM800H_GPRS_Setup+0x2c8>)
 80090be:	0011      	movs	r1, r2
 80090c0:	0018      	movs	r0, r3
 80090c2:	f009 fde4 	bl	8012c8e <strstr>
 80090c6:	1e03      	subs	r3, r0, #0
 80090c8:	d001      	beq.n	80090ce <SIM800H_GPRS_Setup+0x22e>
  				return(FALSE);
 80090ca:	2300      	movs	r3, #0
 80090cc:	e03f      	b.n	800914e <SIM800H_GPRS_Setup+0x2ae>
  	for(a = 0; a < 10; a++) {
 80090ce:	1dfb      	adds	r3, r7, #7
 80090d0:	781a      	ldrb	r2, [r3, #0]
 80090d2:	1dfb      	adds	r3, r7, #7
 80090d4:	3201      	adds	r2, #1
 80090d6:	701a      	strb	r2, [r3, #0]
 80090d8:	1dfb      	adds	r3, r7, #7
 80090da:	781b      	ldrb	r3, [r3, #0]
 80090dc:	2b09      	cmp	r3, #9
 80090de:	d9d7      	bls.n	8009090 <SIM800H_GPRS_Setup+0x1f0>
 80090e0:	e000      	b.n	80090e4 <SIM800H_GPRS_Setup+0x244>
  				break;
 80090e2:	46c0      	nop			; (mov r8, r8)
  			}
  		}
  	}

  	osDelay(20);
 80090e4:	2014      	movs	r0, #20
 80090e6:	f007 fdc3 	bl	8010c70 <osDelay>
  	SIM800H_TX("AT+CIFSR\r\n");
 80090ea:	4b26      	ldr	r3, [pc, #152]	; (8009184 <SIM800H_GPRS_Setup+0x2e4>)
 80090ec:	0018      	movs	r0, r3
 80090ee:	f000 fad1 	bl	8009694 <SIM800H_TX>
  	SIM800H_Clear_Buffers();
 80090f2:	f000 f849 	bl	8009188 <SIM800H_Clear_Buffers>
  	for(a = 0; a < 10; a++) {
 80090f6:	1dfb      	adds	r3, r7, #7
 80090f8:	2200      	movs	r2, #0
 80090fa:	701a      	strb	r2, [r3, #0]
 80090fc:	e01d      	b.n	800913a <SIM800H_GPRS_Setup+0x29a>
  		if(SIM800_Wait_for_Responce(100)) {
 80090fe:	2064      	movs	r0, #100	; 0x64
 8009100:	f7ff f9d8 	bl	80084b4 <SIM800_Wait_for_Responce>
 8009104:	1e03      	subs	r3, r0, #0
 8009106:	d013      	beq.n	8009130 <SIM800H_GPRS_Setup+0x290>
  			U2Transfer_cplt = 0;
 8009108:	4b15      	ldr	r3, [pc, #84]	; (8009160 <SIM800H_GPRS_Setup+0x2c0>)
 800910a:	2200      	movs	r2, #0
 800910c:	701a      	strb	r2, [r3, #0]
  			if(strstr(U2Rx_Buffer, ".") != NULL) {
 800910e:	4b16      	ldr	r3, [pc, #88]	; (8009168 <SIM800H_GPRS_Setup+0x2c8>)
 8009110:	212e      	movs	r1, #46	; 0x2e
 8009112:	0018      	movs	r0, r3
 8009114:	f009 fd7f 	bl	8012c16 <strchr>
 8009118:	1e03      	subs	r3, r0, #0
 800911a:	d113      	bne.n	8009144 <SIM800H_GPRS_Setup+0x2a4>
  	  			break;
  	  		} else if(strstr(U2Rx_Buffer, "ERROR") != NULL) {
 800911c:	4a17      	ldr	r2, [pc, #92]	; (800917c <SIM800H_GPRS_Setup+0x2dc>)
 800911e:	4b12      	ldr	r3, [pc, #72]	; (8009168 <SIM800H_GPRS_Setup+0x2c8>)
 8009120:	0011      	movs	r1, r2
 8009122:	0018      	movs	r0, r3
 8009124:	f009 fdb3 	bl	8012c8e <strstr>
 8009128:	1e03      	subs	r3, r0, #0
 800912a:	d001      	beq.n	8009130 <SIM800H_GPRS_Setup+0x290>
  				return(FALSE);
 800912c:	2300      	movs	r3, #0
 800912e:	e00e      	b.n	800914e <SIM800H_GPRS_Setup+0x2ae>
  	for(a = 0; a < 10; a++) {
 8009130:	1dfb      	adds	r3, r7, #7
 8009132:	781a      	ldrb	r2, [r3, #0]
 8009134:	1dfb      	adds	r3, r7, #7
 8009136:	3201      	adds	r2, #1
 8009138:	701a      	strb	r2, [r3, #0]
 800913a:	1dfb      	adds	r3, r7, #7
 800913c:	781b      	ldrb	r3, [r3, #0]
 800913e:	2b09      	cmp	r3, #9
 8009140:	d9dd      	bls.n	80090fe <SIM800H_GPRS_Setup+0x25e>
 8009142:	e000      	b.n	8009146 <SIM800H_GPRS_Setup+0x2a6>
  	  			break;
 8009144:	46c0      	nop			; (mov r8, r8)
  			}
  	  	}
  	}

  	osDelay(5);
 8009146:	2005      	movs	r0, #5
 8009148:	f007 fd92 	bl	8010c70 <osDelay>

  	return(TRUE);
 800914c:	2301      	movs	r3, #1
}
 800914e:	0018      	movs	r0, r3
 8009150:	46bd      	mov	sp, r7
 8009152:	b002      	add	sp, #8
 8009154:	bd80      	pop	{r7, pc}
 8009156:	46c0      	nop			; (mov r8, r8)
 8009158:	20000848 	.word	0x20000848
 800915c:	08016cd0 	.word	0x08016cd0
 8009160:	2000246c 	.word	0x2000246c
 8009164:	08016a7c 	.word	0x08016a7c
 8009168:	2000226c 	.word	0x2000226c
 800916c:	08016ce0 	.word	0x08016ce0
 8009170:	08016cf0 	.word	0x08016cf0
 8009174:	08016d00 	.word	0x08016d00
 8009178:	08016d10 	.word	0x08016d10
 800917c:	08016a80 	.word	0x08016a80
 8009180:	08016d2c 	.word	0x08016d2c
 8009184:	08016d38 	.word	0x08016d38

08009188 <SIM800H_Clear_Buffers>:

// Send GPRS


static void SIM800H_Clear_Buffers(void)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
	unsigned int i = 0;
 800918e:	2300      	movs	r3, #0
 8009190:	607b      	str	r3, [r7, #4]

	U2Rx_indx=0;
 8009192:	4b0d      	ldr	r3, [pc, #52]	; (80091c8 <SIM800H_Clear_Buffers+0x40>)
 8009194:	2200      	movs	r2, #0
 8009196:	601a      	str	r2, [r3, #0]
	U2Transfer_cplt = 0;
 8009198:	4b0c      	ldr	r3, [pc, #48]	; (80091cc <SIM800H_Clear_Buffers+0x44>)
 800919a:	2200      	movs	r2, #0
 800919c:	701a      	strb	r2, [r3, #0]
	for (i = 0;i < 512;i++) {
 800919e:	2300      	movs	r3, #0
 80091a0:	607b      	str	r3, [r7, #4]
 80091a2:	e007      	b.n	80091b4 <SIM800H_Clear_Buffers+0x2c>
			U2Rx_Buffer[i]=0;
 80091a4:	4a0a      	ldr	r2, [pc, #40]	; (80091d0 <SIM800H_Clear_Buffers+0x48>)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	18d3      	adds	r3, r2, r3
 80091aa:	2200      	movs	r2, #0
 80091ac:	701a      	strb	r2, [r3, #0]
	for (i = 0;i < 512;i++) {
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	3301      	adds	r3, #1
 80091b2:	607b      	str	r3, [r7, #4]
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	2380      	movs	r3, #128	; 0x80
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d3f2      	bcc.n	80091a4 <SIM800H_Clear_Buffers+0x1c>
	}
}
 80091be:	46c0      	nop			; (mov r8, r8)
 80091c0:	46c0      	nop			; (mov r8, r8)
 80091c2:	46bd      	mov	sp, r7
 80091c4:	b002      	add	sp, #8
 80091c6:	bd80      	pop	{r7, pc}
 80091c8:	20002264 	.word	0x20002264
 80091cc:	2000246c 	.word	0x2000246c
 80091d0:	2000226c 	.word	0x2000226c

080091d4 <Send_GPRS_SIM800>:
	MQTT_RX_Mode = 1;
	return(0);
}

unsigned char Send_GPRS_SIM800(char * serv_num, char * message, unsigned char Mes_Amount)
{ unsigned char temppoint = 0;
 80091d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091d6:	b097      	sub	sp, #92	; 0x5c
 80091d8:	af00      	add	r7, sp, #0
 80091da:	60f8      	str	r0, [r7, #12]
 80091dc:	60b9      	str	r1, [r7, #8]
 80091de:	1dfb      	adds	r3, r7, #7
 80091e0:	701a      	strb	r2, [r3, #0]
 80091e2:	2457      	movs	r4, #87	; 0x57
 80091e4:	193b      	adds	r3, r7, r4
 80091e6:	2200      	movs	r2, #0
 80091e8:	701a      	strb	r2, [r3, #0]
  unsigned char rtries = 0;
 80091ea:	2556      	movs	r5, #86	; 0x56
 80091ec:	197b      	adds	r3, r7, r5
 80091ee:	2200      	movs	r2, #0
 80091f0:	701a      	strb	r2, [r3, #0]
  unsigned char Result = 0;
 80091f2:	2655      	movs	r6, #85	; 0x55
 80091f4:	19bb      	adds	r3, r7, r6
 80091f6:	2200      	movs	r2, #0
 80091f8:	701a      	strb	r2, [r3, #0]
  unsigned int temp = 0;
 80091fa:	2300      	movs	r3, #0
 80091fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  unsigned int ContentLength = 0;
 80091fe:	2300      	movs	r3, #0
 8009200:	64bb      	str	r3, [r7, #72]	; 0x48


  char bytes[10];
  char * numpoint;

    memset(buf, 0, sizeof(buf));
 8009202:	23fa      	movs	r3, #250	; 0xfa
 8009204:	00da      	lsls	r2, r3, #3
 8009206:	4b1d      	ldr	r3, [pc, #116]	; (800927c <Send_GPRS_SIM800+0xa8>)
 8009208:	2100      	movs	r1, #0
 800920a:	0018      	movs	r0, r3
 800920c:	f008 fef6 	bl	8011ffc <memset>
//	}

    unsigned char server_ip[30];
    unsigned char server_port[10];

  	Result = FALSE;
 8009210:	19bb      	adds	r3, r7, r6
 8009212:	2200      	movs	r2, #0
 8009214:	701a      	strb	r2, [r3, #0]
	temppoint = FALSE;
 8009216:	193b      	adds	r3, r7, r4
 8009218:	2200      	movs	r2, #0
 800921a:	701a      	strb	r2, [r3, #0]
    rtries = 0;
 800921c:	197b      	adds	r3, r7, r5
 800921e:	2200      	movs	r2, #0
 8009220:	701a      	strb	r2, [r3, #0]

    strncpy(server_ip, Read_Settings(EE_TCP_SERV), 29);
 8009222:	2031      	movs	r0, #49	; 0x31
 8009224:	f7fa ff10 	bl	8004048 <Read_Settings>
 8009228:	0001      	movs	r1, r0
 800922a:	231c      	movs	r3, #28
 800922c:	18fb      	adds	r3, r7, r3
 800922e:	221d      	movs	r2, #29
 8009230:	0018      	movs	r0, r3
 8009232:	f009 fd18 	bl	8012c66 <strncpy>
    strncpy(server_port, Read_Settings(EE_TCP_PORT), 9);
 8009236:	2032      	movs	r0, #50	; 0x32
 8009238:	f7fa ff06 	bl	8004048 <Read_Settings>
 800923c:	0001      	movs	r1, r0
 800923e:	2310      	movs	r3, #16
 8009240:	18fb      	adds	r3, r7, r3
 8009242:	2209      	movs	r2, #9
 8009244:	0018      	movs	r0, r3
 8009246:	f009 fd0e 	bl	8012c66 <strncpy>

	while(SIM800H_Connect_Data(server_ip, server_port) == 0) {
 800924a:	e00c      	b.n	8009266 <Send_GPRS_SIM800+0x92>
		if(rtries < 2) {
 800924c:	2156      	movs	r1, #86	; 0x56
 800924e:	187b      	adds	r3, r7, r1
 8009250:	781b      	ldrb	r3, [r3, #0]
 8009252:	2b01      	cmp	r3, #1
 8009254:	d805      	bhi.n	8009262 <Send_GPRS_SIM800+0x8e>
			rtries++;
 8009256:	187b      	adds	r3, r7, r1
 8009258:	781a      	ldrb	r2, [r3, #0]
 800925a:	187b      	adds	r3, r7, r1
 800925c:	3201      	adds	r2, #1
 800925e:	701a      	strb	r2, [r3, #0]
 8009260:	e001      	b.n	8009266 <Send_GPRS_SIM800+0x92>
		} else return(FALSE);
 8009262:	2300      	movs	r3, #0
 8009264:	e1df      	b.n	8009626 <Send_GPRS_SIM800+0x452>
	while(SIM800H_Connect_Data(server_ip, server_port) == 0) {
 8009266:	2310      	movs	r3, #16
 8009268:	18fa      	adds	r2, r7, r3
 800926a:	231c      	movs	r3, #28
 800926c:	18fb      	adds	r3, r7, r3
 800926e:	0011      	movs	r1, r2
 8009270:	0018      	movs	r0, r3
 8009272:	f7ff fd4b 	bl	8008d0c <SIM800H_Connect_Data>
 8009276:	1e03      	subs	r3, r0, #0
 8009278:	d0e8      	beq.n	800924c <Send_GPRS_SIM800+0x78>
	}

    while(temppoint == FALSE) {
 800927a:	e1c4      	b.n	8009606 <Send_GPRS_SIM800+0x432>
 800927c:	200018f4 	.word	0x200018f4
    	strcpy(buf, POST);
 8009280:	4beb      	ldr	r3, [pc, #940]	; (8009630 <Send_GPRS_SIM800+0x45c>)
 8009282:	4aec      	ldr	r2, [pc, #944]	; (8009634 <Send_GPRS_SIM800+0x460>)
 8009284:	6811      	ldr	r1, [r2, #0]
 8009286:	6019      	str	r1, [r3, #0]
 8009288:	8892      	ldrh	r2, [r2, #4]
 800928a:	809a      	strh	r2, [r3, #4]
		strcat(buf, "/gprs/gprs.php?cmd=sms&c=");
 800928c:	4be8      	ldr	r3, [pc, #928]	; (8009630 <Send_GPRS_SIM800+0x45c>)
 800928e:	0018      	movs	r0, r3
 8009290:	f7f6 ff3a 	bl	8000108 <strlen>
 8009294:	0003      	movs	r3, r0
 8009296:	001a      	movs	r2, r3
 8009298:	4be5      	ldr	r3, [pc, #916]	; (8009630 <Send_GPRS_SIM800+0x45c>)
 800929a:	18d2      	adds	r2, r2, r3
 800929c:	4be6      	ldr	r3, [pc, #920]	; (8009638 <Send_GPRS_SIM800+0x464>)
 800929e:	0010      	movs	r0, r2
 80092a0:	0019      	movs	r1, r3
 80092a2:	231a      	movs	r3, #26
 80092a4:	001a      	movs	r2, r3
 80092a6:	f008 fea0 	bl	8011fea <memcpy>
		numpoint = Own_Number;
 80092aa:	4be4      	ldr	r3, [pc, #912]	; (800963c <Send_GPRS_SIM800+0x468>)
 80092ac:	653b      	str	r3, [r7, #80]	; 0x50
		if(Own_Number[0] == '+') {
 80092ae:	4be3      	ldr	r3, [pc, #908]	; (800963c <Send_GPRS_SIM800+0x468>)
 80092b0:	781b      	ldrb	r3, [r3, #0]
 80092b2:	2b2b      	cmp	r3, #43	; 0x2b
 80092b4:	d102      	bne.n	80092bc <Send_GPRS_SIM800+0xe8>
			numpoint++;
 80092b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092b8:	3301      	adds	r3, #1
 80092ba:	653b      	str	r3, [r7, #80]	; 0x50
		}
		strcat(buf, numpoint);
 80092bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80092be:	4bdc      	ldr	r3, [pc, #880]	; (8009630 <Send_GPRS_SIM800+0x45c>)
 80092c0:	0011      	movs	r1, r2
 80092c2:	0018      	movs	r0, r3
 80092c4:	f009 fc9a 	bl	8012bfc <strcat>
		strcat(buf, "&u=");
 80092c8:	4bd9      	ldr	r3, [pc, #868]	; (8009630 <Send_GPRS_SIM800+0x45c>)
 80092ca:	0018      	movs	r0, r3
 80092cc:	f7f6 ff1c 	bl	8000108 <strlen>
 80092d0:	0003      	movs	r3, r0
 80092d2:	001a      	movs	r2, r3
 80092d4:	4bd6      	ldr	r3, [pc, #856]	; (8009630 <Send_GPRS_SIM800+0x45c>)
 80092d6:	18d2      	adds	r2, r2, r3
 80092d8:	4bd9      	ldr	r3, [pc, #868]	; (8009640 <Send_GPRS_SIM800+0x46c>)
 80092da:	0010      	movs	r0, r2
 80092dc:	0019      	movs	r1, r3
 80092de:	2304      	movs	r3, #4
 80092e0:	001a      	movs	r2, r3
 80092e2:	f008 fe82 	bl	8011fea <memcpy>
		strcat(buf, Read_Settings(EE_HTTP_USERNAME));
 80092e6:	202f      	movs	r0, #47	; 0x2f
 80092e8:	f7fa feae 	bl	8004048 <Read_Settings>
 80092ec:	0002      	movs	r2, r0
 80092ee:	4bd0      	ldr	r3, [pc, #832]	; (8009630 <Send_GPRS_SIM800+0x45c>)
 80092f0:	0011      	movs	r1, r2
 80092f2:	0018      	movs	r0, r3
 80092f4:	f009 fc82 	bl	8012bfc <strcat>
		strcat(buf, "&p=");
 80092f8:	4bcd      	ldr	r3, [pc, #820]	; (8009630 <Send_GPRS_SIM800+0x45c>)
 80092fa:	0018      	movs	r0, r3
 80092fc:	f7f6 ff04 	bl	8000108 <strlen>
 8009300:	0003      	movs	r3, r0
 8009302:	001a      	movs	r2, r3
 8009304:	4bca      	ldr	r3, [pc, #808]	; (8009630 <Send_GPRS_SIM800+0x45c>)
 8009306:	18d2      	adds	r2, r2, r3
 8009308:	4bce      	ldr	r3, [pc, #824]	; (8009644 <Send_GPRS_SIM800+0x470>)
 800930a:	0010      	movs	r0, r2
 800930c:	0019      	movs	r1, r3
 800930e:	2304      	movs	r3, #4
 8009310:	001a      	movs	r2, r3
 8009312:	f008 fe6a 	bl	8011fea <memcpy>
		strcat(buf, Read_Settings(EE_HTTP_PASSWORD));
 8009316:	2030      	movs	r0, #48	; 0x30
 8009318:	f7fa fe96 	bl	8004048 <Read_Settings>
 800931c:	0002      	movs	r2, r0
 800931e:	4bc4      	ldr	r3, [pc, #784]	; (8009630 <Send_GPRS_SIM800+0x45c>)
 8009320:	0011      	movs	r1, r2
 8009322:	0018      	movs	r0, r3
 8009324:	f009 fc6a 	bl	8012bfc <strcat>
		strcat(buf, "&id=");
 8009328:	4bc1      	ldr	r3, [pc, #772]	; (8009630 <Send_GPRS_SIM800+0x45c>)
 800932a:	0018      	movs	r0, r3
 800932c:	f7f6 feec 	bl	8000108 <strlen>
 8009330:	0003      	movs	r3, r0
 8009332:	001a      	movs	r2, r3
 8009334:	4bbe      	ldr	r3, [pc, #760]	; (8009630 <Send_GPRS_SIM800+0x45c>)
 8009336:	18d2      	adds	r2, r2, r3
 8009338:	4bc3      	ldr	r3, [pc, #780]	; (8009648 <Send_GPRS_SIM800+0x474>)
 800933a:	0010      	movs	r0, r2
 800933c:	0019      	movs	r1, r3
 800933e:	2305      	movs	r3, #5
 8009340:	001a      	movs	r2, r3
 8009342:	f008 fe52 	bl	8011fea <memcpy>
		itoa(mesid, bytes, 10);
 8009346:	4bc1      	ldr	r3, [pc, #772]	; (800964c <Send_GPRS_SIM800+0x478>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	0018      	movs	r0, r3
 800934c:	243c      	movs	r4, #60	; 0x3c
 800934e:	193b      	adds	r3, r7, r4
 8009350:	220a      	movs	r2, #10
 8009352:	0019      	movs	r1, r3
 8009354:	f008 fe42 	bl	8011fdc <itoa>
		strcat(buf, bytes);
 8009358:	193a      	adds	r2, r7, r4
 800935a:	4bb5      	ldr	r3, [pc, #724]	; (8009630 <Send_GPRS_SIM800+0x45c>)
 800935c:	0011      	movs	r1, r2
 800935e:	0018      	movs	r0, r3
 8009360:	f009 fc4c 	bl	8012bfc <strcat>
		strcat(buf, HTTP);
 8009364:	4bb2      	ldr	r3, [pc, #712]	; (8009630 <Send_GPRS_SIM800+0x45c>)
 8009366:	0018      	movs	r0, r3
 8009368:	f7f6 fece 	bl	8000108 <strlen>
 800936c:	0003      	movs	r3, r0
 800936e:	001a      	movs	r2, r3
 8009370:	4baf      	ldr	r3, [pc, #700]	; (8009630 <Send_GPRS_SIM800+0x45c>)
 8009372:	18d2      	adds	r2, r2, r3
 8009374:	4bb6      	ldr	r3, [pc, #728]	; (8009650 <Send_GPRS_SIM800+0x47c>)
 8009376:	0010      	movs	r0, r2
 8009378:	0019      	movs	r1, r3
 800937a:	230a      	movs	r3, #10
 800937c:	001a      	movs	r2, r3
 800937e:	f008 fe34 	bl	8011fea <memcpy>
		strcat(buf, "\r\n");
 8009382:	4bab      	ldr	r3, [pc, #684]	; (8009630 <Send_GPRS_SIM800+0x45c>)
 8009384:	0018      	movs	r0, r3
 8009386:	f7f6 febf 	bl	8000108 <strlen>
 800938a:	0003      	movs	r3, r0
 800938c:	001a      	movs	r2, r3
 800938e:	4ba8      	ldr	r3, [pc, #672]	; (8009630 <Send_GPRS_SIM800+0x45c>)
 8009390:	18d2      	adds	r2, r2, r3
 8009392:	4bb0      	ldr	r3, [pc, #704]	; (8009654 <Send_GPRS_SIM800+0x480>)
 8009394:	0010      	movs	r0, r2
 8009396:	0019      	movs	r1, r3
 8009398:	2303      	movs	r3, #3
 800939a:	001a      	movs	r2, r3
 800939c:	f008 fe25 	bl	8011fea <memcpy>

		strcat(buf, HOST);
 80093a0:	4ba3      	ldr	r3, [pc, #652]	; (8009630 <Send_GPRS_SIM800+0x45c>)
 80093a2:	0018      	movs	r0, r3
 80093a4:	f7f6 feb0 	bl	8000108 <strlen>
 80093a8:	0003      	movs	r3, r0
 80093aa:	001a      	movs	r2, r3
 80093ac:	4ba0      	ldr	r3, [pc, #640]	; (8009630 <Send_GPRS_SIM800+0x45c>)
 80093ae:	18d2      	adds	r2, r2, r3
 80093b0:	4ba9      	ldr	r3, [pc, #676]	; (8009658 <Send_GPRS_SIM800+0x484>)
 80093b2:	0010      	movs	r0, r2
 80093b4:	0019      	movs	r1, r3
 80093b6:	2307      	movs	r3, #7
 80093b8:	001a      	movs	r2, r3
 80093ba:	f008 fe16 	bl	8011fea <memcpy>
		strcat(buf, Read_Settings(EE_TCP_SERV));
 80093be:	2031      	movs	r0, #49	; 0x31
 80093c0:	f7fa fe42 	bl	8004048 <Read_Settings>
 80093c4:	0002      	movs	r2, r0
 80093c6:	4b9a      	ldr	r3, [pc, #616]	; (8009630 <Send_GPRS_SIM800+0x45c>)
 80093c8:	0011      	movs	r1, r2
 80093ca:	0018      	movs	r0, r3
 80093cc:	f009 fc16 	bl	8012bfc <strcat>
		strcat(buf, Colon);
 80093d0:	4b97      	ldr	r3, [pc, #604]	; (8009630 <Send_GPRS_SIM800+0x45c>)
 80093d2:	0018      	movs	r0, r3
 80093d4:	f7f6 fe98 	bl	8000108 <strlen>
 80093d8:	0003      	movs	r3, r0
 80093da:	001a      	movs	r2, r3
 80093dc:	4b94      	ldr	r3, [pc, #592]	; (8009630 <Send_GPRS_SIM800+0x45c>)
 80093de:	18d2      	adds	r2, r2, r3
 80093e0:	4b9e      	ldr	r3, [pc, #632]	; (800965c <Send_GPRS_SIM800+0x488>)
 80093e2:	0010      	movs	r0, r2
 80093e4:	0019      	movs	r1, r3
 80093e6:	2302      	movs	r3, #2
 80093e8:	001a      	movs	r2, r3
 80093ea:	f008 fdfe 	bl	8011fea <memcpy>
		strcat(buf, Read_Settings(EE_TCP_PORT));
 80093ee:	2032      	movs	r0, #50	; 0x32
 80093f0:	f7fa fe2a 	bl	8004048 <Read_Settings>
 80093f4:	0002      	movs	r2, r0
 80093f6:	4b8e      	ldr	r3, [pc, #568]	; (8009630 <Send_GPRS_SIM800+0x45c>)
 80093f8:	0011      	movs	r1, r2
 80093fa:	0018      	movs	r0, r3
 80093fc:	f009 fbfe 	bl	8012bfc <strcat>
		strcat(buf, "\r\n");
 8009400:	4b8b      	ldr	r3, [pc, #556]	; (8009630 <Send_GPRS_SIM800+0x45c>)
 8009402:	0018      	movs	r0, r3
 8009404:	f7f6 fe80 	bl	8000108 <strlen>
 8009408:	0003      	movs	r3, r0
 800940a:	001a      	movs	r2, r3
 800940c:	4b88      	ldr	r3, [pc, #544]	; (8009630 <Send_GPRS_SIM800+0x45c>)
 800940e:	18d2      	adds	r2, r2, r3
 8009410:	4b90      	ldr	r3, [pc, #576]	; (8009654 <Send_GPRS_SIM800+0x480>)
 8009412:	0010      	movs	r0, r2
 8009414:	0019      	movs	r1, r3
 8009416:	2303      	movs	r3, #3
 8009418:	001a      	movs	r2, r3
 800941a:	f008 fde6 	bl	8011fea <memcpy>
		strcat(buf, User_Agent);
 800941e:	4b84      	ldr	r3, [pc, #528]	; (8009630 <Send_GPRS_SIM800+0x45c>)
 8009420:	0018      	movs	r0, r3
 8009422:	f7f6 fe71 	bl	8000108 <strlen>
 8009426:	0003      	movs	r3, r0
 8009428:	001a      	movs	r2, r3
 800942a:	4b81      	ldr	r3, [pc, #516]	; (8009630 <Send_GPRS_SIM800+0x45c>)
 800942c:	18d2      	adds	r2, r2, r3
 800942e:	4b8c      	ldr	r3, [pc, #560]	; (8009660 <Send_GPRS_SIM800+0x48c>)
 8009430:	0010      	movs	r0, r2
 8009432:	0019      	movs	r1, r3
 8009434:	230d      	movs	r3, #13
 8009436:	001a      	movs	r2, r3
 8009438:	f008 fdd7 	bl	8011fea <memcpy>
		strcat(buf, "USER_AGENT");
 800943c:	4b7c      	ldr	r3, [pc, #496]	; (8009630 <Send_GPRS_SIM800+0x45c>)
 800943e:	0018      	movs	r0, r3
 8009440:	f7f6 fe62 	bl	8000108 <strlen>
 8009444:	0003      	movs	r3, r0
 8009446:	001a      	movs	r2, r3
 8009448:	4b79      	ldr	r3, [pc, #484]	; (8009630 <Send_GPRS_SIM800+0x45c>)
 800944a:	18d2      	adds	r2, r2, r3
 800944c:	4b85      	ldr	r3, [pc, #532]	; (8009664 <Send_GPRS_SIM800+0x490>)
 800944e:	0010      	movs	r0, r2
 8009450:	0019      	movs	r1, r3
 8009452:	230b      	movs	r3, #11
 8009454:	001a      	movs	r2, r3
 8009456:	f008 fdc8 	bl	8011fea <memcpy>
		strcat(buf, "\r\n");
 800945a:	4b75      	ldr	r3, [pc, #468]	; (8009630 <Send_GPRS_SIM800+0x45c>)
 800945c:	0018      	movs	r0, r3
 800945e:	f7f6 fe53 	bl	8000108 <strlen>
 8009462:	0003      	movs	r3, r0
 8009464:	001a      	movs	r2, r3
 8009466:	4b72      	ldr	r3, [pc, #456]	; (8009630 <Send_GPRS_SIM800+0x45c>)
 8009468:	18d2      	adds	r2, r2, r3
 800946a:	4b7a      	ldr	r3, [pc, #488]	; (8009654 <Send_GPRS_SIM800+0x480>)
 800946c:	0010      	movs	r0, r2
 800946e:	0019      	movs	r1, r3
 8009470:	2303      	movs	r3, #3
 8009472:	001a      	movs	r2, r3
 8009474:	f008 fdb9 	bl	8011fea <memcpy>
		strcat(buf, Content_Length_part);
 8009478:	4b6d      	ldr	r3, [pc, #436]	; (8009630 <Send_GPRS_SIM800+0x45c>)
 800947a:	0018      	movs	r0, r3
 800947c:	f7f6 fe44 	bl	8000108 <strlen>
 8009480:	0003      	movs	r3, r0
 8009482:	001a      	movs	r2, r3
 8009484:	4b6a      	ldr	r3, [pc, #424]	; (8009630 <Send_GPRS_SIM800+0x45c>)
 8009486:	18d2      	adds	r2, r2, r3
 8009488:	4b77      	ldr	r3, [pc, #476]	; (8009668 <Send_GPRS_SIM800+0x494>)
 800948a:	0010      	movs	r0, r2
 800948c:	0019      	movs	r1, r3
 800948e:	2311      	movs	r3, #17
 8009490:	001a      	movs	r2, r3
 8009492:	f008 fdaa 	bl	8011fea <memcpy>
		if(serv_num[0] == '+') serv_num++;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	781b      	ldrb	r3, [r3, #0]
 800949a:	2b2b      	cmp	r3, #43	; 0x2b
 800949c:	d102      	bne.n	80094a4 <Send_GPRS_SIM800+0x2d0>
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	3301      	adds	r3, #1
 80094a2:	60fb      	str	r3, [r7, #12]
		ContentLength = strlen(message) + 11 + 2 + strlen(serv_num) + 1 + 2;
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	0018      	movs	r0, r3
 80094a8:	f7f6 fe2e 	bl	8000108 <strlen>
 80094ac:	0004      	movs	r4, r0
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	0018      	movs	r0, r3
 80094b2:	f7f6 fe29 	bl	8000108 <strlen>
 80094b6:	0003      	movs	r3, r0
 80094b8:	18e3      	adds	r3, r4, r3
 80094ba:	3310      	adds	r3, #16
 80094bc:	64bb      	str	r3, [r7, #72]	; 0x48

		itoa(ContentLength, bytes, 10);
 80094be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094c0:	243c      	movs	r4, #60	; 0x3c
 80094c2:	1939      	adds	r1, r7, r4
 80094c4:	220a      	movs	r2, #10
 80094c6:	0018      	movs	r0, r3
 80094c8:	f008 fd88 	bl	8011fdc <itoa>
		strcat(buf, bytes);
 80094cc:	193a      	adds	r2, r7, r4
 80094ce:	4b58      	ldr	r3, [pc, #352]	; (8009630 <Send_GPRS_SIM800+0x45c>)
 80094d0:	0011      	movs	r1, r2
 80094d2:	0018      	movs	r0, r3
 80094d4:	f009 fb92 	bl	8012bfc <strcat>

		strcat(buf, "\r\n\r\n");
 80094d8:	4b55      	ldr	r3, [pc, #340]	; (8009630 <Send_GPRS_SIM800+0x45c>)
 80094da:	0018      	movs	r0, r3
 80094dc:	f7f6 fe14 	bl	8000108 <strlen>
 80094e0:	0003      	movs	r3, r0
 80094e2:	001a      	movs	r2, r3
 80094e4:	4b52      	ldr	r3, [pc, #328]	; (8009630 <Send_GPRS_SIM800+0x45c>)
 80094e6:	18d2      	adds	r2, r2, r3
 80094e8:	4b60      	ldr	r3, [pc, #384]	; (800966c <Send_GPRS_SIM800+0x498>)
 80094ea:	0010      	movs	r0, r2
 80094ec:	0019      	movs	r1, r3
 80094ee:	2305      	movs	r3, #5
 80094f0:	001a      	movs	r2, r3
 80094f2:	f008 fd7a 	bl	8011fea <memcpy>
		mesid++;
 80094f6:	4b55      	ldr	r3, [pc, #340]	; (800964c <Send_GPRS_SIM800+0x478>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	1c5a      	adds	r2, r3, #1
 80094fc:	4b53      	ldr	r3, [pc, #332]	; (800964c <Send_GPRS_SIM800+0x478>)
 80094fe:	601a      	str	r2, [r3, #0]
		strcat(buf, "<sms>");
 8009500:	4b4b      	ldr	r3, [pc, #300]	; (8009630 <Send_GPRS_SIM800+0x45c>)
 8009502:	0018      	movs	r0, r3
 8009504:	f7f6 fe00 	bl	8000108 <strlen>
 8009508:	0003      	movs	r3, r0
 800950a:	001a      	movs	r2, r3
 800950c:	4b48      	ldr	r3, [pc, #288]	; (8009630 <Send_GPRS_SIM800+0x45c>)
 800950e:	18d2      	adds	r2, r2, r3
 8009510:	4b57      	ldr	r3, [pc, #348]	; (8009670 <Send_GPRS_SIM800+0x49c>)
 8009512:	0010      	movs	r0, r2
 8009514:	0019      	movs	r1, r3
 8009516:	2306      	movs	r3, #6
 8009518:	001a      	movs	r2, r3
 800951a:	f008 fd66 	bl	8011fea <memcpy>
		strcat(buf, serv_num);
 800951e:	68fa      	ldr	r2, [r7, #12]
 8009520:	4b43      	ldr	r3, [pc, #268]	; (8009630 <Send_GPRS_SIM800+0x45c>)
 8009522:	0011      	movs	r1, r2
 8009524:	0018      	movs	r0, r3
 8009526:	f009 fb69 	bl	8012bfc <strcat>
		strcat(buf, ";");
 800952a:	4b41      	ldr	r3, [pc, #260]	; (8009630 <Send_GPRS_SIM800+0x45c>)
 800952c:	0018      	movs	r0, r3
 800952e:	f7f6 fdeb 	bl	8000108 <strlen>
 8009532:	0003      	movs	r3, r0
 8009534:	001a      	movs	r2, r3
 8009536:	4b3e      	ldr	r3, [pc, #248]	; (8009630 <Send_GPRS_SIM800+0x45c>)
 8009538:	18d2      	adds	r2, r2, r3
 800953a:	4b4e      	ldr	r3, [pc, #312]	; (8009674 <Send_GPRS_SIM800+0x4a0>)
 800953c:	0010      	movs	r0, r2
 800953e:	0019      	movs	r1, r3
 8009540:	2302      	movs	r3, #2
 8009542:	001a      	movs	r2, r3
 8009544:	f008 fd51 	bl	8011fea <memcpy>
		strcat(buf, message);
 8009548:	68ba      	ldr	r2, [r7, #8]
 800954a:	4b39      	ldr	r3, [pc, #228]	; (8009630 <Send_GPRS_SIM800+0x45c>)
 800954c:	0011      	movs	r1, r2
 800954e:	0018      	movs	r0, r3
 8009550:	f009 fb54 	bl	8012bfc <strcat>
		strcat(buf, " G");
 8009554:	4b36      	ldr	r3, [pc, #216]	; (8009630 <Send_GPRS_SIM800+0x45c>)
 8009556:	0018      	movs	r0, r3
 8009558:	f7f6 fdd6 	bl	8000108 <strlen>
 800955c:	0003      	movs	r3, r0
 800955e:	001a      	movs	r2, r3
 8009560:	4b33      	ldr	r3, [pc, #204]	; (8009630 <Send_GPRS_SIM800+0x45c>)
 8009562:	18d2      	adds	r2, r2, r3
 8009564:	4b44      	ldr	r3, [pc, #272]	; (8009678 <Send_GPRS_SIM800+0x4a4>)
 8009566:	0010      	movs	r0, r2
 8009568:	0019      	movs	r1, r3
 800956a:	2303      	movs	r3, #3
 800956c:	001a      	movs	r2, r3
 800956e:	f008 fd3c 	bl	8011fea <memcpy>
		strcat(buf, "</sms>\r\n");
 8009572:	4b2f      	ldr	r3, [pc, #188]	; (8009630 <Send_GPRS_SIM800+0x45c>)
 8009574:	0018      	movs	r0, r3
 8009576:	f7f6 fdc7 	bl	8000108 <strlen>
 800957a:	0003      	movs	r3, r0
 800957c:	001a      	movs	r2, r3
 800957e:	4b2c      	ldr	r3, [pc, #176]	; (8009630 <Send_GPRS_SIM800+0x45c>)
 8009580:	18d2      	adds	r2, r2, r3
 8009582:	4b3e      	ldr	r3, [pc, #248]	; (800967c <Send_GPRS_SIM800+0x4a8>)
 8009584:	0010      	movs	r0, r2
 8009586:	0019      	movs	r1, r3
 8009588:	2309      	movs	r3, #9
 800958a:	001a      	movs	r2, r3
 800958c:	f008 fd2d 	bl	8011fea <memcpy>

		HAL_UART_Transmit(&huart2, buf, strlen(buf), 0xFFFF);
 8009590:	4b27      	ldr	r3, [pc, #156]	; (8009630 <Send_GPRS_SIM800+0x45c>)
 8009592:	0018      	movs	r0, r3
 8009594:	f7f6 fdb8 	bl	8000108 <strlen>
 8009598:	0003      	movs	r3, r0
 800959a:	b29a      	uxth	r2, r3
 800959c:	4b38      	ldr	r3, [pc, #224]	; (8009680 <Send_GPRS_SIM800+0x4ac>)
 800959e:	4924      	ldr	r1, [pc, #144]	; (8009630 <Send_GPRS_SIM800+0x45c>)
 80095a0:	4838      	ldr	r0, [pc, #224]	; (8009684 <Send_GPRS_SIM800+0x4b0>)
 80095a2:	f005 ffb7 	bl	800f514 <HAL_UART_Transmit>
		osDelay(50);
 80095a6:	2032      	movs	r0, #50	; 0x32
 80095a8:	f007 fb62 	bl	8010c70 <osDelay>
		SIM800H_Clear_Buffers();
 80095ac:	f7ff fdec 	bl	8009188 <SIM800H_Clear_Buffers>

		temppoint = FALSE;
 80095b0:	2457      	movs	r4, #87	; 0x57
 80095b2:	193b      	adds	r3, r7, r4
 80095b4:	2200      	movs	r2, #0
 80095b6:	701a      	strb	r2, [r3, #0]
		if(SIM800_Wait_for_Responce(200)) {
 80095b8:	20c8      	movs	r0, #200	; 0xc8
 80095ba:	f7fe ff7b 	bl	80084b4 <SIM800_Wait_for_Responce>
 80095be:	1e03      	subs	r3, r0, #0
 80095c0:	d011      	beq.n	80095e6 <Send_GPRS_SIM800+0x412>
			U2Transfer_cplt = 0;
 80095c2:	4b31      	ldr	r3, [pc, #196]	; (8009688 <Send_GPRS_SIM800+0x4b4>)
 80095c4:	2200      	movs	r2, #0
 80095c6:	701a      	strb	r2, [r3, #0]
			if(strstr(U2Rx_Buffer, "HTTP/1.1 200") != NULL) {
 80095c8:	4a30      	ldr	r2, [pc, #192]	; (800968c <Send_GPRS_SIM800+0x4b8>)
 80095ca:	4b31      	ldr	r3, [pc, #196]	; (8009690 <Send_GPRS_SIM800+0x4bc>)
 80095cc:	0011      	movs	r1, r2
 80095ce:	0018      	movs	r0, r3
 80095d0:	f009 fb5d 	bl	8012c8e <strstr>
 80095d4:	1e03      	subs	r3, r0, #0
 80095d6:	d006      	beq.n	80095e6 <Send_GPRS_SIM800+0x412>
				temppoint = TRUE;
 80095d8:	193b      	adds	r3, r7, r4
 80095da:	2201      	movs	r2, #1
 80095dc:	701a      	strb	r2, [r3, #0]
				Result = TRUE;
 80095de:	2355      	movs	r3, #85	; 0x55
 80095e0:	18fb      	adds	r3, r7, r3
 80095e2:	2201      	movs	r2, #1
 80095e4:	701a      	strb	r2, [r3, #0]
			}
		}

		if(rtries < 2) rtries++;
 80095e6:	2256      	movs	r2, #86	; 0x56
 80095e8:	18bb      	adds	r3, r7, r2
 80095ea:	781b      	ldrb	r3, [r3, #0]
 80095ec:	2b01      	cmp	r3, #1
 80095ee:	d806      	bhi.n	80095fe <Send_GPRS_SIM800+0x42a>
 80095f0:	0011      	movs	r1, r2
 80095f2:	18bb      	adds	r3, r7, r2
 80095f4:	781a      	ldrb	r2, [r3, #0]
 80095f6:	187b      	adds	r3, r7, r1
 80095f8:	3201      	adds	r2, #1
 80095fa:	701a      	strb	r2, [r3, #0]
 80095fc:	e003      	b.n	8009606 <Send_GPRS_SIM800+0x432>
			else temppoint = TRUE;
 80095fe:	2357      	movs	r3, #87	; 0x57
 8009600:	18fb      	adds	r3, r7, r3
 8009602:	2201      	movs	r2, #1
 8009604:	701a      	strb	r2, [r3, #0]
    while(temppoint == FALSE) {
 8009606:	2357      	movs	r3, #87	; 0x57
 8009608:	18fb      	adds	r3, r7, r3
 800960a:	781b      	ldrb	r3, [r3, #0]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d100      	bne.n	8009612 <Send_GPRS_SIM800+0x43e>
 8009610:	e636      	b.n	8009280 <Send_GPRS_SIM800+0xac>
	}

    SIM800H_Disconnect_Data();
 8009612:	f7ff fbf1 	bl	8008df8 <SIM800H_Disconnect_Data>
    osDelay(500);
 8009616:	23fa      	movs	r3, #250	; 0xfa
 8009618:	005b      	lsls	r3, r3, #1
 800961a:	0018      	movs	r0, r3
 800961c:	f007 fb28 	bl	8010c70 <osDelay>

	return(Result);
 8009620:	2355      	movs	r3, #85	; 0x55
 8009622:	18fb      	adds	r3, r7, r3
 8009624:	781b      	ldrb	r3, [r3, #0]
}
 8009626:	0018      	movs	r0, r3
 8009628:	46bd      	mov	sp, r7
 800962a:	b017      	add	sp, #92	; 0x5c
 800962c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800962e:	46c0      	nop			; (mov r8, r8)
 8009630:	200018f4 	.word	0x200018f4
 8009634:	08016d74 	.word	0x08016d74
 8009638:	08016d7c 	.word	0x08016d7c
 800963c:	200018d4 	.word	0x200018d4
 8009640:	08016d98 	.word	0x08016d98
 8009644:	08016d9c 	.word	0x08016d9c
 8009648:	08016da0 	.word	0x08016da0
 800964c:	200016b8 	.word	0x200016b8
 8009650:	08016da8 	.word	0x08016da8
 8009654:	08016c60 	.word	0x08016c60
 8009658:	08016db4 	.word	0x08016db4
 800965c:	08016dbc 	.word	0x08016dbc
 8009660:	08016dc0 	.word	0x08016dc0
 8009664:	08016dd0 	.word	0x08016dd0
 8009668:	08016ddc 	.word	0x08016ddc
 800966c:	08016df0 	.word	0x08016df0
 8009670:	08016df8 	.word	0x08016df8
 8009674:	080169a8 	.word	0x080169a8
 8009678:	08016e00 	.word	0x08016e00
 800967c:	08016e04 	.word	0x08016e04
 8009680:	0000ffff 	.word	0x0000ffff
 8009684:	20000908 	.word	0x20000908
 8009688:	2000246c 	.word	0x2000246c
 800968c:	08016e10 	.word	0x08016e10
 8009690:	2000226c 	.word	0x2000226c

08009694 <SIM800H_TX>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void SIM800H_TX(char *message)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b082      	sub	sp, #8
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]

	if (HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 0xFFFF) != HAL_OK) {
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	0018      	movs	r0, r3
 80096a0:	f7f6 fd32 	bl	8000108 <strlen>
 80096a4:	0003      	movs	r3, r0
 80096a6:	b29a      	uxth	r2, r3
 80096a8:	4b06      	ldr	r3, [pc, #24]	; (80096c4 <SIM800H_TX+0x30>)
 80096aa:	6879      	ldr	r1, [r7, #4]
 80096ac:	4806      	ldr	r0, [pc, #24]	; (80096c8 <SIM800H_TX+0x34>)
 80096ae:	f005 ff31 	bl	800f514 <HAL_UART_Transmit>
 80096b2:	1e03      	subs	r3, r0, #0
 80096b4:	d001      	beq.n	80096ba <SIM800H_TX+0x26>
        Error_Handler();
 80096b6:	f7f9 ff8d 	bl	80035d4 <Error_Handler>
    }
    //while (UartReady != SET) {
        // do nothing
    //}
}
 80096ba:	46c0      	nop			; (mov r8, r8)
 80096bc:	46bd      	mov	sp, r7
 80096be:	b002      	add	sp, #8
 80096c0:	bd80      	pop	{r7, pc}
 80096c2:	46c0      	nop			; (mov r8, r8)
 80096c4:	0000ffff 	.word	0x0000ffff
 80096c8:	20000908 	.word	0x20000908

080096cc <SIM800H_RX>:


void SIM800H_RX(void)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	af00      	add	r7, sp, #0
				}
			}
		}
	}*/

	if (U2Rx_data[0]!=13)	//if received data different from ascii 13 (enter)
 80096d0:	4b11      	ldr	r3, [pc, #68]	; (8009718 <SIM800H_RX+0x4c>)
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	2b0d      	cmp	r3, #13
 80096d6:	d012      	beq.n	80096fe <SIM800H_RX+0x32>
	{
		if(U2Rx_indx > 510) {
 80096d8:	4b10      	ldr	r3, [pc, #64]	; (800971c <SIM800H_RX+0x50>)
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	23ff      	movs	r3, #255	; 0xff
 80096de:	005b      	lsls	r3, r3, #1
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d902      	bls.n	80096ea <SIM800H_RX+0x1e>
			U2Rx_indx = 0;
 80096e4:	4b0d      	ldr	r3, [pc, #52]	; (800971c <SIM800H_RX+0x50>)
 80096e6:	2200      	movs	r2, #0
 80096e8:	601a      	str	r2, [r3, #0]
		}
		U2Rx_Buffer[U2Rx_indx++] = U2Rx_data[0];	//add data to Rx_Buffer
 80096ea:	4b0c      	ldr	r3, [pc, #48]	; (800971c <SIM800H_RX+0x50>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	1c59      	adds	r1, r3, #1
 80096f0:	4a0a      	ldr	r2, [pc, #40]	; (800971c <SIM800H_RX+0x50>)
 80096f2:	6011      	str	r1, [r2, #0]
 80096f4:	4a08      	ldr	r2, [pc, #32]	; (8009718 <SIM800H_RX+0x4c>)
 80096f6:	7811      	ldrb	r1, [r2, #0]
 80096f8:	4a09      	ldr	r2, [pc, #36]	; (8009720 <SIM800H_RX+0x54>)
 80096fa:	54d1      	strb	r1, [r2, r3]
 80096fc:	e002      	b.n	8009704 <SIM800H_RX+0x38>
	}
	else			//if received data = 13
	{
		U2Transfer_cplt=1;//transfer complete, data is ready to read
 80096fe:	4b09      	ldr	r3, [pc, #36]	; (8009724 <SIM800H_RX+0x58>)
 8009700:	2201      	movs	r2, #1
 8009702:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart2, U2Rx_data, 1);	//activate UART receive interrupt every time
 8009704:	4904      	ldr	r1, [pc, #16]	; (8009718 <SIM800H_RX+0x4c>)
 8009706:	4b08      	ldr	r3, [pc, #32]	; (8009728 <SIM800H_RX+0x5c>)
 8009708:	2201      	movs	r2, #1
 800970a:	0018      	movs	r0, r3
 800970c:	f005 ffab 	bl	800f666 <HAL_UART_Receive_IT>
}
 8009710:	46c0      	nop			; (mov r8, r8)
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
 8009716:	46c0      	nop			; (mov r8, r8)
 8009718:	20002268 	.word	0x20002268
 800971c:	20002264 	.word	0x20002264
 8009720:	2000226c 	.word	0x2000226c
 8009724:	2000246c 	.word	0x2000246c
 8009728:	20000908 	.word	0x20000908

0800972c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009730:	4b07      	ldr	r3, [pc, #28]	; (8009750 <HAL_Init+0x24>)
 8009732:	681a      	ldr	r2, [r3, #0]
 8009734:	4b06      	ldr	r3, [pc, #24]	; (8009750 <HAL_Init+0x24>)
 8009736:	2110      	movs	r1, #16
 8009738:	430a      	orrs	r2, r1
 800973a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800973c:	2003      	movs	r0, #3
 800973e:	f7fa f8ab 	bl	8003898 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009742:	f7f9 ff55 	bl	80035f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009746:	2300      	movs	r3, #0
}
 8009748:	0018      	movs	r0, r3
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
 800974e:	46c0      	nop			; (mov r8, r8)
 8009750:	40022000 	.word	0x40022000

08009754 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009758:	4b05      	ldr	r3, [pc, #20]	; (8009770 <HAL_IncTick+0x1c>)
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	001a      	movs	r2, r3
 800975e:	4b05      	ldr	r3, [pc, #20]	; (8009774 <HAL_IncTick+0x20>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	18d2      	adds	r2, r2, r3
 8009764:	4b03      	ldr	r3, [pc, #12]	; (8009774 <HAL_IncTick+0x20>)
 8009766:	601a      	str	r2, [r3, #0]
}
 8009768:	46c0      	nop			; (mov r8, r8)
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
 800976e:	46c0      	nop			; (mov r8, r8)
 8009770:	2000000c 	.word	0x2000000c
 8009774:	20002474 	.word	0x20002474

08009778 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	af00      	add	r7, sp, #0
  return uwTick;
 800977c:	4b02      	ldr	r3, [pc, #8]	; (8009788 <HAL_GetTick+0x10>)
 800977e:	681b      	ldr	r3, [r3, #0]
}
 8009780:	0018      	movs	r0, r3
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
 8009786:	46c0      	nop			; (mov r8, r8)
 8009788:	20002474 	.word	0x20002474

0800978c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b084      	sub	sp, #16
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009794:	230f      	movs	r3, #15
 8009796:	18fb      	adds	r3, r7, r3
 8009798:	2200      	movs	r2, #0
 800979a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 800979c:	2300      	movs	r3, #0
 800979e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d101      	bne.n	80097aa <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80097a6:	2301      	movs	r3, #1
 80097a8:	e233      	b.n	8009c12 <HAL_ADC_Init+0x486>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4ac3      	ldr	r2, [pc, #780]	; (8009abc <HAL_ADC_Init+0x330>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d006      	beq.n	80097c2 <HAL_ADC_Init+0x36>
 80097b4:	23d1      	movs	r3, #209	; 0xd1
 80097b6:	005a      	lsls	r2, r3, #1
 80097b8:	4bc1      	ldr	r3, [pc, #772]	; (8009ac0 <HAL_ADC_Init+0x334>)
 80097ba:	0011      	movs	r1, r2
 80097bc:	0018      	movs	r0, r3
 80097be:	f7f9 ff0e 	bl	80035de <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d013      	beq.n	80097f2 <HAL_ADC_Init+0x66>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	685a      	ldr	r2, [r3, #4]
 80097ce:	2380      	movs	r3, #128	; 0x80
 80097d0:	05db      	lsls	r3, r3, #23
 80097d2:	429a      	cmp	r2, r3
 80097d4:	d00d      	beq.n	80097f2 <HAL_ADC_Init+0x66>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	685a      	ldr	r2, [r3, #4]
 80097da:	2380      	movs	r3, #128	; 0x80
 80097dc:	061b      	lsls	r3, r3, #24
 80097de:	429a      	cmp	r2, r3
 80097e0:	d007      	beq.n	80097f2 <HAL_ADC_Init+0x66>
 80097e2:	23a4      	movs	r3, #164	; 0xa4
 80097e4:	33ff      	adds	r3, #255	; 0xff
 80097e6:	001a      	movs	r2, r3
 80097e8:	4bb5      	ldr	r3, [pc, #724]	; (8009ac0 <HAL_ADC_Init+0x334>)
 80097ea:	0011      	movs	r1, r2
 80097ec:	0018      	movs	r0, r3
 80097ee:	f7f9 fef6 	bl	80035de <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	689b      	ldr	r3, [r3, #8]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d012      	beq.n	8009820 <HAL_ADC_Init+0x94>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	689b      	ldr	r3, [r3, #8]
 80097fe:	2b08      	cmp	r3, #8
 8009800:	d00e      	beq.n	8009820 <HAL_ADC_Init+0x94>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	689b      	ldr	r3, [r3, #8]
 8009806:	2b10      	cmp	r3, #16
 8009808:	d00a      	beq.n	8009820 <HAL_ADC_Init+0x94>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	689b      	ldr	r3, [r3, #8]
 800980e:	2b18      	cmp	r3, #24
 8009810:	d006      	beq.n	8009820 <HAL_ADC_Init+0x94>
 8009812:	23d2      	movs	r3, #210	; 0xd2
 8009814:	005a      	lsls	r2, r3, #1
 8009816:	4baa      	ldr	r3, [pc, #680]	; (8009ac0 <HAL_ADC_Init+0x334>)
 8009818:	0011      	movs	r1, r2
 800981a:	0018      	movs	r0, r3
 800981c:	f7f9 fedf 	bl	80035de <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign)); 
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	68db      	ldr	r3, [r3, #12]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d00b      	beq.n	8009840 <HAL_ADC_Init+0xb4>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	68db      	ldr	r3, [r3, #12]
 800982c:	2b20      	cmp	r3, #32
 800982e:	d007      	beq.n	8009840 <HAL_ADC_Init+0xb4>
 8009830:	23a6      	movs	r3, #166	; 0xa6
 8009832:	33ff      	adds	r3, #255	; 0xff
 8009834:	001a      	movs	r2, r3
 8009836:	4ba2      	ldr	r3, [pc, #648]	; (8009ac0 <HAL_ADC_Init+0x334>)
 8009838:	0011      	movs	r1, r2
 800983a:	0018      	movs	r0, r3
 800983c:	f7f9 fecf 	bl	80035de <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	691b      	ldr	r3, [r3, #16]
 8009844:	2b01      	cmp	r3, #1
 8009846:	d00a      	beq.n	800985e <HAL_ADC_Init+0xd2>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	691b      	ldr	r3, [r3, #16]
 800984c:	2b02      	cmp	r3, #2
 800984e:	d006      	beq.n	800985e <HAL_ADC_Init+0xd2>
 8009850:	23d3      	movs	r3, #211	; 0xd3
 8009852:	005a      	lsls	r2, r3, #1
 8009854:	4b9a      	ldr	r3, [pc, #616]	; (8009ac0 <HAL_ADC_Init+0x334>)
 8009856:	0011      	movs	r1, r2
 8009858:	0018      	movs	r0, r3
 800985a:	f7f9 fec0 	bl	80035de <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	7e9b      	ldrb	r3, [r3, #26]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d00b      	beq.n	800987e <HAL_ADC_Init+0xf2>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	7e9b      	ldrb	r3, [r3, #26]
 800986a:	2b01      	cmp	r3, #1
 800986c:	d007      	beq.n	800987e <HAL_ADC_Init+0xf2>
 800986e:	23a8      	movs	r3, #168	; 0xa8
 8009870:	33ff      	adds	r3, #255	; 0xff
 8009872:	001a      	movs	r2, r3
 8009874:	4b92      	ldr	r3, [pc, #584]	; (8009ac0 <HAL_ADC_Init+0x334>)
 8009876:	0011      	movs	r1, r2
 8009878:	0018      	movs	r0, r3
 800987a:	f7f9 feb0 	bl	80035de <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	7edb      	ldrb	r3, [r3, #27]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d00a      	beq.n	800989c <HAL_ADC_Init+0x110>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	7edb      	ldrb	r3, [r3, #27]
 800988a:	2b01      	cmp	r3, #1
 800988c:	d006      	beq.n	800989c <HAL_ADC_Init+0x110>
 800988e:	23d4      	movs	r3, #212	; 0xd4
 8009890:	005a      	lsls	r2, r3, #1
 8009892:	4b8b      	ldr	r3, [pc, #556]	; (8009ac0 <HAL_ADC_Init+0x334>)
 8009894:	0011      	movs	r1, r2
 8009896:	0018      	movs	r0, r3
 8009898:	f7f9 fea1 	bl	80035de <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));   
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6a1b      	ldr	r3, [r3, #32]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d019      	beq.n	80098d8 <HAL_ADC_Init+0x14c>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6a1a      	ldr	r2, [r3, #32]
 80098a8:	2380      	movs	r3, #128	; 0x80
 80098aa:	00db      	lsls	r3, r3, #3
 80098ac:	429a      	cmp	r2, r3
 80098ae:	d013      	beq.n	80098d8 <HAL_ADC_Init+0x14c>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6a1a      	ldr	r2, [r3, #32]
 80098b4:	2380      	movs	r3, #128	; 0x80
 80098b6:	011b      	lsls	r3, r3, #4
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d00d      	beq.n	80098d8 <HAL_ADC_Init+0x14c>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6a1a      	ldr	r2, [r3, #32]
 80098c0:	23c0      	movs	r3, #192	; 0xc0
 80098c2:	011b      	lsls	r3, r3, #4
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d007      	beq.n	80098d8 <HAL_ADC_Init+0x14c>
 80098c8:	23aa      	movs	r3, #170	; 0xaa
 80098ca:	33ff      	adds	r3, #255	; 0xff
 80098cc:	001a      	movs	r2, r3
 80098ce:	4b7c      	ldr	r3, [pc, #496]	; (8009ac0 <HAL_ADC_Init+0x334>)
 80098d0:	0011      	movs	r1, r2
 80098d2:	0018      	movs	r0, r3
 80098d4:	f7f9 fe83 	bl	80035de <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));   
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	69db      	ldr	r3, [r3, #28]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d01a      	beq.n	8009916 <HAL_ADC_Init+0x18a>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	69db      	ldr	r3, [r3, #28]
 80098e4:	2b40      	cmp	r3, #64	; 0x40
 80098e6:	d016      	beq.n	8009916 <HAL_ADC_Init+0x18a>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	69db      	ldr	r3, [r3, #28]
 80098ec:	2bc0      	cmp	r3, #192	; 0xc0
 80098ee:	d012      	beq.n	8009916 <HAL_ADC_Init+0x18a>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	69da      	ldr	r2, [r3, #28]
 80098f4:	2380      	movs	r3, #128	; 0x80
 80098f6:	005b      	lsls	r3, r3, #1
 80098f8:	429a      	cmp	r2, r3
 80098fa:	d00c      	beq.n	8009916 <HAL_ADC_Init+0x18a>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	69da      	ldr	r2, [r3, #28]
 8009900:	23c2      	movs	r3, #194	; 0xc2
 8009902:	33ff      	adds	r3, #255	; 0xff
 8009904:	429a      	cmp	r2, r3
 8009906:	d006      	beq.n	8009916 <HAL_ADC_Init+0x18a>
 8009908:	23d5      	movs	r3, #213	; 0xd5
 800990a:	005a      	lsls	r2, r3, #1
 800990c:	4b6c      	ldr	r3, [pc, #432]	; (8009ac0 <HAL_ADC_Init+0x334>)
 800990e:	0011      	movs	r1, r2
 8009910:	0018      	movs	r0, r3
 8009912:	f7f9 fe64 	bl	80035de <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2224      	movs	r2, #36	; 0x24
 800991a:	5c9b      	ldrb	r3, [r3, r2]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d00c      	beq.n	800993a <HAL_ADC_Init+0x1ae>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2224      	movs	r2, #36	; 0x24
 8009924:	5c9b      	ldrb	r3, [r3, r2]
 8009926:	2b01      	cmp	r3, #1
 8009928:	d007      	beq.n	800993a <HAL_ADC_Init+0x1ae>
 800992a:	23ac      	movs	r3, #172	; 0xac
 800992c:	33ff      	adds	r3, #255	; 0xff
 800992e:	001a      	movs	r2, r3
 8009930:	4b63      	ldr	r3, [pc, #396]	; (8009ac0 <HAL_ADC_Init+0x334>)
 8009932:	0011      	movs	r1, r2
 8009934:	0018      	movs	r0, r3
 8009936:	f7f9 fe52 	bl	80035de <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	695b      	ldr	r3, [r3, #20]
 800993e:	2b04      	cmp	r3, #4
 8009940:	d00a      	beq.n	8009958 <HAL_ADC_Init+0x1cc>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	695b      	ldr	r3, [r3, #20]
 8009946:	2b08      	cmp	r3, #8
 8009948:	d006      	beq.n	8009958 <HAL_ADC_Init+0x1cc>
 800994a:	23d6      	movs	r3, #214	; 0xd6
 800994c:	005a      	lsls	r2, r3, #1
 800994e:	4b5c      	ldr	r3, [pc, #368]	; (8009ac0 <HAL_ADC_Init+0x334>)
 8009950:	0011      	movs	r1, r2
 8009952:	0018      	movs	r0, r3
 8009954:	f7f9 fe43 	bl	80035de <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800995c:	2b01      	cmp	r3, #1
 800995e:	d00b      	beq.n	8009978 <HAL_ADC_Init+0x1ec>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009964:	2b00      	cmp	r3, #0
 8009966:	d007      	beq.n	8009978 <HAL_ADC_Init+0x1ec>
 8009968:	23ae      	movs	r3, #174	; 0xae
 800996a:	33ff      	adds	r3, #255	; 0xff
 800996c:	001a      	movs	r2, r3
 800996e:	4b54      	ldr	r3, [pc, #336]	; (8009ac0 <HAL_ADC_Init+0x334>)
 8009970:	0011      	movs	r1, r2
 8009972:	0018      	movs	r0, r3
 8009974:	f7f9 fe33 	bl	80035de <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	7e1b      	ldrb	r3, [r3, #24]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d00a      	beq.n	8009996 <HAL_ADC_Init+0x20a>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	7e1b      	ldrb	r3, [r3, #24]
 8009984:	2b01      	cmp	r3, #1
 8009986:	d006      	beq.n	8009996 <HAL_ADC_Init+0x20a>
 8009988:	23d7      	movs	r3, #215	; 0xd7
 800998a:	005a      	lsls	r2, r3, #1
 800998c:	4b4c      	ldr	r3, [pc, #304]	; (8009ac0 <HAL_ADC_Init+0x334>)
 800998e:	0011      	movs	r1, r2
 8009990:	0018      	movs	r0, r3
 8009992:	f7f9 fe24 	bl	80035de <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoPowerOff));
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	7e5b      	ldrb	r3, [r3, #25]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d00b      	beq.n	80099b6 <HAL_ADC_Init+0x22a>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	7e5b      	ldrb	r3, [r3, #25]
 80099a2:	2b01      	cmp	r3, #1
 80099a4:	d007      	beq.n	80099b6 <HAL_ADC_Init+0x22a>
 80099a6:	23b0      	movs	r3, #176	; 0xb0
 80099a8:	33ff      	adds	r3, #255	; 0xff
 80099aa:	001a      	movs	r2, r3
 80099ac:	4b44      	ldr	r3, [pc, #272]	; (8009ac0 <HAL_ADC_Init+0x334>)
 80099ae:	0011      	movs	r1, r2
 80099b0:	0018      	movs	r0, r3
 80099b2:	f7f9 fe14 	bl	80035de <assert_failed>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d10a      	bne.n	80099d4 <HAL_ADC_Init+0x248>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2200      	movs	r2, #0
 80099c2:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2234      	movs	r2, #52	; 0x34
 80099c8:	2100      	movs	r1, #0
 80099ca:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	0018      	movs	r0, r3
 80099d0:	f7f9 fe38 	bl	8003644 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099d8:	2210      	movs	r2, #16
 80099da:	4013      	ands	r3, r2
 80099dc:	d000      	beq.n	80099e0 <HAL_ADC_Init+0x254>
 80099de:	e10b      	b.n	8009bf8 <HAL_ADC_Init+0x46c>
 80099e0:	230f      	movs	r3, #15
 80099e2:	18fb      	adds	r3, r7, r3
 80099e4:	781b      	ldrb	r3, [r3, #0]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d000      	beq.n	80099ec <HAL_ADC_Init+0x260>
 80099ea:	e105      	b.n	8009bf8 <HAL_ADC_Init+0x46c>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	689b      	ldr	r3, [r3, #8]
 80099f2:	2204      	movs	r2, #4
 80099f4:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80099f6:	d000      	beq.n	80099fa <HAL_ADC_Init+0x26e>
 80099f8:	e0fe      	b.n	8009bf8 <HAL_ADC_Init+0x46c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099fe:	4a31      	ldr	r2, [pc, #196]	; (8009ac4 <HAL_ADC_Init+0x338>)
 8009a00:	4013      	ands	r3, r2
 8009a02:	2202      	movs	r2, #2
 8009a04:	431a      	orrs	r2, r3
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	689b      	ldr	r3, [r3, #8]
 8009a10:	2203      	movs	r2, #3
 8009a12:	4013      	ands	r3, r2
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d112      	bne.n	8009a3e <HAL_ADC_Init+0x2b2>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	2201      	movs	r2, #1
 8009a20:	4013      	ands	r3, r2
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	d009      	beq.n	8009a3a <HAL_ADC_Init+0x2ae>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	68da      	ldr	r2, [r3, #12]
 8009a2c:	2380      	movs	r3, #128	; 0x80
 8009a2e:	021b      	lsls	r3, r3, #8
 8009a30:	401a      	ands	r2, r3
 8009a32:	2380      	movs	r3, #128	; 0x80
 8009a34:	021b      	lsls	r3, r3, #8
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d101      	bne.n	8009a3e <HAL_ADC_Init+0x2b2>
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	e000      	b.n	8009a40 <HAL_ADC_Init+0x2b4>
 8009a3e:	2300      	movs	r3, #0
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d116      	bne.n	8009a72 <HAL_ADC_Init+0x2e6>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	68db      	ldr	r3, [r3, #12]
 8009a4a:	2218      	movs	r2, #24
 8009a4c:	4393      	bics	r3, r2
 8009a4e:	0019      	movs	r1, r3
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	689a      	ldr	r2, [r3, #8]
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	430a      	orrs	r2, r1
 8009a5a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	691b      	ldr	r3, [r3, #16]
 8009a62:	009b      	lsls	r3, r3, #2
 8009a64:	0899      	lsrs	r1, r3, #2
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	685a      	ldr	r2, [r3, #4]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	430a      	orrs	r2, r1
 8009a70:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	68da      	ldr	r2, [r3, #12]
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4912      	ldr	r1, [pc, #72]	; (8009ac8 <HAL_ADC_Init+0x33c>)
 8009a7e:	400a      	ands	r2, r1
 8009a80:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	7e1b      	ldrb	r3, [r3, #24]
 8009a86:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	7e5b      	ldrb	r3, [r3, #25]
 8009a8c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8009a8e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	7e9b      	ldrb	r3, [r3, #26]
 8009a94:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8009a96:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	d002      	beq.n	8009aa6 <HAL_ADC_Init+0x31a>
 8009aa0:	2380      	movs	r3, #128	; 0x80
 8009aa2:	015b      	lsls	r3, r3, #5
 8009aa4:	e000      	b.n	8009aa8 <HAL_ADC_Init+0x31c>
 8009aa6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8009aa8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8009aae:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	691b      	ldr	r3, [r3, #16]
 8009ab4:	2b02      	cmp	r3, #2
 8009ab6:	d109      	bne.n	8009acc <HAL_ADC_Init+0x340>
 8009ab8:	2304      	movs	r3, #4
 8009aba:	e008      	b.n	8009ace <HAL_ADC_Init+0x342>
 8009abc:	40012400 	.word	0x40012400
 8009ac0:	08016e20 	.word	0x08016e20
 8009ac4:	fffffefd 	.word	0xfffffefd
 8009ac8:	fffe0219 	.word	0xfffe0219
 8009acc:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8009ace:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2124      	movs	r1, #36	; 0x24
 8009ad4:	5c5b      	ldrb	r3, [r3, r1]
 8009ad6:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8009ad8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8009ada:	68ba      	ldr	r2, [r7, #8]
 8009adc:	4313      	orrs	r3, r2
 8009ade:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	7edb      	ldrb	r3, [r3, #27]
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d115      	bne.n	8009b14 <HAL_ADC_Init+0x388>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	7e9b      	ldrb	r3, [r3, #26]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d105      	bne.n	8009afc <HAL_ADC_Init+0x370>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	2280      	movs	r2, #128	; 0x80
 8009af4:	0252      	lsls	r2, r2, #9
 8009af6:	4313      	orrs	r3, r2
 8009af8:	60bb      	str	r3, [r7, #8]
 8009afa:	e00b      	b.n	8009b14 <HAL_ADC_Init+0x388>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b00:	2220      	movs	r2, #32
 8009b02:	431a      	orrs	r2, r3
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	431a      	orrs	r2, r3
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	69da      	ldr	r2, [r3, #28]
 8009b18:	23c2      	movs	r3, #194	; 0xc2
 8009b1a:	33ff      	adds	r3, #255	; 0xff
 8009b1c:	429a      	cmp	r2, r3
 8009b1e:	d007      	beq.n	8009b30 <HAL_ADC_Init+0x3a4>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	68ba      	ldr	r2, [r7, #8]
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	68d9      	ldr	r1, [r3, #12]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	68ba      	ldr	r2, [r7, #8]
 8009b3c:	430a      	orrs	r2, r1
 8009b3e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b44:	2380      	movs	r3, #128	; 0x80
 8009b46:	055b      	lsls	r3, r3, #21
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d01b      	beq.n	8009b84 <HAL_ADC_Init+0x3f8>
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	d017      	beq.n	8009b84 <HAL_ADC_Init+0x3f8>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b58:	2b02      	cmp	r3, #2
 8009b5a:	d013      	beq.n	8009b84 <HAL_ADC_Init+0x3f8>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b60:	2b03      	cmp	r3, #3
 8009b62:	d00f      	beq.n	8009b84 <HAL_ADC_Init+0x3f8>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b68:	2b04      	cmp	r3, #4
 8009b6a:	d00b      	beq.n	8009b84 <HAL_ADC_Init+0x3f8>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b70:	2b05      	cmp	r3, #5
 8009b72:	d007      	beq.n	8009b84 <HAL_ADC_Init+0x3f8>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b78:	2b06      	cmp	r3, #6
 8009b7a:	d003      	beq.n	8009b84 <HAL_ADC_Init+0x3f8>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b80:	2b07      	cmp	r3, #7
 8009b82:	d112      	bne.n	8009baa <HAL_ADC_Init+0x41e>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	695a      	ldr	r2, [r3, #20]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	2107      	movs	r1, #7
 8009b90:	438a      	bics	r2, r1
 8009b92:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	6959      	ldr	r1, [r3, #20]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b9e:	2207      	movs	r2, #7
 8009ba0:	401a      	ands	r2, r3
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	430a      	orrs	r2, r1
 8009ba8:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	68db      	ldr	r3, [r3, #12]
 8009bb0:	4a1a      	ldr	r2, [pc, #104]	; (8009c1c <HAL_ADC_Init+0x490>)
 8009bb2:	4013      	ands	r3, r2
 8009bb4:	68ba      	ldr	r2, [r7, #8]
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	d10b      	bne.n	8009bd2 <HAL_ADC_Init+0x446>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bc4:	2203      	movs	r2, #3
 8009bc6:	4393      	bics	r3, r2
 8009bc8:	2201      	movs	r2, #1
 8009bca:	431a      	orrs	r2, r3
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8009bd0:	e01c      	b.n	8009c0c <HAL_ADC_Init+0x480>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bd6:	2212      	movs	r2, #18
 8009bd8:	4393      	bics	r3, r2
 8009bda:	2210      	movs	r2, #16
 8009bdc:	431a      	orrs	r2, r3
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009be6:	2201      	movs	r2, #1
 8009be8:	431a      	orrs	r2, r3
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8009bee:	230f      	movs	r3, #15
 8009bf0:	18fb      	adds	r3, r7, r3
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8009bf6:	e009      	b.n	8009c0c <HAL_ADC_Init+0x480>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bfc:	2210      	movs	r2, #16
 8009bfe:	431a      	orrs	r2, r3
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8009c04:	230f      	movs	r3, #15
 8009c06:	18fb      	adds	r3, r7, r3
 8009c08:	2201      	movs	r2, #1
 8009c0a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8009c0c:	230f      	movs	r3, #15
 8009c0e:	18fb      	adds	r3, r7, r3
 8009c10:	781b      	ldrb	r3, [r3, #0]
}
 8009c12:	0018      	movs	r0, r3
 8009c14:	46bd      	mov	sp, r7
 8009c16:	b004      	add	sp, #16
 8009c18:	bd80      	pop	{r7, pc}
 8009c1a:	46c0      	nop			; (mov r8, r8)
 8009c1c:	833fffe7 	.word	0x833fffe7

08009c20 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8009c20:	b590      	push	{r4, r7, lr}
 8009c22:	b085      	sub	sp, #20
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009c28:	230f      	movs	r3, #15
 8009c2a:	18fb      	adds	r3, r7, r3
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4a29      	ldr	r2, [pc, #164]	; (8009cdc <HAL_ADC_Start+0xbc>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d006      	beq.n	8009c48 <HAL_ADC_Start+0x28>
 8009c3a:	2381      	movs	r3, #129	; 0x81
 8009c3c:	00da      	lsls	r2, r3, #3
 8009c3e:	4b28      	ldr	r3, [pc, #160]	; (8009ce0 <HAL_ADC_Start+0xc0>)
 8009c40:	0011      	movs	r1, r2
 8009c42:	0018      	movs	r0, r3
 8009c44:	f7f9 fccb 	bl	80035de <assert_failed>

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	689b      	ldr	r3, [r3, #8]
 8009c4e:	2204      	movs	r2, #4
 8009c50:	4013      	ands	r3, r2
 8009c52:	d138      	bne.n	8009cc6 <HAL_ADC_Start+0xa6>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2234      	movs	r2, #52	; 0x34
 8009c58:	5c9b      	ldrb	r3, [r3, r2]
 8009c5a:	2b01      	cmp	r3, #1
 8009c5c:	d101      	bne.n	8009c62 <HAL_ADC_Start+0x42>
 8009c5e:	2302      	movs	r3, #2
 8009c60:	e038      	b.n	8009cd4 <HAL_ADC_Start+0xb4>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2234      	movs	r2, #52	; 0x34
 8009c66:	2101      	movs	r1, #1
 8009c68:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	7e5b      	ldrb	r3, [r3, #25]
 8009c6e:	2b01      	cmp	r3, #1
 8009c70:	d007      	beq.n	8009c82 <HAL_ADC_Start+0x62>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8009c72:	230f      	movs	r3, #15
 8009c74:	18fc      	adds	r4, r7, r3
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	0018      	movs	r0, r3
 8009c7a:	f000 fbe7 	bl	800a44c <ADC_Enable>
 8009c7e:	0003      	movs	r3, r0
 8009c80:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8009c82:	230f      	movs	r3, #15
 8009c84:	18fb      	adds	r3, r7, r3
 8009c86:	781b      	ldrb	r3, [r3, #0]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d120      	bne.n	8009cce <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c90:	4a14      	ldr	r2, [pc, #80]	; (8009ce4 <HAL_ADC_Start+0xc4>)
 8009c92:	4013      	ands	r3, r2
 8009c94:	2280      	movs	r2, #128	; 0x80
 8009c96:	0052      	lsls	r2, r2, #1
 8009c98:	431a      	orrs	r2, r3
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2234      	movs	r2, #52	; 0x34
 8009ca8:	2100      	movs	r1, #0
 8009caa:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	221c      	movs	r2, #28
 8009cb2:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	689a      	ldr	r2, [r3, #8]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	2104      	movs	r1, #4
 8009cc0:	430a      	orrs	r2, r1
 8009cc2:	609a      	str	r2, [r3, #8]
 8009cc4:	e003      	b.n	8009cce <HAL_ADC_Start+0xae>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8009cc6:	230f      	movs	r3, #15
 8009cc8:	18fb      	adds	r3, r7, r3
 8009cca:	2202      	movs	r2, #2
 8009ccc:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8009cce:	230f      	movs	r3, #15
 8009cd0:	18fb      	adds	r3, r7, r3
 8009cd2:	781b      	ldrb	r3, [r3, #0]
}
 8009cd4:	0018      	movs	r0, r3
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	b005      	add	sp, #20
 8009cda:	bd90      	pop	{r4, r7, pc}
 8009cdc:	40012400 	.word	0x40012400
 8009ce0:	08016e20 	.word	0x08016e20
 8009ce4:	fffff0fe 	.word	0xfffff0fe

08009ce8 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 8009ce8:	b5b0      	push	{r4, r5, r7, lr}
 8009cea:	b084      	sub	sp, #16
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009cf0:	230f      	movs	r3, #15
 8009cf2:	18fb      	adds	r3, r7, r3
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a1e      	ldr	r2, [pc, #120]	; (8009d78 <HAL_ADC_Stop+0x90>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d005      	beq.n	8009d0e <HAL_ADC_Stop+0x26>
 8009d02:	4a1e      	ldr	r2, [pc, #120]	; (8009d7c <HAL_ADC_Stop+0x94>)
 8009d04:	4b1e      	ldr	r3, [pc, #120]	; (8009d80 <HAL_ADC_Stop+0x98>)
 8009d06:	0011      	movs	r1, r2
 8009d08:	0018      	movs	r0, r3
 8009d0a:	f7f9 fc68 	bl	80035de <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2234      	movs	r2, #52	; 0x34
 8009d12:	5c9b      	ldrb	r3, [r3, r2]
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	d101      	bne.n	8009d1c <HAL_ADC_Stop+0x34>
 8009d18:	2302      	movs	r3, #2
 8009d1a:	e029      	b.n	8009d70 <HAL_ADC_Stop+0x88>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2234      	movs	r2, #52	; 0x34
 8009d20:	2101      	movs	r1, #1
 8009d22:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8009d24:	250f      	movs	r5, #15
 8009d26:	197c      	adds	r4, r7, r5
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	0018      	movs	r0, r3
 8009d2c:	f000 fc84 	bl	800a638 <ADC_ConversionStop>
 8009d30:	0003      	movs	r3, r0
 8009d32:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8009d34:	197b      	adds	r3, r7, r5
 8009d36:	781b      	ldrb	r3, [r3, #0]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d112      	bne.n	8009d62 <HAL_ADC_Stop+0x7a>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8009d3c:	197c      	adds	r4, r7, r5
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	0018      	movs	r0, r3
 8009d42:	f000 fc07 	bl	800a554 <ADC_Disable>
 8009d46:	0003      	movs	r3, r0
 8009d48:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8009d4a:	197b      	adds	r3, r7, r5
 8009d4c:	781b      	ldrb	r3, [r3, #0]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d107      	bne.n	8009d62 <HAL_ADC_Stop+0x7a>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d56:	4a0b      	ldr	r2, [pc, #44]	; (8009d84 <HAL_ADC_Stop+0x9c>)
 8009d58:	4013      	ands	r3, r2
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	431a      	orrs	r2, r3
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2234      	movs	r2, #52	; 0x34
 8009d66:	2100      	movs	r1, #0
 8009d68:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8009d6a:	230f      	movs	r3, #15
 8009d6c:	18fb      	adds	r3, r7, r3
 8009d6e:	781b      	ldrb	r3, [r3, #0]
}
 8009d70:	0018      	movs	r0, r3
 8009d72:	46bd      	mov	sp, r7
 8009d74:	b004      	add	sp, #16
 8009d76:	bdb0      	pop	{r4, r5, r7, pc}
 8009d78:	40012400 	.word	0x40012400
 8009d7c:	00000449 	.word	0x00000449
 8009d80:	08016e20 	.word	0x08016e20
 8009d84:	fffffefe 	.word	0xfffffefe

08009d88 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4a4d      	ldr	r2, [pc, #308]	; (8009ecc <HAL_ADC_PollForConversion+0x144>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d006      	beq.n	8009daa <HAL_ADC_PollForConversion+0x22>
 8009d9c:	2390      	movs	r3, #144	; 0x90
 8009d9e:	00da      	lsls	r2, r3, #3
 8009da0:	4b4b      	ldr	r3, [pc, #300]	; (8009ed0 <HAL_ADC_PollForConversion+0x148>)
 8009da2:	0011      	movs	r1, r2
 8009da4:	0018      	movs	r0, r3
 8009da6:	f7f9 fc1a 	bl	80035de <assert_failed>

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	695b      	ldr	r3, [r3, #20]
 8009dae:	2b08      	cmp	r3, #8
 8009db0:	d102      	bne.n	8009db8 <HAL_ADC_PollForConversion+0x30>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8009db2:	2308      	movs	r3, #8
 8009db4:	60fb      	str	r3, [r7, #12]
 8009db6:	e014      	b.n	8009de2 <HAL_ADC_PollForConversion+0x5a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	68db      	ldr	r3, [r3, #12]
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	4013      	ands	r3, r2
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	d10b      	bne.n	8009dde <HAL_ADC_PollForConversion+0x56>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dca:	2220      	movs	r2, #32
 8009dcc:	431a      	orrs	r2, r3
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2234      	movs	r2, #52	; 0x34
 8009dd6:	2100      	movs	r1, #0
 8009dd8:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	e071      	b.n	8009ec2 <HAL_ADC_PollForConversion+0x13a>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8009dde:	230c      	movs	r3, #12
 8009de0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8009de2:	f7ff fcc9 	bl	8009778 <HAL_GetTick>
 8009de6:	0003      	movs	r3, r0
 8009de8:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8009dea:	e01f      	b.n	8009e2c <HAL_ADC_PollForConversion+0xa4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	3301      	adds	r3, #1
 8009df0:	d01c      	beq.n	8009e2c <HAL_ADC_PollForConversion+0xa4>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d007      	beq.n	8009e08 <HAL_ADC_PollForConversion+0x80>
 8009df8:	f7ff fcbe 	bl	8009778 <HAL_GetTick>
 8009dfc:	0002      	movs	r2, r0
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	1ad3      	subs	r3, r2, r3
 8009e02:	683a      	ldr	r2, [r7, #0]
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d211      	bcs.n	8009e2c <HAL_ADC_PollForConversion+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	68fa      	ldr	r2, [r7, #12]
 8009e10:	4013      	ands	r3, r2
 8009e12:	d10b      	bne.n	8009e2c <HAL_ADC_PollForConversion+0xa4>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e18:	2204      	movs	r2, #4
 8009e1a:	431a      	orrs	r2, r3
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2234      	movs	r2, #52	; 0x34
 8009e24:	2100      	movs	r1, #0
 8009e26:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8009e28:	2303      	movs	r3, #3
 8009e2a:	e04a      	b.n	8009ec2 <HAL_ADC_PollForConversion+0x13a>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	68fa      	ldr	r2, [r7, #12]
 8009e34:	4013      	ands	r3, r2
 8009e36:	d0d9      	beq.n	8009dec <HAL_ADC_PollForConversion+0x64>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e3c:	2280      	movs	r2, #128	; 0x80
 8009e3e:	0092      	lsls	r2, r2, #2
 8009e40:	431a      	orrs	r2, r3
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	68da      	ldr	r2, [r3, #12]
 8009e4c:	23c0      	movs	r3, #192	; 0xc0
 8009e4e:	011b      	lsls	r3, r3, #4
 8009e50:	4013      	ands	r3, r2
 8009e52:	d12d      	bne.n	8009eb0 <HAL_ADC_PollForConversion+0x128>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d129      	bne.n	8009eb0 <HAL_ADC_PollForConversion+0x128>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	2208      	movs	r2, #8
 8009e64:	4013      	ands	r3, r2
 8009e66:	2b08      	cmp	r3, #8
 8009e68:	d122      	bne.n	8009eb0 <HAL_ADC_PollForConversion+0x128>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	689b      	ldr	r3, [r3, #8]
 8009e70:	2204      	movs	r2, #4
 8009e72:	4013      	ands	r3, r2
 8009e74:	d110      	bne.n	8009e98 <HAL_ADC_PollForConversion+0x110>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	685a      	ldr	r2, [r3, #4]
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	210c      	movs	r1, #12
 8009e82:	438a      	bics	r2, r1
 8009e84:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e8a:	4a12      	ldr	r2, [pc, #72]	; (8009ed4 <HAL_ADC_PollForConversion+0x14c>)
 8009e8c:	4013      	ands	r3, r2
 8009e8e:	2201      	movs	r2, #1
 8009e90:	431a      	orrs	r2, r3
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	639a      	str	r2, [r3, #56]	; 0x38
 8009e96:	e00b      	b.n	8009eb0 <HAL_ADC_PollForConversion+0x128>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e9c:	2220      	movs	r2, #32
 8009e9e:	431a      	orrs	r2, r3
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	431a      	orrs	r2, r3
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	7e1b      	ldrb	r3, [r3, #24]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d103      	bne.n	8009ec0 <HAL_ADC_PollForConversion+0x138>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	220c      	movs	r2, #12
 8009ebe:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8009ec0:	2300      	movs	r3, #0
}
 8009ec2:	0018      	movs	r0, r3
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	b004      	add	sp, #16
 8009ec8:	bd80      	pop	{r7, pc}
 8009eca:	46c0      	nop			; (mov r8, r8)
 8009ecc:	40012400 	.word	0x40012400
 8009ed0:	08016e20 	.word	0x08016e20
 8009ed4:	fffffefe 	.word	0xfffffefe

08009ed8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b082      	sub	sp, #8
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	4a07      	ldr	r2, [pc, #28]	; (8009f04 <HAL_ADC_GetValue+0x2c>)
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d005      	beq.n	8009ef6 <HAL_ADC_GetValue+0x1e>
 8009eea:	4a07      	ldr	r2, [pc, #28]	; (8009f08 <HAL_ADC_GetValue+0x30>)
 8009eec:	4b07      	ldr	r3, [pc, #28]	; (8009f0c <HAL_ADC_GetValue+0x34>)
 8009eee:	0011      	movs	r1, r2
 8009ef0:	0018      	movs	r0, r3
 8009ef2:	f7f9 fb74 	bl	80035de <assert_failed>

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8009efc:	0018      	movs	r0, r3
 8009efe:	46bd      	mov	sp, r7
 8009f00:	b002      	add	sp, #8
 8009f02:	bd80      	pop	{r7, pc}
 8009f04:	40012400 	.word	0x40012400
 8009f08:	0000067d 	.word	0x0000067d
 8009f0c:	08016e20 	.word	0x08016e20

08009f10 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b082      	sub	sp, #8
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4a6b      	ldr	r2, [pc, #428]	; (800a0cc <HAL_ADC_IRQHandler+0x1bc>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d005      	beq.n	8009f2e <HAL_ADC_IRQHandler+0x1e>
 8009f22:	4a6b      	ldr	r2, [pc, #428]	; (800a0d0 <HAL_ADC_IRQHandler+0x1c0>)
 8009f24:	4b6b      	ldr	r3, [pc, #428]	; (800a0d4 <HAL_ADC_IRQHandler+0x1c4>)
 8009f26:	0011      	movs	r1, r2
 8009f28:	0018      	movs	r0, r3
 8009f2a:	f7f9 fb58 	bl	80035de <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	7e9b      	ldrb	r3, [r3, #26]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d009      	beq.n	8009f4a <HAL_ADC_IRQHandler+0x3a>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	7e9b      	ldrb	r3, [r3, #26]
 8009f3a:	2b01      	cmp	r3, #1
 8009f3c:	d005      	beq.n	8009f4a <HAL_ADC_IRQHandler+0x3a>
 8009f3e:	4a66      	ldr	r2, [pc, #408]	; (800a0d8 <HAL_ADC_IRQHandler+0x1c8>)
 8009f40:	4b64      	ldr	r3, [pc, #400]	; (800a0d4 <HAL_ADC_IRQHandler+0x1c4>)
 8009f42:	0011      	movs	r1, r2
 8009f44:	0018      	movs	r0, r3
 8009f46:	f7f9 fb4a 	bl	80035de <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	695b      	ldr	r3, [r3, #20]
 8009f4e:	2b04      	cmp	r3, #4
 8009f50:	d00a      	beq.n	8009f68 <HAL_ADC_IRQHandler+0x58>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	695b      	ldr	r3, [r3, #20]
 8009f56:	2b08      	cmp	r3, #8
 8009f58:	d006      	beq.n	8009f68 <HAL_ADC_IRQHandler+0x58>
 8009f5a:	23d2      	movs	r3, #210	; 0xd2
 8009f5c:	00da      	lsls	r2, r3, #3
 8009f5e:	4b5d      	ldr	r3, [pc, #372]	; (800a0d4 <HAL_ADC_IRQHandler+0x1c4>)
 8009f60:	0011      	movs	r1, r2
 8009f62:	0018      	movs	r0, r3
 8009f64:	f7f9 fb3b 	bl	80035de <assert_failed>
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	2204      	movs	r2, #4
 8009f70:	4013      	ands	r3, r2
 8009f72:	2b04      	cmp	r3, #4
 8009f74:	d106      	bne.n	8009f84 <HAL_ADC_IRQHandler+0x74>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	685b      	ldr	r3, [r3, #4]
 8009f7c:	2204      	movs	r2, #4
 8009f7e:	4013      	ands	r3, r2
 8009f80:	2b04      	cmp	r3, #4
 8009f82:	d00d      	beq.n	8009fa0 <HAL_ADC_IRQHandler+0x90>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	2208      	movs	r2, #8
 8009f8c:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8009f8e:	2b08      	cmp	r3, #8
 8009f90:	d14f      	bne.n	800a032 <HAL_ADC_IRQHandler+0x122>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	2208      	movs	r2, #8
 8009f9a:	4013      	ands	r3, r2
 8009f9c:	2b08      	cmp	r3, #8
 8009f9e:	d148      	bne.n	800a032 <HAL_ADC_IRQHandler+0x122>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fa4:	2210      	movs	r2, #16
 8009fa6:	4013      	ands	r3, r2
 8009fa8:	d106      	bne.n	8009fb8 <HAL_ADC_IRQHandler+0xa8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fae:	2280      	movs	r2, #128	; 0x80
 8009fb0:	0092      	lsls	r2, r2, #2
 8009fb2:	431a      	orrs	r2, r3
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	68da      	ldr	r2, [r3, #12]
 8009fbe:	23c0      	movs	r3, #192	; 0xc0
 8009fc0:	011b      	lsls	r3, r3, #4
 8009fc2:	4013      	ands	r3, r2
 8009fc4:	d12d      	bne.n	800a022 <HAL_ADC_IRQHandler+0x112>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d129      	bne.n	800a022 <HAL_ADC_IRQHandler+0x112>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	2208      	movs	r2, #8
 8009fd6:	4013      	ands	r3, r2
 8009fd8:	2b08      	cmp	r3, #8
 8009fda:	d122      	bne.n	800a022 <HAL_ADC_IRQHandler+0x112>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	689b      	ldr	r3, [r3, #8]
 8009fe2:	2204      	movs	r2, #4
 8009fe4:	4013      	ands	r3, r2
 8009fe6:	d110      	bne.n	800a00a <HAL_ADC_IRQHandler+0xfa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	685a      	ldr	r2, [r3, #4]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	210c      	movs	r1, #12
 8009ff4:	438a      	bics	r2, r1
 8009ff6:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ffc:	4a37      	ldr	r2, [pc, #220]	; (800a0dc <HAL_ADC_IRQHandler+0x1cc>)
 8009ffe:	4013      	ands	r3, r2
 800a000:	2201      	movs	r2, #1
 800a002:	431a      	orrs	r2, r3
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	639a      	str	r2, [r3, #56]	; 0x38
 800a008:	e00b      	b.n	800a022 <HAL_ADC_IRQHandler+0x112>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a00e:	2220      	movs	r2, #32
 800a010:	431a      	orrs	r2, r3
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a01a:	2201      	movs	r2, #1
 800a01c:	431a      	orrs	r2, r3
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	0018      	movs	r0, r3
 800a026:	f000 f85b 	bl	800a0e0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	220c      	movs	r2, #12
 800a030:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	2280      	movs	r2, #128	; 0x80
 800a03a:	4013      	ands	r3, r2
 800a03c:	2b80      	cmp	r3, #128	; 0x80
 800a03e:	d115      	bne.n	800a06c <HAL_ADC_IRQHandler+0x15c>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	685b      	ldr	r3, [r3, #4]
 800a046:	2280      	movs	r2, #128	; 0x80
 800a048:	4013      	ands	r3, r2
 800a04a:	2b80      	cmp	r3, #128	; 0x80
 800a04c:	d10e      	bne.n	800a06c <HAL_ADC_IRQHandler+0x15c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a052:	2280      	movs	r2, #128	; 0x80
 800a054:	0252      	lsls	r2, r2, #9
 800a056:	431a      	orrs	r2, r3
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	0018      	movs	r0, r3
 800a060:	f000 f846 	bl	800a0f0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	2280      	movs	r2, #128	; 0x80
 800a06a:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	2210      	movs	r2, #16
 800a074:	4013      	ands	r3, r2
 800a076:	2b10      	cmp	r3, #16
 800a078:	d123      	bne.n	800a0c2 <HAL_ADC_IRQHandler+0x1b2>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	2210      	movs	r2, #16
 800a082:	4013      	ands	r3, r2
 800a084:	2b10      	cmp	r3, #16
 800a086:	d11c      	bne.n	800a0c2 <HAL_ADC_IRQHandler+0x1b2>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a08c:	2b01      	cmp	r3, #1
 800a08e:	d006      	beq.n	800a09e <HAL_ADC_IRQHandler+0x18e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	68db      	ldr	r3, [r3, #12]
 800a096:	2201      	movs	r2, #1
 800a098:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800a09a:	2b01      	cmp	r3, #1
 800a09c:	d10d      	bne.n	800a0ba <HAL_ADC_IRQHandler+0x1aa>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0a2:	2202      	movs	r2, #2
 800a0a4:	431a      	orrs	r2, r3
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	2210      	movs	r2, #16
 800a0b0:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	0018      	movs	r0, r3
 800a0b6:	f000 f823 	bl	800a100 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	2210      	movs	r2, #16
 800a0c0:	601a      	str	r2, [r3, #0]
  }

}
 800a0c2:	46c0      	nop			; (mov r8, r8)
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	b002      	add	sp, #8
 800a0c8:	bd80      	pop	{r7, pc}
 800a0ca:	46c0      	nop			; (mov r8, r8)
 800a0cc:	40012400 	.word	0x40012400
 800a0d0:	0000068e 	.word	0x0000068e
 800a0d4:	08016e20 	.word	0x08016e20
 800a0d8:	0000068f 	.word	0x0000068f
 800a0dc:	fffffefe 	.word	0xfffffefe

0800a0e0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b082      	sub	sp, #8
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800a0e8:	46c0      	nop			; (mov r8, r8)
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	b002      	add	sp, #8
 800a0ee:	bd80      	pop	{r7, pc}

0800a0f0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b082      	sub	sp, #8
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 800a0f8:	46c0      	nop			; (mov r8, r8)
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	b002      	add	sp, #8
 800a0fe:	bd80      	pop	{r7, pc}

0800a100 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b082      	sub	sp, #8
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800a108:	46c0      	nop			; (mov r8, r8)
 800a10a:	46bd      	mov	sp, r7
 800a10c:	b002      	add	sp, #8
 800a10e:	bd80      	pop	{r7, pc}

0800a110 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a11a:	230f      	movs	r3, #15
 800a11c:	18fb      	adds	r3, r7, r3
 800a11e:	2200      	movs	r2, #0
 800a120:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800a122:	2300      	movs	r3, #0
 800a124:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	4ab2      	ldr	r2, [pc, #712]	; (800a3f4 <HAL_ADC_ConfigChannel+0x2e4>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d005      	beq.n	800a13c <HAL_ADC_ConfigChannel+0x2c>
 800a130:	4ab1      	ldr	r2, [pc, #708]	; (800a3f8 <HAL_ADC_ConfigChannel+0x2e8>)
 800a132:	4bb2      	ldr	r3, [pc, #712]	; (800a3fc <HAL_ADC_ConfigChannel+0x2ec>)
 800a134:	0011      	movs	r1, r2
 800a136:	0018      	movs	r0, r3
 800a138:	f7f9 fa51 	bl	80035de <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d049      	beq.n	800a1d8 <HAL_ADC_ConfigChannel+0xc8>
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	2b01      	cmp	r3, #1
 800a14a:	d045      	beq.n	800a1d8 <HAL_ADC_ConfigChannel+0xc8>
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	2b02      	cmp	r3, #2
 800a152:	d041      	beq.n	800a1d8 <HAL_ADC_ConfigChannel+0xc8>
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	2b03      	cmp	r3, #3
 800a15a:	d03d      	beq.n	800a1d8 <HAL_ADC_ConfigChannel+0xc8>
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	2b04      	cmp	r3, #4
 800a162:	d039      	beq.n	800a1d8 <HAL_ADC_ConfigChannel+0xc8>
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	2b05      	cmp	r3, #5
 800a16a:	d035      	beq.n	800a1d8 <HAL_ADC_ConfigChannel+0xc8>
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	2b06      	cmp	r3, #6
 800a172:	d031      	beq.n	800a1d8 <HAL_ADC_ConfigChannel+0xc8>
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	2b07      	cmp	r3, #7
 800a17a:	d02d      	beq.n	800a1d8 <HAL_ADC_ConfigChannel+0xc8>
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	2b08      	cmp	r3, #8
 800a182:	d029      	beq.n	800a1d8 <HAL_ADC_ConfigChannel+0xc8>
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	2b09      	cmp	r3, #9
 800a18a:	d025      	beq.n	800a1d8 <HAL_ADC_ConfigChannel+0xc8>
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	2b0a      	cmp	r3, #10
 800a192:	d021      	beq.n	800a1d8 <HAL_ADC_ConfigChannel+0xc8>
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	2b0b      	cmp	r3, #11
 800a19a:	d01d      	beq.n	800a1d8 <HAL_ADC_ConfigChannel+0xc8>
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	2b0c      	cmp	r3, #12
 800a1a2:	d019      	beq.n	800a1d8 <HAL_ADC_ConfigChannel+0xc8>
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	2b0d      	cmp	r3, #13
 800a1aa:	d015      	beq.n	800a1d8 <HAL_ADC_ConfigChannel+0xc8>
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	2b0e      	cmp	r3, #14
 800a1b2:	d011      	beq.n	800a1d8 <HAL_ADC_ConfigChannel+0xc8>
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	2b0f      	cmp	r3, #15
 800a1ba:	d00d      	beq.n	800a1d8 <HAL_ADC_ConfigChannel+0xc8>
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	2b10      	cmp	r3, #16
 800a1c2:	d009      	beq.n	800a1d8 <HAL_ADC_ConfigChannel+0xc8>
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	2b11      	cmp	r3, #17
 800a1ca:	d005      	beq.n	800a1d8 <HAL_ADC_ConfigChannel+0xc8>
 800a1cc:	4a8c      	ldr	r2, [pc, #560]	; (800a400 <HAL_ADC_ConfigChannel+0x2f0>)
 800a1ce:	4b8b      	ldr	r3, [pc, #556]	; (800a3fc <HAL_ADC_ConfigChannel+0x2ec>)
 800a1d0:	0011      	movs	r1, r2
 800a1d2:	0018      	movs	r0, r3
 800a1d4:	f7f9 fa03 	bl	80035de <assert_failed>
  assert_param(IS_ADC_RANK(sConfig->Rank));
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	685a      	ldr	r2, [r3, #4]
 800a1dc:	2380      	movs	r3, #128	; 0x80
 800a1de:	015b      	lsls	r3, r3, #5
 800a1e0:	429a      	cmp	r2, r3
 800a1e2:	d00a      	beq.n	800a1fa <HAL_ADC_ConfigChannel+0xea>
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	685b      	ldr	r3, [r3, #4]
 800a1e8:	4a86      	ldr	r2, [pc, #536]	; (800a404 <HAL_ADC_ConfigChannel+0x2f4>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d005      	beq.n	800a1fa <HAL_ADC_ConfigChannel+0xea>
 800a1ee:	4a86      	ldr	r2, [pc, #536]	; (800a408 <HAL_ADC_ConfigChannel+0x2f8>)
 800a1f0:	4b82      	ldr	r3, [pc, #520]	; (800a3fc <HAL_ADC_ConfigChannel+0x2ec>)
 800a1f2:	0011      	movs	r1, r2
 800a1f4:	0018      	movs	r0, r3
 800a1f6:	f7f9 f9f2 	bl	80035de <assert_failed>
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1fe:	2380      	movs	r3, #128	; 0x80
 800a200:	055b      	lsls	r3, r3, #21
 800a202:	429a      	cmp	r2, r3
 800a204:	d044      	beq.n	800a290 <HAL_ADC_ConfigChannel+0x180>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a20a:	2b01      	cmp	r3, #1
 800a20c:	d040      	beq.n	800a290 <HAL_ADC_ConfigChannel+0x180>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a212:	2b02      	cmp	r3, #2
 800a214:	d03c      	beq.n	800a290 <HAL_ADC_ConfigChannel+0x180>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a21a:	2b03      	cmp	r3, #3
 800a21c:	d038      	beq.n	800a290 <HAL_ADC_ConfigChannel+0x180>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a222:	2b04      	cmp	r3, #4
 800a224:	d034      	beq.n	800a290 <HAL_ADC_ConfigChannel+0x180>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a22a:	2b05      	cmp	r3, #5
 800a22c:	d030      	beq.n	800a290 <HAL_ADC_ConfigChannel+0x180>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a232:	2b06      	cmp	r3, #6
 800a234:	d02c      	beq.n	800a290 <HAL_ADC_ConfigChannel+0x180>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a23a:	2b07      	cmp	r3, #7
 800a23c:	d028      	beq.n	800a290 <HAL_ADC_ConfigChannel+0x180>
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	689a      	ldr	r2, [r3, #8]
 800a242:	2380      	movs	r3, #128	; 0x80
 800a244:	055b      	lsls	r3, r3, #21
 800a246:	429a      	cmp	r2, r3
 800a248:	d022      	beq.n	800a290 <HAL_ADC_ConfigChannel+0x180>
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	689b      	ldr	r3, [r3, #8]
 800a24e:	2b01      	cmp	r3, #1
 800a250:	d01e      	beq.n	800a290 <HAL_ADC_ConfigChannel+0x180>
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	689b      	ldr	r3, [r3, #8]
 800a256:	2b02      	cmp	r3, #2
 800a258:	d01a      	beq.n	800a290 <HAL_ADC_ConfigChannel+0x180>
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	689b      	ldr	r3, [r3, #8]
 800a25e:	2b03      	cmp	r3, #3
 800a260:	d016      	beq.n	800a290 <HAL_ADC_ConfigChannel+0x180>
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	689b      	ldr	r3, [r3, #8]
 800a266:	2b04      	cmp	r3, #4
 800a268:	d012      	beq.n	800a290 <HAL_ADC_ConfigChannel+0x180>
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	689b      	ldr	r3, [r3, #8]
 800a26e:	2b05      	cmp	r3, #5
 800a270:	d00e      	beq.n	800a290 <HAL_ADC_ConfigChannel+0x180>
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	689b      	ldr	r3, [r3, #8]
 800a276:	2b06      	cmp	r3, #6
 800a278:	d00a      	beq.n	800a290 <HAL_ADC_ConfigChannel+0x180>
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	689b      	ldr	r3, [r3, #8]
 800a27e:	2b07      	cmp	r3, #7
 800a280:	d006      	beq.n	800a290 <HAL_ADC_ConfigChannel+0x180>
 800a282:	23ef      	movs	r3, #239	; 0xef
 800a284:	00da      	lsls	r2, r3, #3
 800a286:	4b5d      	ldr	r3, [pc, #372]	; (800a3fc <HAL_ADC_ConfigChannel+0x2ec>)
 800a288:	0011      	movs	r1, r2
 800a28a:	0018      	movs	r0, r3
 800a28c:	f7f9 f9a7 	bl	80035de <assert_failed>
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2234      	movs	r2, #52	; 0x34
 800a294:	5c9b      	ldrb	r3, [r3, r2]
 800a296:	2b01      	cmp	r3, #1
 800a298:	d101      	bne.n	800a29e <HAL_ADC_ConfigChannel+0x18e>
 800a29a:	2302      	movs	r3, #2
 800a29c:	e0d1      	b.n	800a442 <HAL_ADC_ConfigChannel+0x332>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2234      	movs	r2, #52	; 0x34
 800a2a2:	2101      	movs	r1, #1
 800a2a4:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	689b      	ldr	r3, [r3, #8]
 800a2ac:	2204      	movs	r2, #4
 800a2ae:	4013      	ands	r3, r2
 800a2b0:	d000      	beq.n	800a2b4 <HAL_ADC_ConfigChannel+0x1a4>
 800a2b2:	e0b5      	b.n	800a420 <HAL_ADC_ConfigChannel+0x310>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	685b      	ldr	r3, [r3, #4]
 800a2b8:	4a52      	ldr	r2, [pc, #328]	; (800a404 <HAL_ADC_ConfigChannel+0x2f4>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d100      	bne.n	800a2c0 <HAL_ADC_ConfigChannel+0x1b0>
 800a2be:	e077      	b.n	800a3b0 <HAL_ADC_ConfigChannel+0x2a0>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	409a      	lsls	r2, r3
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	430a      	orrs	r2, r1
 800a2d4:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2da:	2380      	movs	r3, #128	; 0x80
 800a2dc:	055b      	lsls	r3, r3, #21
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d037      	beq.n	800a352 <HAL_ADC_ConfigChannel+0x242>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2e6:	2b01      	cmp	r3, #1
 800a2e8:	d033      	beq.n	800a352 <HAL_ADC_ConfigChannel+0x242>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ee:	2b02      	cmp	r3, #2
 800a2f0:	d02f      	beq.n	800a352 <HAL_ADC_ConfigChannel+0x242>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2f6:	2b03      	cmp	r3, #3
 800a2f8:	d02b      	beq.n	800a352 <HAL_ADC_ConfigChannel+0x242>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2fe:	2b04      	cmp	r3, #4
 800a300:	d027      	beq.n	800a352 <HAL_ADC_ConfigChannel+0x242>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a306:	2b05      	cmp	r3, #5
 800a308:	d023      	beq.n	800a352 <HAL_ADC_ConfigChannel+0x242>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a30e:	2b06      	cmp	r3, #6
 800a310:	d01f      	beq.n	800a352 <HAL_ADC_ConfigChannel+0x242>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a316:	2b07      	cmp	r3, #7
 800a318:	d01b      	beq.n	800a352 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	689a      	ldr	r2, [r3, #8]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	695b      	ldr	r3, [r3, #20]
 800a324:	2107      	movs	r1, #7
 800a326:	400b      	ands	r3, r1
 800a328:	429a      	cmp	r2, r3
 800a32a:	d012      	beq.n	800a352 <HAL_ADC_ConfigChannel+0x242>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	695a      	ldr	r2, [r3, #20]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	2107      	movs	r1, #7
 800a338:	438a      	bics	r2, r1
 800a33a:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	6959      	ldr	r1, [r3, #20]
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	689b      	ldr	r3, [r3, #8]
 800a346:	2207      	movs	r2, #7
 800a348:	401a      	ands	r2, r3
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	430a      	orrs	r2, r1
 800a350:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	2b10      	cmp	r3, #16
 800a358:	d003      	beq.n	800a362 <HAL_ADC_ConfigChannel+0x252>
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	2b11      	cmp	r3, #17
 800a360:	d168      	bne.n	800a434 <HAL_ADC_ConfigChannel+0x324>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800a362:	4b2a      	ldr	r3, [pc, #168]	; (800a40c <HAL_ADC_ConfigChannel+0x2fc>)
 800a364:	6819      	ldr	r1, [r3, #0]
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	2b10      	cmp	r3, #16
 800a36c:	d102      	bne.n	800a374 <HAL_ADC_ConfigChannel+0x264>
 800a36e:	2380      	movs	r3, #128	; 0x80
 800a370:	041b      	lsls	r3, r3, #16
 800a372:	e001      	b.n	800a378 <HAL_ADC_ConfigChannel+0x268>
 800a374:	2380      	movs	r3, #128	; 0x80
 800a376:	03db      	lsls	r3, r3, #15
 800a378:	4a24      	ldr	r2, [pc, #144]	; (800a40c <HAL_ADC_ConfigChannel+0x2fc>)
 800a37a:	430b      	orrs	r3, r1
 800a37c:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	2b10      	cmp	r3, #16
 800a384:	d156      	bne.n	800a434 <HAL_ADC_ConfigChannel+0x324>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800a386:	4b22      	ldr	r3, [pc, #136]	; (800a410 <HAL_ADC_ConfigChannel+0x300>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	4922      	ldr	r1, [pc, #136]	; (800a414 <HAL_ADC_ConfigChannel+0x304>)
 800a38c:	0018      	movs	r0, r3
 800a38e:	f7f5 fed7 	bl	8000140 <__udivsi3>
 800a392:	0003      	movs	r3, r0
 800a394:	001a      	movs	r2, r3
 800a396:	0013      	movs	r3, r2
 800a398:	009b      	lsls	r3, r3, #2
 800a39a:	189b      	adds	r3, r3, r2
 800a39c:	005b      	lsls	r3, r3, #1
 800a39e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800a3a0:	e002      	b.n	800a3a8 <HAL_ADC_ConfigChannel+0x298>
          {
            wait_loop_index--;
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	3b01      	subs	r3, #1
 800a3a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d1f9      	bne.n	800a3a2 <HAL_ADC_ConfigChannel+0x292>
 800a3ae:	e041      	b.n	800a434 <HAL_ADC_ConfigChannel+0x324>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	2101      	movs	r1, #1
 800a3bc:	4099      	lsls	r1, r3
 800a3be:	000b      	movs	r3, r1
 800a3c0:	43d9      	mvns	r1, r3
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	400a      	ands	r2, r1
 800a3c8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	2b10      	cmp	r3, #16
 800a3d0:	d003      	beq.n	800a3da <HAL_ADC_ConfigChannel+0x2ca>
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	2b11      	cmp	r3, #17
 800a3d8:	d12c      	bne.n	800a434 <HAL_ADC_ConfigChannel+0x324>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800a3da:	4b0c      	ldr	r3, [pc, #48]	; (800a40c <HAL_ADC_ConfigChannel+0x2fc>)
 800a3dc:	6819      	ldr	r1, [r3, #0]
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	2b10      	cmp	r3, #16
 800a3e4:	d101      	bne.n	800a3ea <HAL_ADC_ConfigChannel+0x2da>
 800a3e6:	4a0c      	ldr	r2, [pc, #48]	; (800a418 <HAL_ADC_ConfigChannel+0x308>)
 800a3e8:	e000      	b.n	800a3ec <HAL_ADC_ConfigChannel+0x2dc>
 800a3ea:	4a0c      	ldr	r2, [pc, #48]	; (800a41c <HAL_ADC_ConfigChannel+0x30c>)
 800a3ec:	4b07      	ldr	r3, [pc, #28]	; (800a40c <HAL_ADC_ConfigChannel+0x2fc>)
 800a3ee:	400a      	ands	r2, r1
 800a3f0:	601a      	str	r2, [r3, #0]
 800a3f2:	e01f      	b.n	800a434 <HAL_ADC_ConfigChannel+0x324>
 800a3f4:	40012400 	.word	0x40012400
 800a3f8:	00000772 	.word	0x00000772
 800a3fc:	08016e20 	.word	0x08016e20
 800a400:	00000773 	.word	0x00000773
 800a404:	00001001 	.word	0x00001001
 800a408:	00000774 	.word	0x00000774
 800a40c:	40012708 	.word	0x40012708
 800a410:	20000004 	.word	0x20000004
 800a414:	000f4240 	.word	0x000f4240
 800a418:	ff7fffff 	.word	0xff7fffff
 800a41c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a424:	2220      	movs	r2, #32
 800a426:	431a      	orrs	r2, r3
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800a42c:	230f      	movs	r3, #15
 800a42e:	18fb      	adds	r3, r7, r3
 800a430:	2201      	movs	r2, #1
 800a432:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2234      	movs	r2, #52	; 0x34
 800a438:	2100      	movs	r1, #0
 800a43a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800a43c:	230f      	movs	r3, #15
 800a43e:	18fb      	adds	r3, r7, r3
 800a440:	781b      	ldrb	r3, [r3, #0]
}
 800a442:	0018      	movs	r0, r3
 800a444:	46bd      	mov	sp, r7
 800a446:	b004      	add	sp, #16
 800a448:	bd80      	pop	{r7, pc}
 800a44a:	46c0      	nop			; (mov r8, r8)

0800a44c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b084      	sub	sp, #16
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a454:	2300      	movs	r3, #0
 800a456:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800a458:	2300      	movs	r3, #0
 800a45a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	689b      	ldr	r3, [r3, #8]
 800a462:	2203      	movs	r2, #3
 800a464:	4013      	ands	r3, r2
 800a466:	2b01      	cmp	r3, #1
 800a468:	d112      	bne.n	800a490 <ADC_Enable+0x44>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	2201      	movs	r2, #1
 800a472:	4013      	ands	r3, r2
 800a474:	2b01      	cmp	r3, #1
 800a476:	d009      	beq.n	800a48c <ADC_Enable+0x40>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	68da      	ldr	r2, [r3, #12]
 800a47e:	2380      	movs	r3, #128	; 0x80
 800a480:	021b      	lsls	r3, r3, #8
 800a482:	401a      	ands	r2, r3
 800a484:	2380      	movs	r3, #128	; 0x80
 800a486:	021b      	lsls	r3, r3, #8
 800a488:	429a      	cmp	r2, r3
 800a48a:	d101      	bne.n	800a490 <ADC_Enable+0x44>
 800a48c:	2301      	movs	r3, #1
 800a48e:	e000      	b.n	800a492 <ADC_Enable+0x46>
 800a490:	2300      	movs	r3, #0
 800a492:	2b00      	cmp	r3, #0
 800a494:	d152      	bne.n	800a53c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	689b      	ldr	r3, [r3, #8]
 800a49c:	4a2a      	ldr	r2, [pc, #168]	; (800a548 <ADC_Enable+0xfc>)
 800a49e:	4013      	ands	r3, r2
 800a4a0:	d00d      	beq.n	800a4be <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4a6:	2210      	movs	r2, #16
 800a4a8:	431a      	orrs	r2, r3
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	431a      	orrs	r2, r3
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	e03f      	b.n	800a53e <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	689a      	ldr	r2, [r3, #8]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	2101      	movs	r1, #1
 800a4ca:	430a      	orrs	r2, r1
 800a4cc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800a4ce:	4b1f      	ldr	r3, [pc, #124]	; (800a54c <ADC_Enable+0x100>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	491f      	ldr	r1, [pc, #124]	; (800a550 <ADC_Enable+0x104>)
 800a4d4:	0018      	movs	r0, r3
 800a4d6:	f7f5 fe33 	bl	8000140 <__udivsi3>
 800a4da:	0003      	movs	r3, r0
 800a4dc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800a4de:	e002      	b.n	800a4e6 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	3b01      	subs	r3, #1
 800a4e4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d1f9      	bne.n	800a4e0 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 800a4ec:	f7ff f944 	bl	8009778 <HAL_GetTick>
 800a4f0:	0003      	movs	r3, r0
 800a4f2:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800a4f4:	e01b      	b.n	800a52e <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800a4f6:	f7ff f93f 	bl	8009778 <HAL_GetTick>
 800a4fa:	0002      	movs	r2, r0
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	1ad3      	subs	r3, r2, r3
 800a500:	2b02      	cmp	r3, #2
 800a502:	d914      	bls.n	800a52e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	2201      	movs	r2, #1
 800a50c:	4013      	ands	r3, r2
 800a50e:	2b01      	cmp	r3, #1
 800a510:	d00d      	beq.n	800a52e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a516:	2210      	movs	r2, #16
 800a518:	431a      	orrs	r2, r3
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a522:	2201      	movs	r2, #1
 800a524:	431a      	orrs	r2, r3
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a52a:	2301      	movs	r3, #1
 800a52c:	e007      	b.n	800a53e <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	2201      	movs	r2, #1
 800a536:	4013      	ands	r3, r2
 800a538:	2b01      	cmp	r3, #1
 800a53a:	d1dc      	bne.n	800a4f6 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800a53c:	2300      	movs	r3, #0
}
 800a53e:	0018      	movs	r0, r3
 800a540:	46bd      	mov	sp, r7
 800a542:	b004      	add	sp, #16
 800a544:	bd80      	pop	{r7, pc}
 800a546:	46c0      	nop			; (mov r8, r8)
 800a548:	80000017 	.word	0x80000017
 800a54c:	20000004 	.word	0x20000004
 800a550:	000f4240 	.word	0x000f4240

0800a554 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b084      	sub	sp, #16
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a55c:	2300      	movs	r3, #0
 800a55e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	689b      	ldr	r3, [r3, #8]
 800a566:	2203      	movs	r2, #3
 800a568:	4013      	ands	r3, r2
 800a56a:	2b01      	cmp	r3, #1
 800a56c:	d112      	bne.n	800a594 <ADC_Disable+0x40>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	2201      	movs	r2, #1
 800a576:	4013      	ands	r3, r2
 800a578:	2b01      	cmp	r3, #1
 800a57a:	d009      	beq.n	800a590 <ADC_Disable+0x3c>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	68da      	ldr	r2, [r3, #12]
 800a582:	2380      	movs	r3, #128	; 0x80
 800a584:	021b      	lsls	r3, r3, #8
 800a586:	401a      	ands	r2, r3
 800a588:	2380      	movs	r3, #128	; 0x80
 800a58a:	021b      	lsls	r3, r3, #8
 800a58c:	429a      	cmp	r2, r3
 800a58e:	d101      	bne.n	800a594 <ADC_Disable+0x40>
 800a590:	2301      	movs	r3, #1
 800a592:	e000      	b.n	800a596 <ADC_Disable+0x42>
 800a594:	2300      	movs	r3, #0
 800a596:	2b00      	cmp	r3, #0
 800a598:	d048      	beq.n	800a62c <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	689b      	ldr	r3, [r3, #8]
 800a5a0:	2205      	movs	r2, #5
 800a5a2:	4013      	ands	r3, r2
 800a5a4:	2b01      	cmp	r3, #1
 800a5a6:	d110      	bne.n	800a5ca <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	689a      	ldr	r2, [r3, #8]
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	2102      	movs	r1, #2
 800a5b4:	430a      	orrs	r2, r1
 800a5b6:	609a      	str	r2, [r3, #8]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	2203      	movs	r2, #3
 800a5be:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800a5c0:	f7ff f8da 	bl	8009778 <HAL_GetTick>
 800a5c4:	0003      	movs	r3, r0
 800a5c6:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800a5c8:	e029      	b.n	800a61e <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ce:	2210      	movs	r2, #16
 800a5d0:	431a      	orrs	r2, r3
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5da:	2201      	movs	r2, #1
 800a5dc:	431a      	orrs	r2, r3
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	e023      	b.n	800a62e <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800a5e6:	f7ff f8c7 	bl	8009778 <HAL_GetTick>
 800a5ea:	0002      	movs	r2, r0
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	1ad3      	subs	r3, r2, r3
 800a5f0:	2b02      	cmp	r3, #2
 800a5f2:	d914      	bls.n	800a61e <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	689b      	ldr	r3, [r3, #8]
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	4013      	ands	r3, r2
 800a5fe:	2b01      	cmp	r3, #1
 800a600:	d10d      	bne.n	800a61e <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a606:	2210      	movs	r2, #16
 800a608:	431a      	orrs	r2, r3
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a612:	2201      	movs	r2, #1
 800a614:	431a      	orrs	r2, r3
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a61a:	2301      	movs	r3, #1
 800a61c:	e007      	b.n	800a62e <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	689b      	ldr	r3, [r3, #8]
 800a624:	2201      	movs	r2, #1
 800a626:	4013      	ands	r3, r2
 800a628:	2b01      	cmp	r3, #1
 800a62a:	d0dc      	beq.n	800a5e6 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800a62c:	2300      	movs	r3, #0
}
 800a62e:	0018      	movs	r0, r3
 800a630:	46bd      	mov	sp, r7
 800a632:	b004      	add	sp, #16
 800a634:	bd80      	pop	{r7, pc}
	...

0800a638 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b084      	sub	sp, #16
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a640:	2300      	movs	r3, #0
 800a642:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4a27      	ldr	r2, [pc, #156]	; (800a6e8 <ADC_ConversionStop+0xb0>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d005      	beq.n	800a65a <ADC_ConversionStop+0x22>
 800a64e:	4a27      	ldr	r2, [pc, #156]	; (800a6ec <ADC_ConversionStop+0xb4>)
 800a650:	4b27      	ldr	r3, [pc, #156]	; (800a6f0 <ADC_ConversionStop+0xb8>)
 800a652:	0011      	movs	r1, r2
 800a654:	0018      	movs	r0, r3
 800a656:	f7f8 ffc2 	bl	80035de <assert_failed>
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	689b      	ldr	r3, [r3, #8]
 800a660:	2204      	movs	r2, #4
 800a662:	4013      	ands	r3, r2
 800a664:	d03a      	beq.n	800a6dc <ADC_ConversionStop+0xa4>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	689b      	ldr	r3, [r3, #8]
 800a66c:	2204      	movs	r2, #4
 800a66e:	4013      	ands	r3, r2
 800a670:	2b04      	cmp	r3, #4
 800a672:	d10d      	bne.n	800a690 <ADC_ConversionStop+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	689b      	ldr	r3, [r3, #8]
 800a67a:	2202      	movs	r2, #2
 800a67c:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800a67e:	d107      	bne.n	800a690 <ADC_ConversionStop+0x58>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	689a      	ldr	r2, [r3, #8]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	2110      	movs	r1, #16
 800a68c:	430a      	orrs	r2, r1
 800a68e:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800a690:	f7ff f872 	bl	8009778 <HAL_GetTick>
 800a694:	0003      	movs	r3, r0
 800a696:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800a698:	e01a      	b.n	800a6d0 <ADC_ConversionStop+0x98>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800a69a:	f7ff f86d 	bl	8009778 <HAL_GetTick>
 800a69e:	0002      	movs	r2, r0
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	1ad3      	subs	r3, r2, r3
 800a6a4:	2b02      	cmp	r3, #2
 800a6a6:	d913      	bls.n	800a6d0 <ADC_ConversionStop+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	689b      	ldr	r3, [r3, #8]
 800a6ae:	2204      	movs	r2, #4
 800a6b0:	4013      	ands	r3, r2
 800a6b2:	d00d      	beq.n	800a6d0 <ADC_ConversionStop+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6b8:	2210      	movs	r2, #16
 800a6ba:	431a      	orrs	r2, r3
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	431a      	orrs	r2, r3
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	e006      	b.n	800a6de <ADC_ConversionStop+0xa6>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	689b      	ldr	r3, [r3, #8]
 800a6d6:	2204      	movs	r2, #4
 800a6d8:	4013      	ands	r3, r2
 800a6da:	d1de      	bne.n	800a69a <ADC_ConversionStop+0x62>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800a6dc:	2300      	movs	r3, #0
}
 800a6de:	0018      	movs	r0, r3
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	b004      	add	sp, #16
 800a6e4:	bd80      	pop	{r7, pc}
 800a6e6:	46c0      	nop			; (mov r8, r8)
 800a6e8:	40012400 	.word	0x40012400
 800a6ec:	0000091d 	.word	0x0000091d
 800a6f0:	08016e20 	.word	0x08016e20

0800a6f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b082      	sub	sp, #8
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	0002      	movs	r2, r0
 800a6fc:	1dfb      	adds	r3, r7, #7
 800a6fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800a700:	1dfb      	adds	r3, r7, #7
 800a702:	781b      	ldrb	r3, [r3, #0]
 800a704:	2b7f      	cmp	r3, #127	; 0x7f
 800a706:	d809      	bhi.n	800a71c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a708:	1dfb      	adds	r3, r7, #7
 800a70a:	781b      	ldrb	r3, [r3, #0]
 800a70c:	001a      	movs	r2, r3
 800a70e:	231f      	movs	r3, #31
 800a710:	401a      	ands	r2, r3
 800a712:	4b04      	ldr	r3, [pc, #16]	; (800a724 <__NVIC_EnableIRQ+0x30>)
 800a714:	2101      	movs	r1, #1
 800a716:	4091      	lsls	r1, r2
 800a718:	000a      	movs	r2, r1
 800a71a:	601a      	str	r2, [r3, #0]
  }
}
 800a71c:	46c0      	nop			; (mov r8, r8)
 800a71e:	46bd      	mov	sp, r7
 800a720:	b002      	add	sp, #8
 800a722:	bd80      	pop	{r7, pc}
 800a724:	e000e100 	.word	0xe000e100

0800a728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a728:	b590      	push	{r4, r7, lr}
 800a72a:	b083      	sub	sp, #12
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	0002      	movs	r2, r0
 800a730:	6039      	str	r1, [r7, #0]
 800a732:	1dfb      	adds	r3, r7, #7
 800a734:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800a736:	1dfb      	adds	r3, r7, #7
 800a738:	781b      	ldrb	r3, [r3, #0]
 800a73a:	2b7f      	cmp	r3, #127	; 0x7f
 800a73c:	d828      	bhi.n	800a790 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800a73e:	4a2f      	ldr	r2, [pc, #188]	; (800a7fc <__NVIC_SetPriority+0xd4>)
 800a740:	1dfb      	adds	r3, r7, #7
 800a742:	781b      	ldrb	r3, [r3, #0]
 800a744:	b25b      	sxtb	r3, r3
 800a746:	089b      	lsrs	r3, r3, #2
 800a748:	33c0      	adds	r3, #192	; 0xc0
 800a74a:	009b      	lsls	r3, r3, #2
 800a74c:	589b      	ldr	r3, [r3, r2]
 800a74e:	1dfa      	adds	r2, r7, #7
 800a750:	7812      	ldrb	r2, [r2, #0]
 800a752:	0011      	movs	r1, r2
 800a754:	2203      	movs	r2, #3
 800a756:	400a      	ands	r2, r1
 800a758:	00d2      	lsls	r2, r2, #3
 800a75a:	21ff      	movs	r1, #255	; 0xff
 800a75c:	4091      	lsls	r1, r2
 800a75e:	000a      	movs	r2, r1
 800a760:	43d2      	mvns	r2, r2
 800a762:	401a      	ands	r2, r3
 800a764:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	019b      	lsls	r3, r3, #6
 800a76a:	22ff      	movs	r2, #255	; 0xff
 800a76c:	401a      	ands	r2, r3
 800a76e:	1dfb      	adds	r3, r7, #7
 800a770:	781b      	ldrb	r3, [r3, #0]
 800a772:	0018      	movs	r0, r3
 800a774:	2303      	movs	r3, #3
 800a776:	4003      	ands	r3, r0
 800a778:	00db      	lsls	r3, r3, #3
 800a77a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800a77c:	481f      	ldr	r0, [pc, #124]	; (800a7fc <__NVIC_SetPriority+0xd4>)
 800a77e:	1dfb      	adds	r3, r7, #7
 800a780:	781b      	ldrb	r3, [r3, #0]
 800a782:	b25b      	sxtb	r3, r3
 800a784:	089b      	lsrs	r3, r3, #2
 800a786:	430a      	orrs	r2, r1
 800a788:	33c0      	adds	r3, #192	; 0xc0
 800a78a:	009b      	lsls	r3, r3, #2
 800a78c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800a78e:	e031      	b.n	800a7f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800a790:	4a1b      	ldr	r2, [pc, #108]	; (800a800 <__NVIC_SetPriority+0xd8>)
 800a792:	1dfb      	adds	r3, r7, #7
 800a794:	781b      	ldrb	r3, [r3, #0]
 800a796:	0019      	movs	r1, r3
 800a798:	230f      	movs	r3, #15
 800a79a:	400b      	ands	r3, r1
 800a79c:	3b08      	subs	r3, #8
 800a79e:	089b      	lsrs	r3, r3, #2
 800a7a0:	3306      	adds	r3, #6
 800a7a2:	009b      	lsls	r3, r3, #2
 800a7a4:	18d3      	adds	r3, r2, r3
 800a7a6:	3304      	adds	r3, #4
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	1dfa      	adds	r2, r7, #7
 800a7ac:	7812      	ldrb	r2, [r2, #0]
 800a7ae:	0011      	movs	r1, r2
 800a7b0:	2203      	movs	r2, #3
 800a7b2:	400a      	ands	r2, r1
 800a7b4:	00d2      	lsls	r2, r2, #3
 800a7b6:	21ff      	movs	r1, #255	; 0xff
 800a7b8:	4091      	lsls	r1, r2
 800a7ba:	000a      	movs	r2, r1
 800a7bc:	43d2      	mvns	r2, r2
 800a7be:	401a      	ands	r2, r3
 800a7c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	019b      	lsls	r3, r3, #6
 800a7c6:	22ff      	movs	r2, #255	; 0xff
 800a7c8:	401a      	ands	r2, r3
 800a7ca:	1dfb      	adds	r3, r7, #7
 800a7cc:	781b      	ldrb	r3, [r3, #0]
 800a7ce:	0018      	movs	r0, r3
 800a7d0:	2303      	movs	r3, #3
 800a7d2:	4003      	ands	r3, r0
 800a7d4:	00db      	lsls	r3, r3, #3
 800a7d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800a7d8:	4809      	ldr	r0, [pc, #36]	; (800a800 <__NVIC_SetPriority+0xd8>)
 800a7da:	1dfb      	adds	r3, r7, #7
 800a7dc:	781b      	ldrb	r3, [r3, #0]
 800a7de:	001c      	movs	r4, r3
 800a7e0:	230f      	movs	r3, #15
 800a7e2:	4023      	ands	r3, r4
 800a7e4:	3b08      	subs	r3, #8
 800a7e6:	089b      	lsrs	r3, r3, #2
 800a7e8:	430a      	orrs	r2, r1
 800a7ea:	3306      	adds	r3, #6
 800a7ec:	009b      	lsls	r3, r3, #2
 800a7ee:	18c3      	adds	r3, r0, r3
 800a7f0:	3304      	adds	r3, #4
 800a7f2:	601a      	str	r2, [r3, #0]
}
 800a7f4:	46c0      	nop			; (mov r8, r8)
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	b003      	add	sp, #12
 800a7fa:	bd90      	pop	{r4, r7, pc}
 800a7fc:	e000e100 	.word	0xe000e100
 800a800:	e000ed00 	.word	0xe000ed00

0800a804 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a804:	b580      	push	{r7, lr}
 800a806:	b084      	sub	sp, #16
 800a808:	af00      	add	r7, sp, #0
 800a80a:	60b9      	str	r1, [r7, #8]
 800a80c:	607a      	str	r2, [r7, #4]
 800a80e:	230f      	movs	r3, #15
 800a810:	18fb      	adds	r3, r7, r3
 800a812:	1c02      	adds	r2, r0, #0
 800a814:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	2b03      	cmp	r3, #3
 800a81a:	d904      	bls.n	800a826 <HAL_NVIC_SetPriority+0x22>
 800a81c:	4b08      	ldr	r3, [pc, #32]	; (800a840 <HAL_NVIC_SetPriority+0x3c>)
 800a81e:	218b      	movs	r1, #139	; 0x8b
 800a820:	0018      	movs	r0, r3
 800a822:	f7f8 fedc 	bl	80035de <assert_failed>
  NVIC_SetPriority(IRQn,PreemptPriority);
 800a826:	68ba      	ldr	r2, [r7, #8]
 800a828:	230f      	movs	r3, #15
 800a82a:	18fb      	adds	r3, r7, r3
 800a82c:	781b      	ldrb	r3, [r3, #0]
 800a82e:	b25b      	sxtb	r3, r3
 800a830:	0011      	movs	r1, r2
 800a832:	0018      	movs	r0, r3
 800a834:	f7ff ff78 	bl	800a728 <__NVIC_SetPriority>
}
 800a838:	46c0      	nop			; (mov r8, r8)
 800a83a:	46bd      	mov	sp, r7
 800a83c:	b004      	add	sp, #16
 800a83e:	bd80      	pop	{r7, pc}
 800a840:	08016e58 	.word	0x08016e58

0800a844 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b082      	sub	sp, #8
 800a848:	af00      	add	r7, sp, #0
 800a84a:	0002      	movs	r2, r0
 800a84c:	1dfb      	adds	r3, r7, #7
 800a84e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800a850:	1dfb      	adds	r3, r7, #7
 800a852:	781b      	ldrb	r3, [r3, #0]
 800a854:	2b7f      	cmp	r3, #127	; 0x7f
 800a856:	d904      	bls.n	800a862 <HAL_NVIC_EnableIRQ+0x1e>
 800a858:	4b07      	ldr	r3, [pc, #28]	; (800a878 <HAL_NVIC_EnableIRQ+0x34>)
 800a85a:	219b      	movs	r1, #155	; 0x9b
 800a85c:	0018      	movs	r0, r3
 800a85e:	f7f8 febe 	bl	80035de <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a862:	1dfb      	adds	r3, r7, #7
 800a864:	781b      	ldrb	r3, [r3, #0]
 800a866:	b25b      	sxtb	r3, r3
 800a868:	0018      	movs	r0, r3
 800a86a:	f7ff ff43 	bl	800a6f4 <__NVIC_EnableIRQ>
}
 800a86e:	46c0      	nop			; (mov r8, r8)
 800a870:	46bd      	mov	sp, r7
 800a872:	b002      	add	sp, #8
 800a874:	bd80      	pop	{r7, pc}
 800a876:	46c0      	nop			; (mov r8, r8)
 800a878:	08016e58 	.word	0x08016e58

0800a87c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b082      	sub	sp, #8
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2221      	movs	r2, #33	; 0x21
 800a888:	5c9b      	ldrb	r3, [r3, r2]
 800a88a:	b2db      	uxtb	r3, r3
 800a88c:	2b02      	cmp	r3, #2
 800a88e:	d008      	beq.n	800a8a2 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2204      	movs	r2, #4
 800a894:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2220      	movs	r2, #32
 800a89a:	2100      	movs	r1, #0
 800a89c:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 800a89e:	2301      	movs	r3, #1
 800a8a0:	e020      	b.n	800a8e4 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	681a      	ldr	r2, [r3, #0]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	210e      	movs	r1, #14
 800a8ae:	438a      	bics	r2, r1
 800a8b0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	681a      	ldr	r2, [r3, #0]
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	2101      	movs	r1, #1
 800a8be:	438a      	bics	r2, r1
 800a8c0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8ca:	2101      	movs	r1, #1
 800a8cc:	4091      	lsls	r1, r2
 800a8ce:	000a      	movs	r2, r1
 800a8d0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2221      	movs	r2, #33	; 0x21
 800a8d6:	2101      	movs	r1, #1
 800a8d8:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2220      	movs	r2, #32
 800a8de:	2100      	movs	r1, #0
 800a8e0:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800a8e2:	2300      	movs	r3, #0
}
 800a8e4:	0018      	movs	r0, r3
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	b002      	add	sp, #8
 800a8ea:	bd80      	pop	{r7, pc}

0800a8ec <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b084      	sub	sp, #16
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a8f4:	210f      	movs	r1, #15
 800a8f6:	187b      	adds	r3, r7, r1
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2221      	movs	r2, #33	; 0x21
 800a900:	5c9b      	ldrb	r3, [r3, r2]
 800a902:	b2db      	uxtb	r3, r3
 800a904:	2b02      	cmp	r3, #2
 800a906:	d006      	beq.n	800a916 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2204      	movs	r2, #4
 800a90c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800a90e:	187b      	adds	r3, r7, r1
 800a910:	2201      	movs	r2, #1
 800a912:	701a      	strb	r2, [r3, #0]
 800a914:	e028      	b.n	800a968 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	681a      	ldr	r2, [r3, #0]
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	210e      	movs	r1, #14
 800a922:	438a      	bics	r2, r1
 800a924:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	681a      	ldr	r2, [r3, #0]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	2101      	movs	r1, #1
 800a932:	438a      	bics	r2, r1
 800a934:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a93e:	2101      	movs	r1, #1
 800a940:	4091      	lsls	r1, r2
 800a942:	000a      	movs	r2, r1
 800a944:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2221      	movs	r2, #33	; 0x21
 800a94a:	2101      	movs	r1, #1
 800a94c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2220      	movs	r2, #32
 800a952:	2100      	movs	r1, #0
 800a954:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d004      	beq.n	800a968 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a962:	687a      	ldr	r2, [r7, #4]
 800a964:	0010      	movs	r0, r2
 800a966:	4798      	blx	r3
    } 
  }
  return status;
 800a968:	230f      	movs	r3, #15
 800a96a:	18fb      	adds	r3, r7, r3
 800a96c:	781b      	ldrb	r3, [r3, #0]
}
 800a96e:	0018      	movs	r0, r3
 800a970:	46bd      	mov	sp, r7
 800a972:	b004      	add	sp, #16
 800a974:	bd80      	pop	{r7, pc}

0800a976 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800a976:	b580      	push	{r7, lr}
 800a978:	b082      	sub	sp, #8
 800a97a:	af00      	add	r7, sp, #0
 800a97c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2221      	movs	r2, #33	; 0x21
 800a982:	5c9b      	ldrb	r3, [r3, r2]
 800a984:	b2db      	uxtb	r3, r3
}
 800a986:	0018      	movs	r0, r3
 800a988:	46bd      	mov	sp, r7
 800a98a:	b002      	add	sp, #8
 800a98c:	bd80      	pop	{r7, pc}
	...

0800a990 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b086      	sub	sp, #24
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a99a:	2300      	movs	r3, #0
 800a99c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800a99e:	687a      	ldr	r2, [r7, #4]
 800a9a0:	2390      	movs	r3, #144	; 0x90
 800a9a2:	05db      	lsls	r3, r3, #23
 800a9a4:	429a      	cmp	r2, r3
 800a9a6:	d014      	beq.n	800a9d2 <HAL_GPIO_Init+0x42>
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	4acf      	ldr	r2, [pc, #828]	; (800ace8 <HAL_GPIO_Init+0x358>)
 800a9ac:	4293      	cmp	r3, r2
 800a9ae:	d010      	beq.n	800a9d2 <HAL_GPIO_Init+0x42>
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	4ace      	ldr	r2, [pc, #824]	; (800acec <HAL_GPIO_Init+0x35c>)
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	d00c      	beq.n	800a9d2 <HAL_GPIO_Init+0x42>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	4acd      	ldr	r2, [pc, #820]	; (800acf0 <HAL_GPIO_Init+0x360>)
 800a9bc:	4293      	cmp	r3, r2
 800a9be:	d008      	beq.n	800a9d2 <HAL_GPIO_Init+0x42>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	4acc      	ldr	r2, [pc, #816]	; (800acf4 <HAL_GPIO_Init+0x364>)
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	d004      	beq.n	800a9d2 <HAL_GPIO_Init+0x42>
 800a9c8:	4bcb      	ldr	r3, [pc, #812]	; (800acf8 <HAL_GPIO_Init+0x368>)
 800a9ca:	21b0      	movs	r1, #176	; 0xb0
 800a9cc:	0018      	movs	r0, r3
 800a9ce:	f7f8 fe06 	bl	80035de <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	041b      	lsls	r3, r3, #16
 800a9d8:	0c1b      	lsrs	r3, r3, #16
 800a9da:	d004      	beq.n	800a9e6 <HAL_GPIO_Init+0x56>
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	0c1b      	lsrs	r3, r3, #16
 800a9e2:	041b      	lsls	r3, r3, #16
 800a9e4:	d004      	beq.n	800a9f0 <HAL_GPIO_Init+0x60>
 800a9e6:	4bc4      	ldr	r3, [pc, #784]	; (800acf8 <HAL_GPIO_Init+0x368>)
 800a9e8:	21b1      	movs	r1, #177	; 0xb1
 800a9ea:	0018      	movs	r0, r3
 800a9ec:	f7f8 fdf7 	bl	80035de <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	685b      	ldr	r3, [r3, #4]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d100      	bne.n	800a9fa <HAL_GPIO_Init+0x6a>
 800a9f8:	e1eb      	b.n	800add2 <HAL_GPIO_Init+0x442>
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	685b      	ldr	r3, [r3, #4]
 800a9fe:	2b01      	cmp	r3, #1
 800aa00:	d100      	bne.n	800aa04 <HAL_GPIO_Init+0x74>
 800aa02:	e1e6      	b.n	800add2 <HAL_GPIO_Init+0x442>
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	685b      	ldr	r3, [r3, #4]
 800aa08:	2b11      	cmp	r3, #17
 800aa0a:	d100      	bne.n	800aa0e <HAL_GPIO_Init+0x7e>
 800aa0c:	e1e1      	b.n	800add2 <HAL_GPIO_Init+0x442>
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	2b02      	cmp	r3, #2
 800aa14:	d100      	bne.n	800aa18 <HAL_GPIO_Init+0x88>
 800aa16:	e1dc      	b.n	800add2 <HAL_GPIO_Init+0x442>
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	2b12      	cmp	r3, #18
 800aa1e:	d100      	bne.n	800aa22 <HAL_GPIO_Init+0x92>
 800aa20:	e1d7      	b.n	800add2 <HAL_GPIO_Init+0x442>
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	685a      	ldr	r2, [r3, #4]
 800aa26:	2388      	movs	r3, #136	; 0x88
 800aa28:	035b      	lsls	r3, r3, #13
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d100      	bne.n	800aa30 <HAL_GPIO_Init+0xa0>
 800aa2e:	e1d0      	b.n	800add2 <HAL_GPIO_Init+0x442>
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	685a      	ldr	r2, [r3, #4]
 800aa34:	2384      	movs	r3, #132	; 0x84
 800aa36:	039b      	lsls	r3, r3, #14
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d100      	bne.n	800aa3e <HAL_GPIO_Init+0xae>
 800aa3c:	e1c9      	b.n	800add2 <HAL_GPIO_Init+0x442>
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	685a      	ldr	r2, [r3, #4]
 800aa42:	23c4      	movs	r3, #196	; 0xc4
 800aa44:	039b      	lsls	r3, r3, #14
 800aa46:	429a      	cmp	r2, r3
 800aa48:	d100      	bne.n	800aa4c <HAL_GPIO_Init+0xbc>
 800aa4a:	e1c2      	b.n	800add2 <HAL_GPIO_Init+0x442>
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	685a      	ldr	r2, [r3, #4]
 800aa50:	2390      	movs	r3, #144	; 0x90
 800aa52:	035b      	lsls	r3, r3, #13
 800aa54:	429a      	cmp	r2, r3
 800aa56:	d100      	bne.n	800aa5a <HAL_GPIO_Init+0xca>
 800aa58:	e1bb      	b.n	800add2 <HAL_GPIO_Init+0x442>
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	685a      	ldr	r2, [r3, #4]
 800aa5e:	2388      	movs	r3, #136	; 0x88
 800aa60:	039b      	lsls	r3, r3, #14
 800aa62:	429a      	cmp	r2, r3
 800aa64:	d100      	bne.n	800aa68 <HAL_GPIO_Init+0xd8>
 800aa66:	e1b4      	b.n	800add2 <HAL_GPIO_Init+0x442>
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	685a      	ldr	r2, [r3, #4]
 800aa6c:	23c8      	movs	r3, #200	; 0xc8
 800aa6e:	039b      	lsls	r3, r3, #14
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d100      	bne.n	800aa76 <HAL_GPIO_Init+0xe6>
 800aa74:	e1ad      	b.n	800add2 <HAL_GPIO_Init+0x442>
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	2b03      	cmp	r3, #3
 800aa7c:	d100      	bne.n	800aa80 <HAL_GPIO_Init+0xf0>
 800aa7e:	e1a8      	b.n	800add2 <HAL_GPIO_Init+0x442>
 800aa80:	4b9d      	ldr	r3, [pc, #628]	; (800acf8 <HAL_GPIO_Init+0x368>)
 800aa82:	21b2      	movs	r1, #178	; 0xb2
 800aa84:	0018      	movs	r0, r3
 800aa86:	f7f8 fdaa 	bl	80035de <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800aa8a:	e1a2      	b.n	800add2 <HAL_GPIO_Init+0x442>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	2101      	movs	r1, #1
 800aa92:	697a      	ldr	r2, [r7, #20]
 800aa94:	4091      	lsls	r1, r2
 800aa96:	000a      	movs	r2, r1
 800aa98:	4013      	ands	r3, r2
 800aa9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d100      	bne.n	800aaa4 <HAL_GPIO_Init+0x114>
 800aaa2:	e193      	b.n	800adcc <HAL_GPIO_Init+0x43c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	2203      	movs	r2, #3
 800aaaa:	4013      	ands	r3, r2
 800aaac:	2b01      	cmp	r3, #1
 800aaae:	d005      	beq.n	800aabc <HAL_GPIO_Init+0x12c>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	685b      	ldr	r3, [r3, #4]
 800aab4:	2203      	movs	r2, #3
 800aab6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800aab8:	2b02      	cmp	r3, #2
 800aaba:	d141      	bne.n	800ab40 <HAL_GPIO_Init+0x1b0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	68db      	ldr	r3, [r3, #12]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d00c      	beq.n	800aade <HAL_GPIO_Init+0x14e>
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	68db      	ldr	r3, [r3, #12]
 800aac8:	2b01      	cmp	r3, #1
 800aaca:	d008      	beq.n	800aade <HAL_GPIO_Init+0x14e>
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	68db      	ldr	r3, [r3, #12]
 800aad0:	2b03      	cmp	r3, #3
 800aad2:	d004      	beq.n	800aade <HAL_GPIO_Init+0x14e>
 800aad4:	4b88      	ldr	r3, [pc, #544]	; (800acf8 <HAL_GPIO_Init+0x368>)
 800aad6:	21c2      	movs	r1, #194	; 0xc2
 800aad8:	0018      	movs	r0, r3
 800aada:	f7f8 fd80 	bl	80035de <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	689b      	ldr	r3, [r3, #8]
 800aae2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	005b      	lsls	r3, r3, #1
 800aae8:	2203      	movs	r2, #3
 800aaea:	409a      	lsls	r2, r3
 800aaec:	0013      	movs	r3, r2
 800aaee:	43da      	mvns	r2, r3
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	4013      	ands	r3, r2
 800aaf4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	68da      	ldr	r2, [r3, #12]
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	005b      	lsls	r3, r3, #1
 800aafe:	409a      	lsls	r2, r3
 800ab00:	0013      	movs	r3, r2
 800ab02:	693a      	ldr	r2, [r7, #16]
 800ab04:	4313      	orrs	r3, r2
 800ab06:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	693a      	ldr	r2, [r7, #16]
 800ab0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	685b      	ldr	r3, [r3, #4]
 800ab12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ab14:	2201      	movs	r2, #1
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	409a      	lsls	r2, r3
 800ab1a:	0013      	movs	r3, r2
 800ab1c:	43da      	mvns	r2, r3
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	4013      	ands	r3, r2
 800ab22:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	685b      	ldr	r3, [r3, #4]
 800ab28:	091b      	lsrs	r3, r3, #4
 800ab2a:	2201      	movs	r2, #1
 800ab2c:	401a      	ands	r2, r3
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	409a      	lsls	r2, r3
 800ab32:	0013      	movs	r3, r2
 800ab34:	693a      	ldr	r2, [r7, #16]
 800ab36:	4313      	orrs	r3, r2
 800ab38:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	693a      	ldr	r2, [r7, #16]
 800ab3e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	2203      	movs	r2, #3
 800ab46:	4013      	ands	r3, r2
 800ab48:	2b03      	cmp	r3, #3
 800ab4a:	d028      	beq.n	800ab9e <HAL_GPIO_Init+0x20e>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	689b      	ldr	r3, [r3, #8]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d00c      	beq.n	800ab6e <HAL_GPIO_Init+0x1de>
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	689b      	ldr	r3, [r3, #8]
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d008      	beq.n	800ab6e <HAL_GPIO_Init+0x1de>
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	689b      	ldr	r3, [r3, #8]
 800ab60:	2b02      	cmp	r3, #2
 800ab62:	d004      	beq.n	800ab6e <HAL_GPIO_Init+0x1de>
 800ab64:	4b64      	ldr	r3, [pc, #400]	; (800acf8 <HAL_GPIO_Init+0x368>)
 800ab66:	21d3      	movs	r1, #211	; 0xd3
 800ab68:	0018      	movs	r0, r3
 800ab6a:	f7f8 fd38 	bl	80035de <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	68db      	ldr	r3, [r3, #12]
 800ab72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	005b      	lsls	r3, r3, #1
 800ab78:	2203      	movs	r2, #3
 800ab7a:	409a      	lsls	r2, r3
 800ab7c:	0013      	movs	r3, r2
 800ab7e:	43da      	mvns	r2, r3
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	4013      	ands	r3, r2
 800ab84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	689a      	ldr	r2, [r3, #8]
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	005b      	lsls	r3, r3, #1
 800ab8e:	409a      	lsls	r2, r3
 800ab90:	0013      	movs	r3, r2
 800ab92:	693a      	ldr	r2, [r7, #16]
 800ab94:	4313      	orrs	r3, r2
 800ab96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	693a      	ldr	r2, [r7, #16]
 800ab9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	685b      	ldr	r3, [r3, #4]
 800aba2:	2203      	movs	r2, #3
 800aba4:	4013      	ands	r3, r2
 800aba6:	2b02      	cmp	r3, #2
 800aba8:	d146      	bne.n	800ac38 <HAL_GPIO_Init+0x2a8>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800abaa:	687a      	ldr	r2, [r7, #4]
 800abac:	2390      	movs	r3, #144	; 0x90
 800abae:	05db      	lsls	r3, r3, #23
 800abb0:	429a      	cmp	r2, r3
 800abb2:	d014      	beq.n	800abde <HAL_GPIO_Init+0x24e>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	4a4c      	ldr	r2, [pc, #304]	; (800ace8 <HAL_GPIO_Init+0x358>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	d010      	beq.n	800abde <HAL_GPIO_Init+0x24e>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	4a4b      	ldr	r2, [pc, #300]	; (800acec <HAL_GPIO_Init+0x35c>)
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d00c      	beq.n	800abde <HAL_GPIO_Init+0x24e>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	4a4a      	ldr	r2, [pc, #296]	; (800acf0 <HAL_GPIO_Init+0x360>)
 800abc8:	4293      	cmp	r3, r2
 800abca:	d008      	beq.n	800abde <HAL_GPIO_Init+0x24e>
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	4a49      	ldr	r2, [pc, #292]	; (800acf4 <HAL_GPIO_Init+0x364>)
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d004      	beq.n	800abde <HAL_GPIO_Init+0x24e>
 800abd4:	4b48      	ldr	r3, [pc, #288]	; (800acf8 <HAL_GPIO_Init+0x368>)
 800abd6:	21e0      	movs	r1, #224	; 0xe0
 800abd8:	0018      	movs	r0, r3
 800abda:	f7f8 fd00 	bl	80035de <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	691b      	ldr	r3, [r3, #16]
 800abe2:	2b06      	cmp	r3, #6
 800abe4:	d904      	bls.n	800abf0 <HAL_GPIO_Init+0x260>
 800abe6:	4b44      	ldr	r3, [pc, #272]	; (800acf8 <HAL_GPIO_Init+0x368>)
 800abe8:	21e1      	movs	r1, #225	; 0xe1
 800abea:	0018      	movs	r0, r3
 800abec:	f7f8 fcf7 	bl	80035de <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	08da      	lsrs	r2, r3, #3
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	3208      	adds	r2, #8
 800abf8:	0092      	lsls	r2, r2, #2
 800abfa:	58d3      	ldr	r3, [r2, r3]
 800abfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	2207      	movs	r2, #7
 800ac02:	4013      	ands	r3, r2
 800ac04:	009b      	lsls	r3, r3, #2
 800ac06:	220f      	movs	r2, #15
 800ac08:	409a      	lsls	r2, r3
 800ac0a:	0013      	movs	r3, r2
 800ac0c:	43da      	mvns	r2, r3
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	4013      	ands	r3, r2
 800ac12:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	691a      	ldr	r2, [r3, #16]
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	2107      	movs	r1, #7
 800ac1c:	400b      	ands	r3, r1
 800ac1e:	009b      	lsls	r3, r3, #2
 800ac20:	409a      	lsls	r2, r3
 800ac22:	0013      	movs	r3, r2
 800ac24:	693a      	ldr	r2, [r7, #16]
 800ac26:	4313      	orrs	r3, r2
 800ac28:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	08da      	lsrs	r2, r3, #3
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	3208      	adds	r2, #8
 800ac32:	0092      	lsls	r2, r2, #2
 800ac34:	6939      	ldr	r1, [r7, #16]
 800ac36:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	005b      	lsls	r3, r3, #1
 800ac42:	2203      	movs	r2, #3
 800ac44:	409a      	lsls	r2, r3
 800ac46:	0013      	movs	r3, r2
 800ac48:	43da      	mvns	r2, r3
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	4013      	ands	r3, r2
 800ac4e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	685b      	ldr	r3, [r3, #4]
 800ac54:	2203      	movs	r2, #3
 800ac56:	401a      	ands	r2, r3
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	005b      	lsls	r3, r3, #1
 800ac5c:	409a      	lsls	r2, r3
 800ac5e:	0013      	movs	r3, r2
 800ac60:	693a      	ldr	r2, [r7, #16]
 800ac62:	4313      	orrs	r3, r2
 800ac64:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	693a      	ldr	r2, [r7, #16]
 800ac6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	685a      	ldr	r2, [r3, #4]
 800ac70:	23c0      	movs	r3, #192	; 0xc0
 800ac72:	029b      	lsls	r3, r3, #10
 800ac74:	4013      	ands	r3, r2
 800ac76:	d100      	bne.n	800ac7a <HAL_GPIO_Init+0x2ea>
 800ac78:	e0a8      	b.n	800adcc <HAL_GPIO_Init+0x43c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ac7a:	4b20      	ldr	r3, [pc, #128]	; (800acfc <HAL_GPIO_Init+0x36c>)
 800ac7c:	699a      	ldr	r2, [r3, #24]
 800ac7e:	4b1f      	ldr	r3, [pc, #124]	; (800acfc <HAL_GPIO_Init+0x36c>)
 800ac80:	2101      	movs	r1, #1
 800ac82:	430a      	orrs	r2, r1
 800ac84:	619a      	str	r2, [r3, #24]
 800ac86:	4b1d      	ldr	r3, [pc, #116]	; (800acfc <HAL_GPIO_Init+0x36c>)
 800ac88:	699b      	ldr	r3, [r3, #24]
 800ac8a:	2201      	movs	r2, #1
 800ac8c:	4013      	ands	r3, r2
 800ac8e:	60bb      	str	r3, [r7, #8]
 800ac90:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800ac92:	4a1b      	ldr	r2, [pc, #108]	; (800ad00 <HAL_GPIO_Init+0x370>)
 800ac94:	697b      	ldr	r3, [r7, #20]
 800ac96:	089b      	lsrs	r3, r3, #2
 800ac98:	3302      	adds	r3, #2
 800ac9a:	009b      	lsls	r3, r3, #2
 800ac9c:	589b      	ldr	r3, [r3, r2]
 800ac9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	2203      	movs	r2, #3
 800aca4:	4013      	ands	r3, r2
 800aca6:	009b      	lsls	r3, r3, #2
 800aca8:	220f      	movs	r2, #15
 800acaa:	409a      	lsls	r2, r3
 800acac:	0013      	movs	r3, r2
 800acae:	43da      	mvns	r2, r3
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	4013      	ands	r3, r2
 800acb4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800acb6:	687a      	ldr	r2, [r7, #4]
 800acb8:	2390      	movs	r3, #144	; 0x90
 800acba:	05db      	lsls	r3, r3, #23
 800acbc:	429a      	cmp	r2, r3
 800acbe:	d021      	beq.n	800ad04 <HAL_GPIO_Init+0x374>
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	4a09      	ldr	r2, [pc, #36]	; (800ace8 <HAL_GPIO_Init+0x358>)
 800acc4:	4293      	cmp	r3, r2
 800acc6:	d00d      	beq.n	800ace4 <HAL_GPIO_Init+0x354>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	4a08      	ldr	r2, [pc, #32]	; (800acec <HAL_GPIO_Init+0x35c>)
 800accc:	4293      	cmp	r3, r2
 800acce:	d007      	beq.n	800ace0 <HAL_GPIO_Init+0x350>
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	4a07      	ldr	r2, [pc, #28]	; (800acf0 <HAL_GPIO_Init+0x360>)
 800acd4:	4293      	cmp	r3, r2
 800acd6:	d101      	bne.n	800acdc <HAL_GPIO_Init+0x34c>
 800acd8:	2303      	movs	r3, #3
 800acda:	e014      	b.n	800ad06 <HAL_GPIO_Init+0x376>
 800acdc:	2305      	movs	r3, #5
 800acde:	e012      	b.n	800ad06 <HAL_GPIO_Init+0x376>
 800ace0:	2302      	movs	r3, #2
 800ace2:	e010      	b.n	800ad06 <HAL_GPIO_Init+0x376>
 800ace4:	2301      	movs	r3, #1
 800ace6:	e00e      	b.n	800ad06 <HAL_GPIO_Init+0x376>
 800ace8:	48000400 	.word	0x48000400
 800acec:	48000800 	.word	0x48000800
 800acf0:	48000c00 	.word	0x48000c00
 800acf4:	48001400 	.word	0x48001400
 800acf8:	08016e94 	.word	0x08016e94
 800acfc:	40021000 	.word	0x40021000
 800ad00:	40010000 	.word	0x40010000
 800ad04:	2300      	movs	r3, #0
 800ad06:	697a      	ldr	r2, [r7, #20]
 800ad08:	2103      	movs	r1, #3
 800ad0a:	400a      	ands	r2, r1
 800ad0c:	0092      	lsls	r2, r2, #2
 800ad0e:	4093      	lsls	r3, r2
 800ad10:	693a      	ldr	r2, [r7, #16]
 800ad12:	4313      	orrs	r3, r2
 800ad14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800ad16:	4935      	ldr	r1, [pc, #212]	; (800adec <HAL_GPIO_Init+0x45c>)
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	089b      	lsrs	r3, r3, #2
 800ad1c:	3302      	adds	r3, #2
 800ad1e:	009b      	lsls	r3, r3, #2
 800ad20:	693a      	ldr	r2, [r7, #16]
 800ad22:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ad24:	4b32      	ldr	r3, [pc, #200]	; (800adf0 <HAL_GPIO_Init+0x460>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	43da      	mvns	r2, r3
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	4013      	ands	r3, r2
 800ad32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	685a      	ldr	r2, [r3, #4]
 800ad38:	2380      	movs	r3, #128	; 0x80
 800ad3a:	025b      	lsls	r3, r3, #9
 800ad3c:	4013      	ands	r3, r2
 800ad3e:	d003      	beq.n	800ad48 <HAL_GPIO_Init+0x3b8>
        {
          temp |= iocurrent;
 800ad40:	693a      	ldr	r2, [r7, #16]
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	4313      	orrs	r3, r2
 800ad46:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800ad48:	4b29      	ldr	r3, [pc, #164]	; (800adf0 <HAL_GPIO_Init+0x460>)
 800ad4a:	693a      	ldr	r2, [r7, #16]
 800ad4c:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800ad4e:	4b28      	ldr	r3, [pc, #160]	; (800adf0 <HAL_GPIO_Init+0x460>)
 800ad50:	685b      	ldr	r3, [r3, #4]
 800ad52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	43da      	mvns	r2, r3
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	4013      	ands	r3, r2
 800ad5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	685a      	ldr	r2, [r3, #4]
 800ad62:	2380      	movs	r3, #128	; 0x80
 800ad64:	029b      	lsls	r3, r3, #10
 800ad66:	4013      	ands	r3, r2
 800ad68:	d003      	beq.n	800ad72 <HAL_GPIO_Init+0x3e2>
        {
          temp |= iocurrent;
 800ad6a:	693a      	ldr	r2, [r7, #16]
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	4313      	orrs	r3, r2
 800ad70:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800ad72:	4b1f      	ldr	r3, [pc, #124]	; (800adf0 <HAL_GPIO_Init+0x460>)
 800ad74:	693a      	ldr	r2, [r7, #16]
 800ad76:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ad78:	4b1d      	ldr	r3, [pc, #116]	; (800adf0 <HAL_GPIO_Init+0x460>)
 800ad7a:	689b      	ldr	r3, [r3, #8]
 800ad7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	43da      	mvns	r2, r3
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	4013      	ands	r3, r2
 800ad86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	685a      	ldr	r2, [r3, #4]
 800ad8c:	2380      	movs	r3, #128	; 0x80
 800ad8e:	035b      	lsls	r3, r3, #13
 800ad90:	4013      	ands	r3, r2
 800ad92:	d003      	beq.n	800ad9c <HAL_GPIO_Init+0x40c>
        {
          temp |= iocurrent;
 800ad94:	693a      	ldr	r2, [r7, #16]
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	4313      	orrs	r3, r2
 800ad9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800ad9c:	4b14      	ldr	r3, [pc, #80]	; (800adf0 <HAL_GPIO_Init+0x460>)
 800ad9e:	693a      	ldr	r2, [r7, #16]
 800ada0:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800ada2:	4b13      	ldr	r3, [pc, #76]	; (800adf0 <HAL_GPIO_Init+0x460>)
 800ada4:	68db      	ldr	r3, [r3, #12]
 800ada6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	43da      	mvns	r2, r3
 800adac:	693b      	ldr	r3, [r7, #16]
 800adae:	4013      	ands	r3, r2
 800adb0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	685a      	ldr	r2, [r3, #4]
 800adb6:	2380      	movs	r3, #128	; 0x80
 800adb8:	039b      	lsls	r3, r3, #14
 800adba:	4013      	ands	r3, r2
 800adbc:	d003      	beq.n	800adc6 <HAL_GPIO_Init+0x436>
        {
          temp |= iocurrent;
 800adbe:	693a      	ldr	r2, [r7, #16]
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	4313      	orrs	r3, r2
 800adc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800adc6:	4b0a      	ldr	r3, [pc, #40]	; (800adf0 <HAL_GPIO_Init+0x460>)
 800adc8:	693a      	ldr	r2, [r7, #16]
 800adca:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	3301      	adds	r3, #1
 800add0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	681a      	ldr	r2, [r3, #0]
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	40da      	lsrs	r2, r3
 800adda:	1e13      	subs	r3, r2, #0
 800addc:	d000      	beq.n	800ade0 <HAL_GPIO_Init+0x450>
 800adde:	e655      	b.n	800aa8c <HAL_GPIO_Init+0xfc>
  } 
}
 800ade0:	46c0      	nop			; (mov r8, r8)
 800ade2:	46c0      	nop			; (mov r8, r8)
 800ade4:	46bd      	mov	sp, r7
 800ade6:	b006      	add	sp, #24
 800ade8:	bd80      	pop	{r7, pc}
 800adea:	46c0      	nop			; (mov r8, r8)
 800adec:	40010000 	.word	0x40010000
 800adf0:	40010400 	.word	0x40010400

0800adf4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b084      	sub	sp, #16
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	000a      	movs	r2, r1
 800adfe:	1cbb      	adds	r3, r7, #2
 800ae00:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800ae02:	1cbb      	adds	r3, r7, #2
 800ae04:	881b      	ldrh	r3, [r3, #0]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d004      	beq.n	800ae14 <HAL_GPIO_ReadPin+0x20>
 800ae0a:	1cbb      	adds	r3, r7, #2
 800ae0c:	881b      	ldrh	r3, [r3, #0]
 800ae0e:	0c1b      	lsrs	r3, r3, #16
 800ae10:	041b      	lsls	r3, r3, #16
 800ae12:	d007      	beq.n	800ae24 <HAL_GPIO_ReadPin+0x30>
 800ae14:	2384      	movs	r3, #132	; 0x84
 800ae16:	33ff      	adds	r3, #255	; 0xff
 800ae18:	001a      	movs	r2, r3
 800ae1a:	4b0d      	ldr	r3, [pc, #52]	; (800ae50 <HAL_GPIO_ReadPin+0x5c>)
 800ae1c:	0011      	movs	r1, r2
 800ae1e:	0018      	movs	r0, r3
 800ae20:	f7f8 fbdd 	bl	80035de <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	691b      	ldr	r3, [r3, #16]
 800ae28:	1cba      	adds	r2, r7, #2
 800ae2a:	8812      	ldrh	r2, [r2, #0]
 800ae2c:	4013      	ands	r3, r2
 800ae2e:	d004      	beq.n	800ae3a <HAL_GPIO_ReadPin+0x46>
  {
    bitstatus = GPIO_PIN_SET;
 800ae30:	230f      	movs	r3, #15
 800ae32:	18fb      	adds	r3, r7, r3
 800ae34:	2201      	movs	r2, #1
 800ae36:	701a      	strb	r2, [r3, #0]
 800ae38:	e003      	b.n	800ae42 <HAL_GPIO_ReadPin+0x4e>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ae3a:	230f      	movs	r3, #15
 800ae3c:	18fb      	adds	r3, r7, r3
 800ae3e:	2200      	movs	r2, #0
 800ae40:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800ae42:	230f      	movs	r3, #15
 800ae44:	18fb      	adds	r3, r7, r3
 800ae46:	781b      	ldrb	r3, [r3, #0]
  }
 800ae48:	0018      	movs	r0, r3
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	b004      	add	sp, #16
 800ae4e:	bd80      	pop	{r7, pc}
 800ae50:	08016e94 	.word	0x08016e94

0800ae54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b082      	sub	sp, #8
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	0008      	movs	r0, r1
 800ae5e:	0011      	movs	r1, r2
 800ae60:	1cbb      	adds	r3, r7, #2
 800ae62:	1c02      	adds	r2, r0, #0
 800ae64:	801a      	strh	r2, [r3, #0]
 800ae66:	1c7b      	adds	r3, r7, #1
 800ae68:	1c0a      	adds	r2, r1, #0
 800ae6a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800ae6c:	1cbb      	adds	r3, r7, #2
 800ae6e:	881b      	ldrh	r3, [r3, #0]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d004      	beq.n	800ae7e <HAL_GPIO_WritePin+0x2a>
 800ae74:	1cbb      	adds	r3, r7, #2
 800ae76:	881b      	ldrh	r3, [r3, #0]
 800ae78:	0c1b      	lsrs	r3, r3, #16
 800ae7a:	041b      	lsls	r3, r3, #16
 800ae7c:	d006      	beq.n	800ae8c <HAL_GPIO_WritePin+0x38>
 800ae7e:	23d1      	movs	r3, #209	; 0xd1
 800ae80:	005a      	lsls	r2, r3, #1
 800ae82:	4b13      	ldr	r3, [pc, #76]	; (800aed0 <HAL_GPIO_WritePin+0x7c>)
 800ae84:	0011      	movs	r1, r2
 800ae86:	0018      	movs	r0, r3
 800ae88:	f7f8 fba9 	bl	80035de <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800ae8c:	1c7b      	adds	r3, r7, #1
 800ae8e:	781b      	ldrb	r3, [r3, #0]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d00b      	beq.n	800aeac <HAL_GPIO_WritePin+0x58>
 800ae94:	1c7b      	adds	r3, r7, #1
 800ae96:	781b      	ldrb	r3, [r3, #0]
 800ae98:	2b01      	cmp	r3, #1
 800ae9a:	d007      	beq.n	800aeac <HAL_GPIO_WritePin+0x58>
 800ae9c:	23a4      	movs	r3, #164	; 0xa4
 800ae9e:	33ff      	adds	r3, #255	; 0xff
 800aea0:	001a      	movs	r2, r3
 800aea2:	4b0b      	ldr	r3, [pc, #44]	; (800aed0 <HAL_GPIO_WritePin+0x7c>)
 800aea4:	0011      	movs	r1, r2
 800aea6:	0018      	movs	r0, r3
 800aea8:	f7f8 fb99 	bl	80035de <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 800aeac:	1c7b      	adds	r3, r7, #1
 800aeae:	781b      	ldrb	r3, [r3, #0]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d004      	beq.n	800aebe <HAL_GPIO_WritePin+0x6a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800aeb4:	1cbb      	adds	r3, r7, #2
 800aeb6:	881a      	ldrh	r2, [r3, #0]
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800aebc:	e003      	b.n	800aec6 <HAL_GPIO_WritePin+0x72>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800aebe:	1cbb      	adds	r3, r7, #2
 800aec0:	881a      	ldrh	r2, [r3, #0]
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	629a      	str	r2, [r3, #40]	; 0x28
}
 800aec6:	46c0      	nop			; (mov r8, r8)
 800aec8:	46bd      	mov	sp, r7
 800aeca:	b002      	add	sp, #8
 800aecc:	bd80      	pop	{r7, pc}
 800aece:	46c0      	nop			; (mov r8, r8)
 800aed0:	08016e94 	.word	0x08016e94

0800aed4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b084      	sub	sp, #16
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	000a      	movs	r2, r1
 800aede:	1cbb      	adds	r3, r7, #2
 800aee0:	801a      	strh	r2, [r3, #0]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800aee2:	1cbb      	adds	r3, r7, #2
 800aee4:	881b      	ldrh	r3, [r3, #0]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d004      	beq.n	800aef4 <HAL_GPIO_TogglePin+0x20>
 800aeea:	1cbb      	adds	r3, r7, #2
 800aeec:	881b      	ldrh	r3, [r3, #0]
 800aeee:	0c1b      	lsrs	r3, r3, #16
 800aef0:	041b      	lsls	r3, r3, #16
 800aef2:	d006      	beq.n	800af02 <HAL_GPIO_TogglePin+0x2e>
 800aef4:	23dd      	movs	r3, #221	; 0xdd
 800aef6:	005a      	lsls	r2, r3, #1
 800aef8:	4b0c      	ldr	r3, [pc, #48]	; (800af2c <HAL_GPIO_TogglePin+0x58>)
 800aefa:	0011      	movs	r1, r2
 800aefc:	0018      	movs	r0, r3
 800aefe:	f7f8 fb6e 	bl	80035de <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	695b      	ldr	r3, [r3, #20]
 800af06:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800af08:	1cbb      	adds	r3, r7, #2
 800af0a:	881b      	ldrh	r3, [r3, #0]
 800af0c:	68fa      	ldr	r2, [r7, #12]
 800af0e:	4013      	ands	r3, r2
 800af10:	041a      	lsls	r2, r3, #16
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	43db      	mvns	r3, r3
 800af16:	1cb9      	adds	r1, r7, #2
 800af18:	8809      	ldrh	r1, [r1, #0]
 800af1a:	400b      	ands	r3, r1
 800af1c:	431a      	orrs	r2, r3
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	619a      	str	r2, [r3, #24]
}
 800af22:	46c0      	nop			; (mov r8, r8)
 800af24:	46bd      	mov	sp, r7
 800af26:	b004      	add	sp, #16
 800af28:	bd80      	pop	{r7, pc}
 800af2a:	46c0      	nop			; (mov r8, r8)
 800af2c:	08016e94 	.word	0x08016e94

0800af30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b082      	sub	sp, #8
 800af34:	af00      	add	r7, sp, #0
 800af36:	0002      	movs	r2, r0
 800af38:	1dbb      	adds	r3, r7, #6
 800af3a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800af3c:	4b09      	ldr	r3, [pc, #36]	; (800af64 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800af3e:	695b      	ldr	r3, [r3, #20]
 800af40:	1dba      	adds	r2, r7, #6
 800af42:	8812      	ldrh	r2, [r2, #0]
 800af44:	4013      	ands	r3, r2
 800af46:	d008      	beq.n	800af5a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800af48:	4b06      	ldr	r3, [pc, #24]	; (800af64 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800af4a:	1dba      	adds	r2, r7, #6
 800af4c:	8812      	ldrh	r2, [r2, #0]
 800af4e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800af50:	1dbb      	adds	r3, r7, #6
 800af52:	881b      	ldrh	r3, [r3, #0]
 800af54:	0018      	movs	r0, r3
 800af56:	f000 f807 	bl	800af68 <HAL_GPIO_EXTI_Callback>
  }
}
 800af5a:	46c0      	nop			; (mov r8, r8)
 800af5c:	46bd      	mov	sp, r7
 800af5e:	b002      	add	sp, #8
 800af60:	bd80      	pop	{r7, pc}
 800af62:	46c0      	nop			; (mov r8, r8)
 800af64:	40010400 	.word	0x40010400

0800af68 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b082      	sub	sp, #8
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	0002      	movs	r2, r0
 800af70:	1dbb      	adds	r3, r7, #6
 800af72:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 800af74:	46c0      	nop			; (mov r8, r8)
 800af76:	46bd      	mov	sp, r7
 800af78:	b002      	add	sp, #8
 800af7a:	bd80      	pop	{r7, pc}

0800af7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b082      	sub	sp, #8
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d101      	bne.n	800af8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800af8a:	2301      	movs	r3, #1
 800af8c:	e10e      	b.n	800b1ac <HAL_I2C_Init+0x230>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	4a88      	ldr	r2, [pc, #544]	; (800b1b4 <HAL_I2C_Init+0x238>)
 800af94:	4293      	cmp	r3, r2
 800af96:	d00a      	beq.n	800afae <HAL_I2C_Init+0x32>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	4a86      	ldr	r2, [pc, #536]	; (800b1b8 <HAL_I2C_Init+0x23c>)
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d005      	beq.n	800afae <HAL_I2C_Init+0x32>
 800afa2:	4a86      	ldr	r2, [pc, #536]	; (800b1bc <HAL_I2C_Init+0x240>)
 800afa4:	4b86      	ldr	r3, [pc, #536]	; (800b1c0 <HAL_I2C_Init+0x244>)
 800afa6:	0011      	movs	r1, r2
 800afa8:	0018      	movs	r0, r3
 800afaa:	f7f8 fb18 	bl	80035de <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	689a      	ldr	r2, [r3, #8]
 800afb2:	2380      	movs	r3, #128	; 0x80
 800afb4:	00db      	lsls	r3, r3, #3
 800afb6:	429a      	cmp	r2, r3
 800afb8:	d306      	bcc.n	800afc8 <HAL_I2C_Init+0x4c>
 800afba:	2385      	movs	r3, #133	; 0x85
 800afbc:	009a      	lsls	r2, r3, #2
 800afbe:	4b80      	ldr	r3, [pc, #512]	; (800b1c0 <HAL_I2C_Init+0x244>)
 800afc0:	0011      	movs	r1, r2
 800afc2:	0018      	movs	r0, r3
 800afc4:	f7f8 fb0b 	bl	80035de <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	68db      	ldr	r3, [r3, #12]
 800afcc:	2b01      	cmp	r3, #1
 800afce:	d009      	beq.n	800afe4 <HAL_I2C_Init+0x68>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	68db      	ldr	r3, [r3, #12]
 800afd4:	2b02      	cmp	r3, #2
 800afd6:	d005      	beq.n	800afe4 <HAL_I2C_Init+0x68>
 800afd8:	4a7a      	ldr	r2, [pc, #488]	; (800b1c4 <HAL_I2C_Init+0x248>)
 800afda:	4b79      	ldr	r3, [pc, #484]	; (800b1c0 <HAL_I2C_Init+0x244>)
 800afdc:	0011      	movs	r1, r2
 800afde:	0018      	movs	r0, r3
 800afe0:	f7f8 fafd 	bl	80035de <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	691b      	ldr	r3, [r3, #16]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d00b      	beq.n	800b004 <HAL_I2C_Init+0x88>
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	691a      	ldr	r2, [r3, #16]
 800aff0:	2380      	movs	r3, #128	; 0x80
 800aff2:	021b      	lsls	r3, r3, #8
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d005      	beq.n	800b004 <HAL_I2C_Init+0x88>
 800aff8:	4a73      	ldr	r2, [pc, #460]	; (800b1c8 <HAL_I2C_Init+0x24c>)
 800affa:	4b71      	ldr	r3, [pc, #452]	; (800b1c0 <HAL_I2C_Init+0x244>)
 800affc:	0011      	movs	r1, r2
 800affe:	0018      	movs	r0, r3
 800b000:	f7f8 faed 	bl	80035de <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	695b      	ldr	r3, [r3, #20]
 800b008:	2bff      	cmp	r3, #255	; 0xff
 800b00a:	d905      	bls.n	800b018 <HAL_I2C_Init+0x9c>
 800b00c:	4a6f      	ldr	r2, [pc, #444]	; (800b1cc <HAL_I2C_Init+0x250>)
 800b00e:	4b6c      	ldr	r3, [pc, #432]	; (800b1c0 <HAL_I2C_Init+0x244>)
 800b010:	0011      	movs	r1, r2
 800b012:	0018      	movs	r0, r3
 800b014:	f7f8 fae3 	bl	80035de <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	699b      	ldr	r3, [r3, #24]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d022      	beq.n	800b066 <HAL_I2C_Init+0xea>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	699b      	ldr	r3, [r3, #24]
 800b024:	2b01      	cmp	r3, #1
 800b026:	d01e      	beq.n	800b066 <HAL_I2C_Init+0xea>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	699b      	ldr	r3, [r3, #24]
 800b02c:	2b02      	cmp	r3, #2
 800b02e:	d01a      	beq.n	800b066 <HAL_I2C_Init+0xea>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	699b      	ldr	r3, [r3, #24]
 800b034:	2b03      	cmp	r3, #3
 800b036:	d016      	beq.n	800b066 <HAL_I2C_Init+0xea>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	699b      	ldr	r3, [r3, #24]
 800b03c:	2b04      	cmp	r3, #4
 800b03e:	d012      	beq.n	800b066 <HAL_I2C_Init+0xea>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	699b      	ldr	r3, [r3, #24]
 800b044:	2b05      	cmp	r3, #5
 800b046:	d00e      	beq.n	800b066 <HAL_I2C_Init+0xea>
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	699b      	ldr	r3, [r3, #24]
 800b04c:	2b06      	cmp	r3, #6
 800b04e:	d00a      	beq.n	800b066 <HAL_I2C_Init+0xea>
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	699b      	ldr	r3, [r3, #24]
 800b054:	2b07      	cmp	r3, #7
 800b056:	d006      	beq.n	800b066 <HAL_I2C_Init+0xea>
 800b058:	2386      	movs	r3, #134	; 0x86
 800b05a:	009a      	lsls	r2, r3, #2
 800b05c:	4b58      	ldr	r3, [pc, #352]	; (800b1c0 <HAL_I2C_Init+0x244>)
 800b05e:	0011      	movs	r1, r2
 800b060:	0018      	movs	r0, r3
 800b062:	f7f8 fabc 	bl	80035de <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	69db      	ldr	r3, [r3, #28]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d00b      	beq.n	800b086 <HAL_I2C_Init+0x10a>
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	69da      	ldr	r2, [r3, #28]
 800b072:	2380      	movs	r3, #128	; 0x80
 800b074:	031b      	lsls	r3, r3, #12
 800b076:	429a      	cmp	r2, r3
 800b078:	d005      	beq.n	800b086 <HAL_I2C_Init+0x10a>
 800b07a:	4a55      	ldr	r2, [pc, #340]	; (800b1d0 <HAL_I2C_Init+0x254>)
 800b07c:	4b50      	ldr	r3, [pc, #320]	; (800b1c0 <HAL_I2C_Init+0x244>)
 800b07e:	0011      	movs	r1, r2
 800b080:	0018      	movs	r0, r3
 800b082:	f7f8 faac 	bl	80035de <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6a1b      	ldr	r3, [r3, #32]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d00b      	beq.n	800b0a6 <HAL_I2C_Init+0x12a>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6a1a      	ldr	r2, [r3, #32]
 800b092:	2380      	movs	r3, #128	; 0x80
 800b094:	029b      	lsls	r3, r3, #10
 800b096:	429a      	cmp	r2, r3
 800b098:	d005      	beq.n	800b0a6 <HAL_I2C_Init+0x12a>
 800b09a:	4a4e      	ldr	r2, [pc, #312]	; (800b1d4 <HAL_I2C_Init+0x258>)
 800b09c:	4b48      	ldr	r3, [pc, #288]	; (800b1c0 <HAL_I2C_Init+0x244>)
 800b09e:	0011      	movs	r1, r2
 800b0a0:	0018      	movs	r0, r3
 800b0a2:	f7f8 fa9c 	bl	80035de <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2241      	movs	r2, #65	; 0x41
 800b0aa:	5c9b      	ldrb	r3, [r3, r2]
 800b0ac:	b2db      	uxtb	r3, r3
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d107      	bne.n	800b0c2 <HAL_I2C_Init+0x146>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2240      	movs	r2, #64	; 0x40
 800b0b6:	2100      	movs	r1, #0
 800b0b8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	0018      	movs	r0, r3
 800b0be:	f7f8 fb07 	bl	80036d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2241      	movs	r2, #65	; 0x41
 800b0c6:	2124      	movs	r1, #36	; 0x24
 800b0c8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	681a      	ldr	r2, [r3, #0]
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	2101      	movs	r1, #1
 800b0d6:	438a      	bics	r2, r1
 800b0d8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	685a      	ldr	r2, [r3, #4]
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	493d      	ldr	r1, [pc, #244]	; (800b1d8 <HAL_I2C_Init+0x25c>)
 800b0e4:	400a      	ands	r2, r1
 800b0e6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	689a      	ldr	r2, [r3, #8]
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	493a      	ldr	r1, [pc, #232]	; (800b1dc <HAL_I2C_Init+0x260>)
 800b0f4:	400a      	ands	r2, r1
 800b0f6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	68db      	ldr	r3, [r3, #12]
 800b0fc:	2b01      	cmp	r3, #1
 800b0fe:	d108      	bne.n	800b112 <HAL_I2C_Init+0x196>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	689a      	ldr	r2, [r3, #8]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	2180      	movs	r1, #128	; 0x80
 800b10a:	0209      	lsls	r1, r1, #8
 800b10c:	430a      	orrs	r2, r1
 800b10e:	609a      	str	r2, [r3, #8]
 800b110:	e007      	b.n	800b122 <HAL_I2C_Init+0x1a6>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	689a      	ldr	r2, [r3, #8]
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	2184      	movs	r1, #132	; 0x84
 800b11c:	0209      	lsls	r1, r1, #8
 800b11e:	430a      	orrs	r2, r1
 800b120:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	68db      	ldr	r3, [r3, #12]
 800b126:	2b02      	cmp	r3, #2
 800b128:	d104      	bne.n	800b134 <HAL_I2C_Init+0x1b8>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	2280      	movs	r2, #128	; 0x80
 800b130:	0112      	lsls	r2, r2, #4
 800b132:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	685a      	ldr	r2, [r3, #4]
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	4928      	ldr	r1, [pc, #160]	; (800b1e0 <HAL_I2C_Init+0x264>)
 800b140:	430a      	orrs	r2, r1
 800b142:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	68da      	ldr	r2, [r3, #12]
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	4923      	ldr	r1, [pc, #140]	; (800b1dc <HAL_I2C_Init+0x260>)
 800b150:	400a      	ands	r2, r1
 800b152:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	691a      	ldr	r2, [r3, #16]
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	695b      	ldr	r3, [r3, #20]
 800b15c:	431a      	orrs	r2, r3
 800b15e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	699b      	ldr	r3, [r3, #24]
 800b164:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	430a      	orrs	r2, r1
 800b16c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	69d9      	ldr	r1, [r3, #28]
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6a1a      	ldr	r2, [r3, #32]
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	430a      	orrs	r2, r1
 800b17c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	681a      	ldr	r2, [r3, #0]
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	2101      	movs	r1, #1
 800b18a:	430a      	orrs	r2, r1
 800b18c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2200      	movs	r2, #0
 800b192:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2241      	movs	r2, #65	; 0x41
 800b198:	2120      	movs	r1, #32
 800b19a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2242      	movs	r2, #66	; 0x42
 800b1a6:	2100      	movs	r1, #0
 800b1a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b1aa:	2300      	movs	r3, #0
}
 800b1ac:	0018      	movs	r0, r3
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	b002      	add	sp, #8
 800b1b2:	bd80      	pop	{r7, pc}
 800b1b4:	40005400 	.word	0x40005400
 800b1b8:	40005800 	.word	0x40005800
 800b1bc:	00000213 	.word	0x00000213
 800b1c0:	08016ed0 	.word	0x08016ed0
 800b1c4:	00000215 	.word	0x00000215
 800b1c8:	00000216 	.word	0x00000216
 800b1cc:	00000217 	.word	0x00000217
 800b1d0:	00000219 	.word	0x00000219
 800b1d4:	0000021a 	.word	0x0000021a
 800b1d8:	f0ffffff 	.word	0xf0ffffff
 800b1dc:	ffff7fff 	.word	0xffff7fff
 800b1e0:	02008000 	.word	0x02008000

0800b1e4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b1e4:	b590      	push	{r4, r7, lr}
 800b1e6:	b089      	sub	sp, #36	; 0x24
 800b1e8:	af02      	add	r7, sp, #8
 800b1ea:	60f8      	str	r0, [r7, #12]
 800b1ec:	000c      	movs	r4, r1
 800b1ee:	0010      	movs	r0, r2
 800b1f0:	0019      	movs	r1, r3
 800b1f2:	230a      	movs	r3, #10
 800b1f4:	18fb      	adds	r3, r7, r3
 800b1f6:	1c22      	adds	r2, r4, #0
 800b1f8:	801a      	strh	r2, [r3, #0]
 800b1fa:	2308      	movs	r3, #8
 800b1fc:	18fb      	adds	r3, r7, r3
 800b1fe:	1c02      	adds	r2, r0, #0
 800b200:	801a      	strh	r2, [r3, #0]
 800b202:	1dbb      	adds	r3, r7, #6
 800b204:	1c0a      	adds	r2, r1, #0
 800b206:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800b208:	1dbb      	adds	r3, r7, #6
 800b20a:	881b      	ldrh	r3, [r3, #0]
 800b20c:	2b01      	cmp	r3, #1
 800b20e:	d009      	beq.n	800b224 <HAL_I2C_Mem_Write+0x40>
 800b210:	1dbb      	adds	r3, r7, #6
 800b212:	881b      	ldrh	r3, [r3, #0]
 800b214:	2b02      	cmp	r3, #2
 800b216:	d005      	beq.n	800b224 <HAL_I2C_Mem_Write+0x40>
 800b218:	4a8f      	ldr	r2, [pc, #572]	; (800b458 <HAL_I2C_Mem_Write+0x274>)
 800b21a:	4b90      	ldr	r3, [pc, #576]	; (800b45c <HAL_I2C_Mem_Write+0x278>)
 800b21c:	0011      	movs	r1, r2
 800b21e:	0018      	movs	r0, r3
 800b220:	f7f8 f9dd 	bl	80035de <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2241      	movs	r2, #65	; 0x41
 800b228:	5c9b      	ldrb	r3, [r3, r2]
 800b22a:	b2db      	uxtb	r3, r3
 800b22c:	2b20      	cmp	r3, #32
 800b22e:	d000      	beq.n	800b232 <HAL_I2C_Mem_Write+0x4e>
 800b230:	e10c      	b.n	800b44c <HAL_I2C_Mem_Write+0x268>
  {
    if ((pData == NULL) || (Size == 0U))
 800b232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b234:	2b00      	cmp	r3, #0
 800b236:	d004      	beq.n	800b242 <HAL_I2C_Mem_Write+0x5e>
 800b238:	232c      	movs	r3, #44	; 0x2c
 800b23a:	18fb      	adds	r3, r7, r3
 800b23c:	881b      	ldrh	r3, [r3, #0]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d105      	bne.n	800b24e <HAL_I2C_Mem_Write+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	2280      	movs	r2, #128	; 0x80
 800b246:	0092      	lsls	r2, r2, #2
 800b248:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b24a:	2301      	movs	r3, #1
 800b24c:	e0ff      	b.n	800b44e <HAL_I2C_Mem_Write+0x26a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	2240      	movs	r2, #64	; 0x40
 800b252:	5c9b      	ldrb	r3, [r3, r2]
 800b254:	2b01      	cmp	r3, #1
 800b256:	d101      	bne.n	800b25c <HAL_I2C_Mem_Write+0x78>
 800b258:	2302      	movs	r3, #2
 800b25a:	e0f8      	b.n	800b44e <HAL_I2C_Mem_Write+0x26a>
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	2240      	movs	r2, #64	; 0x40
 800b260:	2101      	movs	r1, #1
 800b262:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b264:	f7fe fa88 	bl	8009778 <HAL_GetTick>
 800b268:	0003      	movs	r3, r0
 800b26a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b26c:	2380      	movs	r3, #128	; 0x80
 800b26e:	0219      	lsls	r1, r3, #8
 800b270:	68f8      	ldr	r0, [r7, #12]
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	9300      	str	r3, [sp, #0]
 800b276:	2319      	movs	r3, #25
 800b278:	2201      	movs	r2, #1
 800b27a:	f001 f9c1 	bl	800c600 <I2C_WaitOnFlagUntilTimeout>
 800b27e:	1e03      	subs	r3, r0, #0
 800b280:	d001      	beq.n	800b286 <HAL_I2C_Mem_Write+0xa2>
    {
      return HAL_ERROR;
 800b282:	2301      	movs	r3, #1
 800b284:	e0e3      	b.n	800b44e <HAL_I2C_Mem_Write+0x26a>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	2241      	movs	r2, #65	; 0x41
 800b28a:	2121      	movs	r1, #33	; 0x21
 800b28c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	2242      	movs	r2, #66	; 0x42
 800b292:	2140      	movs	r1, #64	; 0x40
 800b294:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	2200      	movs	r2, #0
 800b29a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	222c      	movs	r2, #44	; 0x2c
 800b2a6:	18ba      	adds	r2, r7, r2
 800b2a8:	8812      	ldrh	r2, [r2, #0]
 800b2aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b2b2:	1dbb      	adds	r3, r7, #6
 800b2b4:	881c      	ldrh	r4, [r3, #0]
 800b2b6:	2308      	movs	r3, #8
 800b2b8:	18fb      	adds	r3, r7, r3
 800b2ba:	881a      	ldrh	r2, [r3, #0]
 800b2bc:	230a      	movs	r3, #10
 800b2be:	18fb      	adds	r3, r7, r3
 800b2c0:	8819      	ldrh	r1, [r3, #0]
 800b2c2:	68f8      	ldr	r0, [r7, #12]
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	9301      	str	r3, [sp, #4]
 800b2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ca:	9300      	str	r3, [sp, #0]
 800b2cc:	0023      	movs	r3, r4
 800b2ce:	f000 fcfd 	bl	800bccc <I2C_RequestMemoryWrite>
 800b2d2:	1e03      	subs	r3, r0, #0
 800b2d4:	d005      	beq.n	800b2e2 <HAL_I2C_Mem_Write+0xfe>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	2240      	movs	r2, #64	; 0x40
 800b2da:	2100      	movs	r1, #0
 800b2dc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800b2de:	2301      	movs	r3, #1
 800b2e0:	e0b5      	b.n	800b44e <HAL_I2C_Mem_Write+0x26a>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2e6:	b29b      	uxth	r3, r3
 800b2e8:	2bff      	cmp	r3, #255	; 0xff
 800b2ea:	d911      	bls.n	800b310 <HAL_I2C_Mem_Write+0x12c>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	22ff      	movs	r2, #255	; 0xff
 800b2f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2f6:	b2da      	uxtb	r2, r3
 800b2f8:	2380      	movs	r3, #128	; 0x80
 800b2fa:	045c      	lsls	r4, r3, #17
 800b2fc:	230a      	movs	r3, #10
 800b2fe:	18fb      	adds	r3, r7, r3
 800b300:	8819      	ldrh	r1, [r3, #0]
 800b302:	68f8      	ldr	r0, [r7, #12]
 800b304:	2300      	movs	r3, #0
 800b306:	9300      	str	r3, [sp, #0]
 800b308:	0023      	movs	r3, r4
 800b30a:	f001 faad 	bl	800c868 <I2C_TransferConfig>
 800b30e:	e012      	b.n	800b336 <HAL_I2C_Mem_Write+0x152>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b314:	b29a      	uxth	r2, r3
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b31e:	b2da      	uxtb	r2, r3
 800b320:	2380      	movs	r3, #128	; 0x80
 800b322:	049c      	lsls	r4, r3, #18
 800b324:	230a      	movs	r3, #10
 800b326:	18fb      	adds	r3, r7, r3
 800b328:	8819      	ldrh	r1, [r3, #0]
 800b32a:	68f8      	ldr	r0, [r7, #12]
 800b32c:	2300      	movs	r3, #0
 800b32e:	9300      	str	r3, [sp, #0]
 800b330:	0023      	movs	r3, r4
 800b332:	f001 fa99 	bl	800c868 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b336:	697a      	ldr	r2, [r7, #20]
 800b338:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	0018      	movs	r0, r3
 800b33e:	f001 f99e 	bl	800c67e <I2C_WaitOnTXISFlagUntilTimeout>
 800b342:	1e03      	subs	r3, r0, #0
 800b344:	d001      	beq.n	800b34a <HAL_I2C_Mem_Write+0x166>
      {
        return HAL_ERROR;
 800b346:	2301      	movs	r3, #1
 800b348:	e081      	b.n	800b44e <HAL_I2C_Mem_Write+0x26a>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b34e:	781a      	ldrb	r2, [r3, #0]
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b35a:	1c5a      	adds	r2, r3, #1
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b364:	b29b      	uxth	r3, r3
 800b366:	3b01      	subs	r3, #1
 800b368:	b29a      	uxth	r2, r3
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b372:	3b01      	subs	r3, #1
 800b374:	b29a      	uxth	r2, r3
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b37e:	b29b      	uxth	r3, r3
 800b380:	2b00      	cmp	r3, #0
 800b382:	d03a      	beq.n	800b3fa <HAL_I2C_Mem_Write+0x216>
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d136      	bne.n	800b3fa <HAL_I2C_Mem_Write+0x216>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b38c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b38e:	68f8      	ldr	r0, [r7, #12]
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	9300      	str	r3, [sp, #0]
 800b394:	0013      	movs	r3, r2
 800b396:	2200      	movs	r2, #0
 800b398:	2180      	movs	r1, #128	; 0x80
 800b39a:	f001 f931 	bl	800c600 <I2C_WaitOnFlagUntilTimeout>
 800b39e:	1e03      	subs	r3, r0, #0
 800b3a0:	d001      	beq.n	800b3a6 <HAL_I2C_Mem_Write+0x1c2>
        {
          return HAL_ERROR;
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	e053      	b.n	800b44e <HAL_I2C_Mem_Write+0x26a>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3aa:	b29b      	uxth	r3, r3
 800b3ac:	2bff      	cmp	r3, #255	; 0xff
 800b3ae:	d911      	bls.n	800b3d4 <HAL_I2C_Mem_Write+0x1f0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	22ff      	movs	r2, #255	; 0xff
 800b3b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3ba:	b2da      	uxtb	r2, r3
 800b3bc:	2380      	movs	r3, #128	; 0x80
 800b3be:	045c      	lsls	r4, r3, #17
 800b3c0:	230a      	movs	r3, #10
 800b3c2:	18fb      	adds	r3, r7, r3
 800b3c4:	8819      	ldrh	r1, [r3, #0]
 800b3c6:	68f8      	ldr	r0, [r7, #12]
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	9300      	str	r3, [sp, #0]
 800b3cc:	0023      	movs	r3, r4
 800b3ce:	f001 fa4b 	bl	800c868 <I2C_TransferConfig>
 800b3d2:	e012      	b.n	800b3fa <HAL_I2C_Mem_Write+0x216>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3d8:	b29a      	uxth	r2, r3
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3e2:	b2da      	uxtb	r2, r3
 800b3e4:	2380      	movs	r3, #128	; 0x80
 800b3e6:	049c      	lsls	r4, r3, #18
 800b3e8:	230a      	movs	r3, #10
 800b3ea:	18fb      	adds	r3, r7, r3
 800b3ec:	8819      	ldrh	r1, [r3, #0]
 800b3ee:	68f8      	ldr	r0, [r7, #12]
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	9300      	str	r3, [sp, #0]
 800b3f4:	0023      	movs	r3, r4
 800b3f6:	f001 fa37 	bl	800c868 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3fe:	b29b      	uxth	r3, r3
 800b400:	2b00      	cmp	r3, #0
 800b402:	d198      	bne.n	800b336 <HAL_I2C_Mem_Write+0x152>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b404:	697a      	ldr	r2, [r7, #20]
 800b406:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	0018      	movs	r0, r3
 800b40c:	f001 f976 	bl	800c6fc <I2C_WaitOnSTOPFlagUntilTimeout>
 800b410:	1e03      	subs	r3, r0, #0
 800b412:	d001      	beq.n	800b418 <HAL_I2C_Mem_Write+0x234>
    {
      return HAL_ERROR;
 800b414:	2301      	movs	r3, #1
 800b416:	e01a      	b.n	800b44e <HAL_I2C_Mem_Write+0x26a>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	2220      	movs	r2, #32
 800b41e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	685a      	ldr	r2, [r3, #4]
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	490d      	ldr	r1, [pc, #52]	; (800b460 <HAL_I2C_Mem_Write+0x27c>)
 800b42c:	400a      	ands	r2, r1
 800b42e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	2241      	movs	r2, #65	; 0x41
 800b434:	2120      	movs	r1, #32
 800b436:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	2242      	movs	r2, #66	; 0x42
 800b43c:	2100      	movs	r1, #0
 800b43e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	2240      	movs	r2, #64	; 0x40
 800b444:	2100      	movs	r1, #0
 800b446:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800b448:	2300      	movs	r3, #0
 800b44a:	e000      	b.n	800b44e <HAL_I2C_Mem_Write+0x26a>
  }
  else
  {
    return HAL_BUSY;
 800b44c:	2302      	movs	r3, #2
  }
}
 800b44e:	0018      	movs	r0, r3
 800b450:	46bd      	mov	sp, r7
 800b452:	b007      	add	sp, #28
 800b454:	bd90      	pop	{r4, r7, pc}
 800b456:	46c0      	nop			; (mov r8, r8)
 800b458:	00000941 	.word	0x00000941
 800b45c:	08016ed0 	.word	0x08016ed0
 800b460:	fe00e800 	.word	0xfe00e800

0800b464 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b464:	b590      	push	{r4, r7, lr}
 800b466:	b089      	sub	sp, #36	; 0x24
 800b468:	af02      	add	r7, sp, #8
 800b46a:	60f8      	str	r0, [r7, #12]
 800b46c:	000c      	movs	r4, r1
 800b46e:	0010      	movs	r0, r2
 800b470:	0019      	movs	r1, r3
 800b472:	230a      	movs	r3, #10
 800b474:	18fb      	adds	r3, r7, r3
 800b476:	1c22      	adds	r2, r4, #0
 800b478:	801a      	strh	r2, [r3, #0]
 800b47a:	2308      	movs	r3, #8
 800b47c:	18fb      	adds	r3, r7, r3
 800b47e:	1c02      	adds	r2, r0, #0
 800b480:	801a      	strh	r2, [r3, #0]
 800b482:	1dbb      	adds	r3, r7, #6
 800b484:	1c0a      	adds	r2, r1, #0
 800b486:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800b488:	1dbb      	adds	r3, r7, #6
 800b48a:	881b      	ldrh	r3, [r3, #0]
 800b48c:	2b01      	cmp	r3, #1
 800b48e:	d009      	beq.n	800b4a4 <HAL_I2C_Mem_Read+0x40>
 800b490:	1dbb      	adds	r3, r7, #6
 800b492:	881b      	ldrh	r3, [r3, #0]
 800b494:	2b02      	cmp	r3, #2
 800b496:	d005      	beq.n	800b4a4 <HAL_I2C_Mem_Read+0x40>
 800b498:	4a91      	ldr	r2, [pc, #580]	; (800b6e0 <HAL_I2C_Mem_Read+0x27c>)
 800b49a:	4b92      	ldr	r3, [pc, #584]	; (800b6e4 <HAL_I2C_Mem_Read+0x280>)
 800b49c:	0011      	movs	r1, r2
 800b49e:	0018      	movs	r0, r3
 800b4a0:	f7f8 f89d 	bl	80035de <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	2241      	movs	r2, #65	; 0x41
 800b4a8:	5c9b      	ldrb	r3, [r3, r2]
 800b4aa:	b2db      	uxtb	r3, r3
 800b4ac:	2b20      	cmp	r3, #32
 800b4ae:	d000      	beq.n	800b4b2 <HAL_I2C_Mem_Read+0x4e>
 800b4b0:	e110      	b.n	800b6d4 <HAL_I2C_Mem_Read+0x270>
  {
    if ((pData == NULL) || (Size == 0U))
 800b4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d004      	beq.n	800b4c2 <HAL_I2C_Mem_Read+0x5e>
 800b4b8:	232c      	movs	r3, #44	; 0x2c
 800b4ba:	18fb      	adds	r3, r7, r3
 800b4bc:	881b      	ldrh	r3, [r3, #0]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d105      	bne.n	800b4ce <HAL_I2C_Mem_Read+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	2280      	movs	r2, #128	; 0x80
 800b4c6:	0092      	lsls	r2, r2, #2
 800b4c8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	e103      	b.n	800b6d6 <HAL_I2C_Mem_Read+0x272>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	2240      	movs	r2, #64	; 0x40
 800b4d2:	5c9b      	ldrb	r3, [r3, r2]
 800b4d4:	2b01      	cmp	r3, #1
 800b4d6:	d101      	bne.n	800b4dc <HAL_I2C_Mem_Read+0x78>
 800b4d8:	2302      	movs	r3, #2
 800b4da:	e0fc      	b.n	800b6d6 <HAL_I2C_Mem_Read+0x272>
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	2240      	movs	r2, #64	; 0x40
 800b4e0:	2101      	movs	r1, #1
 800b4e2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b4e4:	f7fe f948 	bl	8009778 <HAL_GetTick>
 800b4e8:	0003      	movs	r3, r0
 800b4ea:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b4ec:	2380      	movs	r3, #128	; 0x80
 800b4ee:	0219      	lsls	r1, r3, #8
 800b4f0:	68f8      	ldr	r0, [r7, #12]
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	9300      	str	r3, [sp, #0]
 800b4f6:	2319      	movs	r3, #25
 800b4f8:	2201      	movs	r2, #1
 800b4fa:	f001 f881 	bl	800c600 <I2C_WaitOnFlagUntilTimeout>
 800b4fe:	1e03      	subs	r3, r0, #0
 800b500:	d001      	beq.n	800b506 <HAL_I2C_Mem_Read+0xa2>
    {
      return HAL_ERROR;
 800b502:	2301      	movs	r3, #1
 800b504:	e0e7      	b.n	800b6d6 <HAL_I2C_Mem_Read+0x272>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	2241      	movs	r2, #65	; 0x41
 800b50a:	2122      	movs	r1, #34	; 0x22
 800b50c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	2242      	movs	r2, #66	; 0x42
 800b512:	2140      	movs	r1, #64	; 0x40
 800b514:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	2200      	movs	r2, #0
 800b51a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b520:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	222c      	movs	r2, #44	; 0x2c
 800b526:	18ba      	adds	r2, r7, r2
 800b528:	8812      	ldrh	r2, [r2, #0]
 800b52a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	2200      	movs	r2, #0
 800b530:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b532:	1dbb      	adds	r3, r7, #6
 800b534:	881c      	ldrh	r4, [r3, #0]
 800b536:	2308      	movs	r3, #8
 800b538:	18fb      	adds	r3, r7, r3
 800b53a:	881a      	ldrh	r2, [r3, #0]
 800b53c:	230a      	movs	r3, #10
 800b53e:	18fb      	adds	r3, r7, r3
 800b540:	8819      	ldrh	r1, [r3, #0]
 800b542:	68f8      	ldr	r0, [r7, #12]
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	9301      	str	r3, [sp, #4]
 800b548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b54a:	9300      	str	r3, [sp, #0]
 800b54c:	0023      	movs	r3, r4
 800b54e:	f000 fc21 	bl	800bd94 <I2C_RequestMemoryRead>
 800b552:	1e03      	subs	r3, r0, #0
 800b554:	d005      	beq.n	800b562 <HAL_I2C_Mem_Read+0xfe>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	2240      	movs	r2, #64	; 0x40
 800b55a:	2100      	movs	r1, #0
 800b55c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800b55e:	2301      	movs	r3, #1
 800b560:	e0b9      	b.n	800b6d6 <HAL_I2C_Mem_Read+0x272>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b566:	b29b      	uxth	r3, r3
 800b568:	2bff      	cmp	r3, #255	; 0xff
 800b56a:	d911      	bls.n	800b590 <HAL_I2C_Mem_Read+0x12c>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	22ff      	movs	r2, #255	; 0xff
 800b570:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b576:	b2da      	uxtb	r2, r3
 800b578:	2380      	movs	r3, #128	; 0x80
 800b57a:	045c      	lsls	r4, r3, #17
 800b57c:	230a      	movs	r3, #10
 800b57e:	18fb      	adds	r3, r7, r3
 800b580:	8819      	ldrh	r1, [r3, #0]
 800b582:	68f8      	ldr	r0, [r7, #12]
 800b584:	4b58      	ldr	r3, [pc, #352]	; (800b6e8 <HAL_I2C_Mem_Read+0x284>)
 800b586:	9300      	str	r3, [sp, #0]
 800b588:	0023      	movs	r3, r4
 800b58a:	f001 f96d 	bl	800c868 <I2C_TransferConfig>
 800b58e:	e012      	b.n	800b5b6 <HAL_I2C_Mem_Read+0x152>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b594:	b29a      	uxth	r2, r3
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b59e:	b2da      	uxtb	r2, r3
 800b5a0:	2380      	movs	r3, #128	; 0x80
 800b5a2:	049c      	lsls	r4, r3, #18
 800b5a4:	230a      	movs	r3, #10
 800b5a6:	18fb      	adds	r3, r7, r3
 800b5a8:	8819      	ldrh	r1, [r3, #0]
 800b5aa:	68f8      	ldr	r0, [r7, #12]
 800b5ac:	4b4e      	ldr	r3, [pc, #312]	; (800b6e8 <HAL_I2C_Mem_Read+0x284>)
 800b5ae:	9300      	str	r3, [sp, #0]
 800b5b0:	0023      	movs	r3, r4
 800b5b2:	f001 f959 	bl	800c868 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800b5b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5b8:	68f8      	ldr	r0, [r7, #12]
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	9300      	str	r3, [sp, #0]
 800b5be:	0013      	movs	r3, r2
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	2104      	movs	r1, #4
 800b5c4:	f001 f81c 	bl	800c600 <I2C_WaitOnFlagUntilTimeout>
 800b5c8:	1e03      	subs	r3, r0, #0
 800b5ca:	d001      	beq.n	800b5d0 <HAL_I2C_Mem_Read+0x16c>
      {
        return HAL_ERROR;
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	e082      	b.n	800b6d6 <HAL_I2C_Mem_Read+0x272>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5da:	b2d2      	uxtb	r2, r2
 800b5dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e2:	1c5a      	adds	r2, r3, #1
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5ec:	3b01      	subs	r3, #1
 800b5ee:	b29a      	uxth	r2, r3
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5f8:	b29b      	uxth	r3, r3
 800b5fa:	3b01      	subs	r3, #1
 800b5fc:	b29a      	uxth	r2, r3
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b606:	b29b      	uxth	r3, r3
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d03a      	beq.n	800b682 <HAL_I2C_Mem_Read+0x21e>
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b610:	2b00      	cmp	r3, #0
 800b612:	d136      	bne.n	800b682 <HAL_I2C_Mem_Read+0x21e>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b616:	68f8      	ldr	r0, [r7, #12]
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	9300      	str	r3, [sp, #0]
 800b61c:	0013      	movs	r3, r2
 800b61e:	2200      	movs	r2, #0
 800b620:	2180      	movs	r1, #128	; 0x80
 800b622:	f000 ffed 	bl	800c600 <I2C_WaitOnFlagUntilTimeout>
 800b626:	1e03      	subs	r3, r0, #0
 800b628:	d001      	beq.n	800b62e <HAL_I2C_Mem_Read+0x1ca>
        {
          return HAL_ERROR;
 800b62a:	2301      	movs	r3, #1
 800b62c:	e053      	b.n	800b6d6 <HAL_I2C_Mem_Read+0x272>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b632:	b29b      	uxth	r3, r3
 800b634:	2bff      	cmp	r3, #255	; 0xff
 800b636:	d911      	bls.n	800b65c <HAL_I2C_Mem_Read+0x1f8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	22ff      	movs	r2, #255	; 0xff
 800b63c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b642:	b2da      	uxtb	r2, r3
 800b644:	2380      	movs	r3, #128	; 0x80
 800b646:	045c      	lsls	r4, r3, #17
 800b648:	230a      	movs	r3, #10
 800b64a:	18fb      	adds	r3, r7, r3
 800b64c:	8819      	ldrh	r1, [r3, #0]
 800b64e:	68f8      	ldr	r0, [r7, #12]
 800b650:	2300      	movs	r3, #0
 800b652:	9300      	str	r3, [sp, #0]
 800b654:	0023      	movs	r3, r4
 800b656:	f001 f907 	bl	800c868 <I2C_TransferConfig>
 800b65a:	e012      	b.n	800b682 <HAL_I2C_Mem_Read+0x21e>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b660:	b29a      	uxth	r2, r3
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b66a:	b2da      	uxtb	r2, r3
 800b66c:	2380      	movs	r3, #128	; 0x80
 800b66e:	049c      	lsls	r4, r3, #18
 800b670:	230a      	movs	r3, #10
 800b672:	18fb      	adds	r3, r7, r3
 800b674:	8819      	ldrh	r1, [r3, #0]
 800b676:	68f8      	ldr	r0, [r7, #12]
 800b678:	2300      	movs	r3, #0
 800b67a:	9300      	str	r3, [sp, #0]
 800b67c:	0023      	movs	r3, r4
 800b67e:	f001 f8f3 	bl	800c868 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b686:	b29b      	uxth	r3, r3
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d194      	bne.n	800b5b6 <HAL_I2C_Mem_Read+0x152>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b68c:	697a      	ldr	r2, [r7, #20]
 800b68e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	0018      	movs	r0, r3
 800b694:	f001 f832 	bl	800c6fc <I2C_WaitOnSTOPFlagUntilTimeout>
 800b698:	1e03      	subs	r3, r0, #0
 800b69a:	d001      	beq.n	800b6a0 <HAL_I2C_Mem_Read+0x23c>
    {
      return HAL_ERROR;
 800b69c:	2301      	movs	r3, #1
 800b69e:	e01a      	b.n	800b6d6 <HAL_I2C_Mem_Read+0x272>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	2220      	movs	r2, #32
 800b6a6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	685a      	ldr	r2, [r3, #4]
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	490e      	ldr	r1, [pc, #56]	; (800b6ec <HAL_I2C_Mem_Read+0x288>)
 800b6b4:	400a      	ands	r2, r1
 800b6b6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	2241      	movs	r2, #65	; 0x41
 800b6bc:	2120      	movs	r1, #32
 800b6be:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	2242      	movs	r2, #66	; 0x42
 800b6c4:	2100      	movs	r1, #0
 800b6c6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	2240      	movs	r2, #64	; 0x40
 800b6cc:	2100      	movs	r1, #0
 800b6ce:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	e000      	b.n	800b6d6 <HAL_I2C_Mem_Read+0x272>
  }
  else
  {
    return HAL_BUSY;
 800b6d4:	2302      	movs	r3, #2
  }
}
 800b6d6:	0018      	movs	r0, r3
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	b007      	add	sp, #28
 800b6dc:	bd90      	pop	{r4, r7, pc}
 800b6de:	46c0      	nop			; (mov r8, r8)
 800b6e0:	000009ca 	.word	0x000009ca
 800b6e4:	08016ed0 	.word	0x08016ed0
 800b6e8:	80002400 	.word	0x80002400
 800b6ec:	fe00e800 	.word	0xfe00e800

0800b6f0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b08a      	sub	sp, #40	; 0x28
 800b6f4:	af02      	add	r7, sp, #8
 800b6f6:	60f8      	str	r0, [r7, #12]
 800b6f8:	607a      	str	r2, [r7, #4]
 800b6fa:	603b      	str	r3, [r7, #0]
 800b6fc:	230a      	movs	r3, #10
 800b6fe:	18fb      	adds	r3, r7, r3
 800b700:	1c0a      	adds	r2, r1, #0
 800b702:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800b704:	2300      	movs	r3, #0
 800b706:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	2241      	movs	r2, #65	; 0x41
 800b70c:	5c9b      	ldrb	r3, [r3, r2]
 800b70e:	b2db      	uxtb	r3, r3
 800b710:	2b20      	cmp	r3, #32
 800b712:	d000      	beq.n	800b716 <HAL_I2C_IsDeviceReady+0x26>
 800b714:	e0fe      	b.n	800b914 <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	699a      	ldr	r2, [r3, #24]
 800b71c:	2380      	movs	r3, #128	; 0x80
 800b71e:	021b      	lsls	r3, r3, #8
 800b720:	401a      	ands	r2, r3
 800b722:	2380      	movs	r3, #128	; 0x80
 800b724:	021b      	lsls	r3, r3, #8
 800b726:	429a      	cmp	r2, r3
 800b728:	d101      	bne.n	800b72e <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 800b72a:	2302      	movs	r3, #2
 800b72c:	e0f3      	b.n	800b916 <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	2240      	movs	r2, #64	; 0x40
 800b732:	5c9b      	ldrb	r3, [r3, r2]
 800b734:	2b01      	cmp	r3, #1
 800b736:	d101      	bne.n	800b73c <HAL_I2C_IsDeviceReady+0x4c>
 800b738:	2302      	movs	r3, #2
 800b73a:	e0ec      	b.n	800b916 <HAL_I2C_IsDeviceReady+0x226>
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	2240      	movs	r2, #64	; 0x40
 800b740:	2101      	movs	r1, #1
 800b742:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	2241      	movs	r2, #65	; 0x41
 800b748:	2124      	movs	r1, #36	; 0x24
 800b74a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	2200      	movs	r2, #0
 800b750:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	68db      	ldr	r3, [r3, #12]
 800b756:	2b01      	cmp	r3, #1
 800b758:	d107      	bne.n	800b76a <HAL_I2C_IsDeviceReady+0x7a>
 800b75a:	230a      	movs	r3, #10
 800b75c:	18fb      	adds	r3, r7, r3
 800b75e:	881b      	ldrh	r3, [r3, #0]
 800b760:	059b      	lsls	r3, r3, #22
 800b762:	0d9b      	lsrs	r3, r3, #22
 800b764:	4a6e      	ldr	r2, [pc, #440]	; (800b920 <HAL_I2C_IsDeviceReady+0x230>)
 800b766:	431a      	orrs	r2, r3
 800b768:	e007      	b.n	800b77a <HAL_I2C_IsDeviceReady+0x8a>
 800b76a:	230a      	movs	r3, #10
 800b76c:	18fb      	adds	r3, r7, r3
 800b76e:	881b      	ldrh	r3, [r3, #0]
 800b770:	059b      	lsls	r3, r3, #22
 800b772:	0d9b      	lsrs	r3, r3, #22
 800b774:	22a0      	movs	r2, #160	; 0xa0
 800b776:	0192      	lsls	r2, r2, #6
 800b778:	431a      	orrs	r2, r3
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800b780:	f7fd fffa 	bl	8009778 <HAL_GetTick>
 800b784:	0003      	movs	r3, r0
 800b786:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	699b      	ldr	r3, [r3, #24]
 800b78e:	2220      	movs	r2, #32
 800b790:	4013      	ands	r3, r2
 800b792:	3b20      	subs	r3, #32
 800b794:	425a      	negs	r2, r3
 800b796:	4153      	adcs	r3, r2
 800b798:	b2da      	uxtb	r2, r3
 800b79a:	231f      	movs	r3, #31
 800b79c:	18fb      	adds	r3, r7, r3
 800b79e:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	699b      	ldr	r3, [r3, #24]
 800b7a6:	2210      	movs	r2, #16
 800b7a8:	4013      	ands	r3, r2
 800b7aa:	3b10      	subs	r3, #16
 800b7ac:	425a      	negs	r2, r3
 800b7ae:	4153      	adcs	r3, r2
 800b7b0:	b2da      	uxtb	r2, r3
 800b7b2:	231e      	movs	r3, #30
 800b7b4:	18fb      	adds	r3, r7, r3
 800b7b6:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800b7b8:	e035      	b.n	800b826 <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	3301      	adds	r3, #1
 800b7be:	d01a      	beq.n	800b7f6 <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b7c0:	f7fd ffda 	bl	8009778 <HAL_GetTick>
 800b7c4:	0002      	movs	r2, r0
 800b7c6:	69bb      	ldr	r3, [r7, #24]
 800b7c8:	1ad3      	subs	r3, r2, r3
 800b7ca:	683a      	ldr	r2, [r7, #0]
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	d302      	bcc.n	800b7d6 <HAL_I2C_IsDeviceReady+0xe6>
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d10f      	bne.n	800b7f6 <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	2241      	movs	r2, #65	; 0x41
 800b7da:	2120      	movs	r1, #32
 800b7dc:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7e2:	2220      	movs	r2, #32
 800b7e4:	431a      	orrs	r2, r3
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	2240      	movs	r2, #64	; 0x40
 800b7ee:	2100      	movs	r1, #0
 800b7f0:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	e08f      	b.n	800b916 <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	699b      	ldr	r3, [r3, #24]
 800b7fc:	2220      	movs	r2, #32
 800b7fe:	4013      	ands	r3, r2
 800b800:	3b20      	subs	r3, #32
 800b802:	425a      	negs	r2, r3
 800b804:	4153      	adcs	r3, r2
 800b806:	b2da      	uxtb	r2, r3
 800b808:	231f      	movs	r3, #31
 800b80a:	18fb      	adds	r3, r7, r3
 800b80c:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	699b      	ldr	r3, [r3, #24]
 800b814:	2210      	movs	r2, #16
 800b816:	4013      	ands	r3, r2
 800b818:	3b10      	subs	r3, #16
 800b81a:	425a      	negs	r2, r3
 800b81c:	4153      	adcs	r3, r2
 800b81e:	b2da      	uxtb	r2, r3
 800b820:	231e      	movs	r3, #30
 800b822:	18fb      	adds	r3, r7, r3
 800b824:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800b826:	231f      	movs	r3, #31
 800b828:	18fb      	adds	r3, r7, r3
 800b82a:	781b      	ldrb	r3, [r3, #0]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d104      	bne.n	800b83a <HAL_I2C_IsDeviceReady+0x14a>
 800b830:	231e      	movs	r3, #30
 800b832:	18fb      	adds	r3, r7, r3
 800b834:	781b      	ldrb	r3, [r3, #0]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d0bf      	beq.n	800b7ba <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	699b      	ldr	r3, [r3, #24]
 800b840:	2210      	movs	r2, #16
 800b842:	4013      	ands	r3, r2
 800b844:	2b10      	cmp	r3, #16
 800b846:	d01a      	beq.n	800b87e <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800b848:	683a      	ldr	r2, [r7, #0]
 800b84a:	68f8      	ldr	r0, [r7, #12]
 800b84c:	69bb      	ldr	r3, [r7, #24]
 800b84e:	9300      	str	r3, [sp, #0]
 800b850:	0013      	movs	r3, r2
 800b852:	2200      	movs	r2, #0
 800b854:	2120      	movs	r1, #32
 800b856:	f000 fed3 	bl	800c600 <I2C_WaitOnFlagUntilTimeout>
 800b85a:	1e03      	subs	r3, r0, #0
 800b85c:	d001      	beq.n	800b862 <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 800b85e:	2301      	movs	r3, #1
 800b860:	e059      	b.n	800b916 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	2220      	movs	r2, #32
 800b868:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	2241      	movs	r2, #65	; 0x41
 800b86e:	2120      	movs	r1, #32
 800b870:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	2240      	movs	r2, #64	; 0x40
 800b876:	2100      	movs	r1, #0
 800b878:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 800b87a:	2300      	movs	r3, #0
 800b87c:	e04b      	b.n	800b916 <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800b87e:	683a      	ldr	r2, [r7, #0]
 800b880:	68f8      	ldr	r0, [r7, #12]
 800b882:	69bb      	ldr	r3, [r7, #24]
 800b884:	9300      	str	r3, [sp, #0]
 800b886:	0013      	movs	r3, r2
 800b888:	2200      	movs	r2, #0
 800b88a:	2120      	movs	r1, #32
 800b88c:	f000 feb8 	bl	800c600 <I2C_WaitOnFlagUntilTimeout>
 800b890:	1e03      	subs	r3, r0, #0
 800b892:	d001      	beq.n	800b898 <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 800b894:	2301      	movs	r3, #1
 800b896:	e03e      	b.n	800b916 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	2210      	movs	r2, #16
 800b89e:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	2220      	movs	r2, #32
 800b8a6:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	687a      	ldr	r2, [r7, #4]
 800b8ac:	429a      	cmp	r2, r3
 800b8ae:	d119      	bne.n	800b8e4 <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	685a      	ldr	r2, [r3, #4]
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	2180      	movs	r1, #128	; 0x80
 800b8bc:	01c9      	lsls	r1, r1, #7
 800b8be:	430a      	orrs	r2, r1
 800b8c0:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800b8c2:	683a      	ldr	r2, [r7, #0]
 800b8c4:	68f8      	ldr	r0, [r7, #12]
 800b8c6:	69bb      	ldr	r3, [r7, #24]
 800b8c8:	9300      	str	r3, [sp, #0]
 800b8ca:	0013      	movs	r3, r2
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	2120      	movs	r1, #32
 800b8d0:	f000 fe96 	bl	800c600 <I2C_WaitOnFlagUntilTimeout>
 800b8d4:	1e03      	subs	r3, r0, #0
 800b8d6:	d001      	beq.n	800b8dc <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 800b8d8:	2301      	movs	r3, #1
 800b8da:	e01c      	b.n	800b916 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	2220      	movs	r2, #32
 800b8e2:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800b8e4:	697b      	ldr	r3, [r7, #20]
 800b8e6:	3301      	adds	r3, #1
 800b8e8:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800b8ea:	697b      	ldr	r3, [r7, #20]
 800b8ec:	687a      	ldr	r2, [r7, #4]
 800b8ee:	429a      	cmp	r2, r3
 800b8f0:	d900      	bls.n	800b8f4 <HAL_I2C_IsDeviceReady+0x204>
 800b8f2:	e72e      	b.n	800b752 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	2241      	movs	r2, #65	; 0x41
 800b8f8:	2120      	movs	r1, #32
 800b8fa:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b900:	2220      	movs	r2, #32
 800b902:	431a      	orrs	r2, r3
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	2240      	movs	r2, #64	; 0x40
 800b90c:	2100      	movs	r1, #0
 800b90e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800b910:	2301      	movs	r3, #1
 800b912:	e000      	b.n	800b916 <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 800b914:	2302      	movs	r3, #2
  }
}
 800b916:	0018      	movs	r0, r3
 800b918:	46bd      	mov	sp, r7
 800b91a:	b008      	add	sp, #32
 800b91c:	bd80      	pop	{r7, pc}
 800b91e:	46c0      	nop			; (mov r8, r8)
 800b920:	02002000 	.word	0x02002000

0800b924 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b084      	sub	sp, #16
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	699b      	ldr	r3, [r3, #24]
 800b932:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b940:	2b00      	cmp	r3, #0
 800b942:	d005      	beq.n	800b950 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b948:	68ba      	ldr	r2, [r7, #8]
 800b94a:	68f9      	ldr	r1, [r7, #12]
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	4798      	blx	r3
  }
}
 800b950:	46c0      	nop			; (mov r8, r8)
 800b952:	46bd      	mov	sp, r7
 800b954:	b004      	add	sp, #16
 800b956:	bd80      	pop	{r7, pc}

0800b958 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b086      	sub	sp, #24
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	699b      	ldr	r3, [r3, #24]
 800b966:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800b970:	697b      	ldr	r3, [r7, #20]
 800b972:	0a1b      	lsrs	r3, r3, #8
 800b974:	001a      	movs	r2, r3
 800b976:	2301      	movs	r3, #1
 800b978:	4013      	ands	r3, r2
 800b97a:	d010      	beq.n	800b99e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b97c:	693b      	ldr	r3, [r7, #16]
 800b97e:	09db      	lsrs	r3, r3, #7
 800b980:	001a      	movs	r2, r3
 800b982:	2301      	movs	r3, #1
 800b984:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800b986:	d00a      	beq.n	800b99e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b98c:	2201      	movs	r2, #1
 800b98e:	431a      	orrs	r2, r3
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	2280      	movs	r2, #128	; 0x80
 800b99a:	0052      	lsls	r2, r2, #1
 800b99c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800b99e:	697b      	ldr	r3, [r7, #20]
 800b9a0:	0a9b      	lsrs	r3, r3, #10
 800b9a2:	001a      	movs	r2, r3
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	4013      	ands	r3, r2
 800b9a8:	d010      	beq.n	800b9cc <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	09db      	lsrs	r3, r3, #7
 800b9ae:	001a      	movs	r2, r3
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800b9b4:	d00a      	beq.n	800b9cc <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9ba:	2208      	movs	r2, #8
 800b9bc:	431a      	orrs	r2, r3
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	2280      	movs	r2, #128	; 0x80
 800b9c8:	00d2      	lsls	r2, r2, #3
 800b9ca:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800b9cc:	697b      	ldr	r3, [r7, #20]
 800b9ce:	0a5b      	lsrs	r3, r3, #9
 800b9d0:	001a      	movs	r2, r3
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	4013      	ands	r3, r2
 800b9d6:	d010      	beq.n	800b9fa <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b9d8:	693b      	ldr	r3, [r7, #16]
 800b9da:	09db      	lsrs	r3, r3, #7
 800b9dc:	001a      	movs	r2, r3
 800b9de:	2301      	movs	r3, #1
 800b9e0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800b9e2:	d00a      	beq.n	800b9fa <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9e8:	2202      	movs	r2, #2
 800b9ea:	431a      	orrs	r2, r3
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	2280      	movs	r2, #128	; 0x80
 800b9f6:	0092      	lsls	r2, r2, #2
 800b9f8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9fe:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	220b      	movs	r2, #11
 800ba04:	4013      	ands	r3, r2
 800ba06:	d005      	beq.n	800ba14 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 800ba08:	68fa      	ldr	r2, [r7, #12]
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	0011      	movs	r1, r2
 800ba0e:	0018      	movs	r0, r3
 800ba10:	f000 fcaa 	bl	800c368 <I2C_ITError>
  }
}
 800ba14:	46c0      	nop			; (mov r8, r8)
 800ba16:	46bd      	mov	sp, r7
 800ba18:	b006      	add	sp, #24
 800ba1a:	bd80      	pop	{r7, pc}

0800ba1c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b082      	sub	sp, #8
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800ba24:	46c0      	nop			; (mov r8, r8)
 800ba26:	46bd      	mov	sp, r7
 800ba28:	b002      	add	sp, #8
 800ba2a:	bd80      	pop	{r7, pc}

0800ba2c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b082      	sub	sp, #8
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800ba34:	46c0      	nop			; (mov r8, r8)
 800ba36:	46bd      	mov	sp, r7
 800ba38:	b002      	add	sp, #8
 800ba3a:	bd80      	pop	{r7, pc}

0800ba3c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b082      	sub	sp, #8
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	0008      	movs	r0, r1
 800ba46:	0011      	movs	r1, r2
 800ba48:	1cfb      	adds	r3, r7, #3
 800ba4a:	1c02      	adds	r2, r0, #0
 800ba4c:	701a      	strb	r2, [r3, #0]
 800ba4e:	003b      	movs	r3, r7
 800ba50:	1c0a      	adds	r2, r1, #0
 800ba52:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800ba54:	46c0      	nop			; (mov r8, r8)
 800ba56:	46bd      	mov	sp, r7
 800ba58:	b002      	add	sp, #8
 800ba5a:	bd80      	pop	{r7, pc}

0800ba5c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b082      	sub	sp, #8
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800ba64:	46c0      	nop			; (mov r8, r8)
 800ba66:	46bd      	mov	sp, r7
 800ba68:	b002      	add	sp, #8
 800ba6a:	bd80      	pop	{r7, pc}

0800ba6c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b082      	sub	sp, #8
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800ba74:	46c0      	nop			; (mov r8, r8)
 800ba76:	46bd      	mov	sp, r7
 800ba78:	b002      	add	sp, #8
 800ba7a:	bd80      	pop	{r7, pc}

0800ba7c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b082      	sub	sp, #8
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800ba84:	46c0      	nop			; (mov r8, r8)
 800ba86:	46bd      	mov	sp, r7
 800ba88:	b002      	add	sp, #8
 800ba8a:	bd80      	pop	{r7, pc}

0800ba8c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b082      	sub	sp, #8
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2241      	movs	r2, #65	; 0x41
 800ba98:	5c9b      	ldrb	r3, [r3, r2]
 800ba9a:	b2db      	uxtb	r3, r3
}
 800ba9c:	0018      	movs	r0, r3
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	b002      	add	sp, #8
 800baa2:	bd80      	pop	{r7, pc}

0800baa4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b086      	sub	sp, #24
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	60f8      	str	r0, [r7, #12]
 800baac:	60b9      	str	r1, [r7, #8]
 800baae:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bab4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	2240      	movs	r2, #64	; 0x40
 800babe:	5c9b      	ldrb	r3, [r3, r2]
 800bac0:	2b01      	cmp	r3, #1
 800bac2:	d101      	bne.n	800bac8 <I2C_Slave_ISR_IT+0x24>
 800bac4:	2302      	movs	r3, #2
 800bac6:	e0fa      	b.n	800bcbe <I2C_Slave_ISR_IT+0x21a>
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	2240      	movs	r2, #64	; 0x40
 800bacc:	2101      	movs	r1, #1
 800bace:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bad0:	693b      	ldr	r3, [r7, #16]
 800bad2:	095b      	lsrs	r3, r3, #5
 800bad4:	001a      	movs	r2, r3
 800bad6:	2301      	movs	r3, #1
 800bad8:	4013      	ands	r3, r2
 800bada:	d00b      	beq.n	800baf4 <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	095b      	lsrs	r3, r3, #5
 800bae0:	001a      	movs	r2, r3
 800bae2:	2301      	movs	r3, #1
 800bae4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bae6:	d005      	beq.n	800baf4 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800bae8:	693a      	ldr	r2, [r7, #16]
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	0011      	movs	r1, r2
 800baee:	0018      	movs	r0, r3
 800baf0:	f000 fabc 	bl	800c06c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	091b      	lsrs	r3, r3, #4
 800baf8:	001a      	movs	r2, r3
 800bafa:	2301      	movs	r3, #1
 800bafc:	4013      	ands	r3, r2
 800bafe:	d054      	beq.n	800bbaa <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	091b      	lsrs	r3, r3, #4
 800bb04:	001a      	movs	r2, r3
 800bb06:	2301      	movs	r3, #1
 800bb08:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bb0a:	d04e      	beq.n	800bbaa <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb10:	b29b      	uxth	r3, r3
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d12d      	bne.n	800bb72 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	2241      	movs	r2, #65	; 0x41
 800bb1a:	5c9b      	ldrb	r3, [r3, r2]
 800bb1c:	b2db      	uxtb	r3, r3
 800bb1e:	2b28      	cmp	r3, #40	; 0x28
 800bb20:	d10b      	bne.n	800bb3a <I2C_Slave_ISR_IT+0x96>
 800bb22:	697a      	ldr	r2, [r7, #20]
 800bb24:	2380      	movs	r3, #128	; 0x80
 800bb26:	049b      	lsls	r3, r3, #18
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	d106      	bne.n	800bb3a <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800bb2c:	693a      	ldr	r2, [r7, #16]
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	0011      	movs	r1, r2
 800bb32:	0018      	movs	r0, r3
 800bb34:	f000 fbbe 	bl	800c2b4 <I2C_ITListenCplt>
 800bb38:	e036      	b.n	800bba8 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	2241      	movs	r2, #65	; 0x41
 800bb3e:	5c9b      	ldrb	r3, [r3, r2]
 800bb40:	b2db      	uxtb	r3, r3
 800bb42:	2b29      	cmp	r3, #41	; 0x29
 800bb44:	d110      	bne.n	800bb68 <I2C_Slave_ISR_IT+0xc4>
 800bb46:	697b      	ldr	r3, [r7, #20]
 800bb48:	4a5f      	ldr	r2, [pc, #380]	; (800bcc8 <I2C_Slave_ISR_IT+0x224>)
 800bb4a:	4293      	cmp	r3, r2
 800bb4c:	d00c      	beq.n	800bb68 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	2210      	movs	r2, #16
 800bb54:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	0018      	movs	r0, r3
 800bb5a:	f000 fd10 	bl	800c57e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	0018      	movs	r0, r3
 800bb62:	f000 fa1d 	bl	800bfa0 <I2C_ITSlaveSeqCplt>
 800bb66:	e01f      	b.n	800bba8 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	2210      	movs	r2, #16
 800bb6e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800bb70:	e09d      	b.n	800bcae <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	2210      	movs	r2, #16
 800bb78:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb7e:	2204      	movs	r2, #4
 800bb80:	431a      	orrs	r2, r3
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d005      	beq.n	800bb98 <I2C_Slave_ISR_IT+0xf4>
 800bb8c:	697a      	ldr	r2, [r7, #20]
 800bb8e:	2380      	movs	r3, #128	; 0x80
 800bb90:	045b      	lsls	r3, r3, #17
 800bb92:	429a      	cmp	r2, r3
 800bb94:	d000      	beq.n	800bb98 <I2C_Slave_ISR_IT+0xf4>
 800bb96:	e08a      	b.n	800bcae <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	0011      	movs	r1, r2
 800bba0:	0018      	movs	r0, r3
 800bba2:	f000 fbe1 	bl	800c368 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800bba6:	e082      	b.n	800bcae <I2C_Slave_ISR_IT+0x20a>
 800bba8:	e081      	b.n	800bcae <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bbaa:	693b      	ldr	r3, [r7, #16]
 800bbac:	089b      	lsrs	r3, r3, #2
 800bbae:	001a      	movs	r2, r3
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	4013      	ands	r3, r2
 800bbb4:	d031      	beq.n	800bc1a <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	089b      	lsrs	r3, r3, #2
 800bbba:	001a      	movs	r2, r3
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bbc0:	d02b      	beq.n	800bc1a <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbc6:	b29b      	uxth	r3, r3
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d018      	beq.n	800bbfe <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbd6:	b2d2      	uxtb	r2, r2
 800bbd8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbde:	1c5a      	adds	r2, r3, #1
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbe8:	3b01      	subs	r3, #1
 800bbea:	b29a      	uxth	r2, r3
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbf4:	b29b      	uxth	r3, r3
 800bbf6:	3b01      	subs	r3, #1
 800bbf8:	b29a      	uxth	r2, r3
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc02:	b29b      	uxth	r3, r3
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d154      	bne.n	800bcb2 <I2C_Slave_ISR_IT+0x20e>
 800bc08:	697b      	ldr	r3, [r7, #20]
 800bc0a:	4a2f      	ldr	r2, [pc, #188]	; (800bcc8 <I2C_Slave_ISR_IT+0x224>)
 800bc0c:	4293      	cmp	r3, r2
 800bc0e:	d050      	beq.n	800bcb2 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	0018      	movs	r0, r3
 800bc14:	f000 f9c4 	bl	800bfa0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800bc18:	e04b      	b.n	800bcb2 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800bc1a:	693b      	ldr	r3, [r7, #16]
 800bc1c:	08db      	lsrs	r3, r3, #3
 800bc1e:	001a      	movs	r2, r3
 800bc20:	2301      	movs	r3, #1
 800bc22:	4013      	ands	r3, r2
 800bc24:	d00c      	beq.n	800bc40 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	08db      	lsrs	r3, r3, #3
 800bc2a:	001a      	movs	r2, r3
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800bc30:	d006      	beq.n	800bc40 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800bc32:	693a      	ldr	r2, [r7, #16]
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	0011      	movs	r1, r2
 800bc38:	0018      	movs	r0, r3
 800bc3a:	f000 f90d 	bl	800be58 <I2C_ITAddrCplt>
 800bc3e:	e039      	b.n	800bcb4 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bc40:	693b      	ldr	r3, [r7, #16]
 800bc42:	085b      	lsrs	r3, r3, #1
 800bc44:	001a      	movs	r2, r3
 800bc46:	2301      	movs	r3, #1
 800bc48:	4013      	ands	r3, r2
 800bc4a:	d033      	beq.n	800bcb4 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	085b      	lsrs	r3, r3, #1
 800bc50:	001a      	movs	r2, r3
 800bc52:	2301      	movs	r3, #1
 800bc54:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bc56:	d02d      	beq.n	800bcb4 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc5c:	b29b      	uxth	r3, r3
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d018      	beq.n	800bc94 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc66:	781a      	ldrb	r2, [r3, #0]
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc72:	1c5a      	adds	r2, r3, #1
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc7c:	b29b      	uxth	r3, r3
 800bc7e:	3b01      	subs	r3, #1
 800bc80:	b29a      	uxth	r2, r3
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc8a:	3b01      	subs	r3, #1
 800bc8c:	b29a      	uxth	r2, r3
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	851a      	strh	r2, [r3, #40]	; 0x28
 800bc92:	e00f      	b.n	800bcb4 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800bc94:	697a      	ldr	r2, [r7, #20]
 800bc96:	2380      	movs	r3, #128	; 0x80
 800bc98:	045b      	lsls	r3, r3, #17
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	d002      	beq.n	800bca4 <I2C_Slave_ISR_IT+0x200>
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d107      	bne.n	800bcb4 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	0018      	movs	r0, r3
 800bca8:	f000 f97a 	bl	800bfa0 <I2C_ITSlaveSeqCplt>
 800bcac:	e002      	b.n	800bcb4 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 800bcae:	46c0      	nop			; (mov r8, r8)
 800bcb0:	e000      	b.n	800bcb4 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 800bcb2:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	2240      	movs	r2, #64	; 0x40
 800bcb8:	2100      	movs	r1, #0
 800bcba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bcbc:	2300      	movs	r3, #0
}
 800bcbe:	0018      	movs	r0, r3
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	b006      	add	sp, #24
 800bcc4:	bd80      	pop	{r7, pc}
 800bcc6:	46c0      	nop			; (mov r8, r8)
 800bcc8:	ffff0000 	.word	0xffff0000

0800bccc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800bccc:	b5b0      	push	{r4, r5, r7, lr}
 800bcce:	b086      	sub	sp, #24
 800bcd0:	af02      	add	r7, sp, #8
 800bcd2:	60f8      	str	r0, [r7, #12]
 800bcd4:	000c      	movs	r4, r1
 800bcd6:	0010      	movs	r0, r2
 800bcd8:	0019      	movs	r1, r3
 800bcda:	250a      	movs	r5, #10
 800bcdc:	197b      	adds	r3, r7, r5
 800bcde:	1c22      	adds	r2, r4, #0
 800bce0:	801a      	strh	r2, [r3, #0]
 800bce2:	2308      	movs	r3, #8
 800bce4:	18fb      	adds	r3, r7, r3
 800bce6:	1c02      	adds	r2, r0, #0
 800bce8:	801a      	strh	r2, [r3, #0]
 800bcea:	1dbb      	adds	r3, r7, #6
 800bcec:	1c0a      	adds	r2, r1, #0
 800bcee:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800bcf0:	1dbb      	adds	r3, r7, #6
 800bcf2:	881b      	ldrh	r3, [r3, #0]
 800bcf4:	b2da      	uxtb	r2, r3
 800bcf6:	2380      	movs	r3, #128	; 0x80
 800bcf8:	045c      	lsls	r4, r3, #17
 800bcfa:	197b      	adds	r3, r7, r5
 800bcfc:	8819      	ldrh	r1, [r3, #0]
 800bcfe:	68f8      	ldr	r0, [r7, #12]
 800bd00:	4b23      	ldr	r3, [pc, #140]	; (800bd90 <I2C_RequestMemoryWrite+0xc4>)
 800bd02:	9300      	str	r3, [sp, #0]
 800bd04:	0023      	movs	r3, r4
 800bd06:	f000 fdaf 	bl	800c868 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bd0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd0c:	6a39      	ldr	r1, [r7, #32]
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	0018      	movs	r0, r3
 800bd12:	f000 fcb4 	bl	800c67e <I2C_WaitOnTXISFlagUntilTimeout>
 800bd16:	1e03      	subs	r3, r0, #0
 800bd18:	d001      	beq.n	800bd1e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	e033      	b.n	800bd86 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bd1e:	1dbb      	adds	r3, r7, #6
 800bd20:	881b      	ldrh	r3, [r3, #0]
 800bd22:	2b01      	cmp	r3, #1
 800bd24:	d107      	bne.n	800bd36 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bd26:	2308      	movs	r3, #8
 800bd28:	18fb      	adds	r3, r7, r3
 800bd2a:	881b      	ldrh	r3, [r3, #0]
 800bd2c:	b2da      	uxtb	r2, r3
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	629a      	str	r2, [r3, #40]	; 0x28
 800bd34:	e019      	b.n	800bd6a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800bd36:	2308      	movs	r3, #8
 800bd38:	18fb      	adds	r3, r7, r3
 800bd3a:	881b      	ldrh	r3, [r3, #0]
 800bd3c:	0a1b      	lsrs	r3, r3, #8
 800bd3e:	b29b      	uxth	r3, r3
 800bd40:	b2da      	uxtb	r2, r3
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bd48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd4a:	6a39      	ldr	r1, [r7, #32]
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	0018      	movs	r0, r3
 800bd50:	f000 fc95 	bl	800c67e <I2C_WaitOnTXISFlagUntilTimeout>
 800bd54:	1e03      	subs	r3, r0, #0
 800bd56:	d001      	beq.n	800bd5c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800bd58:	2301      	movs	r3, #1
 800bd5a:	e014      	b.n	800bd86 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bd5c:	2308      	movs	r3, #8
 800bd5e:	18fb      	adds	r3, r7, r3
 800bd60:	881b      	ldrh	r3, [r3, #0]
 800bd62:	b2da      	uxtb	r2, r3
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800bd6a:	6a3a      	ldr	r2, [r7, #32]
 800bd6c:	68f8      	ldr	r0, [r7, #12]
 800bd6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd70:	9300      	str	r3, [sp, #0]
 800bd72:	0013      	movs	r3, r2
 800bd74:	2200      	movs	r2, #0
 800bd76:	2180      	movs	r1, #128	; 0x80
 800bd78:	f000 fc42 	bl	800c600 <I2C_WaitOnFlagUntilTimeout>
 800bd7c:	1e03      	subs	r3, r0, #0
 800bd7e:	d001      	beq.n	800bd84 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 800bd80:	2301      	movs	r3, #1
 800bd82:	e000      	b.n	800bd86 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 800bd84:	2300      	movs	r3, #0
}
 800bd86:	0018      	movs	r0, r3
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	b004      	add	sp, #16
 800bd8c:	bdb0      	pop	{r4, r5, r7, pc}
 800bd8e:	46c0      	nop			; (mov r8, r8)
 800bd90:	80002000 	.word	0x80002000

0800bd94 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800bd94:	b5b0      	push	{r4, r5, r7, lr}
 800bd96:	b086      	sub	sp, #24
 800bd98:	af02      	add	r7, sp, #8
 800bd9a:	60f8      	str	r0, [r7, #12]
 800bd9c:	000c      	movs	r4, r1
 800bd9e:	0010      	movs	r0, r2
 800bda0:	0019      	movs	r1, r3
 800bda2:	250a      	movs	r5, #10
 800bda4:	197b      	adds	r3, r7, r5
 800bda6:	1c22      	adds	r2, r4, #0
 800bda8:	801a      	strh	r2, [r3, #0]
 800bdaa:	2308      	movs	r3, #8
 800bdac:	18fb      	adds	r3, r7, r3
 800bdae:	1c02      	adds	r2, r0, #0
 800bdb0:	801a      	strh	r2, [r3, #0]
 800bdb2:	1dbb      	adds	r3, r7, #6
 800bdb4:	1c0a      	adds	r2, r1, #0
 800bdb6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800bdb8:	1dbb      	adds	r3, r7, #6
 800bdba:	881b      	ldrh	r3, [r3, #0]
 800bdbc:	b2da      	uxtb	r2, r3
 800bdbe:	197b      	adds	r3, r7, r5
 800bdc0:	8819      	ldrh	r1, [r3, #0]
 800bdc2:	68f8      	ldr	r0, [r7, #12]
 800bdc4:	4b23      	ldr	r3, [pc, #140]	; (800be54 <I2C_RequestMemoryRead+0xc0>)
 800bdc6:	9300      	str	r3, [sp, #0]
 800bdc8:	2300      	movs	r3, #0
 800bdca:	f000 fd4d 	bl	800c868 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bdce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdd0:	6a39      	ldr	r1, [r7, #32]
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	0018      	movs	r0, r3
 800bdd6:	f000 fc52 	bl	800c67e <I2C_WaitOnTXISFlagUntilTimeout>
 800bdda:	1e03      	subs	r3, r0, #0
 800bddc:	d001      	beq.n	800bde2 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800bdde:	2301      	movs	r3, #1
 800bde0:	e033      	b.n	800be4a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bde2:	1dbb      	adds	r3, r7, #6
 800bde4:	881b      	ldrh	r3, [r3, #0]
 800bde6:	2b01      	cmp	r3, #1
 800bde8:	d107      	bne.n	800bdfa <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bdea:	2308      	movs	r3, #8
 800bdec:	18fb      	adds	r3, r7, r3
 800bdee:	881b      	ldrh	r3, [r3, #0]
 800bdf0:	b2da      	uxtb	r2, r3
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	629a      	str	r2, [r3, #40]	; 0x28
 800bdf8:	e019      	b.n	800be2e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800bdfa:	2308      	movs	r3, #8
 800bdfc:	18fb      	adds	r3, r7, r3
 800bdfe:	881b      	ldrh	r3, [r3, #0]
 800be00:	0a1b      	lsrs	r3, r3, #8
 800be02:	b29b      	uxth	r3, r3
 800be04:	b2da      	uxtb	r2, r3
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800be0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be0e:	6a39      	ldr	r1, [r7, #32]
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	0018      	movs	r0, r3
 800be14:	f000 fc33 	bl	800c67e <I2C_WaitOnTXISFlagUntilTimeout>
 800be18:	1e03      	subs	r3, r0, #0
 800be1a:	d001      	beq.n	800be20 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800be1c:	2301      	movs	r3, #1
 800be1e:	e014      	b.n	800be4a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800be20:	2308      	movs	r3, #8
 800be22:	18fb      	adds	r3, r7, r3
 800be24:	881b      	ldrh	r3, [r3, #0]
 800be26:	b2da      	uxtb	r2, r3
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800be2e:	6a3a      	ldr	r2, [r7, #32]
 800be30:	68f8      	ldr	r0, [r7, #12]
 800be32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be34:	9300      	str	r3, [sp, #0]
 800be36:	0013      	movs	r3, r2
 800be38:	2200      	movs	r2, #0
 800be3a:	2140      	movs	r1, #64	; 0x40
 800be3c:	f000 fbe0 	bl	800c600 <I2C_WaitOnFlagUntilTimeout>
 800be40:	1e03      	subs	r3, r0, #0
 800be42:	d001      	beq.n	800be48 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800be44:	2301      	movs	r3, #1
 800be46:	e000      	b.n	800be4a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800be48:	2300      	movs	r3, #0
}
 800be4a:	0018      	movs	r0, r3
 800be4c:	46bd      	mov	sp, r7
 800be4e:	b004      	add	sp, #16
 800be50:	bdb0      	pop	{r4, r5, r7, pc}
 800be52:	46c0      	nop			; (mov r8, r8)
 800be54:	80002000 	.word	0x80002000

0800be58 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800be58:	b5b0      	push	{r4, r5, r7, lr}
 800be5a:	b084      	sub	sp, #16
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
 800be60:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2241      	movs	r2, #65	; 0x41
 800be66:	5c9b      	ldrb	r3, [r3, r2]
 800be68:	b2db      	uxtb	r3, r3
 800be6a:	001a      	movs	r2, r3
 800be6c:	2328      	movs	r3, #40	; 0x28
 800be6e:	4013      	ands	r3, r2
 800be70:	2b28      	cmp	r3, #40	; 0x28
 800be72:	d000      	beq.n	800be76 <I2C_ITAddrCplt+0x1e>
 800be74:	e088      	b.n	800bf88 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	699b      	ldr	r3, [r3, #24]
 800be7c:	0c1b      	lsrs	r3, r3, #16
 800be7e:	b2da      	uxtb	r2, r3
 800be80:	250f      	movs	r5, #15
 800be82:	197b      	adds	r3, r7, r5
 800be84:	2101      	movs	r1, #1
 800be86:	400a      	ands	r2, r1
 800be88:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	699b      	ldr	r3, [r3, #24]
 800be90:	0c1b      	lsrs	r3, r3, #16
 800be92:	b29a      	uxth	r2, r3
 800be94:	200c      	movs	r0, #12
 800be96:	183b      	adds	r3, r7, r0
 800be98:	21fe      	movs	r1, #254	; 0xfe
 800be9a:	400a      	ands	r2, r1
 800be9c:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	689b      	ldr	r3, [r3, #8]
 800bea4:	b29a      	uxth	r2, r3
 800bea6:	240a      	movs	r4, #10
 800bea8:	193b      	adds	r3, r7, r4
 800beaa:	0592      	lsls	r2, r2, #22
 800beac:	0d92      	lsrs	r2, r2, #22
 800beae:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	68db      	ldr	r3, [r3, #12]
 800beb6:	b29a      	uxth	r2, r3
 800beb8:	2308      	movs	r3, #8
 800beba:	18fb      	adds	r3, r7, r3
 800bebc:	21fe      	movs	r1, #254	; 0xfe
 800bebe:	400a      	ands	r2, r1
 800bec0:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	68db      	ldr	r3, [r3, #12]
 800bec6:	2b02      	cmp	r3, #2
 800bec8:	d148      	bne.n	800bf5c <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800beca:	0021      	movs	r1, r4
 800becc:	187b      	adds	r3, r7, r1
 800bece:	881b      	ldrh	r3, [r3, #0]
 800bed0:	09db      	lsrs	r3, r3, #7
 800bed2:	b29a      	uxth	r2, r3
 800bed4:	183b      	adds	r3, r7, r0
 800bed6:	881b      	ldrh	r3, [r3, #0]
 800bed8:	4053      	eors	r3, r2
 800beda:	b29b      	uxth	r3, r3
 800bedc:	001a      	movs	r2, r3
 800bede:	2306      	movs	r3, #6
 800bee0:	4013      	ands	r3, r2
 800bee2:	d120      	bne.n	800bf26 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 800bee4:	183b      	adds	r3, r7, r0
 800bee6:	187a      	adds	r2, r7, r1
 800bee8:	8812      	ldrh	r2, [r2, #0]
 800beea:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bef0:	1c5a      	adds	r2, r3, #1
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800befa:	2b02      	cmp	r3, #2
 800befc:	d14c      	bne.n	800bf98 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2200      	movs	r2, #0
 800bf02:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	2208      	movs	r2, #8
 800bf0a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2240      	movs	r2, #64	; 0x40
 800bf10:	2100      	movs	r1, #0
 800bf12:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800bf14:	183b      	adds	r3, r7, r0
 800bf16:	881a      	ldrh	r2, [r3, #0]
 800bf18:	197b      	adds	r3, r7, r5
 800bf1a:	7819      	ldrb	r1, [r3, #0]
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	0018      	movs	r0, r3
 800bf20:	f7ff fd8c 	bl	800ba3c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800bf24:	e038      	b.n	800bf98 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800bf26:	240c      	movs	r4, #12
 800bf28:	193b      	adds	r3, r7, r4
 800bf2a:	2208      	movs	r2, #8
 800bf2c:	18ba      	adds	r2, r7, r2
 800bf2e:	8812      	ldrh	r2, [r2, #0]
 800bf30:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800bf32:	2380      	movs	r3, #128	; 0x80
 800bf34:	021a      	lsls	r2, r3, #8
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	0011      	movs	r1, r2
 800bf3a:	0018      	movs	r0, r3
 800bf3c:	f000 fd16 	bl	800c96c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2240      	movs	r2, #64	; 0x40
 800bf44:	2100      	movs	r1, #0
 800bf46:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800bf48:	193b      	adds	r3, r7, r4
 800bf4a:	881a      	ldrh	r2, [r3, #0]
 800bf4c:	230f      	movs	r3, #15
 800bf4e:	18fb      	adds	r3, r7, r3
 800bf50:	7819      	ldrb	r1, [r3, #0]
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	0018      	movs	r0, r3
 800bf56:	f7ff fd71 	bl	800ba3c <HAL_I2C_AddrCallback>
}
 800bf5a:	e01d      	b.n	800bf98 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800bf5c:	2380      	movs	r3, #128	; 0x80
 800bf5e:	021a      	lsls	r2, r3, #8
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	0011      	movs	r1, r2
 800bf64:	0018      	movs	r0, r3
 800bf66:	f000 fd01 	bl	800c96c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2240      	movs	r2, #64	; 0x40
 800bf6e:	2100      	movs	r1, #0
 800bf70:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800bf72:	230c      	movs	r3, #12
 800bf74:	18fb      	adds	r3, r7, r3
 800bf76:	881a      	ldrh	r2, [r3, #0]
 800bf78:	230f      	movs	r3, #15
 800bf7a:	18fb      	adds	r3, r7, r3
 800bf7c:	7819      	ldrb	r1, [r3, #0]
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	0018      	movs	r0, r3
 800bf82:	f7ff fd5b 	bl	800ba3c <HAL_I2C_AddrCallback>
}
 800bf86:	e007      	b.n	800bf98 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	2208      	movs	r2, #8
 800bf8e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2240      	movs	r2, #64	; 0x40
 800bf94:	2100      	movs	r1, #0
 800bf96:	5499      	strb	r1, [r3, r2]
}
 800bf98:	46c0      	nop			; (mov r8, r8)
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	b004      	add	sp, #16
 800bf9e:	bdb0      	pop	{r4, r5, r7, pc}

0800bfa0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b084      	sub	sp, #16
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2242      	movs	r2, #66	; 0x42
 800bfb4:	2100      	movs	r1, #0
 800bfb6:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	0b9b      	lsrs	r3, r3, #14
 800bfbc:	001a      	movs	r2, r3
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	4013      	ands	r3, r2
 800bfc2:	d008      	beq.n	800bfd6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	681a      	ldr	r2, [r3, #0]
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	4925      	ldr	r1, [pc, #148]	; (800c064 <I2C_ITSlaveSeqCplt+0xc4>)
 800bfd0:	400a      	ands	r2, r1
 800bfd2:	601a      	str	r2, [r3, #0]
 800bfd4:	e00d      	b.n	800bff2 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	0bdb      	lsrs	r3, r3, #15
 800bfda:	001a      	movs	r2, r3
 800bfdc:	2301      	movs	r3, #1
 800bfde:	4013      	ands	r3, r2
 800bfe0:	d007      	beq.n	800bff2 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	681a      	ldr	r2, [r3, #0]
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	491e      	ldr	r1, [pc, #120]	; (800c068 <I2C_ITSlaveSeqCplt+0xc8>)
 800bfee:	400a      	ands	r2, r1
 800bff0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2241      	movs	r2, #65	; 0x41
 800bff6:	5c9b      	ldrb	r3, [r3, r2]
 800bff8:	b2db      	uxtb	r3, r3
 800bffa:	2b29      	cmp	r3, #41	; 0x29
 800bffc:	d114      	bne.n	800c028 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2241      	movs	r2, #65	; 0x41
 800c002:	2128      	movs	r1, #40	; 0x28
 800c004:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2221      	movs	r2, #33	; 0x21
 800c00a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2101      	movs	r1, #1
 800c010:	0018      	movs	r0, r3
 800c012:	f000 fcab 	bl	800c96c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	2240      	movs	r2, #64	; 0x40
 800c01a:	2100      	movs	r1, #0
 800c01c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	0018      	movs	r0, r3
 800c022:	f7ff fcfb 	bl	800ba1c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c026:	e019      	b.n	800c05c <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2241      	movs	r2, #65	; 0x41
 800c02c:	5c9b      	ldrb	r3, [r3, r2]
 800c02e:	b2db      	uxtb	r3, r3
 800c030:	2b2a      	cmp	r3, #42	; 0x2a
 800c032:	d113      	bne.n	800c05c <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2241      	movs	r2, #65	; 0x41
 800c038:	2128      	movs	r1, #40	; 0x28
 800c03a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2222      	movs	r2, #34	; 0x22
 800c040:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2102      	movs	r1, #2
 800c046:	0018      	movs	r0, r3
 800c048:	f000 fc90 	bl	800c96c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2240      	movs	r2, #64	; 0x40
 800c050:	2100      	movs	r1, #0
 800c052:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	0018      	movs	r0, r3
 800c058:	f7ff fce8 	bl	800ba2c <HAL_I2C_SlaveRxCpltCallback>
}
 800c05c:	46c0      	nop			; (mov r8, r8)
 800c05e:	46bd      	mov	sp, r7
 800c060:	b004      	add	sp, #16
 800c062:	bd80      	pop	{r7, pc}
 800c064:	ffffbfff 	.word	0xffffbfff
 800c068:	ffff7fff 	.word	0xffff7fff

0800c06c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b086      	sub	sp, #24
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
 800c074:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800c082:	200f      	movs	r0, #15
 800c084:	183b      	adds	r3, r7, r0
 800c086:	687a      	ldr	r2, [r7, #4]
 800c088:	2141      	movs	r1, #65	; 0x41
 800c08a:	5c52      	ldrb	r2, [r2, r1]
 800c08c:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	2220      	movs	r2, #32
 800c094:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c096:	183b      	adds	r3, r7, r0
 800c098:	781b      	ldrb	r3, [r3, #0]
 800c09a:	2b21      	cmp	r3, #33	; 0x21
 800c09c:	d003      	beq.n	800c0a6 <I2C_ITSlaveCplt+0x3a>
 800c09e:	183b      	adds	r3, r7, r0
 800c0a0:	781b      	ldrb	r3, [r3, #0]
 800c0a2:	2b29      	cmp	r3, #41	; 0x29
 800c0a4:	d109      	bne.n	800c0ba <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800c0a6:	4a7d      	ldr	r2, [pc, #500]	; (800c29c <I2C_ITSlaveCplt+0x230>)
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	0011      	movs	r1, r2
 800c0ac:	0018      	movs	r0, r3
 800c0ae:	f000 fc5d 	bl	800c96c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2221      	movs	r2, #33	; 0x21
 800c0b6:	631a      	str	r2, [r3, #48]	; 0x30
 800c0b8:	e011      	b.n	800c0de <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800c0ba:	220f      	movs	r2, #15
 800c0bc:	18bb      	adds	r3, r7, r2
 800c0be:	781b      	ldrb	r3, [r3, #0]
 800c0c0:	2b22      	cmp	r3, #34	; 0x22
 800c0c2:	d003      	beq.n	800c0cc <I2C_ITSlaveCplt+0x60>
 800c0c4:	18bb      	adds	r3, r7, r2
 800c0c6:	781b      	ldrb	r3, [r3, #0]
 800c0c8:	2b2a      	cmp	r3, #42	; 0x2a
 800c0ca:	d108      	bne.n	800c0de <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800c0cc:	4a74      	ldr	r2, [pc, #464]	; (800c2a0 <I2C_ITSlaveCplt+0x234>)
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	0011      	movs	r1, r2
 800c0d2:	0018      	movs	r0, r3
 800c0d4:	f000 fc4a 	bl	800c96c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2222      	movs	r2, #34	; 0x22
 800c0dc:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	685a      	ldr	r2, [r3, #4]
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	2180      	movs	r1, #128	; 0x80
 800c0ea:	0209      	lsls	r1, r1, #8
 800c0ec:	430a      	orrs	r2, r1
 800c0ee:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	685a      	ldr	r2, [r3, #4]
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	496a      	ldr	r1, [pc, #424]	; (800c2a4 <I2C_ITSlaveCplt+0x238>)
 800c0fc:	400a      	ands	r2, r1
 800c0fe:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	0018      	movs	r0, r3
 800c104:	f000 fa3b 	bl	800c57e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800c108:	693b      	ldr	r3, [r7, #16]
 800c10a:	0b9b      	lsrs	r3, r3, #14
 800c10c:	001a      	movs	r2, r3
 800c10e:	2301      	movs	r3, #1
 800c110:	4013      	ands	r3, r2
 800c112:	d013      	beq.n	800c13c <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	681a      	ldr	r2, [r3, #0]
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	4962      	ldr	r1, [pc, #392]	; (800c2a8 <I2C_ITSlaveCplt+0x23c>)
 800c120:	400a      	ands	r2, r1
 800c122:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d020      	beq.n	800c16e <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	685b      	ldr	r3, [r3, #4]
 800c134:	b29a      	uxth	r2, r3
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c13a:	e018      	b.n	800c16e <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800c13c:	693b      	ldr	r3, [r7, #16]
 800c13e:	0bdb      	lsrs	r3, r3, #15
 800c140:	001a      	movs	r2, r3
 800c142:	2301      	movs	r3, #1
 800c144:	4013      	ands	r3, r2
 800c146:	d012      	beq.n	800c16e <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	681a      	ldr	r2, [r3, #0]
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	4956      	ldr	r1, [pc, #344]	; (800c2ac <I2C_ITSlaveCplt+0x240>)
 800c154:	400a      	ands	r2, r1
 800c156:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d006      	beq.n	800c16e <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	685b      	ldr	r3, [r3, #4]
 800c168:	b29a      	uxth	r2, r3
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800c16e:	697b      	ldr	r3, [r7, #20]
 800c170:	089b      	lsrs	r3, r3, #2
 800c172:	001a      	movs	r2, r3
 800c174:	2301      	movs	r3, #1
 800c176:	4013      	ands	r3, r2
 800c178:	d020      	beq.n	800c1bc <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	2204      	movs	r2, #4
 800c17e:	4393      	bics	r3, r2
 800c180:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c18c:	b2d2      	uxtb	r2, r2
 800c18e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c194:	1c5a      	adds	r2, r3, #1
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d00c      	beq.n	800c1bc <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c1a6:	3b01      	subs	r3, #1
 800c1a8:	b29a      	uxth	r2, r3
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1b2:	b29b      	uxth	r3, r3
 800c1b4:	3b01      	subs	r3, #1
 800c1b6:	b29a      	uxth	r2, r3
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1c0:	b29b      	uxth	r3, r3
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d005      	beq.n	800c1d2 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1ca:	2204      	movs	r2, #4
 800c1cc:	431a      	orrs	r2, r3
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2242      	movs	r2, #66	; 0x42
 800c1d6:	2100      	movs	r1, #0
 800c1d8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	2200      	movs	r2, #0
 800c1de:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d013      	beq.n	800c210 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	0011      	movs	r1, r2
 800c1f0:	0018      	movs	r0, r3
 800c1f2:	f000 f8b9 	bl	800c368 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	2241      	movs	r2, #65	; 0x41
 800c1fa:	5c9b      	ldrb	r3, [r3, r2]
 800c1fc:	b2db      	uxtb	r3, r3
 800c1fe:	2b28      	cmp	r3, #40	; 0x28
 800c200:	d147      	bne.n	800c292 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800c202:	697a      	ldr	r2, [r7, #20]
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	0011      	movs	r1, r2
 800c208:	0018      	movs	r0, r3
 800c20a:	f000 f853 	bl	800c2b4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c20e:	e040      	b.n	800c292 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c214:	4a26      	ldr	r2, [pc, #152]	; (800c2b0 <I2C_ITSlaveCplt+0x244>)
 800c216:	4293      	cmp	r3, r2
 800c218:	d016      	beq.n	800c248 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	0018      	movs	r0, r3
 800c21e:	f7ff febf 	bl	800bfa0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	4a22      	ldr	r2, [pc, #136]	; (800c2b0 <I2C_ITSlaveCplt+0x244>)
 800c226:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2241      	movs	r2, #65	; 0x41
 800c22c:	2120      	movs	r1, #32
 800c22e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2200      	movs	r2, #0
 800c234:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	2240      	movs	r2, #64	; 0x40
 800c23a:	2100      	movs	r1, #0
 800c23c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	0018      	movs	r0, r3
 800c242:	f7ff fc0b 	bl	800ba5c <HAL_I2C_ListenCpltCallback>
}
 800c246:	e024      	b.n	800c292 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2241      	movs	r2, #65	; 0x41
 800c24c:	5c9b      	ldrb	r3, [r3, r2]
 800c24e:	b2db      	uxtb	r3, r3
 800c250:	2b22      	cmp	r3, #34	; 0x22
 800c252:	d10f      	bne.n	800c274 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2241      	movs	r2, #65	; 0x41
 800c258:	2120      	movs	r1, #32
 800c25a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2200      	movs	r2, #0
 800c260:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2240      	movs	r2, #64	; 0x40
 800c266:	2100      	movs	r1, #0
 800c268:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	0018      	movs	r0, r3
 800c26e:	f7ff fbdd 	bl	800ba2c <HAL_I2C_SlaveRxCpltCallback>
}
 800c272:	e00e      	b.n	800c292 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2241      	movs	r2, #65	; 0x41
 800c278:	2120      	movs	r1, #32
 800c27a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2200      	movs	r2, #0
 800c280:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2240      	movs	r2, #64	; 0x40
 800c286:	2100      	movs	r1, #0
 800c288:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	0018      	movs	r0, r3
 800c28e:	f7ff fbc5 	bl	800ba1c <HAL_I2C_SlaveTxCpltCallback>
}
 800c292:	46c0      	nop			; (mov r8, r8)
 800c294:	46bd      	mov	sp, r7
 800c296:	b006      	add	sp, #24
 800c298:	bd80      	pop	{r7, pc}
 800c29a:	46c0      	nop			; (mov r8, r8)
 800c29c:	00008001 	.word	0x00008001
 800c2a0:	00008002 	.word	0x00008002
 800c2a4:	fe00e800 	.word	0xfe00e800
 800c2a8:	ffffbfff 	.word	0xffffbfff
 800c2ac:	ffff7fff 	.word	0xffff7fff
 800c2b0:	ffff0000 	.word	0xffff0000

0800c2b4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b082      	sub	sp, #8
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	4a27      	ldr	r2, [pc, #156]	; (800c360 <I2C_ITListenCplt+0xac>)
 800c2c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2241      	movs	r2, #65	; 0x41
 800c2ce:	2120      	movs	r1, #32
 800c2d0:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2242      	movs	r2, #66	; 0x42
 800c2d6:	2100      	movs	r1, #0
 800c2d8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2200      	movs	r2, #0
 800c2de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	089b      	lsrs	r3, r3, #2
 800c2e4:	001a      	movs	r2, r3
 800c2e6:	2301      	movs	r3, #1
 800c2e8:	4013      	ands	r3, r2
 800c2ea:	d022      	beq.n	800c332 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2f6:	b2d2      	uxtb	r2, r2
 800c2f8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2fe:	1c5a      	adds	r2, r3, #1
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d012      	beq.n	800c332 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c310:	3b01      	subs	r3, #1
 800c312:	b29a      	uxth	r2, r3
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c31c:	b29b      	uxth	r3, r3
 800c31e:	3b01      	subs	r3, #1
 800c320:	b29a      	uxth	r2, r3
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c32a:	2204      	movs	r2, #4
 800c32c:	431a      	orrs	r2, r3
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800c332:	4a0c      	ldr	r2, [pc, #48]	; (800c364 <I2C_ITListenCplt+0xb0>)
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	0011      	movs	r1, r2
 800c338:	0018      	movs	r0, r3
 800c33a:	f000 fb17 	bl	800c96c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	2210      	movs	r2, #16
 800c344:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2240      	movs	r2, #64	; 0x40
 800c34a:	2100      	movs	r1, #0
 800c34c:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	0018      	movs	r0, r3
 800c352:	f7ff fb83 	bl	800ba5c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800c356:	46c0      	nop			; (mov r8, r8)
 800c358:	46bd      	mov	sp, r7
 800c35a:	b002      	add	sp, #8
 800c35c:	bd80      	pop	{r7, pc}
 800c35e:	46c0      	nop			; (mov r8, r8)
 800c360:	ffff0000 	.word	0xffff0000
 800c364:	00008003 	.word	0x00008003

0800c368 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b084      	sub	sp, #16
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
 800c370:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800c372:	200f      	movs	r0, #15
 800c374:	183b      	adds	r3, r7, r0
 800c376:	687a      	ldr	r2, [r7, #4]
 800c378:	2141      	movs	r1, #65	; 0x41
 800c37a:	5c52      	ldrb	r2, [r2, r1]
 800c37c:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2242      	movs	r2, #66	; 0x42
 800c382:	2100      	movs	r1, #0
 800c384:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	4a62      	ldr	r2, [pc, #392]	; (800c514 <I2C_ITError+0x1ac>)
 800c38a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2200      	movs	r2, #0
 800c390:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	431a      	orrs	r2, r3
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800c39e:	183b      	adds	r3, r7, r0
 800c3a0:	781b      	ldrb	r3, [r3, #0]
 800c3a2:	2b28      	cmp	r3, #40	; 0x28
 800c3a4:	d007      	beq.n	800c3b6 <I2C_ITError+0x4e>
 800c3a6:	183b      	adds	r3, r7, r0
 800c3a8:	781b      	ldrb	r3, [r3, #0]
 800c3aa:	2b29      	cmp	r3, #41	; 0x29
 800c3ac:	d003      	beq.n	800c3b6 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800c3ae:	183b      	adds	r3, r7, r0
 800c3b0:	781b      	ldrb	r3, [r3, #0]
 800c3b2:	2b2a      	cmp	r3, #42	; 0x2a
 800c3b4:	d10c      	bne.n	800c3d0 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2103      	movs	r1, #3
 800c3ba:	0018      	movs	r0, r3
 800c3bc:	f000 fad6 	bl	800c96c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2241      	movs	r2, #65	; 0x41
 800c3c4:	2128      	movs	r1, #40	; 0x28
 800c3c6:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	4a53      	ldr	r2, [pc, #332]	; (800c518 <I2C_ITError+0x1b0>)
 800c3cc:	635a      	str	r2, [r3, #52]	; 0x34
 800c3ce:	e012      	b.n	800c3f6 <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800c3d0:	4a52      	ldr	r2, [pc, #328]	; (800c51c <I2C_ITError+0x1b4>)
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	0011      	movs	r1, r2
 800c3d6:	0018      	movs	r0, r3
 800c3d8:	f000 fac8 	bl	800c96c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2241      	movs	r2, #65	; 0x41
 800c3e0:	5c9b      	ldrb	r3, [r3, r2]
 800c3e2:	b2db      	uxtb	r3, r3
 800c3e4:	2b60      	cmp	r3, #96	; 0x60
 800c3e6:	d003      	beq.n	800c3f0 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2241      	movs	r2, #65	; 0x41
 800c3ec:	2120      	movs	r1, #32
 800c3ee:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3fa:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c400:	2b00      	cmp	r3, #0
 800c402:	d03b      	beq.n	800c47c <I2C_ITError+0x114>
 800c404:	68bb      	ldr	r3, [r7, #8]
 800c406:	2b11      	cmp	r3, #17
 800c408:	d002      	beq.n	800c410 <I2C_ITError+0xa8>
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	2b21      	cmp	r3, #33	; 0x21
 800c40e:	d135      	bne.n	800c47c <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	681a      	ldr	r2, [r3, #0]
 800c416:	2380      	movs	r3, #128	; 0x80
 800c418:	01db      	lsls	r3, r3, #7
 800c41a:	401a      	ands	r2, r3
 800c41c:	2380      	movs	r3, #128	; 0x80
 800c41e:	01db      	lsls	r3, r3, #7
 800c420:	429a      	cmp	r2, r3
 800c422:	d107      	bne.n	800c434 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	681a      	ldr	r2, [r3, #0]
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	493c      	ldr	r1, [pc, #240]	; (800c520 <I2C_ITError+0x1b8>)
 800c430:	400a      	ands	r2, r1
 800c432:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c438:	0018      	movs	r0, r3
 800c43a:	f7fe fa9c 	bl	800a976 <HAL_DMA_GetState>
 800c43e:	0003      	movs	r3, r0
 800c440:	2b01      	cmp	r3, #1
 800c442:	d016      	beq.n	800c472 <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c448:	4a36      	ldr	r2, [pc, #216]	; (800c524 <I2C_ITError+0x1bc>)
 800c44a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2240      	movs	r2, #64	; 0x40
 800c450:	2100      	movs	r1, #0
 800c452:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c458:	0018      	movs	r0, r3
 800c45a:	f7fe fa47 	bl	800a8ec <HAL_DMA_Abort_IT>
 800c45e:	1e03      	subs	r3, r0, #0
 800c460:	d051      	beq.n	800c506 <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c466:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c46c:	0018      	movs	r0, r3
 800c46e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c470:	e049      	b.n	800c506 <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	0018      	movs	r0, r3
 800c476:	f000 f859 	bl	800c52c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c47a:	e044      	b.n	800c506 <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c480:	2b00      	cmp	r3, #0
 800c482:	d03b      	beq.n	800c4fc <I2C_ITError+0x194>
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	2b12      	cmp	r3, #18
 800c488:	d002      	beq.n	800c490 <I2C_ITError+0x128>
 800c48a:	68bb      	ldr	r3, [r7, #8]
 800c48c:	2b22      	cmp	r3, #34	; 0x22
 800c48e:	d135      	bne.n	800c4fc <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	681a      	ldr	r2, [r3, #0]
 800c496:	2380      	movs	r3, #128	; 0x80
 800c498:	021b      	lsls	r3, r3, #8
 800c49a:	401a      	ands	r2, r3
 800c49c:	2380      	movs	r3, #128	; 0x80
 800c49e:	021b      	lsls	r3, r3, #8
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d107      	bne.n	800c4b4 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	681a      	ldr	r2, [r3, #0]
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	491e      	ldr	r1, [pc, #120]	; (800c528 <I2C_ITError+0x1c0>)
 800c4b0:	400a      	ands	r2, r1
 800c4b2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4b8:	0018      	movs	r0, r3
 800c4ba:	f7fe fa5c 	bl	800a976 <HAL_DMA_GetState>
 800c4be:	0003      	movs	r3, r0
 800c4c0:	2b01      	cmp	r3, #1
 800c4c2:	d016      	beq.n	800c4f2 <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4c8:	4a16      	ldr	r2, [pc, #88]	; (800c524 <I2C_ITError+0x1bc>)
 800c4ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2240      	movs	r2, #64	; 0x40
 800c4d0:	2100      	movs	r1, #0
 800c4d2:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4d8:	0018      	movs	r0, r3
 800c4da:	f7fe fa07 	bl	800a8ec <HAL_DMA_Abort_IT>
 800c4de:	1e03      	subs	r3, r0, #0
 800c4e0:	d013      	beq.n	800c50a <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4ec:	0018      	movs	r0, r3
 800c4ee:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c4f0:	e00b      	b.n	800c50a <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	0018      	movs	r0, r3
 800c4f6:	f000 f819 	bl	800c52c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c4fa:	e006      	b.n	800c50a <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	0018      	movs	r0, r3
 800c500:	f000 f814 	bl	800c52c <I2C_TreatErrorCallback>
  }
}
 800c504:	e002      	b.n	800c50c <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c506:	46c0      	nop			; (mov r8, r8)
 800c508:	e000      	b.n	800c50c <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c50a:	46c0      	nop			; (mov r8, r8)
}
 800c50c:	46c0      	nop			; (mov r8, r8)
 800c50e:	46bd      	mov	sp, r7
 800c510:	b004      	add	sp, #16
 800c512:	bd80      	pop	{r7, pc}
 800c514:	ffff0000 	.word	0xffff0000
 800c518:	0800baa5 	.word	0x0800baa5
 800c51c:	00008003 	.word	0x00008003
 800c520:	ffffbfff 	.word	0xffffbfff
 800c524:	0800c5c3 	.word	0x0800c5c3
 800c528:	ffff7fff 	.word	0xffff7fff

0800c52c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b082      	sub	sp, #8
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2241      	movs	r2, #65	; 0x41
 800c538:	5c9b      	ldrb	r3, [r3, r2]
 800c53a:	b2db      	uxtb	r3, r3
 800c53c:	2b60      	cmp	r3, #96	; 0x60
 800c53e:	d10f      	bne.n	800c560 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2241      	movs	r2, #65	; 0x41
 800c544:	2120      	movs	r1, #32
 800c546:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2200      	movs	r2, #0
 800c54c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	2240      	movs	r2, #64	; 0x40
 800c552:	2100      	movs	r1, #0
 800c554:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	0018      	movs	r0, r3
 800c55a:	f7ff fa8f 	bl	800ba7c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c55e:	e00a      	b.n	800c576 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2200      	movs	r2, #0
 800c564:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2240      	movs	r2, #64	; 0x40
 800c56a:	2100      	movs	r1, #0
 800c56c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	0018      	movs	r0, r3
 800c572:	f7ff fa7b 	bl	800ba6c <HAL_I2C_ErrorCallback>
}
 800c576:	46c0      	nop			; (mov r8, r8)
 800c578:	46bd      	mov	sp, r7
 800c57a:	b002      	add	sp, #8
 800c57c:	bd80      	pop	{r7, pc}

0800c57e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800c57e:	b580      	push	{r7, lr}
 800c580:	b082      	sub	sp, #8
 800c582:	af00      	add	r7, sp, #0
 800c584:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	699b      	ldr	r3, [r3, #24]
 800c58c:	2202      	movs	r2, #2
 800c58e:	4013      	ands	r3, r2
 800c590:	2b02      	cmp	r3, #2
 800c592:	d103      	bne.n	800c59c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	2200      	movs	r2, #0
 800c59a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	699b      	ldr	r3, [r3, #24]
 800c5a2:	2201      	movs	r2, #1
 800c5a4:	4013      	ands	r3, r2
 800c5a6:	2b01      	cmp	r3, #1
 800c5a8:	d007      	beq.n	800c5ba <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	699a      	ldr	r2, [r3, #24]
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	2101      	movs	r1, #1
 800c5b6:	430a      	orrs	r2, r1
 800c5b8:	619a      	str	r2, [r3, #24]
  }
}
 800c5ba:	46c0      	nop			; (mov r8, r8)
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	b002      	add	sp, #8
 800c5c0:	bd80      	pop	{r7, pc}

0800c5c2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800c5c2:	b580      	push	{r7, lr}
 800c5c4:	b084      	sub	sp, #16
 800c5c6:	af00      	add	r7, sp, #0
 800c5c8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5ce:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d003      	beq.n	800c5e0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5dc:	2200      	movs	r2, #0
 800c5de:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d003      	beq.n	800c5f0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	0018      	movs	r0, r3
 800c5f4:	f7ff ff9a 	bl	800c52c <I2C_TreatErrorCallback>
}
 800c5f8:	46c0      	nop			; (mov r8, r8)
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	b004      	add	sp, #16
 800c5fe:	bd80      	pop	{r7, pc}

0800c600 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b084      	sub	sp, #16
 800c604:	af00      	add	r7, sp, #0
 800c606:	60f8      	str	r0, [r7, #12]
 800c608:	60b9      	str	r1, [r7, #8]
 800c60a:	603b      	str	r3, [r7, #0]
 800c60c:	1dfb      	adds	r3, r7, #7
 800c60e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c610:	e021      	b.n	800c656 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	3301      	adds	r3, #1
 800c616:	d01e      	beq.n	800c656 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c618:	f7fd f8ae 	bl	8009778 <HAL_GetTick>
 800c61c:	0002      	movs	r2, r0
 800c61e:	69bb      	ldr	r3, [r7, #24]
 800c620:	1ad3      	subs	r3, r2, r3
 800c622:	683a      	ldr	r2, [r7, #0]
 800c624:	429a      	cmp	r2, r3
 800c626:	d302      	bcc.n	800c62e <I2C_WaitOnFlagUntilTimeout+0x2e>
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d113      	bne.n	800c656 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c632:	2220      	movs	r2, #32
 800c634:	431a      	orrs	r2, r3
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	2241      	movs	r2, #65	; 0x41
 800c63e:	2120      	movs	r1, #32
 800c640:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	2242      	movs	r2, #66	; 0x42
 800c646:	2100      	movs	r1, #0
 800c648:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	2240      	movs	r2, #64	; 0x40
 800c64e:	2100      	movs	r1, #0
 800c650:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800c652:	2301      	movs	r3, #1
 800c654:	e00f      	b.n	800c676 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	699b      	ldr	r3, [r3, #24]
 800c65c:	68ba      	ldr	r2, [r7, #8]
 800c65e:	4013      	ands	r3, r2
 800c660:	68ba      	ldr	r2, [r7, #8]
 800c662:	1ad3      	subs	r3, r2, r3
 800c664:	425a      	negs	r2, r3
 800c666:	4153      	adcs	r3, r2
 800c668:	b2db      	uxtb	r3, r3
 800c66a:	001a      	movs	r2, r3
 800c66c:	1dfb      	adds	r3, r7, #7
 800c66e:	781b      	ldrb	r3, [r3, #0]
 800c670:	429a      	cmp	r2, r3
 800c672:	d0ce      	beq.n	800c612 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c674:	2300      	movs	r3, #0
}
 800c676:	0018      	movs	r0, r3
 800c678:	46bd      	mov	sp, r7
 800c67a:	b004      	add	sp, #16
 800c67c:	bd80      	pop	{r7, pc}

0800c67e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800c67e:	b580      	push	{r7, lr}
 800c680:	b084      	sub	sp, #16
 800c682:	af00      	add	r7, sp, #0
 800c684:	60f8      	str	r0, [r7, #12]
 800c686:	60b9      	str	r1, [r7, #8]
 800c688:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c68a:	e02b      	b.n	800c6e4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800c68c:	687a      	ldr	r2, [r7, #4]
 800c68e:	68b9      	ldr	r1, [r7, #8]
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	0018      	movs	r0, r3
 800c694:	f000 f86e 	bl	800c774 <I2C_IsAcknowledgeFailed>
 800c698:	1e03      	subs	r3, r0, #0
 800c69a:	d001      	beq.n	800c6a0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c69c:	2301      	movs	r3, #1
 800c69e:	e029      	b.n	800c6f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c6a0:	68bb      	ldr	r3, [r7, #8]
 800c6a2:	3301      	adds	r3, #1
 800c6a4:	d01e      	beq.n	800c6e4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c6a6:	f7fd f867 	bl	8009778 <HAL_GetTick>
 800c6aa:	0002      	movs	r2, r0
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	1ad3      	subs	r3, r2, r3
 800c6b0:	68ba      	ldr	r2, [r7, #8]
 800c6b2:	429a      	cmp	r2, r3
 800c6b4:	d302      	bcc.n	800c6bc <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d113      	bne.n	800c6e4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6c0:	2220      	movs	r2, #32
 800c6c2:	431a      	orrs	r2, r3
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	2241      	movs	r2, #65	; 0x41
 800c6cc:	2120      	movs	r1, #32
 800c6ce:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	2242      	movs	r2, #66	; 0x42
 800c6d4:	2100      	movs	r1, #0
 800c6d6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	2240      	movs	r2, #64	; 0x40
 800c6dc:	2100      	movs	r1, #0
 800c6de:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800c6e0:	2301      	movs	r3, #1
 800c6e2:	e007      	b.n	800c6f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	699b      	ldr	r3, [r3, #24]
 800c6ea:	2202      	movs	r2, #2
 800c6ec:	4013      	ands	r3, r2
 800c6ee:	2b02      	cmp	r3, #2
 800c6f0:	d1cc      	bne.n	800c68c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c6f2:	2300      	movs	r3, #0
}
 800c6f4:	0018      	movs	r0, r3
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	b004      	add	sp, #16
 800c6fa:	bd80      	pop	{r7, pc}

0800c6fc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b084      	sub	sp, #16
 800c700:	af00      	add	r7, sp, #0
 800c702:	60f8      	str	r0, [r7, #12]
 800c704:	60b9      	str	r1, [r7, #8]
 800c706:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c708:	e028      	b.n	800c75c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800c70a:	687a      	ldr	r2, [r7, #4]
 800c70c:	68b9      	ldr	r1, [r7, #8]
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	0018      	movs	r0, r3
 800c712:	f000 f82f 	bl	800c774 <I2C_IsAcknowledgeFailed>
 800c716:	1e03      	subs	r3, r0, #0
 800c718:	d001      	beq.n	800c71e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c71a:	2301      	movs	r3, #1
 800c71c:	e026      	b.n	800c76c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c71e:	f7fd f82b 	bl	8009778 <HAL_GetTick>
 800c722:	0002      	movs	r2, r0
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	1ad3      	subs	r3, r2, r3
 800c728:	68ba      	ldr	r2, [r7, #8]
 800c72a:	429a      	cmp	r2, r3
 800c72c:	d302      	bcc.n	800c734 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d113      	bne.n	800c75c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c738:	2220      	movs	r2, #32
 800c73a:	431a      	orrs	r2, r3
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	2241      	movs	r2, #65	; 0x41
 800c744:	2120      	movs	r1, #32
 800c746:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	2242      	movs	r2, #66	; 0x42
 800c74c:	2100      	movs	r1, #0
 800c74e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	2240      	movs	r2, #64	; 0x40
 800c754:	2100      	movs	r1, #0
 800c756:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800c758:	2301      	movs	r3, #1
 800c75a:	e007      	b.n	800c76c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	699b      	ldr	r3, [r3, #24]
 800c762:	2220      	movs	r2, #32
 800c764:	4013      	ands	r3, r2
 800c766:	2b20      	cmp	r3, #32
 800c768:	d1cf      	bne.n	800c70a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c76a:	2300      	movs	r3, #0
}
 800c76c:	0018      	movs	r0, r3
 800c76e:	46bd      	mov	sp, r7
 800c770:	b004      	add	sp, #16
 800c772:	bd80      	pop	{r7, pc}

0800c774 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b084      	sub	sp, #16
 800c778:	af00      	add	r7, sp, #0
 800c77a:	60f8      	str	r0, [r7, #12]
 800c77c:	60b9      	str	r1, [r7, #8]
 800c77e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	699b      	ldr	r3, [r3, #24]
 800c786:	2210      	movs	r2, #16
 800c788:	4013      	ands	r3, r2
 800c78a:	2b10      	cmp	r3, #16
 800c78c:	d164      	bne.n	800c858 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	685a      	ldr	r2, [r3, #4]
 800c794:	2380      	movs	r3, #128	; 0x80
 800c796:	049b      	lsls	r3, r3, #18
 800c798:	401a      	ands	r2, r3
 800c79a:	2380      	movs	r3, #128	; 0x80
 800c79c:	049b      	lsls	r3, r3, #18
 800c79e:	429a      	cmp	r2, r3
 800c7a0:	d02b      	beq.n	800c7fa <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	685a      	ldr	r2, [r3, #4]
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	2180      	movs	r1, #128	; 0x80
 800c7ae:	01c9      	lsls	r1, r1, #7
 800c7b0:	430a      	orrs	r2, r1
 800c7b2:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c7b4:	e021      	b.n	800c7fa <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800c7b6:	68bb      	ldr	r3, [r7, #8]
 800c7b8:	3301      	adds	r3, #1
 800c7ba:	d01e      	beq.n	800c7fa <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c7bc:	f7fc ffdc 	bl	8009778 <HAL_GetTick>
 800c7c0:	0002      	movs	r2, r0
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	1ad3      	subs	r3, r2, r3
 800c7c6:	68ba      	ldr	r2, [r7, #8]
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	d302      	bcc.n	800c7d2 <I2C_IsAcknowledgeFailed+0x5e>
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d113      	bne.n	800c7fa <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7d6:	2220      	movs	r2, #32
 800c7d8:	431a      	orrs	r2, r3
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	2241      	movs	r2, #65	; 0x41
 800c7e2:	2120      	movs	r1, #32
 800c7e4:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	2242      	movs	r2, #66	; 0x42
 800c7ea:	2100      	movs	r1, #0
 800c7ec:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	2240      	movs	r2, #64	; 0x40
 800c7f2:	2100      	movs	r1, #0
 800c7f4:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	e02f      	b.n	800c85a <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	699b      	ldr	r3, [r3, #24]
 800c800:	2220      	movs	r2, #32
 800c802:	4013      	ands	r3, r2
 800c804:	2b20      	cmp	r3, #32
 800c806:	d1d6      	bne.n	800c7b6 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	2210      	movs	r2, #16
 800c80e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	2220      	movs	r2, #32
 800c816:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	0018      	movs	r0, r3
 800c81c:	f7ff feaf 	bl	800c57e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	685a      	ldr	r2, [r3, #4]
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	490e      	ldr	r1, [pc, #56]	; (800c864 <I2C_IsAcknowledgeFailed+0xf0>)
 800c82c:	400a      	ands	r2, r1
 800c82e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c834:	2204      	movs	r2, #4
 800c836:	431a      	orrs	r2, r3
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	2241      	movs	r2, #65	; 0x41
 800c840:	2120      	movs	r1, #32
 800c842:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	2242      	movs	r2, #66	; 0x42
 800c848:	2100      	movs	r1, #0
 800c84a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	2240      	movs	r2, #64	; 0x40
 800c850:	2100      	movs	r1, #0
 800c852:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800c854:	2301      	movs	r3, #1
 800c856:	e000      	b.n	800c85a <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 800c858:	2300      	movs	r3, #0
}
 800c85a:	0018      	movs	r0, r3
 800c85c:	46bd      	mov	sp, r7
 800c85e:	b004      	add	sp, #16
 800c860:	bd80      	pop	{r7, pc}
 800c862:	46c0      	nop			; (mov r8, r8)
 800c864:	fe00e800 	.word	0xfe00e800

0800c868 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b084      	sub	sp, #16
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	60f8      	str	r0, [r7, #12]
 800c870:	0008      	movs	r0, r1
 800c872:	0011      	movs	r1, r2
 800c874:	607b      	str	r3, [r7, #4]
 800c876:	230a      	movs	r3, #10
 800c878:	18fb      	adds	r3, r7, r3
 800c87a:	1c02      	adds	r2, r0, #0
 800c87c:	801a      	strh	r2, [r3, #0]
 800c87e:	2309      	movs	r3, #9
 800c880:	18fb      	adds	r3, r7, r3
 800c882:	1c0a      	adds	r2, r1, #0
 800c884:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	4a2e      	ldr	r2, [pc, #184]	; (800c944 <I2C_TransferConfig+0xdc>)
 800c88c:	4293      	cmp	r3, r2
 800c88e:	d00a      	beq.n	800c8a6 <I2C_TransferConfig+0x3e>
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	4a2c      	ldr	r2, [pc, #176]	; (800c948 <I2C_TransferConfig+0xe0>)
 800c896:	4293      	cmp	r3, r2
 800c898:	d005      	beq.n	800c8a6 <I2C_TransferConfig+0x3e>
 800c89a:	4a2c      	ldr	r2, [pc, #176]	; (800c94c <I2C_TransferConfig+0xe4>)
 800c89c:	4b2c      	ldr	r3, [pc, #176]	; (800c950 <I2C_TransferConfig+0xe8>)
 800c89e:	0011      	movs	r1, r2
 800c8a0:	0018      	movs	r0, r3
 800c8a2:	f7f6 fe9c 	bl	80035de <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 800c8a6:	687a      	ldr	r2, [r7, #4]
 800c8a8:	2380      	movs	r3, #128	; 0x80
 800c8aa:	045b      	lsls	r3, r3, #17
 800c8ac:	429a      	cmp	r2, r3
 800c8ae:	d00d      	beq.n	800c8cc <I2C_TransferConfig+0x64>
 800c8b0:	687a      	ldr	r2, [r7, #4]
 800c8b2:	2380      	movs	r3, #128	; 0x80
 800c8b4:	049b      	lsls	r3, r3, #18
 800c8b6:	429a      	cmp	r2, r3
 800c8b8:	d008      	beq.n	800c8cc <I2C_TransferConfig+0x64>
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d005      	beq.n	800c8cc <I2C_TransferConfig+0x64>
 800c8c0:	4a24      	ldr	r2, [pc, #144]	; (800c954 <I2C_TransferConfig+0xec>)
 800c8c2:	4b23      	ldr	r3, [pc, #140]	; (800c950 <I2C_TransferConfig+0xe8>)
 800c8c4:	0011      	movs	r1, r2
 800c8c6:	0018      	movs	r0, r3
 800c8c8:	f7f6 fe89 	bl	80035de <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
 800c8cc:	69bb      	ldr	r3, [r7, #24]
 800c8ce:	4a22      	ldr	r2, [pc, #136]	; (800c958 <I2C_TransferConfig+0xf0>)
 800c8d0:	4293      	cmp	r3, r2
 800c8d2:	d010      	beq.n	800c8f6 <I2C_TransferConfig+0x8e>
 800c8d4:	69bb      	ldr	r3, [r7, #24]
 800c8d6:	4a21      	ldr	r2, [pc, #132]	; (800c95c <I2C_TransferConfig+0xf4>)
 800c8d8:	4293      	cmp	r3, r2
 800c8da:	d00c      	beq.n	800c8f6 <I2C_TransferConfig+0x8e>
 800c8dc:	69bb      	ldr	r3, [r7, #24]
 800c8de:	4a20      	ldr	r2, [pc, #128]	; (800c960 <I2C_TransferConfig+0xf8>)
 800c8e0:	4293      	cmp	r3, r2
 800c8e2:	d008      	beq.n	800c8f6 <I2C_TransferConfig+0x8e>
 800c8e4:	69bb      	ldr	r3, [r7, #24]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d005      	beq.n	800c8f6 <I2C_TransferConfig+0x8e>
 800c8ea:	4a1e      	ldr	r2, [pc, #120]	; (800c964 <I2C_TransferConfig+0xfc>)
 800c8ec:	4b18      	ldr	r3, [pc, #96]	; (800c950 <I2C_TransferConfig+0xe8>)
 800c8ee:	0011      	movs	r1, r2
 800c8f0:	0018      	movs	r0, r3
 800c8f2:	f7f6 fe74 	bl	80035de <assert_failed>

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	685b      	ldr	r3, [r3, #4]
 800c8fc:	69ba      	ldr	r2, [r7, #24]
 800c8fe:	0d51      	lsrs	r1, r2, #21
 800c900:	2280      	movs	r2, #128	; 0x80
 800c902:	00d2      	lsls	r2, r2, #3
 800c904:	400a      	ands	r2, r1
 800c906:	4918      	ldr	r1, [pc, #96]	; (800c968 <I2C_TransferConfig+0x100>)
 800c908:	430a      	orrs	r2, r1
 800c90a:	43d2      	mvns	r2, r2
 800c90c:	401a      	ands	r2, r3
 800c90e:	0011      	movs	r1, r2
 800c910:	230a      	movs	r3, #10
 800c912:	18fb      	adds	r3, r7, r3
 800c914:	881b      	ldrh	r3, [r3, #0]
 800c916:	059b      	lsls	r3, r3, #22
 800c918:	0d9a      	lsrs	r2, r3, #22
 800c91a:	2309      	movs	r3, #9
 800c91c:	18fb      	adds	r3, r7, r3
 800c91e:	781b      	ldrb	r3, [r3, #0]
 800c920:	0418      	lsls	r0, r3, #16
 800c922:	23ff      	movs	r3, #255	; 0xff
 800c924:	041b      	lsls	r3, r3, #16
 800c926:	4003      	ands	r3, r0
 800c928:	431a      	orrs	r2, r3
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	431a      	orrs	r2, r3
 800c92e:	69bb      	ldr	r3, [r7, #24]
 800c930:	431a      	orrs	r2, r3
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	430a      	orrs	r2, r1
 800c938:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800c93a:	46c0      	nop			; (mov r8, r8)
 800c93c:	46bd      	mov	sp, r7
 800c93e:	b004      	add	sp, #16
 800c940:	bd80      	pop	{r7, pc}
 800c942:	46c0      	nop			; (mov r8, r8)
 800c944:	40005400 	.word	0x40005400
 800c948:	40005800 	.word	0x40005800
 800c94c:	000019cb 	.word	0x000019cb
 800c950:	08016ed0 	.word	0x08016ed0
 800c954:	000019cc 	.word	0x000019cc
 800c958:	80004000 	.word	0x80004000
 800c95c:	80002400 	.word	0x80002400
 800c960:	80002000 	.word	0x80002000
 800c964:	000019cd 	.word	0x000019cd
 800c968:	03ff63ff 	.word	0x03ff63ff

0800c96c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b084      	sub	sp, #16
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
 800c974:	000a      	movs	r2, r1
 800c976:	1cbb      	adds	r3, r7, #2
 800c978:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800c97a:	2300      	movs	r3, #0
 800c97c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800c97e:	1cbb      	adds	r3, r7, #2
 800c980:	881b      	ldrh	r3, [r3, #0]
 800c982:	2201      	movs	r2, #1
 800c984:	4013      	ands	r3, r2
 800c986:	d010      	beq.n	800c9aa <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	2242      	movs	r2, #66	; 0x42
 800c98c:	4313      	orrs	r3, r2
 800c98e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2241      	movs	r2, #65	; 0x41
 800c994:	5c9b      	ldrb	r3, [r3, r2]
 800c996:	b2db      	uxtb	r3, r3
 800c998:	001a      	movs	r2, r3
 800c99a:	2328      	movs	r3, #40	; 0x28
 800c99c:	4013      	ands	r3, r2
 800c99e:	2b28      	cmp	r3, #40	; 0x28
 800c9a0:	d003      	beq.n	800c9aa <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	22b0      	movs	r2, #176	; 0xb0
 800c9a6:	4313      	orrs	r3, r2
 800c9a8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800c9aa:	1cbb      	adds	r3, r7, #2
 800c9ac:	881b      	ldrh	r3, [r3, #0]
 800c9ae:	2202      	movs	r2, #2
 800c9b0:	4013      	ands	r3, r2
 800c9b2:	d010      	beq.n	800c9d6 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	2244      	movs	r2, #68	; 0x44
 800c9b8:	4313      	orrs	r3, r2
 800c9ba:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2241      	movs	r2, #65	; 0x41
 800c9c0:	5c9b      	ldrb	r3, [r3, r2]
 800c9c2:	b2db      	uxtb	r3, r3
 800c9c4:	001a      	movs	r2, r3
 800c9c6:	2328      	movs	r3, #40	; 0x28
 800c9c8:	4013      	ands	r3, r2
 800c9ca:	2b28      	cmp	r3, #40	; 0x28
 800c9cc:	d003      	beq.n	800c9d6 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	22b0      	movs	r2, #176	; 0xb0
 800c9d2:	4313      	orrs	r3, r2
 800c9d4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800c9d6:	1cbb      	adds	r3, r7, #2
 800c9d8:	2200      	movs	r2, #0
 800c9da:	5e9b      	ldrsh	r3, [r3, r2]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	da03      	bge.n	800c9e8 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	22b8      	movs	r2, #184	; 0xb8
 800c9e4:	4313      	orrs	r3, r2
 800c9e6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800c9e8:	1cbb      	adds	r3, r7, #2
 800c9ea:	881b      	ldrh	r3, [r3, #0]
 800c9ec:	2b10      	cmp	r3, #16
 800c9ee:	d103      	bne.n	800c9f8 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	2290      	movs	r2, #144	; 0x90
 800c9f4:	4313      	orrs	r3, r2
 800c9f6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800c9f8:	1cbb      	adds	r3, r7, #2
 800c9fa:	881b      	ldrh	r3, [r3, #0]
 800c9fc:	2b20      	cmp	r3, #32
 800c9fe:	d103      	bne.n	800ca08 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	2220      	movs	r2, #32
 800ca04:	4313      	orrs	r3, r2
 800ca06:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800ca08:	1cbb      	adds	r3, r7, #2
 800ca0a:	881b      	ldrh	r3, [r3, #0]
 800ca0c:	2b40      	cmp	r3, #64	; 0x40
 800ca0e:	d103      	bne.n	800ca18 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	2240      	movs	r2, #64	; 0x40
 800ca14:	4313      	orrs	r3, r2
 800ca16:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	681a      	ldr	r2, [r3, #0]
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	43d9      	mvns	r1, r3
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	400a      	ands	r2, r1
 800ca28:	601a      	str	r2, [r3, #0]
}
 800ca2a:	46c0      	nop			; (mov r8, r8)
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	b004      	add	sp, #16
 800ca30:	bd80      	pop	{r7, pc}
	...

0800ca34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b082      	sub	sp, #8
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
 800ca3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	4a2f      	ldr	r2, [pc, #188]	; (800cb00 <HAL_I2CEx_ConfigAnalogFilter+0xcc>)
 800ca44:	4293      	cmp	r3, r2
 800ca46:	d009      	beq.n	800ca5c <HAL_I2CEx_ConfigAnalogFilter+0x28>
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	4a2d      	ldr	r2, [pc, #180]	; (800cb04 <HAL_I2CEx_ConfigAnalogFilter+0xd0>)
 800ca4e:	4293      	cmp	r3, r2
 800ca50:	d004      	beq.n	800ca5c <HAL_I2CEx_ConfigAnalogFilter+0x28>
 800ca52:	4b2d      	ldr	r3, [pc, #180]	; (800cb08 <HAL_I2CEx_ConfigAnalogFilter+0xd4>)
 800ca54:	2164      	movs	r1, #100	; 0x64
 800ca56:	0018      	movs	r0, r3
 800ca58:	f7f6 fdc1 	bl	80035de <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d009      	beq.n	800ca76 <HAL_I2CEx_ConfigAnalogFilter+0x42>
 800ca62:	683a      	ldr	r2, [r7, #0]
 800ca64:	2380      	movs	r3, #128	; 0x80
 800ca66:	015b      	lsls	r3, r3, #5
 800ca68:	429a      	cmp	r2, r3
 800ca6a:	d004      	beq.n	800ca76 <HAL_I2CEx_ConfigAnalogFilter+0x42>
 800ca6c:	4b26      	ldr	r3, [pc, #152]	; (800cb08 <HAL_I2CEx_ConfigAnalogFilter+0xd4>)
 800ca6e:	2165      	movs	r1, #101	; 0x65
 800ca70:	0018      	movs	r0, r3
 800ca72:	f7f6 fdb4 	bl	80035de <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2241      	movs	r2, #65	; 0x41
 800ca7a:	5c9b      	ldrb	r3, [r3, r2]
 800ca7c:	b2db      	uxtb	r3, r3
 800ca7e:	2b20      	cmp	r3, #32
 800ca80:	d138      	bne.n	800caf4 <HAL_I2CEx_ConfigAnalogFilter+0xc0>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	2240      	movs	r2, #64	; 0x40
 800ca86:	5c9b      	ldrb	r3, [r3, r2]
 800ca88:	2b01      	cmp	r3, #1
 800ca8a:	d101      	bne.n	800ca90 <HAL_I2CEx_ConfigAnalogFilter+0x5c>
 800ca8c:	2302      	movs	r3, #2
 800ca8e:	e032      	b.n	800caf6 <HAL_I2CEx_ConfigAnalogFilter+0xc2>
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2240      	movs	r2, #64	; 0x40
 800ca94:	2101      	movs	r1, #1
 800ca96:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2241      	movs	r2, #65	; 0x41
 800ca9c:	2124      	movs	r1, #36	; 0x24
 800ca9e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	681a      	ldr	r2, [r3, #0]
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	2101      	movs	r1, #1
 800caac:	438a      	bics	r2, r1
 800caae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	681a      	ldr	r2, [r3, #0]
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	4914      	ldr	r1, [pc, #80]	; (800cb0c <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 800cabc:	400a      	ands	r2, r1
 800cabe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	6819      	ldr	r1, [r3, #0]
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	683a      	ldr	r2, [r7, #0]
 800cacc:	430a      	orrs	r2, r1
 800cace:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	681a      	ldr	r2, [r3, #0]
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	2101      	movs	r1, #1
 800cadc:	430a      	orrs	r2, r1
 800cade:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2241      	movs	r2, #65	; 0x41
 800cae4:	2120      	movs	r1, #32
 800cae6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2240      	movs	r2, #64	; 0x40
 800caec:	2100      	movs	r1, #0
 800caee:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800caf0:	2300      	movs	r3, #0
 800caf2:	e000      	b.n	800caf6 <HAL_I2CEx_ConfigAnalogFilter+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800caf4:	2302      	movs	r3, #2
  }
}
 800caf6:	0018      	movs	r0, r3
 800caf8:	46bd      	mov	sp, r7
 800cafa:	b002      	add	sp, #8
 800cafc:	bd80      	pop	{r7, pc}
 800cafe:	46c0      	nop			; (mov r8, r8)
 800cb00:	40005400 	.word	0x40005400
 800cb04:	40005800 	.word	0x40005800
 800cb08:	08016f08 	.word	0x08016f08
 800cb0c:	ffffefff 	.word	0xffffefff

0800cb10 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b084      	sub	sp, #16
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
 800cb18:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	4a2d      	ldr	r2, [pc, #180]	; (800cbd4 <HAL_I2CEx_ConfigDigitalFilter+0xc4>)
 800cb20:	4293      	cmp	r3, r2
 800cb22:	d009      	beq.n	800cb38 <HAL_I2CEx_ConfigDigitalFilter+0x28>
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	4a2b      	ldr	r2, [pc, #172]	; (800cbd8 <HAL_I2CEx_ConfigDigitalFilter+0xc8>)
 800cb2a:	4293      	cmp	r3, r2
 800cb2c:	d004      	beq.n	800cb38 <HAL_I2CEx_ConfigDigitalFilter+0x28>
 800cb2e:	4b2b      	ldr	r3, [pc, #172]	; (800cbdc <HAL_I2CEx_ConfigDigitalFilter+0xcc>)
 800cb30:	2192      	movs	r1, #146	; 0x92
 800cb32:	0018      	movs	r0, r3
 800cb34:	f7f6 fd53 	bl	80035de <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	2b0f      	cmp	r3, #15
 800cb3c:	d904      	bls.n	800cb48 <HAL_I2CEx_ConfigDigitalFilter+0x38>
 800cb3e:	4b27      	ldr	r3, [pc, #156]	; (800cbdc <HAL_I2CEx_ConfigDigitalFilter+0xcc>)
 800cb40:	2193      	movs	r1, #147	; 0x93
 800cb42:	0018      	movs	r0, r3
 800cb44:	f7f6 fd4b 	bl	80035de <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2241      	movs	r2, #65	; 0x41
 800cb4c:	5c9b      	ldrb	r3, [r3, r2]
 800cb4e:	b2db      	uxtb	r3, r3
 800cb50:	2b20      	cmp	r3, #32
 800cb52:	d139      	bne.n	800cbc8 <HAL_I2CEx_ConfigDigitalFilter+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2240      	movs	r2, #64	; 0x40
 800cb58:	5c9b      	ldrb	r3, [r3, r2]
 800cb5a:	2b01      	cmp	r3, #1
 800cb5c:	d101      	bne.n	800cb62 <HAL_I2CEx_ConfigDigitalFilter+0x52>
 800cb5e:	2302      	movs	r3, #2
 800cb60:	e033      	b.n	800cbca <HAL_I2CEx_ConfigDigitalFilter+0xba>
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2240      	movs	r2, #64	; 0x40
 800cb66:	2101      	movs	r1, #1
 800cb68:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	2241      	movs	r2, #65	; 0x41
 800cb6e:	2124      	movs	r1, #36	; 0x24
 800cb70:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	681a      	ldr	r2, [r3, #0]
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	2101      	movs	r1, #1
 800cb7e:	438a      	bics	r2, r1
 800cb80:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	4a14      	ldr	r2, [pc, #80]	; (800cbe0 <HAL_I2CEx_ConfigDigitalFilter+0xd0>)
 800cb8e:	4013      	ands	r3, r2
 800cb90:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	021b      	lsls	r3, r3, #8
 800cb96:	68fa      	ldr	r2, [r7, #12]
 800cb98:	4313      	orrs	r3, r2
 800cb9a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	68fa      	ldr	r2, [r7, #12]
 800cba2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	681a      	ldr	r2, [r3, #0]
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	2101      	movs	r1, #1
 800cbb0:	430a      	orrs	r2, r1
 800cbb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2241      	movs	r2, #65	; 0x41
 800cbb8:	2120      	movs	r1, #32
 800cbba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2240      	movs	r2, #64	; 0x40
 800cbc0:	2100      	movs	r1, #0
 800cbc2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	e000      	b.n	800cbca <HAL_I2CEx_ConfigDigitalFilter+0xba>
  }
  else
  {
    return HAL_BUSY;
 800cbc8:	2302      	movs	r3, #2
  }
}
 800cbca:	0018      	movs	r0, r3
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	b004      	add	sp, #16
 800cbd0:	bd80      	pop	{r7, pc}
 800cbd2:	46c0      	nop			; (mov r8, r8)
 800cbd4:	40005400 	.word	0x40005400
 800cbd8:	40005800 	.word	0x40005800
 800cbdc:	08016f08 	.word	0x08016f08
 800cbe0:	fffff0ff 	.word	0xfffff0ff

0800cbe4 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b084      	sub	sp, #16
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d101      	bne.n	800cbf6 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800cbf2:	2301      	movs	r3, #1
 800cbf4:	e07e      	b.n	800ccf4 <HAL_IWDG_Init+0x110>
  }

  /* Check the parameters */
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	4a40      	ldr	r2, [pc, #256]	; (800ccfc <HAL_IWDG_Init+0x118>)
 800cbfc:	4293      	cmp	r3, r2
 800cbfe:	d004      	beq.n	800cc0a <HAL_IWDG_Init+0x26>
 800cc00:	4b3f      	ldr	r3, [pc, #252]	; (800cd00 <HAL_IWDG_Init+0x11c>)
 800cc02:	21b6      	movs	r1, #182	; 0xb6
 800cc04:	0018      	movs	r0, r3
 800cc06:	f7f6 fcea 	bl	80035de <assert_failed>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	685b      	ldr	r3, [r3, #4]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d01c      	beq.n	800cc4c <HAL_IWDG_Init+0x68>
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	685b      	ldr	r3, [r3, #4]
 800cc16:	2b01      	cmp	r3, #1
 800cc18:	d018      	beq.n	800cc4c <HAL_IWDG_Init+0x68>
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	685b      	ldr	r3, [r3, #4]
 800cc1e:	2b02      	cmp	r3, #2
 800cc20:	d014      	beq.n	800cc4c <HAL_IWDG_Init+0x68>
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	685b      	ldr	r3, [r3, #4]
 800cc26:	2b03      	cmp	r3, #3
 800cc28:	d010      	beq.n	800cc4c <HAL_IWDG_Init+0x68>
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	685b      	ldr	r3, [r3, #4]
 800cc2e:	2b04      	cmp	r3, #4
 800cc30:	d00c      	beq.n	800cc4c <HAL_IWDG_Init+0x68>
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	685b      	ldr	r3, [r3, #4]
 800cc36:	2b05      	cmp	r3, #5
 800cc38:	d008      	beq.n	800cc4c <HAL_IWDG_Init+0x68>
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	685b      	ldr	r3, [r3, #4]
 800cc3e:	2b06      	cmp	r3, #6
 800cc40:	d004      	beq.n	800cc4c <HAL_IWDG_Init+0x68>
 800cc42:	4b2f      	ldr	r3, [pc, #188]	; (800cd00 <HAL_IWDG_Init+0x11c>)
 800cc44:	21b7      	movs	r1, #183	; 0xb7
 800cc46:	0018      	movs	r0, r3
 800cc48:	f7f6 fcc9 	bl	80035de <assert_failed>
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	689a      	ldr	r2, [r3, #8]
 800cc50:	2380      	movs	r3, #128	; 0x80
 800cc52:	015b      	lsls	r3, r3, #5
 800cc54:	429a      	cmp	r2, r3
 800cc56:	d304      	bcc.n	800cc62 <HAL_IWDG_Init+0x7e>
 800cc58:	4b29      	ldr	r3, [pc, #164]	; (800cd00 <HAL_IWDG_Init+0x11c>)
 800cc5a:	21b8      	movs	r1, #184	; 0xb8
 800cc5c:	0018      	movs	r0, r3
 800cc5e:	f7f6 fcbe 	bl	80035de <assert_failed>
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	68da      	ldr	r2, [r3, #12]
 800cc66:	2380      	movs	r3, #128	; 0x80
 800cc68:	015b      	lsls	r3, r3, #5
 800cc6a:	429a      	cmp	r2, r3
 800cc6c:	d304      	bcc.n	800cc78 <HAL_IWDG_Init+0x94>
 800cc6e:	4b24      	ldr	r3, [pc, #144]	; (800cd00 <HAL_IWDG_Init+0x11c>)
 800cc70:	21b9      	movs	r1, #185	; 0xb9
 800cc72:	0018      	movs	r0, r3
 800cc74:	f7f6 fcb3 	bl	80035de <assert_failed>

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	4a21      	ldr	r2, [pc, #132]	; (800cd04 <HAL_IWDG_Init+0x120>)
 800cc7e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	4a20      	ldr	r2, [pc, #128]	; (800cd08 <HAL_IWDG_Init+0x124>)
 800cc86:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	687a      	ldr	r2, [r7, #4]
 800cc8e:	6852      	ldr	r2, [r2, #4]
 800cc90:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	687a      	ldr	r2, [r7, #4]
 800cc98:	6892      	ldr	r2, [r2, #8]
 800cc9a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800cc9c:	f7fc fd6c 	bl	8009778 <HAL_GetTick>
 800cca0:	0003      	movs	r3, r0
 800cca2:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800cca4:	e00e      	b.n	800ccc4 <HAL_IWDG_Init+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800cca6:	f7fc fd67 	bl	8009778 <HAL_GetTick>
 800ccaa:	0002      	movs	r2, r0
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	1ad3      	subs	r3, r2, r3
 800ccb0:	2b27      	cmp	r3, #39	; 0x27
 800ccb2:	d907      	bls.n	800ccc4 <HAL_IWDG_Init+0xe0>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	68db      	ldr	r3, [r3, #12]
 800ccba:	2207      	movs	r2, #7
 800ccbc:	4013      	ands	r3, r2
 800ccbe:	d001      	beq.n	800ccc4 <HAL_IWDG_Init+0xe0>
      {
        return HAL_TIMEOUT;
 800ccc0:	2303      	movs	r3, #3
 800ccc2:	e017      	b.n	800ccf4 <HAL_IWDG_Init+0x110>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	68db      	ldr	r3, [r3, #12]
 800ccca:	2207      	movs	r2, #7
 800cccc:	4013      	ands	r3, r2
 800ccce:	d1ea      	bne.n	800cca6 <HAL_IWDG_Init+0xc2>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	691a      	ldr	r2, [r3, #16]
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	68db      	ldr	r3, [r3, #12]
 800ccda:	429a      	cmp	r2, r3
 800ccdc:	d005      	beq.n	800ccea <HAL_IWDG_Init+0x106>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	687a      	ldr	r2, [r7, #4]
 800cce4:	68d2      	ldr	r2, [r2, #12]
 800cce6:	611a      	str	r2, [r3, #16]
 800cce8:	e003      	b.n	800ccf2 <HAL_IWDG_Init+0x10e>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	4a07      	ldr	r2, [pc, #28]	; (800cd0c <HAL_IWDG_Init+0x128>)
 800ccf0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ccf2:	2300      	movs	r3, #0
}
 800ccf4:	0018      	movs	r0, r3
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	b004      	add	sp, #16
 800ccfa:	bd80      	pop	{r7, pc}
 800ccfc:	40003000 	.word	0x40003000
 800cd00:	08016f44 	.word	0x08016f44
 800cd04:	0000cccc 	.word	0x0000cccc
 800cd08:	00005555 	.word	0x00005555
 800cd0c:	0000aaaa 	.word	0x0000aaaa

0800cd10 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b082      	sub	sp, #8
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	4a03      	ldr	r2, [pc, #12]	; (800cd2c <HAL_IWDG_Refresh+0x1c>)
 800cd1e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800cd20:	2300      	movs	r3, #0
}
 800cd22:	0018      	movs	r0, r3
 800cd24:	46bd      	mov	sp, r7
 800cd26:	b002      	add	sp, #8
 800cd28:	bd80      	pop	{r7, pc}
 800cd2a:	46c0      	nop			; (mov r8, r8)
 800cd2c:	0000aaaa 	.word	0x0000aaaa

0800cd30 <HAL_PWR_EnableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	af00      	add	r7, sp, #0
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 800cd34:	4b04      	ldr	r3, [pc, #16]	; (800cd48 <HAL_PWR_EnableBkUpAccess+0x18>)
 800cd36:	681a      	ldr	r2, [r3, #0]
 800cd38:	4b03      	ldr	r3, [pc, #12]	; (800cd48 <HAL_PWR_EnableBkUpAccess+0x18>)
 800cd3a:	2180      	movs	r1, #128	; 0x80
 800cd3c:	0049      	lsls	r1, r1, #1
 800cd3e:	430a      	orrs	r2, r1
 800cd40:	601a      	str	r2, [r3, #0]
}
 800cd42:	46c0      	nop			; (mov r8, r8)
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}
 800cd48:	40007000 	.word	0x40007000

0800cd4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b088      	sub	sp, #32
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d102      	bne.n	800cd60 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800cd5a:	2301      	movs	r3, #1
 800cd5c:	f000 fc77 	bl	800d64e <HAL_RCC_OscConfig+0x902>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d020      	beq.n	800cdaa <HAL_RCC_OscConfig+0x5e>
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	2201      	movs	r2, #1
 800cd6e:	4013      	ands	r3, r2
 800cd70:	d11b      	bne.n	800cdaa <HAL_RCC_OscConfig+0x5e>
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	2202      	movs	r2, #2
 800cd78:	4013      	ands	r3, r2
 800cd7a:	d116      	bne.n	800cdaa <HAL_RCC_OscConfig+0x5e>
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	2208      	movs	r2, #8
 800cd82:	4013      	ands	r3, r2
 800cd84:	d111      	bne.n	800cdaa <HAL_RCC_OscConfig+0x5e>
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	2204      	movs	r2, #4
 800cd8c:	4013      	ands	r3, r2
 800cd8e:	d10c      	bne.n	800cdaa <HAL_RCC_OscConfig+0x5e>
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	2210      	movs	r2, #16
 800cd96:	4013      	ands	r3, r2
 800cd98:	d107      	bne.n	800cdaa <HAL_RCC_OscConfig+0x5e>
 800cd9a:	233a      	movs	r3, #58	; 0x3a
 800cd9c:	33ff      	adds	r3, #255	; 0xff
 800cd9e:	001a      	movs	r2, r3
 800cda0:	4bc2      	ldr	r3, [pc, #776]	; (800d0ac <HAL_RCC_OscConfig+0x360>)
 800cda2:	0011      	movs	r1, r2
 800cda4:	0018      	movs	r0, r3
 800cda6:	f7f6 fc1a 	bl	80035de <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	2201      	movs	r2, #1
 800cdb0:	4013      	ands	r3, r2
 800cdb2:	d100      	bne.n	800cdb6 <HAL_RCC_OscConfig+0x6a>
 800cdb4:	e0a4      	b.n	800cf00 <HAL_RCC_OscConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	685b      	ldr	r3, [r3, #4]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d00f      	beq.n	800cdde <HAL_RCC_OscConfig+0x92>
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	685b      	ldr	r3, [r3, #4]
 800cdc2:	2b01      	cmp	r3, #1
 800cdc4:	d00b      	beq.n	800cdde <HAL_RCC_OscConfig+0x92>
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	685b      	ldr	r3, [r3, #4]
 800cdca:	2b05      	cmp	r3, #5
 800cdcc:	d007      	beq.n	800cdde <HAL_RCC_OscConfig+0x92>
 800cdce:	2340      	movs	r3, #64	; 0x40
 800cdd0:	33ff      	adds	r3, #255	; 0xff
 800cdd2:	001a      	movs	r2, r3
 800cdd4:	4bb5      	ldr	r3, [pc, #724]	; (800d0ac <HAL_RCC_OscConfig+0x360>)
 800cdd6:	0011      	movs	r1, r2
 800cdd8:	0018      	movs	r0, r3
 800cdda:	f7f6 fc00 	bl	80035de <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800cdde:	4bb4      	ldr	r3, [pc, #720]	; (800d0b0 <HAL_RCC_OscConfig+0x364>)
 800cde0:	685b      	ldr	r3, [r3, #4]
 800cde2:	220c      	movs	r2, #12
 800cde4:	4013      	ands	r3, r2
 800cde6:	2b04      	cmp	r3, #4
 800cde8:	d00e      	beq.n	800ce08 <HAL_RCC_OscConfig+0xbc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800cdea:	4bb1      	ldr	r3, [pc, #708]	; (800d0b0 <HAL_RCC_OscConfig+0x364>)
 800cdec:	685b      	ldr	r3, [r3, #4]
 800cdee:	220c      	movs	r2, #12
 800cdf0:	4013      	ands	r3, r2
 800cdf2:	2b08      	cmp	r3, #8
 800cdf4:	d117      	bne.n	800ce26 <HAL_RCC_OscConfig+0xda>
 800cdf6:	4bae      	ldr	r3, [pc, #696]	; (800d0b0 <HAL_RCC_OscConfig+0x364>)
 800cdf8:	685a      	ldr	r2, [r3, #4]
 800cdfa:	23c0      	movs	r3, #192	; 0xc0
 800cdfc:	025b      	lsls	r3, r3, #9
 800cdfe:	401a      	ands	r2, r3
 800ce00:	2380      	movs	r3, #128	; 0x80
 800ce02:	025b      	lsls	r3, r3, #9
 800ce04:	429a      	cmp	r2, r3
 800ce06:	d10e      	bne.n	800ce26 <HAL_RCC_OscConfig+0xda>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ce08:	4ba9      	ldr	r3, [pc, #676]	; (800d0b0 <HAL_RCC_OscConfig+0x364>)
 800ce0a:	681a      	ldr	r2, [r3, #0]
 800ce0c:	2380      	movs	r3, #128	; 0x80
 800ce0e:	029b      	lsls	r3, r3, #10
 800ce10:	4013      	ands	r3, r2
 800ce12:	d100      	bne.n	800ce16 <HAL_RCC_OscConfig+0xca>
 800ce14:	e073      	b.n	800cefe <HAL_RCC_OscConfig+0x1b2>
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	685b      	ldr	r3, [r3, #4]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d000      	beq.n	800ce20 <HAL_RCC_OscConfig+0xd4>
 800ce1e:	e06e      	b.n	800cefe <HAL_RCC_OscConfig+0x1b2>
      {
        return HAL_ERROR;
 800ce20:	2301      	movs	r3, #1
 800ce22:	f000 fc14 	bl	800d64e <HAL_RCC_OscConfig+0x902>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	685b      	ldr	r3, [r3, #4]
 800ce2a:	2b01      	cmp	r3, #1
 800ce2c:	d107      	bne.n	800ce3e <HAL_RCC_OscConfig+0xf2>
 800ce2e:	4ba0      	ldr	r3, [pc, #640]	; (800d0b0 <HAL_RCC_OscConfig+0x364>)
 800ce30:	681a      	ldr	r2, [r3, #0]
 800ce32:	4b9f      	ldr	r3, [pc, #636]	; (800d0b0 <HAL_RCC_OscConfig+0x364>)
 800ce34:	2180      	movs	r1, #128	; 0x80
 800ce36:	0249      	lsls	r1, r1, #9
 800ce38:	430a      	orrs	r2, r1
 800ce3a:	601a      	str	r2, [r3, #0]
 800ce3c:	e02f      	b.n	800ce9e <HAL_RCC_OscConfig+0x152>
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	685b      	ldr	r3, [r3, #4]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d10c      	bne.n	800ce60 <HAL_RCC_OscConfig+0x114>
 800ce46:	4b9a      	ldr	r3, [pc, #616]	; (800d0b0 <HAL_RCC_OscConfig+0x364>)
 800ce48:	681a      	ldr	r2, [r3, #0]
 800ce4a:	4b99      	ldr	r3, [pc, #612]	; (800d0b0 <HAL_RCC_OscConfig+0x364>)
 800ce4c:	4999      	ldr	r1, [pc, #612]	; (800d0b4 <HAL_RCC_OscConfig+0x368>)
 800ce4e:	400a      	ands	r2, r1
 800ce50:	601a      	str	r2, [r3, #0]
 800ce52:	4b97      	ldr	r3, [pc, #604]	; (800d0b0 <HAL_RCC_OscConfig+0x364>)
 800ce54:	681a      	ldr	r2, [r3, #0]
 800ce56:	4b96      	ldr	r3, [pc, #600]	; (800d0b0 <HAL_RCC_OscConfig+0x364>)
 800ce58:	4997      	ldr	r1, [pc, #604]	; (800d0b8 <HAL_RCC_OscConfig+0x36c>)
 800ce5a:	400a      	ands	r2, r1
 800ce5c:	601a      	str	r2, [r3, #0]
 800ce5e:	e01e      	b.n	800ce9e <HAL_RCC_OscConfig+0x152>
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	685b      	ldr	r3, [r3, #4]
 800ce64:	2b05      	cmp	r3, #5
 800ce66:	d10e      	bne.n	800ce86 <HAL_RCC_OscConfig+0x13a>
 800ce68:	4b91      	ldr	r3, [pc, #580]	; (800d0b0 <HAL_RCC_OscConfig+0x364>)
 800ce6a:	681a      	ldr	r2, [r3, #0]
 800ce6c:	4b90      	ldr	r3, [pc, #576]	; (800d0b0 <HAL_RCC_OscConfig+0x364>)
 800ce6e:	2180      	movs	r1, #128	; 0x80
 800ce70:	02c9      	lsls	r1, r1, #11
 800ce72:	430a      	orrs	r2, r1
 800ce74:	601a      	str	r2, [r3, #0]
 800ce76:	4b8e      	ldr	r3, [pc, #568]	; (800d0b0 <HAL_RCC_OscConfig+0x364>)
 800ce78:	681a      	ldr	r2, [r3, #0]
 800ce7a:	4b8d      	ldr	r3, [pc, #564]	; (800d0b0 <HAL_RCC_OscConfig+0x364>)
 800ce7c:	2180      	movs	r1, #128	; 0x80
 800ce7e:	0249      	lsls	r1, r1, #9
 800ce80:	430a      	orrs	r2, r1
 800ce82:	601a      	str	r2, [r3, #0]
 800ce84:	e00b      	b.n	800ce9e <HAL_RCC_OscConfig+0x152>
 800ce86:	4b8a      	ldr	r3, [pc, #552]	; (800d0b0 <HAL_RCC_OscConfig+0x364>)
 800ce88:	681a      	ldr	r2, [r3, #0]
 800ce8a:	4b89      	ldr	r3, [pc, #548]	; (800d0b0 <HAL_RCC_OscConfig+0x364>)
 800ce8c:	4989      	ldr	r1, [pc, #548]	; (800d0b4 <HAL_RCC_OscConfig+0x368>)
 800ce8e:	400a      	ands	r2, r1
 800ce90:	601a      	str	r2, [r3, #0]
 800ce92:	4b87      	ldr	r3, [pc, #540]	; (800d0b0 <HAL_RCC_OscConfig+0x364>)
 800ce94:	681a      	ldr	r2, [r3, #0]
 800ce96:	4b86      	ldr	r3, [pc, #536]	; (800d0b0 <HAL_RCC_OscConfig+0x364>)
 800ce98:	4987      	ldr	r1, [pc, #540]	; (800d0b8 <HAL_RCC_OscConfig+0x36c>)
 800ce9a:	400a      	ands	r2, r1
 800ce9c:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	685b      	ldr	r3, [r3, #4]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d015      	beq.n	800ced2 <HAL_RCC_OscConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cea6:	f7fc fc67 	bl	8009778 <HAL_GetTick>
 800ceaa:	0003      	movs	r3, r0
 800ceac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ceae:	e009      	b.n	800cec4 <HAL_RCC_OscConfig+0x178>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ceb0:	f7fc fc62 	bl	8009778 <HAL_GetTick>
 800ceb4:	0002      	movs	r2, r0
 800ceb6:	69bb      	ldr	r3, [r7, #24]
 800ceb8:	1ad3      	subs	r3, r2, r3
 800ceba:	2b64      	cmp	r3, #100	; 0x64
 800cebc:	d902      	bls.n	800cec4 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800cebe:	2303      	movs	r3, #3
 800cec0:	f000 fbc5 	bl	800d64e <HAL_RCC_OscConfig+0x902>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cec4:	4b7a      	ldr	r3, [pc, #488]	; (800d0b0 <HAL_RCC_OscConfig+0x364>)
 800cec6:	681a      	ldr	r2, [r3, #0]
 800cec8:	2380      	movs	r3, #128	; 0x80
 800ceca:	029b      	lsls	r3, r3, #10
 800cecc:	4013      	ands	r3, r2
 800cece:	d0ef      	beq.n	800ceb0 <HAL_RCC_OscConfig+0x164>
 800ced0:	e016      	b.n	800cf00 <HAL_RCC_OscConfig+0x1b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ced2:	f7fc fc51 	bl	8009778 <HAL_GetTick>
 800ced6:	0003      	movs	r3, r0
 800ced8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ceda:	e009      	b.n	800cef0 <HAL_RCC_OscConfig+0x1a4>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cedc:	f7fc fc4c 	bl	8009778 <HAL_GetTick>
 800cee0:	0002      	movs	r2, r0
 800cee2:	69bb      	ldr	r3, [r7, #24]
 800cee4:	1ad3      	subs	r3, r2, r3
 800cee6:	2b64      	cmp	r3, #100	; 0x64
 800cee8:	d902      	bls.n	800cef0 <HAL_RCC_OscConfig+0x1a4>
          {
            return HAL_TIMEOUT;
 800ceea:	2303      	movs	r3, #3
 800ceec:	f000 fbaf 	bl	800d64e <HAL_RCC_OscConfig+0x902>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cef0:	4b6f      	ldr	r3, [pc, #444]	; (800d0b0 <HAL_RCC_OscConfig+0x364>)
 800cef2:	681a      	ldr	r2, [r3, #0]
 800cef4:	2380      	movs	r3, #128	; 0x80
 800cef6:	029b      	lsls	r3, r3, #10
 800cef8:	4013      	ands	r3, r2
 800cefa:	d1ef      	bne.n	800cedc <HAL_RCC_OscConfig+0x190>
 800cefc:	e000      	b.n	800cf00 <HAL_RCC_OscConfig+0x1b4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cefe:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	2202      	movs	r2, #2
 800cf06:	4013      	ands	r3, r2
 800cf08:	d100      	bne.n	800cf0c <HAL_RCC_OscConfig+0x1c0>
 800cf0a:	e089      	b.n	800d020 <HAL_RCC_OscConfig+0x2d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	68db      	ldr	r3, [r3, #12]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d00b      	beq.n	800cf2c <HAL_RCC_OscConfig+0x1e0>
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	68db      	ldr	r3, [r3, #12]
 800cf18:	2b01      	cmp	r3, #1
 800cf1a:	d007      	beq.n	800cf2c <HAL_RCC_OscConfig+0x1e0>
 800cf1c:	2374      	movs	r3, #116	; 0x74
 800cf1e:	33ff      	adds	r3, #255	; 0xff
 800cf20:	001a      	movs	r2, r3
 800cf22:	4b62      	ldr	r3, [pc, #392]	; (800d0ac <HAL_RCC_OscConfig+0x360>)
 800cf24:	0011      	movs	r1, r2
 800cf26:	0018      	movs	r0, r3
 800cf28:	f7f6 fb59 	bl	80035de <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	691b      	ldr	r3, [r3, #16]
 800cf30:	2b1f      	cmp	r3, #31
 800cf32:	d906      	bls.n	800cf42 <HAL_RCC_OscConfig+0x1f6>
 800cf34:	23ba      	movs	r3, #186	; 0xba
 800cf36:	005a      	lsls	r2, r3, #1
 800cf38:	4b5c      	ldr	r3, [pc, #368]	; (800d0ac <HAL_RCC_OscConfig+0x360>)
 800cf3a:	0011      	movs	r1, r2
 800cf3c:	0018      	movs	r0, r3
 800cf3e:	f7f6 fb4e 	bl	80035de <assert_failed>
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800cf42:	4b5b      	ldr	r3, [pc, #364]	; (800d0b0 <HAL_RCC_OscConfig+0x364>)
 800cf44:	685b      	ldr	r3, [r3, #4]
 800cf46:	220c      	movs	r2, #12
 800cf48:	4013      	ands	r3, r2
 800cf4a:	d00e      	beq.n	800cf6a <HAL_RCC_OscConfig+0x21e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800cf4c:	4b58      	ldr	r3, [pc, #352]	; (800d0b0 <HAL_RCC_OscConfig+0x364>)
 800cf4e:	685b      	ldr	r3, [r3, #4]
 800cf50:	220c      	movs	r2, #12
 800cf52:	4013      	ands	r3, r2
 800cf54:	2b08      	cmp	r3, #8
 800cf56:	d120      	bne.n	800cf9a <HAL_RCC_OscConfig+0x24e>
 800cf58:	4b55      	ldr	r3, [pc, #340]	; (800d0b0 <HAL_RCC_OscConfig+0x364>)
 800cf5a:	685a      	ldr	r2, [r3, #4]
 800cf5c:	23c0      	movs	r3, #192	; 0xc0
 800cf5e:	025b      	lsls	r3, r3, #9
 800cf60:	401a      	ands	r2, r3
 800cf62:	2380      	movs	r3, #128	; 0x80
 800cf64:	021b      	lsls	r3, r3, #8
 800cf66:	429a      	cmp	r2, r3
 800cf68:	d117      	bne.n	800cf9a <HAL_RCC_OscConfig+0x24e>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cf6a:	4b51      	ldr	r3, [pc, #324]	; (800d0b0 <HAL_RCC_OscConfig+0x364>)
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	2202      	movs	r2, #2
 800cf70:	4013      	ands	r3, r2
 800cf72:	d006      	beq.n	800cf82 <HAL_RCC_OscConfig+0x236>
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	68db      	ldr	r3, [r3, #12]
 800cf78:	2b01      	cmp	r3, #1
 800cf7a:	d002      	beq.n	800cf82 <HAL_RCC_OscConfig+0x236>
      {
        return HAL_ERROR;
 800cf7c:	2301      	movs	r3, #1
 800cf7e:	f000 fb66 	bl	800d64e <HAL_RCC_OscConfig+0x902>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cf82:	4b4b      	ldr	r3, [pc, #300]	; (800d0b0 <HAL_RCC_OscConfig+0x364>)
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	22f8      	movs	r2, #248	; 0xf8
 800cf88:	4393      	bics	r3, r2
 800cf8a:	0019      	movs	r1, r3
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	691b      	ldr	r3, [r3, #16]
 800cf90:	00da      	lsls	r2, r3, #3
 800cf92:	4b47      	ldr	r3, [pc, #284]	; (800d0b0 <HAL_RCC_OscConfig+0x364>)
 800cf94:	430a      	orrs	r2, r1
 800cf96:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cf98:	e042      	b.n	800d020 <HAL_RCC_OscConfig+0x2d4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	68db      	ldr	r3, [r3, #12]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d025      	beq.n	800cfee <HAL_RCC_OscConfig+0x2a2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cfa2:	4b43      	ldr	r3, [pc, #268]	; (800d0b0 <HAL_RCC_OscConfig+0x364>)
 800cfa4:	681a      	ldr	r2, [r3, #0]
 800cfa6:	4b42      	ldr	r3, [pc, #264]	; (800d0b0 <HAL_RCC_OscConfig+0x364>)
 800cfa8:	2101      	movs	r1, #1
 800cfaa:	430a      	orrs	r2, r1
 800cfac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cfae:	f7fc fbe3 	bl	8009778 <HAL_GetTick>
 800cfb2:	0003      	movs	r3, r0
 800cfb4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cfb6:	e009      	b.n	800cfcc <HAL_RCC_OscConfig+0x280>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cfb8:	f7fc fbde 	bl	8009778 <HAL_GetTick>
 800cfbc:	0002      	movs	r2, r0
 800cfbe:	69bb      	ldr	r3, [r7, #24]
 800cfc0:	1ad3      	subs	r3, r2, r3
 800cfc2:	2b02      	cmp	r3, #2
 800cfc4:	d902      	bls.n	800cfcc <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800cfc6:	2303      	movs	r3, #3
 800cfc8:	f000 fb41 	bl	800d64e <HAL_RCC_OscConfig+0x902>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cfcc:	4b38      	ldr	r3, [pc, #224]	; (800d0b0 <HAL_RCC_OscConfig+0x364>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	2202      	movs	r2, #2
 800cfd2:	4013      	ands	r3, r2
 800cfd4:	d0f0      	beq.n	800cfb8 <HAL_RCC_OscConfig+0x26c>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cfd6:	4b36      	ldr	r3, [pc, #216]	; (800d0b0 <HAL_RCC_OscConfig+0x364>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	22f8      	movs	r2, #248	; 0xf8
 800cfdc:	4393      	bics	r3, r2
 800cfde:	0019      	movs	r1, r3
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	691b      	ldr	r3, [r3, #16]
 800cfe4:	00da      	lsls	r2, r3, #3
 800cfe6:	4b32      	ldr	r3, [pc, #200]	; (800d0b0 <HAL_RCC_OscConfig+0x364>)
 800cfe8:	430a      	orrs	r2, r1
 800cfea:	601a      	str	r2, [r3, #0]
 800cfec:	e018      	b.n	800d020 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cfee:	4b30      	ldr	r3, [pc, #192]	; (800d0b0 <HAL_RCC_OscConfig+0x364>)
 800cff0:	681a      	ldr	r2, [r3, #0]
 800cff2:	4b2f      	ldr	r3, [pc, #188]	; (800d0b0 <HAL_RCC_OscConfig+0x364>)
 800cff4:	2101      	movs	r1, #1
 800cff6:	438a      	bics	r2, r1
 800cff8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cffa:	f7fc fbbd 	bl	8009778 <HAL_GetTick>
 800cffe:	0003      	movs	r3, r0
 800d000:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d002:	e008      	b.n	800d016 <HAL_RCC_OscConfig+0x2ca>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d004:	f7fc fbb8 	bl	8009778 <HAL_GetTick>
 800d008:	0002      	movs	r2, r0
 800d00a:	69bb      	ldr	r3, [r7, #24]
 800d00c:	1ad3      	subs	r3, r2, r3
 800d00e:	2b02      	cmp	r3, #2
 800d010:	d901      	bls.n	800d016 <HAL_RCC_OscConfig+0x2ca>
          {
            return HAL_TIMEOUT;
 800d012:	2303      	movs	r3, #3
 800d014:	e31b      	b.n	800d64e <HAL_RCC_OscConfig+0x902>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d016:	4b26      	ldr	r3, [pc, #152]	; (800d0b0 <HAL_RCC_OscConfig+0x364>)
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	2202      	movs	r2, #2
 800d01c:	4013      	ands	r3, r2
 800d01e:	d1f1      	bne.n	800d004 <HAL_RCC_OscConfig+0x2b8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	2208      	movs	r2, #8
 800d026:	4013      	ands	r3, r2
 800d028:	d04d      	beq.n	800d0c6 <HAL_RCC_OscConfig+0x37a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	69db      	ldr	r3, [r3, #28]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d00a      	beq.n	800d048 <HAL_RCC_OscConfig+0x2fc>
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	69db      	ldr	r3, [r3, #28]
 800d036:	2b01      	cmp	r3, #1
 800d038:	d006      	beq.n	800d048 <HAL_RCC_OscConfig+0x2fc>
 800d03a:	23da      	movs	r3, #218	; 0xda
 800d03c:	005a      	lsls	r2, r3, #1
 800d03e:	4b1b      	ldr	r3, [pc, #108]	; (800d0ac <HAL_RCC_OscConfig+0x360>)
 800d040:	0011      	movs	r1, r2
 800d042:	0018      	movs	r0, r3
 800d044:	f7f6 facb 	bl	80035de <assert_failed>
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	69db      	ldr	r3, [r3, #28]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d019      	beq.n	800d084 <HAL_RCC_OscConfig+0x338>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d050:	4b17      	ldr	r3, [pc, #92]	; (800d0b0 <HAL_RCC_OscConfig+0x364>)
 800d052:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d054:	4b16      	ldr	r3, [pc, #88]	; (800d0b0 <HAL_RCC_OscConfig+0x364>)
 800d056:	2101      	movs	r1, #1
 800d058:	430a      	orrs	r2, r1
 800d05a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d05c:	f7fc fb8c 	bl	8009778 <HAL_GetTick>
 800d060:	0003      	movs	r3, r0
 800d062:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d064:	e008      	b.n	800d078 <HAL_RCC_OscConfig+0x32c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d066:	f7fc fb87 	bl	8009778 <HAL_GetTick>
 800d06a:	0002      	movs	r2, r0
 800d06c:	69bb      	ldr	r3, [r7, #24]
 800d06e:	1ad3      	subs	r3, r2, r3
 800d070:	2b02      	cmp	r3, #2
 800d072:	d901      	bls.n	800d078 <HAL_RCC_OscConfig+0x32c>
        {
          return HAL_TIMEOUT;
 800d074:	2303      	movs	r3, #3
 800d076:	e2ea      	b.n	800d64e <HAL_RCC_OscConfig+0x902>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d078:	4b0d      	ldr	r3, [pc, #52]	; (800d0b0 <HAL_RCC_OscConfig+0x364>)
 800d07a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d07c:	2202      	movs	r2, #2
 800d07e:	4013      	ands	r3, r2
 800d080:	d0f1      	beq.n	800d066 <HAL_RCC_OscConfig+0x31a>
 800d082:	e020      	b.n	800d0c6 <HAL_RCC_OscConfig+0x37a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d084:	4b0a      	ldr	r3, [pc, #40]	; (800d0b0 <HAL_RCC_OscConfig+0x364>)
 800d086:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d088:	4b09      	ldr	r3, [pc, #36]	; (800d0b0 <HAL_RCC_OscConfig+0x364>)
 800d08a:	2101      	movs	r1, #1
 800d08c:	438a      	bics	r2, r1
 800d08e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d090:	f7fc fb72 	bl	8009778 <HAL_GetTick>
 800d094:	0003      	movs	r3, r0
 800d096:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d098:	e010      	b.n	800d0bc <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d09a:	f7fc fb6d 	bl	8009778 <HAL_GetTick>
 800d09e:	0002      	movs	r2, r0
 800d0a0:	69bb      	ldr	r3, [r7, #24]
 800d0a2:	1ad3      	subs	r3, r2, r3
 800d0a4:	2b02      	cmp	r3, #2
 800d0a6:	d909      	bls.n	800d0bc <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800d0a8:	2303      	movs	r3, #3
 800d0aa:	e2d0      	b.n	800d64e <HAL_RCC_OscConfig+0x902>
 800d0ac:	08016f80 	.word	0x08016f80
 800d0b0:	40021000 	.word	0x40021000
 800d0b4:	fffeffff 	.word	0xfffeffff
 800d0b8:	fffbffff 	.word	0xfffbffff
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d0bc:	4ba6      	ldr	r3, [pc, #664]	; (800d358 <HAL_RCC_OscConfig+0x60c>)
 800d0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0c0:	2202      	movs	r2, #2
 800d0c2:	4013      	ands	r3, r2
 800d0c4:	d1e9      	bne.n	800d09a <HAL_RCC_OscConfig+0x34e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	2204      	movs	r2, #4
 800d0cc:	4013      	ands	r3, r2
 800d0ce:	d100      	bne.n	800d0d2 <HAL_RCC_OscConfig+0x386>
 800d0d0:	e0c0      	b.n	800d254 <HAL_RCC_OscConfig+0x508>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d0d2:	231f      	movs	r3, #31
 800d0d4:	18fb      	adds	r3, r7, r3
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	701a      	strb	r2, [r3, #0]
    
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	689b      	ldr	r3, [r3, #8]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d00e      	beq.n	800d100 <HAL_RCC_OscConfig+0x3b4>
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	689b      	ldr	r3, [r3, #8]
 800d0e6:	2b01      	cmp	r3, #1
 800d0e8:	d00a      	beq.n	800d100 <HAL_RCC_OscConfig+0x3b4>
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	689b      	ldr	r3, [r3, #8]
 800d0ee:	2b05      	cmp	r3, #5
 800d0f0:	d006      	beq.n	800d100 <HAL_RCC_OscConfig+0x3b4>
 800d0f2:	23f0      	movs	r3, #240	; 0xf0
 800d0f4:	005a      	lsls	r2, r3, #1
 800d0f6:	4b99      	ldr	r3, [pc, #612]	; (800d35c <HAL_RCC_OscConfig+0x610>)
 800d0f8:	0011      	movs	r1, r2
 800d0fa:	0018      	movs	r0, r3
 800d0fc:	f7f6 fa6f 	bl	80035de <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d100:	4b95      	ldr	r3, [pc, #596]	; (800d358 <HAL_RCC_OscConfig+0x60c>)
 800d102:	69da      	ldr	r2, [r3, #28]
 800d104:	2380      	movs	r3, #128	; 0x80
 800d106:	055b      	lsls	r3, r3, #21
 800d108:	4013      	ands	r3, r2
 800d10a:	d111      	bne.n	800d130 <HAL_RCC_OscConfig+0x3e4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d10c:	4b92      	ldr	r3, [pc, #584]	; (800d358 <HAL_RCC_OscConfig+0x60c>)
 800d10e:	69da      	ldr	r2, [r3, #28]
 800d110:	4b91      	ldr	r3, [pc, #580]	; (800d358 <HAL_RCC_OscConfig+0x60c>)
 800d112:	2180      	movs	r1, #128	; 0x80
 800d114:	0549      	lsls	r1, r1, #21
 800d116:	430a      	orrs	r2, r1
 800d118:	61da      	str	r2, [r3, #28]
 800d11a:	4b8f      	ldr	r3, [pc, #572]	; (800d358 <HAL_RCC_OscConfig+0x60c>)
 800d11c:	69da      	ldr	r2, [r3, #28]
 800d11e:	2380      	movs	r3, #128	; 0x80
 800d120:	055b      	lsls	r3, r3, #21
 800d122:	4013      	ands	r3, r2
 800d124:	60fb      	str	r3, [r7, #12]
 800d126:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800d128:	231f      	movs	r3, #31
 800d12a:	18fb      	adds	r3, r7, r3
 800d12c:	2201      	movs	r2, #1
 800d12e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d130:	4b8b      	ldr	r3, [pc, #556]	; (800d360 <HAL_RCC_OscConfig+0x614>)
 800d132:	681a      	ldr	r2, [r3, #0]
 800d134:	2380      	movs	r3, #128	; 0x80
 800d136:	005b      	lsls	r3, r3, #1
 800d138:	4013      	ands	r3, r2
 800d13a:	d11a      	bne.n	800d172 <HAL_RCC_OscConfig+0x426>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d13c:	4b88      	ldr	r3, [pc, #544]	; (800d360 <HAL_RCC_OscConfig+0x614>)
 800d13e:	681a      	ldr	r2, [r3, #0]
 800d140:	4b87      	ldr	r3, [pc, #540]	; (800d360 <HAL_RCC_OscConfig+0x614>)
 800d142:	2180      	movs	r1, #128	; 0x80
 800d144:	0049      	lsls	r1, r1, #1
 800d146:	430a      	orrs	r2, r1
 800d148:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d14a:	f7fc fb15 	bl	8009778 <HAL_GetTick>
 800d14e:	0003      	movs	r3, r0
 800d150:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d152:	e008      	b.n	800d166 <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d154:	f7fc fb10 	bl	8009778 <HAL_GetTick>
 800d158:	0002      	movs	r2, r0
 800d15a:	69bb      	ldr	r3, [r7, #24]
 800d15c:	1ad3      	subs	r3, r2, r3
 800d15e:	2b64      	cmp	r3, #100	; 0x64
 800d160:	d901      	bls.n	800d166 <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 800d162:	2303      	movs	r3, #3
 800d164:	e273      	b.n	800d64e <HAL_RCC_OscConfig+0x902>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d166:	4b7e      	ldr	r3, [pc, #504]	; (800d360 <HAL_RCC_OscConfig+0x614>)
 800d168:	681a      	ldr	r2, [r3, #0]
 800d16a:	2380      	movs	r3, #128	; 0x80
 800d16c:	005b      	lsls	r3, r3, #1
 800d16e:	4013      	ands	r3, r2
 800d170:	d0f0      	beq.n	800d154 <HAL_RCC_OscConfig+0x408>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	689b      	ldr	r3, [r3, #8]
 800d176:	2b01      	cmp	r3, #1
 800d178:	d106      	bne.n	800d188 <HAL_RCC_OscConfig+0x43c>
 800d17a:	4b77      	ldr	r3, [pc, #476]	; (800d358 <HAL_RCC_OscConfig+0x60c>)
 800d17c:	6a1a      	ldr	r2, [r3, #32]
 800d17e:	4b76      	ldr	r3, [pc, #472]	; (800d358 <HAL_RCC_OscConfig+0x60c>)
 800d180:	2101      	movs	r1, #1
 800d182:	430a      	orrs	r2, r1
 800d184:	621a      	str	r2, [r3, #32]
 800d186:	e02d      	b.n	800d1e4 <HAL_RCC_OscConfig+0x498>
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	689b      	ldr	r3, [r3, #8]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d10c      	bne.n	800d1aa <HAL_RCC_OscConfig+0x45e>
 800d190:	4b71      	ldr	r3, [pc, #452]	; (800d358 <HAL_RCC_OscConfig+0x60c>)
 800d192:	6a1a      	ldr	r2, [r3, #32]
 800d194:	4b70      	ldr	r3, [pc, #448]	; (800d358 <HAL_RCC_OscConfig+0x60c>)
 800d196:	2101      	movs	r1, #1
 800d198:	438a      	bics	r2, r1
 800d19a:	621a      	str	r2, [r3, #32]
 800d19c:	4b6e      	ldr	r3, [pc, #440]	; (800d358 <HAL_RCC_OscConfig+0x60c>)
 800d19e:	6a1a      	ldr	r2, [r3, #32]
 800d1a0:	4b6d      	ldr	r3, [pc, #436]	; (800d358 <HAL_RCC_OscConfig+0x60c>)
 800d1a2:	2104      	movs	r1, #4
 800d1a4:	438a      	bics	r2, r1
 800d1a6:	621a      	str	r2, [r3, #32]
 800d1a8:	e01c      	b.n	800d1e4 <HAL_RCC_OscConfig+0x498>
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	689b      	ldr	r3, [r3, #8]
 800d1ae:	2b05      	cmp	r3, #5
 800d1b0:	d10c      	bne.n	800d1cc <HAL_RCC_OscConfig+0x480>
 800d1b2:	4b69      	ldr	r3, [pc, #420]	; (800d358 <HAL_RCC_OscConfig+0x60c>)
 800d1b4:	6a1a      	ldr	r2, [r3, #32]
 800d1b6:	4b68      	ldr	r3, [pc, #416]	; (800d358 <HAL_RCC_OscConfig+0x60c>)
 800d1b8:	2104      	movs	r1, #4
 800d1ba:	430a      	orrs	r2, r1
 800d1bc:	621a      	str	r2, [r3, #32]
 800d1be:	4b66      	ldr	r3, [pc, #408]	; (800d358 <HAL_RCC_OscConfig+0x60c>)
 800d1c0:	6a1a      	ldr	r2, [r3, #32]
 800d1c2:	4b65      	ldr	r3, [pc, #404]	; (800d358 <HAL_RCC_OscConfig+0x60c>)
 800d1c4:	2101      	movs	r1, #1
 800d1c6:	430a      	orrs	r2, r1
 800d1c8:	621a      	str	r2, [r3, #32]
 800d1ca:	e00b      	b.n	800d1e4 <HAL_RCC_OscConfig+0x498>
 800d1cc:	4b62      	ldr	r3, [pc, #392]	; (800d358 <HAL_RCC_OscConfig+0x60c>)
 800d1ce:	6a1a      	ldr	r2, [r3, #32]
 800d1d0:	4b61      	ldr	r3, [pc, #388]	; (800d358 <HAL_RCC_OscConfig+0x60c>)
 800d1d2:	2101      	movs	r1, #1
 800d1d4:	438a      	bics	r2, r1
 800d1d6:	621a      	str	r2, [r3, #32]
 800d1d8:	4b5f      	ldr	r3, [pc, #380]	; (800d358 <HAL_RCC_OscConfig+0x60c>)
 800d1da:	6a1a      	ldr	r2, [r3, #32]
 800d1dc:	4b5e      	ldr	r3, [pc, #376]	; (800d358 <HAL_RCC_OscConfig+0x60c>)
 800d1de:	2104      	movs	r1, #4
 800d1e0:	438a      	bics	r2, r1
 800d1e2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	689b      	ldr	r3, [r3, #8]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d014      	beq.n	800d216 <HAL_RCC_OscConfig+0x4ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d1ec:	f7fc fac4 	bl	8009778 <HAL_GetTick>
 800d1f0:	0003      	movs	r3, r0
 800d1f2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d1f4:	e009      	b.n	800d20a <HAL_RCC_OscConfig+0x4be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d1f6:	f7fc fabf 	bl	8009778 <HAL_GetTick>
 800d1fa:	0002      	movs	r2, r0
 800d1fc:	69bb      	ldr	r3, [r7, #24]
 800d1fe:	1ad3      	subs	r3, r2, r3
 800d200:	4a58      	ldr	r2, [pc, #352]	; (800d364 <HAL_RCC_OscConfig+0x618>)
 800d202:	4293      	cmp	r3, r2
 800d204:	d901      	bls.n	800d20a <HAL_RCC_OscConfig+0x4be>
        {
          return HAL_TIMEOUT;
 800d206:	2303      	movs	r3, #3
 800d208:	e221      	b.n	800d64e <HAL_RCC_OscConfig+0x902>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d20a:	4b53      	ldr	r3, [pc, #332]	; (800d358 <HAL_RCC_OscConfig+0x60c>)
 800d20c:	6a1b      	ldr	r3, [r3, #32]
 800d20e:	2202      	movs	r2, #2
 800d210:	4013      	ands	r3, r2
 800d212:	d0f0      	beq.n	800d1f6 <HAL_RCC_OscConfig+0x4aa>
 800d214:	e013      	b.n	800d23e <HAL_RCC_OscConfig+0x4f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d216:	f7fc faaf 	bl	8009778 <HAL_GetTick>
 800d21a:	0003      	movs	r3, r0
 800d21c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d21e:	e009      	b.n	800d234 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d220:	f7fc faaa 	bl	8009778 <HAL_GetTick>
 800d224:	0002      	movs	r2, r0
 800d226:	69bb      	ldr	r3, [r7, #24]
 800d228:	1ad3      	subs	r3, r2, r3
 800d22a:	4a4e      	ldr	r2, [pc, #312]	; (800d364 <HAL_RCC_OscConfig+0x618>)
 800d22c:	4293      	cmp	r3, r2
 800d22e:	d901      	bls.n	800d234 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800d230:	2303      	movs	r3, #3
 800d232:	e20c      	b.n	800d64e <HAL_RCC_OscConfig+0x902>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d234:	4b48      	ldr	r3, [pc, #288]	; (800d358 <HAL_RCC_OscConfig+0x60c>)
 800d236:	6a1b      	ldr	r3, [r3, #32]
 800d238:	2202      	movs	r2, #2
 800d23a:	4013      	ands	r3, r2
 800d23c:	d1f0      	bne.n	800d220 <HAL_RCC_OscConfig+0x4d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800d23e:	231f      	movs	r3, #31
 800d240:	18fb      	adds	r3, r7, r3
 800d242:	781b      	ldrb	r3, [r3, #0]
 800d244:	2b01      	cmp	r3, #1
 800d246:	d105      	bne.n	800d254 <HAL_RCC_OscConfig+0x508>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d248:	4b43      	ldr	r3, [pc, #268]	; (800d358 <HAL_RCC_OscConfig+0x60c>)
 800d24a:	69da      	ldr	r2, [r3, #28]
 800d24c:	4b42      	ldr	r3, [pc, #264]	; (800d358 <HAL_RCC_OscConfig+0x60c>)
 800d24e:	4946      	ldr	r1, [pc, #280]	; (800d368 <HAL_RCC_OscConfig+0x61c>)
 800d250:	400a      	ands	r2, r1
 800d252:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	2210      	movs	r2, #16
 800d25a:	4013      	ands	r3, r2
 800d25c:	d100      	bne.n	800d260 <HAL_RCC_OscConfig+0x514>
 800d25e:	e08e      	b.n	800d37e <HAL_RCC_OscConfig+0x632>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	695b      	ldr	r3, [r3, #20]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d00d      	beq.n	800d284 <HAL_RCC_OscConfig+0x538>
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	695b      	ldr	r3, [r3, #20]
 800d26c:	2b01      	cmp	r3, #1
 800d26e:	d009      	beq.n	800d284 <HAL_RCC_OscConfig+0x538>
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	695b      	ldr	r3, [r3, #20]
 800d274:	3305      	adds	r3, #5
 800d276:	d005      	beq.n	800d284 <HAL_RCC_OscConfig+0x538>
 800d278:	4a3c      	ldr	r2, [pc, #240]	; (800d36c <HAL_RCC_OscConfig+0x620>)
 800d27a:	4b38      	ldr	r3, [pc, #224]	; (800d35c <HAL_RCC_OscConfig+0x610>)
 800d27c:	0011      	movs	r1, r2
 800d27e:	0018      	movs	r0, r3
 800d280:	f7f6 f9ad 	bl	80035de <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	699b      	ldr	r3, [r3, #24]
 800d288:	2b1f      	cmp	r3, #31
 800d28a:	d905      	bls.n	800d298 <HAL_RCC_OscConfig+0x54c>
 800d28c:	4a38      	ldr	r2, [pc, #224]	; (800d370 <HAL_RCC_OscConfig+0x624>)
 800d28e:	4b33      	ldr	r3, [pc, #204]	; (800d35c <HAL_RCC_OscConfig+0x610>)
 800d290:	0011      	movs	r1, r2
 800d292:	0018      	movs	r0, r3
 800d294:	f7f6 f9a3 	bl	80035de <assert_failed>

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	695b      	ldr	r3, [r3, #20]
 800d29c:	2b01      	cmp	r3, #1
 800d29e:	d12a      	bne.n	800d2f6 <HAL_RCC_OscConfig+0x5aa>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800d2a0:	4b2d      	ldr	r3, [pc, #180]	; (800d358 <HAL_RCC_OscConfig+0x60c>)
 800d2a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d2a4:	4b2c      	ldr	r3, [pc, #176]	; (800d358 <HAL_RCC_OscConfig+0x60c>)
 800d2a6:	2104      	movs	r1, #4
 800d2a8:	430a      	orrs	r2, r1
 800d2aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800d2ac:	4b2a      	ldr	r3, [pc, #168]	; (800d358 <HAL_RCC_OscConfig+0x60c>)
 800d2ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d2b0:	4b29      	ldr	r3, [pc, #164]	; (800d358 <HAL_RCC_OscConfig+0x60c>)
 800d2b2:	2101      	movs	r1, #1
 800d2b4:	430a      	orrs	r2, r1
 800d2b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d2b8:	f7fc fa5e 	bl	8009778 <HAL_GetTick>
 800d2bc:	0003      	movs	r3, r0
 800d2be:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800d2c0:	e008      	b.n	800d2d4 <HAL_RCC_OscConfig+0x588>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800d2c2:	f7fc fa59 	bl	8009778 <HAL_GetTick>
 800d2c6:	0002      	movs	r2, r0
 800d2c8:	69bb      	ldr	r3, [r7, #24]
 800d2ca:	1ad3      	subs	r3, r2, r3
 800d2cc:	2b02      	cmp	r3, #2
 800d2ce:	d901      	bls.n	800d2d4 <HAL_RCC_OscConfig+0x588>
        {
          return HAL_TIMEOUT;
 800d2d0:	2303      	movs	r3, #3
 800d2d2:	e1bc      	b.n	800d64e <HAL_RCC_OscConfig+0x902>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800d2d4:	4b20      	ldr	r3, [pc, #128]	; (800d358 <HAL_RCC_OscConfig+0x60c>)
 800d2d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2d8:	2202      	movs	r2, #2
 800d2da:	4013      	ands	r3, r2
 800d2dc:	d0f1      	beq.n	800d2c2 <HAL_RCC_OscConfig+0x576>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800d2de:	4b1e      	ldr	r3, [pc, #120]	; (800d358 <HAL_RCC_OscConfig+0x60c>)
 800d2e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2e2:	22f8      	movs	r2, #248	; 0xf8
 800d2e4:	4393      	bics	r3, r2
 800d2e6:	0019      	movs	r1, r3
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	699b      	ldr	r3, [r3, #24]
 800d2ec:	00da      	lsls	r2, r3, #3
 800d2ee:	4b1a      	ldr	r3, [pc, #104]	; (800d358 <HAL_RCC_OscConfig+0x60c>)
 800d2f0:	430a      	orrs	r2, r1
 800d2f2:	635a      	str	r2, [r3, #52]	; 0x34
 800d2f4:	e043      	b.n	800d37e <HAL_RCC_OscConfig+0x632>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	695b      	ldr	r3, [r3, #20]
 800d2fa:	3305      	adds	r3, #5
 800d2fc:	d111      	bne.n	800d322 <HAL_RCC_OscConfig+0x5d6>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800d2fe:	4b16      	ldr	r3, [pc, #88]	; (800d358 <HAL_RCC_OscConfig+0x60c>)
 800d300:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d302:	4b15      	ldr	r3, [pc, #84]	; (800d358 <HAL_RCC_OscConfig+0x60c>)
 800d304:	2104      	movs	r1, #4
 800d306:	438a      	bics	r2, r1
 800d308:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800d30a:	4b13      	ldr	r3, [pc, #76]	; (800d358 <HAL_RCC_OscConfig+0x60c>)
 800d30c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d30e:	22f8      	movs	r2, #248	; 0xf8
 800d310:	4393      	bics	r3, r2
 800d312:	0019      	movs	r1, r3
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	699b      	ldr	r3, [r3, #24]
 800d318:	00da      	lsls	r2, r3, #3
 800d31a:	4b0f      	ldr	r3, [pc, #60]	; (800d358 <HAL_RCC_OscConfig+0x60c>)
 800d31c:	430a      	orrs	r2, r1
 800d31e:	635a      	str	r2, [r3, #52]	; 0x34
 800d320:	e02d      	b.n	800d37e <HAL_RCC_OscConfig+0x632>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800d322:	4b0d      	ldr	r3, [pc, #52]	; (800d358 <HAL_RCC_OscConfig+0x60c>)
 800d324:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d326:	4b0c      	ldr	r3, [pc, #48]	; (800d358 <HAL_RCC_OscConfig+0x60c>)
 800d328:	2104      	movs	r1, #4
 800d32a:	430a      	orrs	r2, r1
 800d32c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800d32e:	4b0a      	ldr	r3, [pc, #40]	; (800d358 <HAL_RCC_OscConfig+0x60c>)
 800d330:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d332:	4b09      	ldr	r3, [pc, #36]	; (800d358 <HAL_RCC_OscConfig+0x60c>)
 800d334:	2101      	movs	r1, #1
 800d336:	438a      	bics	r2, r1
 800d338:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d33a:	f7fc fa1d 	bl	8009778 <HAL_GetTick>
 800d33e:	0003      	movs	r3, r0
 800d340:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800d342:	e017      	b.n	800d374 <HAL_RCC_OscConfig+0x628>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800d344:	f7fc fa18 	bl	8009778 <HAL_GetTick>
 800d348:	0002      	movs	r2, r0
 800d34a:	69bb      	ldr	r3, [r7, #24]
 800d34c:	1ad3      	subs	r3, r2, r3
 800d34e:	2b02      	cmp	r3, #2
 800d350:	d910      	bls.n	800d374 <HAL_RCC_OscConfig+0x628>
        {
          return HAL_TIMEOUT;
 800d352:	2303      	movs	r3, #3
 800d354:	e17b      	b.n	800d64e <HAL_RCC_OscConfig+0x902>
 800d356:	46c0      	nop			; (mov r8, r8)
 800d358:	40021000 	.word	0x40021000
 800d35c:	08016f80 	.word	0x08016f80
 800d360:	40007000 	.word	0x40007000
 800d364:	00001388 	.word	0x00001388
 800d368:	efffffff 	.word	0xefffffff
 800d36c:	00000226 	.word	0x00000226
 800d370:	00000227 	.word	0x00000227
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800d374:	4bb8      	ldr	r3, [pc, #736]	; (800d658 <HAL_RCC_OscConfig+0x90c>)
 800d376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d378:	2202      	movs	r2, #2
 800d37a:	4013      	ands	r3, r2
 800d37c:	d1e2      	bne.n	800d344 <HAL_RCC_OscConfig+0x5f8>
  }
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	6a1b      	ldr	r3, [r3, #32]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d00d      	beq.n	800d3a2 <HAL_RCC_OscConfig+0x656>
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	6a1b      	ldr	r3, [r3, #32]
 800d38a:	2b01      	cmp	r3, #1
 800d38c:	d009      	beq.n	800d3a2 <HAL_RCC_OscConfig+0x656>
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6a1b      	ldr	r3, [r3, #32]
 800d392:	2b02      	cmp	r3, #2
 800d394:	d005      	beq.n	800d3a2 <HAL_RCC_OscConfig+0x656>
 800d396:	4ab1      	ldr	r2, [pc, #708]	; (800d65c <HAL_RCC_OscConfig+0x910>)
 800d398:	4bb1      	ldr	r3, [pc, #708]	; (800d660 <HAL_RCC_OscConfig+0x914>)
 800d39a:	0011      	movs	r1, r2
 800d39c:	0018      	movs	r0, r3
 800d39e:	f7f6 f91e 	bl	80035de <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	6a1b      	ldr	r3, [r3, #32]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d100      	bne.n	800d3ac <HAL_RCC_OscConfig+0x660>
 800d3aa:	e14f      	b.n	800d64c <HAL_RCC_OscConfig+0x900>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d3ac:	4baa      	ldr	r3, [pc, #680]	; (800d658 <HAL_RCC_OscConfig+0x90c>)
 800d3ae:	685b      	ldr	r3, [r3, #4]
 800d3b0:	220c      	movs	r2, #12
 800d3b2:	4013      	ands	r3, r2
 800d3b4:	2b08      	cmp	r3, #8
 800d3b6:	d100      	bne.n	800d3ba <HAL_RCC_OscConfig+0x66e>
 800d3b8:	e123      	b.n	800d602 <HAL_RCC_OscConfig+0x8b6>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	6a1b      	ldr	r3, [r3, #32]
 800d3be:	2b02      	cmp	r3, #2
 800d3c0:	d000      	beq.n	800d3c4 <HAL_RCC_OscConfig+0x678>
 800d3c2:	e103      	b.n	800d5cc <HAL_RCC_OscConfig+0x880>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d3c8:	2380      	movs	r3, #128	; 0x80
 800d3ca:	021b      	lsls	r3, r3, #8
 800d3cc:	429a      	cmp	r2, r3
 800d3ce:	d00b      	beq.n	800d3e8 <HAL_RCC_OscConfig+0x69c>
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d3d4:	2380      	movs	r3, #128	; 0x80
 800d3d6:	025b      	lsls	r3, r3, #9
 800d3d8:	429a      	cmp	r2, r3
 800d3da:	d005      	beq.n	800d3e8 <HAL_RCC_OscConfig+0x69c>
 800d3dc:	4aa1      	ldr	r2, [pc, #644]	; (800d664 <HAL_RCC_OscConfig+0x918>)
 800d3de:	4ba0      	ldr	r3, [pc, #640]	; (800d660 <HAL_RCC_OscConfig+0x914>)
 800d3e0:	0011      	movs	r1, r2
 800d3e2:	0018      	movs	r0, r3
 800d3e4:	f7f6 f8fb 	bl	80035de <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d05a      	beq.n	800d4a6 <HAL_RCC_OscConfig+0x75a>
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d3f4:	2380      	movs	r3, #128	; 0x80
 800d3f6:	02db      	lsls	r3, r3, #11
 800d3f8:	429a      	cmp	r2, r3
 800d3fa:	d054      	beq.n	800d4a6 <HAL_RCC_OscConfig+0x75a>
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d400:	2380      	movs	r3, #128	; 0x80
 800d402:	031b      	lsls	r3, r3, #12
 800d404:	429a      	cmp	r2, r3
 800d406:	d04e      	beq.n	800d4a6 <HAL_RCC_OscConfig+0x75a>
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d40c:	23c0      	movs	r3, #192	; 0xc0
 800d40e:	031b      	lsls	r3, r3, #12
 800d410:	429a      	cmp	r2, r3
 800d412:	d048      	beq.n	800d4a6 <HAL_RCC_OscConfig+0x75a>
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d418:	2380      	movs	r3, #128	; 0x80
 800d41a:	035b      	lsls	r3, r3, #13
 800d41c:	429a      	cmp	r2, r3
 800d41e:	d042      	beq.n	800d4a6 <HAL_RCC_OscConfig+0x75a>
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d424:	23a0      	movs	r3, #160	; 0xa0
 800d426:	035b      	lsls	r3, r3, #13
 800d428:	429a      	cmp	r2, r3
 800d42a:	d03c      	beq.n	800d4a6 <HAL_RCC_OscConfig+0x75a>
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d430:	23c0      	movs	r3, #192	; 0xc0
 800d432:	035b      	lsls	r3, r3, #13
 800d434:	429a      	cmp	r2, r3
 800d436:	d036      	beq.n	800d4a6 <HAL_RCC_OscConfig+0x75a>
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d43c:	23e0      	movs	r3, #224	; 0xe0
 800d43e:	035b      	lsls	r3, r3, #13
 800d440:	429a      	cmp	r2, r3
 800d442:	d030      	beq.n	800d4a6 <HAL_RCC_OscConfig+0x75a>
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d448:	2380      	movs	r3, #128	; 0x80
 800d44a:	039b      	lsls	r3, r3, #14
 800d44c:	429a      	cmp	r2, r3
 800d44e:	d02a      	beq.n	800d4a6 <HAL_RCC_OscConfig+0x75a>
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d454:	2390      	movs	r3, #144	; 0x90
 800d456:	039b      	lsls	r3, r3, #14
 800d458:	429a      	cmp	r2, r3
 800d45a:	d024      	beq.n	800d4a6 <HAL_RCC_OscConfig+0x75a>
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d460:	23a0      	movs	r3, #160	; 0xa0
 800d462:	039b      	lsls	r3, r3, #14
 800d464:	429a      	cmp	r2, r3
 800d466:	d01e      	beq.n	800d4a6 <HAL_RCC_OscConfig+0x75a>
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d46c:	23b0      	movs	r3, #176	; 0xb0
 800d46e:	039b      	lsls	r3, r3, #14
 800d470:	429a      	cmp	r2, r3
 800d472:	d018      	beq.n	800d4a6 <HAL_RCC_OscConfig+0x75a>
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d478:	23c0      	movs	r3, #192	; 0xc0
 800d47a:	039b      	lsls	r3, r3, #14
 800d47c:	429a      	cmp	r2, r3
 800d47e:	d012      	beq.n	800d4a6 <HAL_RCC_OscConfig+0x75a>
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d484:	23d0      	movs	r3, #208	; 0xd0
 800d486:	039b      	lsls	r3, r3, #14
 800d488:	429a      	cmp	r2, r3
 800d48a:	d00c      	beq.n	800d4a6 <HAL_RCC_OscConfig+0x75a>
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d490:	23e0      	movs	r3, #224	; 0xe0
 800d492:	039b      	lsls	r3, r3, #14
 800d494:	429a      	cmp	r2, r3
 800d496:	d006      	beq.n	800d4a6 <HAL_RCC_OscConfig+0x75a>
 800d498:	23a9      	movs	r3, #169	; 0xa9
 800d49a:	009a      	lsls	r2, r3, #2
 800d49c:	4b70      	ldr	r3, [pc, #448]	; (800d660 <HAL_RCC_OscConfig+0x914>)
 800d49e:	0011      	movs	r1, r2
 800d4a0:	0018      	movs	r0, r3
 800d4a2:	f7f6 f89c 	bl	80035de <assert_failed>
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d041      	beq.n	800d532 <HAL_RCC_OscConfig+0x7e6>
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4b2:	2b01      	cmp	r3, #1
 800d4b4:	d03d      	beq.n	800d532 <HAL_RCC_OscConfig+0x7e6>
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4ba:	2b02      	cmp	r3, #2
 800d4bc:	d039      	beq.n	800d532 <HAL_RCC_OscConfig+0x7e6>
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4c2:	2b03      	cmp	r3, #3
 800d4c4:	d035      	beq.n	800d532 <HAL_RCC_OscConfig+0x7e6>
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4ca:	2b04      	cmp	r3, #4
 800d4cc:	d031      	beq.n	800d532 <HAL_RCC_OscConfig+0x7e6>
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4d2:	2b05      	cmp	r3, #5
 800d4d4:	d02d      	beq.n	800d532 <HAL_RCC_OscConfig+0x7e6>
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4da:	2b06      	cmp	r3, #6
 800d4dc:	d029      	beq.n	800d532 <HAL_RCC_OscConfig+0x7e6>
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4e2:	2b07      	cmp	r3, #7
 800d4e4:	d025      	beq.n	800d532 <HAL_RCC_OscConfig+0x7e6>
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4ea:	2b08      	cmp	r3, #8
 800d4ec:	d021      	beq.n	800d532 <HAL_RCC_OscConfig+0x7e6>
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4f2:	2b09      	cmp	r3, #9
 800d4f4:	d01d      	beq.n	800d532 <HAL_RCC_OscConfig+0x7e6>
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4fa:	2b0a      	cmp	r3, #10
 800d4fc:	d019      	beq.n	800d532 <HAL_RCC_OscConfig+0x7e6>
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d502:	2b0b      	cmp	r3, #11
 800d504:	d015      	beq.n	800d532 <HAL_RCC_OscConfig+0x7e6>
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d50a:	2b0c      	cmp	r3, #12
 800d50c:	d011      	beq.n	800d532 <HAL_RCC_OscConfig+0x7e6>
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d512:	2b0d      	cmp	r3, #13
 800d514:	d00d      	beq.n	800d532 <HAL_RCC_OscConfig+0x7e6>
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d51a:	2b0e      	cmp	r3, #14
 800d51c:	d009      	beq.n	800d532 <HAL_RCC_OscConfig+0x7e6>
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d522:	2b0f      	cmp	r3, #15
 800d524:	d005      	beq.n	800d532 <HAL_RCC_OscConfig+0x7e6>
 800d526:	4a50      	ldr	r2, [pc, #320]	; (800d668 <HAL_RCC_OscConfig+0x91c>)
 800d528:	4b4d      	ldr	r3, [pc, #308]	; (800d660 <HAL_RCC_OscConfig+0x914>)
 800d52a:	0011      	movs	r1, r2
 800d52c:	0018      	movs	r0, r3
 800d52e:	f7f6 f856 	bl	80035de <assert_failed>
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d532:	4b49      	ldr	r3, [pc, #292]	; (800d658 <HAL_RCC_OscConfig+0x90c>)
 800d534:	681a      	ldr	r2, [r3, #0]
 800d536:	4b48      	ldr	r3, [pc, #288]	; (800d658 <HAL_RCC_OscConfig+0x90c>)
 800d538:	494c      	ldr	r1, [pc, #304]	; (800d66c <HAL_RCC_OscConfig+0x920>)
 800d53a:	400a      	ands	r2, r1
 800d53c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d53e:	f7fc f91b 	bl	8009778 <HAL_GetTick>
 800d542:	0003      	movs	r3, r0
 800d544:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800d546:	e008      	b.n	800d55a <HAL_RCC_OscConfig+0x80e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d548:	f7fc f916 	bl	8009778 <HAL_GetTick>
 800d54c:	0002      	movs	r2, r0
 800d54e:	69bb      	ldr	r3, [r7, #24]
 800d550:	1ad3      	subs	r3, r2, r3
 800d552:	2b02      	cmp	r3, #2
 800d554:	d901      	bls.n	800d55a <HAL_RCC_OscConfig+0x80e>
          {
            return HAL_TIMEOUT;
 800d556:	2303      	movs	r3, #3
 800d558:	e079      	b.n	800d64e <HAL_RCC_OscConfig+0x902>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800d55a:	4b3f      	ldr	r3, [pc, #252]	; (800d658 <HAL_RCC_OscConfig+0x90c>)
 800d55c:	681a      	ldr	r2, [r3, #0]
 800d55e:	2380      	movs	r3, #128	; 0x80
 800d560:	049b      	lsls	r3, r3, #18
 800d562:	4013      	ands	r3, r2
 800d564:	d1f0      	bne.n	800d548 <HAL_RCC_OscConfig+0x7fc>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d566:	4b3c      	ldr	r3, [pc, #240]	; (800d658 <HAL_RCC_OscConfig+0x90c>)
 800d568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d56a:	220f      	movs	r2, #15
 800d56c:	4393      	bics	r3, r2
 800d56e:	0019      	movs	r1, r3
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d574:	4b38      	ldr	r3, [pc, #224]	; (800d658 <HAL_RCC_OscConfig+0x90c>)
 800d576:	430a      	orrs	r2, r1
 800d578:	62da      	str	r2, [r3, #44]	; 0x2c
 800d57a:	4b37      	ldr	r3, [pc, #220]	; (800d658 <HAL_RCC_OscConfig+0x90c>)
 800d57c:	685b      	ldr	r3, [r3, #4]
 800d57e:	4a3c      	ldr	r2, [pc, #240]	; (800d670 <HAL_RCC_OscConfig+0x924>)
 800d580:	4013      	ands	r3, r2
 800d582:	0019      	movs	r1, r3
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d58c:	431a      	orrs	r2, r3
 800d58e:	4b32      	ldr	r3, [pc, #200]	; (800d658 <HAL_RCC_OscConfig+0x90c>)
 800d590:	430a      	orrs	r2, r1
 800d592:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d594:	4b30      	ldr	r3, [pc, #192]	; (800d658 <HAL_RCC_OscConfig+0x90c>)
 800d596:	681a      	ldr	r2, [r3, #0]
 800d598:	4b2f      	ldr	r3, [pc, #188]	; (800d658 <HAL_RCC_OscConfig+0x90c>)
 800d59a:	2180      	movs	r1, #128	; 0x80
 800d59c:	0449      	lsls	r1, r1, #17
 800d59e:	430a      	orrs	r2, r1
 800d5a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d5a2:	f7fc f8e9 	bl	8009778 <HAL_GetTick>
 800d5a6:	0003      	movs	r3, r0
 800d5a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800d5aa:	e008      	b.n	800d5be <HAL_RCC_OscConfig+0x872>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d5ac:	f7fc f8e4 	bl	8009778 <HAL_GetTick>
 800d5b0:	0002      	movs	r2, r0
 800d5b2:	69bb      	ldr	r3, [r7, #24]
 800d5b4:	1ad3      	subs	r3, r2, r3
 800d5b6:	2b02      	cmp	r3, #2
 800d5b8:	d901      	bls.n	800d5be <HAL_RCC_OscConfig+0x872>
          {
            return HAL_TIMEOUT;
 800d5ba:	2303      	movs	r3, #3
 800d5bc:	e047      	b.n	800d64e <HAL_RCC_OscConfig+0x902>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800d5be:	4b26      	ldr	r3, [pc, #152]	; (800d658 <HAL_RCC_OscConfig+0x90c>)
 800d5c0:	681a      	ldr	r2, [r3, #0]
 800d5c2:	2380      	movs	r3, #128	; 0x80
 800d5c4:	049b      	lsls	r3, r3, #18
 800d5c6:	4013      	ands	r3, r2
 800d5c8:	d0f0      	beq.n	800d5ac <HAL_RCC_OscConfig+0x860>
 800d5ca:	e03f      	b.n	800d64c <HAL_RCC_OscConfig+0x900>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d5cc:	4b22      	ldr	r3, [pc, #136]	; (800d658 <HAL_RCC_OscConfig+0x90c>)
 800d5ce:	681a      	ldr	r2, [r3, #0]
 800d5d0:	4b21      	ldr	r3, [pc, #132]	; (800d658 <HAL_RCC_OscConfig+0x90c>)
 800d5d2:	4926      	ldr	r1, [pc, #152]	; (800d66c <HAL_RCC_OscConfig+0x920>)
 800d5d4:	400a      	ands	r2, r1
 800d5d6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d5d8:	f7fc f8ce 	bl	8009778 <HAL_GetTick>
 800d5dc:	0003      	movs	r3, r0
 800d5de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800d5e0:	e008      	b.n	800d5f4 <HAL_RCC_OscConfig+0x8a8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d5e2:	f7fc f8c9 	bl	8009778 <HAL_GetTick>
 800d5e6:	0002      	movs	r2, r0
 800d5e8:	69bb      	ldr	r3, [r7, #24]
 800d5ea:	1ad3      	subs	r3, r2, r3
 800d5ec:	2b02      	cmp	r3, #2
 800d5ee:	d901      	bls.n	800d5f4 <HAL_RCC_OscConfig+0x8a8>
          {
            return HAL_TIMEOUT;
 800d5f0:	2303      	movs	r3, #3
 800d5f2:	e02c      	b.n	800d64e <HAL_RCC_OscConfig+0x902>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800d5f4:	4b18      	ldr	r3, [pc, #96]	; (800d658 <HAL_RCC_OscConfig+0x90c>)
 800d5f6:	681a      	ldr	r2, [r3, #0]
 800d5f8:	2380      	movs	r3, #128	; 0x80
 800d5fa:	049b      	lsls	r3, r3, #18
 800d5fc:	4013      	ands	r3, r2
 800d5fe:	d1f0      	bne.n	800d5e2 <HAL_RCC_OscConfig+0x896>
 800d600:	e024      	b.n	800d64c <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	6a1b      	ldr	r3, [r3, #32]
 800d606:	2b01      	cmp	r3, #1
 800d608:	d101      	bne.n	800d60e <HAL_RCC_OscConfig+0x8c2>
      {
        return HAL_ERROR;
 800d60a:	2301      	movs	r3, #1
 800d60c:	e01f      	b.n	800d64e <HAL_RCC_OscConfig+0x902>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800d60e:	4b12      	ldr	r3, [pc, #72]	; (800d658 <HAL_RCC_OscConfig+0x90c>)
 800d610:	685b      	ldr	r3, [r3, #4]
 800d612:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800d614:	4b10      	ldr	r3, [pc, #64]	; (800d658 <HAL_RCC_OscConfig+0x90c>)
 800d616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d618:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800d61a:	697a      	ldr	r2, [r7, #20]
 800d61c:	23c0      	movs	r3, #192	; 0xc0
 800d61e:	025b      	lsls	r3, r3, #9
 800d620:	401a      	ands	r2, r3
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d626:	429a      	cmp	r2, r3
 800d628:	d10e      	bne.n	800d648 <HAL_RCC_OscConfig+0x8fc>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800d62a:	693b      	ldr	r3, [r7, #16]
 800d62c:	220f      	movs	r2, #15
 800d62e:	401a      	ands	r2, r3
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800d634:	429a      	cmp	r2, r3
 800d636:	d107      	bne.n	800d648 <HAL_RCC_OscConfig+0x8fc>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800d638:	697a      	ldr	r2, [r7, #20]
 800d63a:	23f0      	movs	r3, #240	; 0xf0
 800d63c:	039b      	lsls	r3, r3, #14
 800d63e:	401a      	ands	r2, r3
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800d644:	429a      	cmp	r2, r3
 800d646:	d001      	beq.n	800d64c <HAL_RCC_OscConfig+0x900>
        {
          return HAL_ERROR;
 800d648:	2301      	movs	r3, #1
 800d64a:	e000      	b.n	800d64e <HAL_RCC_OscConfig+0x902>
        }
      }
    }
  }

  return HAL_OK;
 800d64c:	2300      	movs	r3, #0
}
 800d64e:	0018      	movs	r0, r3
 800d650:	46bd      	mov	sp, r7
 800d652:	b008      	add	sp, #32
 800d654:	bd80      	pop	{r7, pc}
 800d656:	46c0      	nop			; (mov r8, r8)
 800d658:	40021000 	.word	0x40021000
 800d65c:	0000029a 	.word	0x0000029a
 800d660:	08016f80 	.word	0x08016f80
 800d664:	000002a3 	.word	0x000002a3
 800d668:	000002a5 	.word	0x000002a5
 800d66c:	feffffff 	.word	0xfeffffff
 800d670:	ffc27fff 	.word	0xffc27fff

0800d674 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b084      	sub	sp, #16
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
 800d67c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d101      	bne.n	800d688 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d684:	2301      	movs	r3, #1
 800d686:	e133      	b.n	800d8f0 <HAL_RCC_ClockConfig+0x27c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	2201      	movs	r2, #1
 800d68e:	4013      	ands	r3, r2
 800d690:	d10f      	bne.n	800d6b2 <HAL_RCC_ClockConfig+0x3e>
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	2202      	movs	r2, #2
 800d698:	4013      	ands	r3, r2
 800d69a:	d10a      	bne.n	800d6b2 <HAL_RCC_ClockConfig+0x3e>
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	2204      	movs	r2, #4
 800d6a2:	4013      	ands	r3, r2
 800d6a4:	d105      	bne.n	800d6b2 <HAL_RCC_ClockConfig+0x3e>
 800d6a6:	4a94      	ldr	r2, [pc, #592]	; (800d8f8 <HAL_RCC_ClockConfig+0x284>)
 800d6a8:	4b94      	ldr	r3, [pc, #592]	; (800d8fc <HAL_RCC_ClockConfig+0x288>)
 800d6aa:	0011      	movs	r1, r2
 800d6ac:	0018      	movs	r0, r3
 800d6ae:	f7f5 ff96 	bl	80035de <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d008      	beq.n	800d6ca <HAL_RCC_ClockConfig+0x56>
 800d6b8:	683b      	ldr	r3, [r7, #0]
 800d6ba:	2b01      	cmp	r3, #1
 800d6bc:	d005      	beq.n	800d6ca <HAL_RCC_ClockConfig+0x56>
 800d6be:	4a90      	ldr	r2, [pc, #576]	; (800d900 <HAL_RCC_ClockConfig+0x28c>)
 800d6c0:	4b8e      	ldr	r3, [pc, #568]	; (800d8fc <HAL_RCC_ClockConfig+0x288>)
 800d6c2:	0011      	movs	r1, r2
 800d6c4:	0018      	movs	r0, r3
 800d6c6:	f7f5 ff8a 	bl	80035de <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d6ca:	4b8e      	ldr	r3, [pc, #568]	; (800d904 <HAL_RCC_ClockConfig+0x290>)
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	2201      	movs	r2, #1
 800d6d0:	4013      	ands	r3, r2
 800d6d2:	683a      	ldr	r2, [r7, #0]
 800d6d4:	429a      	cmp	r2, r3
 800d6d6:	d911      	bls.n	800d6fc <HAL_RCC_ClockConfig+0x88>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d6d8:	4b8a      	ldr	r3, [pc, #552]	; (800d904 <HAL_RCC_ClockConfig+0x290>)
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	2201      	movs	r2, #1
 800d6de:	4393      	bics	r3, r2
 800d6e0:	0019      	movs	r1, r3
 800d6e2:	4b88      	ldr	r3, [pc, #544]	; (800d904 <HAL_RCC_ClockConfig+0x290>)
 800d6e4:	683a      	ldr	r2, [r7, #0]
 800d6e6:	430a      	orrs	r2, r1
 800d6e8:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d6ea:	4b86      	ldr	r3, [pc, #536]	; (800d904 <HAL_RCC_ClockConfig+0x290>)
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	2201      	movs	r2, #1
 800d6f0:	4013      	ands	r3, r2
 800d6f2:	683a      	ldr	r2, [r7, #0]
 800d6f4:	429a      	cmp	r2, r3
 800d6f6:	d001      	beq.n	800d6fc <HAL_RCC_ClockConfig+0x88>
    {
      return HAL_ERROR;
 800d6f8:	2301      	movs	r3, #1
 800d6fa:	e0f9      	b.n	800d8f0 <HAL_RCC_ClockConfig+0x27c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	2202      	movs	r2, #2
 800d702:	4013      	ands	r3, r2
 800d704:	d03f      	beq.n	800d786 <HAL_RCC_ClockConfig+0x112>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	2204      	movs	r2, #4
 800d70c:	4013      	ands	r3, r2
 800d70e:	d006      	beq.n	800d71e <HAL_RCC_ClockConfig+0xaa>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800d710:	4b7d      	ldr	r3, [pc, #500]	; (800d908 <HAL_RCC_ClockConfig+0x294>)
 800d712:	685a      	ldr	r2, [r3, #4]
 800d714:	4b7c      	ldr	r3, [pc, #496]	; (800d908 <HAL_RCC_ClockConfig+0x294>)
 800d716:	21e0      	movs	r1, #224	; 0xe0
 800d718:	00c9      	lsls	r1, r1, #3
 800d71a:	430a      	orrs	r2, r1
 800d71c:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	689b      	ldr	r3, [r3, #8]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d025      	beq.n	800d772 <HAL_RCC_ClockConfig+0xfe>
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	689b      	ldr	r3, [r3, #8]
 800d72a:	2b80      	cmp	r3, #128	; 0x80
 800d72c:	d021      	beq.n	800d772 <HAL_RCC_ClockConfig+0xfe>
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	689b      	ldr	r3, [r3, #8]
 800d732:	2b90      	cmp	r3, #144	; 0x90
 800d734:	d01d      	beq.n	800d772 <HAL_RCC_ClockConfig+0xfe>
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	689b      	ldr	r3, [r3, #8]
 800d73a:	2ba0      	cmp	r3, #160	; 0xa0
 800d73c:	d019      	beq.n	800d772 <HAL_RCC_ClockConfig+0xfe>
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	689b      	ldr	r3, [r3, #8]
 800d742:	2bb0      	cmp	r3, #176	; 0xb0
 800d744:	d015      	beq.n	800d772 <HAL_RCC_ClockConfig+0xfe>
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	689b      	ldr	r3, [r3, #8]
 800d74a:	2bc0      	cmp	r3, #192	; 0xc0
 800d74c:	d011      	beq.n	800d772 <HAL_RCC_ClockConfig+0xfe>
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	689b      	ldr	r3, [r3, #8]
 800d752:	2bd0      	cmp	r3, #208	; 0xd0
 800d754:	d00d      	beq.n	800d772 <HAL_RCC_ClockConfig+0xfe>
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	689b      	ldr	r3, [r3, #8]
 800d75a:	2be0      	cmp	r3, #224	; 0xe0
 800d75c:	d009      	beq.n	800d772 <HAL_RCC_ClockConfig+0xfe>
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	689b      	ldr	r3, [r3, #8]
 800d762:	2bf0      	cmp	r3, #240	; 0xf0
 800d764:	d005      	beq.n	800d772 <HAL_RCC_ClockConfig+0xfe>
 800d766:	4a69      	ldr	r2, [pc, #420]	; (800d90c <HAL_RCC_ClockConfig+0x298>)
 800d768:	4b64      	ldr	r3, [pc, #400]	; (800d8fc <HAL_RCC_ClockConfig+0x288>)
 800d76a:	0011      	movs	r1, r2
 800d76c:	0018      	movs	r0, r3
 800d76e:	f7f5 ff36 	bl	80035de <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d772:	4b65      	ldr	r3, [pc, #404]	; (800d908 <HAL_RCC_ClockConfig+0x294>)
 800d774:	685b      	ldr	r3, [r3, #4]
 800d776:	22f0      	movs	r2, #240	; 0xf0
 800d778:	4393      	bics	r3, r2
 800d77a:	0019      	movs	r1, r3
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	689a      	ldr	r2, [r3, #8]
 800d780:	4b61      	ldr	r3, [pc, #388]	; (800d908 <HAL_RCC_ClockConfig+0x294>)
 800d782:	430a      	orrs	r2, r1
 800d784:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	2201      	movs	r2, #1
 800d78c:	4013      	ands	r3, r2
 800d78e:	d052      	beq.n	800d836 <HAL_RCC_ClockConfig+0x1c2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	685b      	ldr	r3, [r3, #4]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d00d      	beq.n	800d7b4 <HAL_RCC_ClockConfig+0x140>
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	685b      	ldr	r3, [r3, #4]
 800d79c:	2b01      	cmp	r3, #1
 800d79e:	d009      	beq.n	800d7b4 <HAL_RCC_ClockConfig+0x140>
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	685b      	ldr	r3, [r3, #4]
 800d7a4:	2b02      	cmp	r3, #2
 800d7a6:	d005      	beq.n	800d7b4 <HAL_RCC_ClockConfig+0x140>
 800d7a8:	4a59      	ldr	r2, [pc, #356]	; (800d910 <HAL_RCC_ClockConfig+0x29c>)
 800d7aa:	4b54      	ldr	r3, [pc, #336]	; (800d8fc <HAL_RCC_ClockConfig+0x288>)
 800d7ac:	0011      	movs	r1, r2
 800d7ae:	0018      	movs	r0, r3
 800d7b0:	f7f5 ff15 	bl	80035de <assert_failed>
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	685b      	ldr	r3, [r3, #4]
 800d7b8:	2b01      	cmp	r3, #1
 800d7ba:	d107      	bne.n	800d7cc <HAL_RCC_ClockConfig+0x158>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d7bc:	4b52      	ldr	r3, [pc, #328]	; (800d908 <HAL_RCC_ClockConfig+0x294>)
 800d7be:	681a      	ldr	r2, [r3, #0]
 800d7c0:	2380      	movs	r3, #128	; 0x80
 800d7c2:	029b      	lsls	r3, r3, #10
 800d7c4:	4013      	ands	r3, r2
 800d7c6:	d114      	bne.n	800d7f2 <HAL_RCC_ClockConfig+0x17e>
      {
        return HAL_ERROR;
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	e091      	b.n	800d8f0 <HAL_RCC_ClockConfig+0x27c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	685b      	ldr	r3, [r3, #4]
 800d7d0:	2b02      	cmp	r3, #2
 800d7d2:	d107      	bne.n	800d7e4 <HAL_RCC_ClockConfig+0x170>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d7d4:	4b4c      	ldr	r3, [pc, #304]	; (800d908 <HAL_RCC_ClockConfig+0x294>)
 800d7d6:	681a      	ldr	r2, [r3, #0]
 800d7d8:	2380      	movs	r3, #128	; 0x80
 800d7da:	049b      	lsls	r3, r3, #18
 800d7dc:	4013      	ands	r3, r2
 800d7de:	d108      	bne.n	800d7f2 <HAL_RCC_ClockConfig+0x17e>
      {
        return HAL_ERROR;
 800d7e0:	2301      	movs	r3, #1
 800d7e2:	e085      	b.n	800d8f0 <HAL_RCC_ClockConfig+0x27c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d7e4:	4b48      	ldr	r3, [pc, #288]	; (800d908 <HAL_RCC_ClockConfig+0x294>)
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	2202      	movs	r2, #2
 800d7ea:	4013      	ands	r3, r2
 800d7ec:	d101      	bne.n	800d7f2 <HAL_RCC_ClockConfig+0x17e>
      {
        return HAL_ERROR;
 800d7ee:	2301      	movs	r3, #1
 800d7f0:	e07e      	b.n	800d8f0 <HAL_RCC_ClockConfig+0x27c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d7f2:	4b45      	ldr	r3, [pc, #276]	; (800d908 <HAL_RCC_ClockConfig+0x294>)
 800d7f4:	685b      	ldr	r3, [r3, #4]
 800d7f6:	2203      	movs	r2, #3
 800d7f8:	4393      	bics	r3, r2
 800d7fa:	0019      	movs	r1, r3
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	685a      	ldr	r2, [r3, #4]
 800d800:	4b41      	ldr	r3, [pc, #260]	; (800d908 <HAL_RCC_ClockConfig+0x294>)
 800d802:	430a      	orrs	r2, r1
 800d804:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800d806:	f7fb ffb7 	bl	8009778 <HAL_GetTick>
 800d80a:	0003      	movs	r3, r0
 800d80c:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d80e:	e009      	b.n	800d824 <HAL_RCC_ClockConfig+0x1b0>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d810:	f7fb ffb2 	bl	8009778 <HAL_GetTick>
 800d814:	0002      	movs	r2, r0
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	1ad3      	subs	r3, r2, r3
 800d81a:	4a3e      	ldr	r2, [pc, #248]	; (800d914 <HAL_RCC_ClockConfig+0x2a0>)
 800d81c:	4293      	cmp	r3, r2
 800d81e:	d901      	bls.n	800d824 <HAL_RCC_ClockConfig+0x1b0>
      {
        return HAL_TIMEOUT;
 800d820:	2303      	movs	r3, #3
 800d822:	e065      	b.n	800d8f0 <HAL_RCC_ClockConfig+0x27c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d824:	4b38      	ldr	r3, [pc, #224]	; (800d908 <HAL_RCC_ClockConfig+0x294>)
 800d826:	685b      	ldr	r3, [r3, #4]
 800d828:	220c      	movs	r2, #12
 800d82a:	401a      	ands	r2, r3
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	685b      	ldr	r3, [r3, #4]
 800d830:	009b      	lsls	r3, r3, #2
 800d832:	429a      	cmp	r2, r3
 800d834:	d1ec      	bne.n	800d810 <HAL_RCC_ClockConfig+0x19c>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d836:	4b33      	ldr	r3, [pc, #204]	; (800d904 <HAL_RCC_ClockConfig+0x290>)
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	2201      	movs	r2, #1
 800d83c:	4013      	ands	r3, r2
 800d83e:	683a      	ldr	r2, [r7, #0]
 800d840:	429a      	cmp	r2, r3
 800d842:	d211      	bcs.n	800d868 <HAL_RCC_ClockConfig+0x1f4>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d844:	4b2f      	ldr	r3, [pc, #188]	; (800d904 <HAL_RCC_ClockConfig+0x290>)
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	2201      	movs	r2, #1
 800d84a:	4393      	bics	r3, r2
 800d84c:	0019      	movs	r1, r3
 800d84e:	4b2d      	ldr	r3, [pc, #180]	; (800d904 <HAL_RCC_ClockConfig+0x290>)
 800d850:	683a      	ldr	r2, [r7, #0]
 800d852:	430a      	orrs	r2, r1
 800d854:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d856:	4b2b      	ldr	r3, [pc, #172]	; (800d904 <HAL_RCC_ClockConfig+0x290>)
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	2201      	movs	r2, #1
 800d85c:	4013      	ands	r3, r2
 800d85e:	683a      	ldr	r2, [r7, #0]
 800d860:	429a      	cmp	r2, r3
 800d862:	d001      	beq.n	800d868 <HAL_RCC_ClockConfig+0x1f4>
    {
      return HAL_ERROR;
 800d864:	2301      	movs	r3, #1
 800d866:	e043      	b.n	800d8f0 <HAL_RCC_ClockConfig+0x27c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	2204      	movs	r2, #4
 800d86e:	4013      	ands	r3, r2
 800d870:	d02c      	beq.n	800d8cc <HAL_RCC_ClockConfig+0x258>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	68db      	ldr	r3, [r3, #12]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d01e      	beq.n	800d8b8 <HAL_RCC_ClockConfig+0x244>
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	68da      	ldr	r2, [r3, #12]
 800d87e:	2380      	movs	r3, #128	; 0x80
 800d880:	00db      	lsls	r3, r3, #3
 800d882:	429a      	cmp	r2, r3
 800d884:	d018      	beq.n	800d8b8 <HAL_RCC_ClockConfig+0x244>
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	68da      	ldr	r2, [r3, #12]
 800d88a:	23a0      	movs	r3, #160	; 0xa0
 800d88c:	00db      	lsls	r3, r3, #3
 800d88e:	429a      	cmp	r2, r3
 800d890:	d012      	beq.n	800d8b8 <HAL_RCC_ClockConfig+0x244>
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	68da      	ldr	r2, [r3, #12]
 800d896:	23c0      	movs	r3, #192	; 0xc0
 800d898:	00db      	lsls	r3, r3, #3
 800d89a:	429a      	cmp	r2, r3
 800d89c:	d00c      	beq.n	800d8b8 <HAL_RCC_ClockConfig+0x244>
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	68da      	ldr	r2, [r3, #12]
 800d8a2:	23e0      	movs	r3, #224	; 0xe0
 800d8a4:	00db      	lsls	r3, r3, #3
 800d8a6:	429a      	cmp	r2, r3
 800d8a8:	d006      	beq.n	800d8b8 <HAL_RCC_ClockConfig+0x244>
 800d8aa:	23e1      	movs	r3, #225	; 0xe1
 800d8ac:	009a      	lsls	r2, r3, #2
 800d8ae:	4b13      	ldr	r3, [pc, #76]	; (800d8fc <HAL_RCC_ClockConfig+0x288>)
 800d8b0:	0011      	movs	r1, r2
 800d8b2:	0018      	movs	r0, r3
 800d8b4:	f7f5 fe93 	bl	80035de <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800d8b8:	4b13      	ldr	r3, [pc, #76]	; (800d908 <HAL_RCC_ClockConfig+0x294>)
 800d8ba:	685b      	ldr	r3, [r3, #4]
 800d8bc:	4a16      	ldr	r2, [pc, #88]	; (800d918 <HAL_RCC_ClockConfig+0x2a4>)
 800d8be:	4013      	ands	r3, r2
 800d8c0:	0019      	movs	r1, r3
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	68da      	ldr	r2, [r3, #12]
 800d8c6:	4b10      	ldr	r3, [pc, #64]	; (800d908 <HAL_RCC_ClockConfig+0x294>)
 800d8c8:	430a      	orrs	r2, r1
 800d8ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800d8cc:	f000 f82a 	bl	800d924 <HAL_RCC_GetSysClockFreq>
 800d8d0:	0001      	movs	r1, r0
 800d8d2:	4b0d      	ldr	r3, [pc, #52]	; (800d908 <HAL_RCC_ClockConfig+0x294>)
 800d8d4:	685b      	ldr	r3, [r3, #4]
 800d8d6:	091b      	lsrs	r3, r3, #4
 800d8d8:	220f      	movs	r2, #15
 800d8da:	4013      	ands	r3, r2
 800d8dc:	4a0f      	ldr	r2, [pc, #60]	; (800d91c <HAL_RCC_ClockConfig+0x2a8>)
 800d8de:	5cd3      	ldrb	r3, [r2, r3]
 800d8e0:	000a      	movs	r2, r1
 800d8e2:	40da      	lsrs	r2, r3
 800d8e4:	4b0e      	ldr	r3, [pc, #56]	; (800d920 <HAL_RCC_ClockConfig+0x2ac>)
 800d8e6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800d8e8:	2003      	movs	r0, #3
 800d8ea:	f7f5 ffd5 	bl	8003898 <HAL_InitTick>
  
  return HAL_OK;
 800d8ee:	2300      	movs	r3, #0
}
 800d8f0:	0018      	movs	r0, r3
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	b004      	add	sp, #16
 800d8f6:	bd80      	pop	{r7, pc}
 800d8f8:	00000316 	.word	0x00000316
 800d8fc:	08016f80 	.word	0x08016f80
 800d900:	00000317 	.word	0x00000317
 800d904:	40022000 	.word	0x40022000
 800d908:	40021000 	.word	0x40021000
 800d90c:	00000336 	.word	0x00000336
 800d910:	0000033d 	.word	0x0000033d
 800d914:	00001388 	.word	0x00001388
 800d918:	fffff8ff 	.word	0xfffff8ff
 800d91c:	08017148 	.word	0x08017148
 800d920:	20000004 	.word	0x20000004

0800d924 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d924:	b590      	push	{r4, r7, lr}
 800d926:	b08f      	sub	sp, #60	; 0x3c
 800d928:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800d92a:	2314      	movs	r3, #20
 800d92c:	18fb      	adds	r3, r7, r3
 800d92e:	4a2c      	ldr	r2, [pc, #176]	; (800d9e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800d930:	ca13      	ldmia	r2!, {r0, r1, r4}
 800d932:	c313      	stmia	r3!, {r0, r1, r4}
 800d934:	6812      	ldr	r2, [r2, #0]
 800d936:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800d938:	1d3b      	adds	r3, r7, #4
 800d93a:	4a2a      	ldr	r2, [pc, #168]	; (800d9e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800d93c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800d93e:	c313      	stmia	r3!, {r0, r1, r4}
 800d940:	6812      	ldr	r2, [r2, #0]
 800d942:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800d944:	2300      	movs	r3, #0
 800d946:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d948:	2300      	movs	r3, #0
 800d94a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d94c:	2300      	movs	r3, #0
 800d94e:	637b      	str	r3, [r7, #52]	; 0x34
 800d950:	2300      	movs	r3, #0
 800d952:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800d954:	2300      	movs	r3, #0
 800d956:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800d958:	4b23      	ldr	r3, [pc, #140]	; (800d9e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800d95a:	685b      	ldr	r3, [r3, #4]
 800d95c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800d95e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d960:	220c      	movs	r2, #12
 800d962:	4013      	ands	r3, r2
 800d964:	2b04      	cmp	r3, #4
 800d966:	d002      	beq.n	800d96e <HAL_RCC_GetSysClockFreq+0x4a>
 800d968:	2b08      	cmp	r3, #8
 800d96a:	d003      	beq.n	800d974 <HAL_RCC_GetSysClockFreq+0x50>
 800d96c:	e02f      	b.n	800d9ce <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800d96e:	4b1f      	ldr	r3, [pc, #124]	; (800d9ec <HAL_RCC_GetSysClockFreq+0xc8>)
 800d970:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800d972:	e02f      	b.n	800d9d4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800d974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d976:	0c9b      	lsrs	r3, r3, #18
 800d978:	220f      	movs	r2, #15
 800d97a:	4013      	ands	r3, r2
 800d97c:	2214      	movs	r2, #20
 800d97e:	18ba      	adds	r2, r7, r2
 800d980:	5cd3      	ldrb	r3, [r2, r3]
 800d982:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800d984:	4b18      	ldr	r3, [pc, #96]	; (800d9e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800d986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d988:	220f      	movs	r2, #15
 800d98a:	4013      	ands	r3, r2
 800d98c:	1d3a      	adds	r2, r7, #4
 800d98e:	5cd3      	ldrb	r3, [r2, r3]
 800d990:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800d992:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d994:	23c0      	movs	r3, #192	; 0xc0
 800d996:	025b      	lsls	r3, r3, #9
 800d998:	401a      	ands	r2, r3
 800d99a:	2380      	movs	r3, #128	; 0x80
 800d99c:	025b      	lsls	r3, r3, #9
 800d99e:	429a      	cmp	r2, r3
 800d9a0:	d109      	bne.n	800d9b6 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800d9a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d9a4:	4811      	ldr	r0, [pc, #68]	; (800d9ec <HAL_RCC_GetSysClockFreq+0xc8>)
 800d9a6:	f7f2 fbcb 	bl	8000140 <__udivsi3>
 800d9aa:	0003      	movs	r3, r0
 800d9ac:	001a      	movs	r2, r3
 800d9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9b0:	4353      	muls	r3, r2
 800d9b2:	637b      	str	r3, [r7, #52]	; 0x34
 800d9b4:	e008      	b.n	800d9c8 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800d9b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d9b8:	480c      	ldr	r0, [pc, #48]	; (800d9ec <HAL_RCC_GetSysClockFreq+0xc8>)
 800d9ba:	f7f2 fbc1 	bl	8000140 <__udivsi3>
 800d9be:	0003      	movs	r3, r0
 800d9c0:	001a      	movs	r2, r3
 800d9c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c4:	4353      	muls	r3, r2
 800d9c6:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800d9c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9ca:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800d9cc:	e002      	b.n	800d9d4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800d9ce:	4b07      	ldr	r3, [pc, #28]	; (800d9ec <HAL_RCC_GetSysClockFreq+0xc8>)
 800d9d0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800d9d2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800d9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800d9d6:	0018      	movs	r0, r3
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	b00f      	add	sp, #60	; 0x3c
 800d9dc:	bd90      	pop	{r4, r7, pc}
 800d9de:	46c0      	nop			; (mov r8, r8)
 800d9e0:	08016fb8 	.word	0x08016fb8
 800d9e4:	08016fc8 	.word	0x08016fc8
 800d9e8:	40021000 	.word	0x40021000
 800d9ec:	007a1200 	.word	0x007a1200

0800d9f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d9f4:	4b02      	ldr	r3, [pc, #8]	; (800da00 <HAL_RCC_GetHCLKFreq+0x10>)
 800d9f6:	681b      	ldr	r3, [r3, #0]
}
 800d9f8:	0018      	movs	r0, r3
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	bd80      	pop	{r7, pc}
 800d9fe:	46c0      	nop			; (mov r8, r8)
 800da00:	20000004 	.word	0x20000004

0800da04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800da04:	b580      	push	{r7, lr}
 800da06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800da08:	f7ff fff2 	bl	800d9f0 <HAL_RCC_GetHCLKFreq>
 800da0c:	0001      	movs	r1, r0
 800da0e:	4b06      	ldr	r3, [pc, #24]	; (800da28 <HAL_RCC_GetPCLK1Freq+0x24>)
 800da10:	685b      	ldr	r3, [r3, #4]
 800da12:	0a1b      	lsrs	r3, r3, #8
 800da14:	2207      	movs	r2, #7
 800da16:	4013      	ands	r3, r2
 800da18:	4a04      	ldr	r2, [pc, #16]	; (800da2c <HAL_RCC_GetPCLK1Freq+0x28>)
 800da1a:	5cd3      	ldrb	r3, [r2, r3]
 800da1c:	40d9      	lsrs	r1, r3
 800da1e:	000b      	movs	r3, r1
}    
 800da20:	0018      	movs	r0, r3
 800da22:	46bd      	mov	sp, r7
 800da24:	bd80      	pop	{r7, pc}
 800da26:	46c0      	nop			; (mov r8, r8)
 800da28:	40021000 	.word	0x40021000
 800da2c:	08017158 	.word	0x08017158

0800da30 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b082      	sub	sp, #8
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
 800da38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d105      	bne.n	800da4c <HAL_RCC_GetClockConfig+0x1c>
 800da40:	4a17      	ldr	r2, [pc, #92]	; (800daa0 <HAL_RCC_GetClockConfig+0x70>)
 800da42:	4b18      	ldr	r3, [pc, #96]	; (800daa4 <HAL_RCC_GetClockConfig+0x74>)
 800da44:	0011      	movs	r1, r2
 800da46:	0018      	movs	r0, r3
 800da48:	f7f5 fdc9 	bl	80035de <assert_failed>
  assert_param(pFLatency != NULL);
 800da4c:	683b      	ldr	r3, [r7, #0]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d105      	bne.n	800da5e <HAL_RCC_GetClockConfig+0x2e>
 800da52:	4a15      	ldr	r2, [pc, #84]	; (800daa8 <HAL_RCC_GetClockConfig+0x78>)
 800da54:	4b13      	ldr	r3, [pc, #76]	; (800daa4 <HAL_RCC_GetClockConfig+0x74>)
 800da56:	0011      	movs	r1, r2
 800da58:	0018      	movs	r0, r3
 800da5a:	f7f5 fdc0 	bl	80035de <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2207      	movs	r2, #7
 800da62:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800da64:	4b11      	ldr	r3, [pc, #68]	; (800daac <HAL_RCC_GetClockConfig+0x7c>)
 800da66:	685b      	ldr	r3, [r3, #4]
 800da68:	2203      	movs	r2, #3
 800da6a:	401a      	ands	r2, r3
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800da70:	4b0e      	ldr	r3, [pc, #56]	; (800daac <HAL_RCC_GetClockConfig+0x7c>)
 800da72:	685b      	ldr	r3, [r3, #4]
 800da74:	22f0      	movs	r2, #240	; 0xf0
 800da76:	401a      	ands	r2, r3
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 800da7c:	4b0b      	ldr	r3, [pc, #44]	; (800daac <HAL_RCC_GetClockConfig+0x7c>)
 800da7e:	685a      	ldr	r2, [r3, #4]
 800da80:	23e0      	movs	r3, #224	; 0xe0
 800da82:	00db      	lsls	r3, r3, #3
 800da84:	401a      	ands	r2, r3
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 800da8a:	4b09      	ldr	r3, [pc, #36]	; (800dab0 <HAL_RCC_GetClockConfig+0x80>)
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	2201      	movs	r2, #1
 800da90:	401a      	ands	r2, r3
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	601a      	str	r2, [r3, #0]
}
 800da96:	46c0      	nop			; (mov r8, r8)
 800da98:	46bd      	mov	sp, r7
 800da9a:	b002      	add	sp, #8
 800da9c:	bd80      	pop	{r7, pc}
 800da9e:	46c0      	nop			; (mov r8, r8)
 800daa0:	00000515 	.word	0x00000515
 800daa4:	08016f80 	.word	0x08016f80
 800daa8:	00000516 	.word	0x00000516
 800daac:	40021000 	.word	0x40021000
 800dab0:	40022000 	.word	0x40022000

0800dab4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b086      	sub	sp, #24
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800dabc:	2300      	movs	r3, #0
 800dabe:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800dac0:	2300      	movs	r3, #0
 800dac2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	4a8d      	ldr	r2, [pc, #564]	; (800dd00 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800daca:	4293      	cmp	r3, r2
 800dacc:	d904      	bls.n	800dad8 <HAL_RCCEx_PeriphCLKConfig+0x24>
 800dace:	4b8d      	ldr	r3, [pc, #564]	; (800dd04 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800dad0:	216e      	movs	r1, #110	; 0x6e
 800dad2:	0018      	movs	r0, r3
 800dad4:	f7f5 fd83 	bl	80035de <assert_failed>
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	681a      	ldr	r2, [r3, #0]
 800dadc:	2380      	movs	r3, #128	; 0x80
 800dade:	025b      	lsls	r3, r3, #9
 800dae0:	4013      	ands	r3, r2
 800dae2:	d100      	bne.n	800dae6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800dae4:	e0a9      	b.n	800dc3a <HAL_RCCEx_PeriphCLKConfig+0x186>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	685b      	ldr	r3, [r3, #4]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d016      	beq.n	800db1c <HAL_RCCEx_PeriphCLKConfig+0x68>
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	685a      	ldr	r2, [r3, #4]
 800daf2:	2380      	movs	r3, #128	; 0x80
 800daf4:	005b      	lsls	r3, r3, #1
 800daf6:	429a      	cmp	r2, r3
 800daf8:	d010      	beq.n	800db1c <HAL_RCCEx_PeriphCLKConfig+0x68>
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	685a      	ldr	r2, [r3, #4]
 800dafe:	2380      	movs	r3, #128	; 0x80
 800db00:	009b      	lsls	r3, r3, #2
 800db02:	429a      	cmp	r2, r3
 800db04:	d00a      	beq.n	800db1c <HAL_RCCEx_PeriphCLKConfig+0x68>
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	685a      	ldr	r2, [r3, #4]
 800db0a:	23c0      	movs	r3, #192	; 0xc0
 800db0c:	009b      	lsls	r3, r3, #2
 800db0e:	429a      	cmp	r2, r3
 800db10:	d004      	beq.n	800db1c <HAL_RCCEx_PeriphCLKConfig+0x68>
 800db12:	4b7c      	ldr	r3, [pc, #496]	; (800dd04 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800db14:	2174      	movs	r1, #116	; 0x74
 800db16:	0018      	movs	r0, r3
 800db18:	f7f5 fd61 	bl	80035de <assert_failed>
    
    FlagStatus       pwrclkchanged = RESET;
 800db1c:	2017      	movs	r0, #23
 800db1e:	183b      	adds	r3, r7, r0
 800db20:	2200      	movs	r2, #0
 800db22:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800db24:	4b78      	ldr	r3, [pc, #480]	; (800dd08 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800db26:	69da      	ldr	r2, [r3, #28]
 800db28:	2380      	movs	r3, #128	; 0x80
 800db2a:	055b      	lsls	r3, r3, #21
 800db2c:	4013      	ands	r3, r2
 800db2e:	d110      	bne.n	800db52 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800db30:	4b75      	ldr	r3, [pc, #468]	; (800dd08 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800db32:	69da      	ldr	r2, [r3, #28]
 800db34:	4b74      	ldr	r3, [pc, #464]	; (800dd08 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800db36:	2180      	movs	r1, #128	; 0x80
 800db38:	0549      	lsls	r1, r1, #21
 800db3a:	430a      	orrs	r2, r1
 800db3c:	61da      	str	r2, [r3, #28]
 800db3e:	4b72      	ldr	r3, [pc, #456]	; (800dd08 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800db40:	69da      	ldr	r2, [r3, #28]
 800db42:	2380      	movs	r3, #128	; 0x80
 800db44:	055b      	lsls	r3, r3, #21
 800db46:	4013      	ands	r3, r2
 800db48:	60bb      	str	r3, [r7, #8]
 800db4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800db4c:	183b      	adds	r3, r7, r0
 800db4e:	2201      	movs	r2, #1
 800db50:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800db52:	4b6e      	ldr	r3, [pc, #440]	; (800dd0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800db54:	681a      	ldr	r2, [r3, #0]
 800db56:	2380      	movs	r3, #128	; 0x80
 800db58:	005b      	lsls	r3, r3, #1
 800db5a:	4013      	ands	r3, r2
 800db5c:	d11a      	bne.n	800db94 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800db5e:	4b6b      	ldr	r3, [pc, #428]	; (800dd0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800db60:	681a      	ldr	r2, [r3, #0]
 800db62:	4b6a      	ldr	r3, [pc, #424]	; (800dd0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800db64:	2180      	movs	r1, #128	; 0x80
 800db66:	0049      	lsls	r1, r1, #1
 800db68:	430a      	orrs	r2, r1
 800db6a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800db6c:	f7fb fe04 	bl	8009778 <HAL_GetTick>
 800db70:	0003      	movs	r3, r0
 800db72:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800db74:	e008      	b.n	800db88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800db76:	f7fb fdff 	bl	8009778 <HAL_GetTick>
 800db7a:	0002      	movs	r2, r0
 800db7c:	693b      	ldr	r3, [r7, #16]
 800db7e:	1ad3      	subs	r3, r2, r3
 800db80:	2b64      	cmp	r3, #100	; 0x64
 800db82:	d901      	bls.n	800db88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
        {
          return HAL_TIMEOUT;
 800db84:	2303      	movs	r3, #3
 800db86:	e0b6      	b.n	800dcf6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800db88:	4b60      	ldr	r3, [pc, #384]	; (800dd0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800db8a:	681a      	ldr	r2, [r3, #0]
 800db8c:	2380      	movs	r3, #128	; 0x80
 800db8e:	005b      	lsls	r3, r3, #1
 800db90:	4013      	ands	r3, r2
 800db92:	d0f0      	beq.n	800db76 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800db94:	4b5c      	ldr	r3, [pc, #368]	; (800dd08 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800db96:	6a1a      	ldr	r2, [r3, #32]
 800db98:	23c0      	movs	r3, #192	; 0xc0
 800db9a:	009b      	lsls	r3, r3, #2
 800db9c:	4013      	ands	r3, r2
 800db9e:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d034      	beq.n	800dc10 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	685a      	ldr	r2, [r3, #4]
 800dbaa:	23c0      	movs	r3, #192	; 0xc0
 800dbac:	009b      	lsls	r3, r3, #2
 800dbae:	4013      	ands	r3, r2
 800dbb0:	68fa      	ldr	r2, [r7, #12]
 800dbb2:	429a      	cmp	r2, r3
 800dbb4:	d02c      	beq.n	800dc10 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800dbb6:	4b54      	ldr	r3, [pc, #336]	; (800dd08 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800dbb8:	6a1b      	ldr	r3, [r3, #32]
 800dbba:	4a55      	ldr	r2, [pc, #340]	; (800dd10 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800dbbc:	4013      	ands	r3, r2
 800dbbe:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800dbc0:	4b51      	ldr	r3, [pc, #324]	; (800dd08 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800dbc2:	6a1a      	ldr	r2, [r3, #32]
 800dbc4:	4b50      	ldr	r3, [pc, #320]	; (800dd08 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800dbc6:	2180      	movs	r1, #128	; 0x80
 800dbc8:	0249      	lsls	r1, r1, #9
 800dbca:	430a      	orrs	r2, r1
 800dbcc:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800dbce:	4b4e      	ldr	r3, [pc, #312]	; (800dd08 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800dbd0:	6a1a      	ldr	r2, [r3, #32]
 800dbd2:	4b4d      	ldr	r3, [pc, #308]	; (800dd08 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800dbd4:	494f      	ldr	r1, [pc, #316]	; (800dd14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800dbd6:	400a      	ands	r2, r1
 800dbd8:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800dbda:	4b4b      	ldr	r3, [pc, #300]	; (800dd08 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800dbdc:	68fa      	ldr	r2, [r7, #12]
 800dbde:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	2201      	movs	r2, #1
 800dbe4:	4013      	ands	r3, r2
 800dbe6:	d013      	beq.n	800dc10 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dbe8:	f7fb fdc6 	bl	8009778 <HAL_GetTick>
 800dbec:	0003      	movs	r3, r0
 800dbee:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800dbf0:	e009      	b.n	800dc06 <HAL_RCCEx_PeriphCLKConfig+0x152>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dbf2:	f7fb fdc1 	bl	8009778 <HAL_GetTick>
 800dbf6:	0002      	movs	r2, r0
 800dbf8:	693b      	ldr	r3, [r7, #16]
 800dbfa:	1ad3      	subs	r3, r2, r3
 800dbfc:	4a46      	ldr	r2, [pc, #280]	; (800dd18 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800dbfe:	4293      	cmp	r3, r2
 800dc00:	d901      	bls.n	800dc06 <HAL_RCCEx_PeriphCLKConfig+0x152>
          {
            return HAL_TIMEOUT;
 800dc02:	2303      	movs	r3, #3
 800dc04:	e077      	b.n	800dcf6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800dc06:	4b40      	ldr	r3, [pc, #256]	; (800dd08 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800dc08:	6a1b      	ldr	r3, [r3, #32]
 800dc0a:	2202      	movs	r2, #2
 800dc0c:	4013      	ands	r3, r2
 800dc0e:	d0f0      	beq.n	800dbf2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800dc10:	4b3d      	ldr	r3, [pc, #244]	; (800dd08 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800dc12:	6a1b      	ldr	r3, [r3, #32]
 800dc14:	4a3e      	ldr	r2, [pc, #248]	; (800dd10 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800dc16:	4013      	ands	r3, r2
 800dc18:	0019      	movs	r1, r3
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	685a      	ldr	r2, [r3, #4]
 800dc1e:	4b3a      	ldr	r3, [pc, #232]	; (800dd08 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800dc20:	430a      	orrs	r2, r1
 800dc22:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800dc24:	2317      	movs	r3, #23
 800dc26:	18fb      	adds	r3, r7, r3
 800dc28:	781b      	ldrb	r3, [r3, #0]
 800dc2a:	2b01      	cmp	r3, #1
 800dc2c:	d105      	bne.n	800dc3a <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800dc2e:	4b36      	ldr	r3, [pc, #216]	; (800dd08 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800dc30:	69da      	ldr	r2, [r3, #28]
 800dc32:	4b35      	ldr	r3, [pc, #212]	; (800dd08 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800dc34:	4939      	ldr	r1, [pc, #228]	; (800dd1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800dc36:	400a      	ands	r2, r1
 800dc38:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	2201      	movs	r2, #1
 800dc40:	4013      	ands	r3, r2
 800dc42:	d01e      	beq.n	800dc82 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	689b      	ldr	r3, [r3, #8]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d010      	beq.n	800dc6e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	689b      	ldr	r3, [r3, #8]
 800dc50:	2b01      	cmp	r3, #1
 800dc52:	d00c      	beq.n	800dc6e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	689b      	ldr	r3, [r3, #8]
 800dc58:	2b02      	cmp	r3, #2
 800dc5a:	d008      	beq.n	800dc6e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	689b      	ldr	r3, [r3, #8]
 800dc60:	2b03      	cmp	r3, #3
 800dc62:	d004      	beq.n	800dc6e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
 800dc64:	4b27      	ldr	r3, [pc, #156]	; (800dd04 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800dc66:	21bb      	movs	r1, #187	; 0xbb
 800dc68:	0018      	movs	r0, r3
 800dc6a:	f7f5 fcb8 	bl	80035de <assert_failed>
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800dc6e:	4b26      	ldr	r3, [pc, #152]	; (800dd08 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800dc70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc72:	2203      	movs	r2, #3
 800dc74:	4393      	bics	r3, r2
 800dc76:	0019      	movs	r1, r3
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	689a      	ldr	r2, [r3, #8]
 800dc7c:	4b22      	ldr	r3, [pc, #136]	; (800dd08 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800dc7e:	430a      	orrs	r2, r1
 800dc80:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	2220      	movs	r2, #32
 800dc88:	4013      	ands	r3, r2
 800dc8a:	d016      	beq.n	800dcba <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	68db      	ldr	r3, [r3, #12]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d008      	beq.n	800dca6 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	68db      	ldr	r3, [r3, #12]
 800dc98:	2b10      	cmp	r3, #16
 800dc9a:	d004      	beq.n	800dca6 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 800dc9c:	4b19      	ldr	r3, [pc, #100]	; (800dd04 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800dc9e:	21df      	movs	r1, #223	; 0xdf
 800dca0:	0018      	movs	r0, r3
 800dca2:	f7f5 fc9c 	bl	80035de <assert_failed>
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800dca6:	4b18      	ldr	r3, [pc, #96]	; (800dd08 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800dca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcaa:	2210      	movs	r2, #16
 800dcac:	4393      	bics	r3, r2
 800dcae:	0019      	movs	r1, r3
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	68da      	ldr	r2, [r3, #12]
 800dcb4:	4b14      	ldr	r3, [pc, #80]	; (800dd08 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800dcb6:	430a      	orrs	r2, r1
 800dcb8:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681a      	ldr	r2, [r3, #0]
 800dcbe:	2380      	movs	r3, #128	; 0x80
 800dcc0:	029b      	lsls	r3, r3, #10
 800dcc2:	4013      	ands	r3, r2
 800dcc4:	d016      	beq.n	800dcf4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	691b      	ldr	r3, [r3, #16]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d008      	beq.n	800dce0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	691b      	ldr	r3, [r3, #16]
 800dcd2:	2b80      	cmp	r3, #128	; 0x80
 800dcd4:	d004      	beq.n	800dce0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 800dcd6:	4b0b      	ldr	r3, [pc, #44]	; (800dd04 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800dcd8:	21ea      	movs	r1, #234	; 0xea
 800dcda:	0018      	movs	r0, r3
 800dcdc:	f7f5 fc7f 	bl	80035de <assert_failed>
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800dce0:	4b09      	ldr	r3, [pc, #36]	; (800dd08 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800dce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dce4:	2280      	movs	r2, #128	; 0x80
 800dce6:	4393      	bics	r3, r2
 800dce8:	0019      	movs	r1, r3
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	691a      	ldr	r2, [r3, #16]
 800dcee:	4b06      	ldr	r3, [pc, #24]	; (800dd08 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800dcf0:	430a      	orrs	r2, r1
 800dcf2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800dcf4:	2300      	movs	r3, #0
}
 800dcf6:	0018      	movs	r0, r3
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	b006      	add	sp, #24
 800dcfc:	bd80      	pop	{r7, pc}
 800dcfe:	46c0      	nop			; (mov r8, r8)
 800dd00:	00030021 	.word	0x00030021
 800dd04:	08016fd8 	.word	0x08016fd8
 800dd08:	40021000 	.word	0x40021000
 800dd0c:	40007000 	.word	0x40007000
 800dd10:	fffffcff 	.word	0xfffffcff
 800dd14:	fffeffff 	.word	0xfffeffff
 800dd18:	00001388 	.word	0x00001388
 800dd1c:	efffffff 	.word	0xefffffff

0800dd20 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b082      	sub	sp, #8
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d101      	bne.n	800dd32 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800dd2e:	2301      	movs	r3, #1
 800dd30:	e0df      	b.n	800def2 <HAL_RTC_Init+0x1d2>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	4a71      	ldr	r2, [pc, #452]	; (800defc <HAL_RTC_Init+0x1dc>)
 800dd38:	4293      	cmp	r3, r2
 800dd3a:	d004      	beq.n	800dd46 <HAL_RTC_Init+0x26>
 800dd3c:	4b70      	ldr	r3, [pc, #448]	; (800df00 <HAL_RTC_Init+0x1e0>)
 800dd3e:	21c5      	movs	r1, #197	; 0xc5
 800dd40:	0018      	movs	r0, r3
 800dd42:	f7f5 fc4c 	bl	80035de <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	685b      	ldr	r3, [r3, #4]
 800dd4a:	2b40      	cmp	r3, #64	; 0x40
 800dd4c:	d008      	beq.n	800dd60 <HAL_RTC_Init+0x40>
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	685b      	ldr	r3, [r3, #4]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d004      	beq.n	800dd60 <HAL_RTC_Init+0x40>
 800dd56:	4b6a      	ldr	r3, [pc, #424]	; (800df00 <HAL_RTC_Init+0x1e0>)
 800dd58:	21c6      	movs	r1, #198	; 0xc6
 800dd5a:	0018      	movs	r0, r3
 800dd5c:	f7f5 fc3f 	bl	80035de <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	689b      	ldr	r3, [r3, #8]
 800dd64:	2b7f      	cmp	r3, #127	; 0x7f
 800dd66:	d904      	bls.n	800dd72 <HAL_RTC_Init+0x52>
 800dd68:	4b65      	ldr	r3, [pc, #404]	; (800df00 <HAL_RTC_Init+0x1e0>)
 800dd6a:	21c7      	movs	r1, #199	; 0xc7
 800dd6c:	0018      	movs	r0, r3
 800dd6e:	f7f5 fc36 	bl	80035de <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	68da      	ldr	r2, [r3, #12]
 800dd76:	2380      	movs	r3, #128	; 0x80
 800dd78:	021b      	lsls	r3, r3, #8
 800dd7a:	429a      	cmp	r2, r3
 800dd7c:	d304      	bcc.n	800dd88 <HAL_RTC_Init+0x68>
 800dd7e:	4b60      	ldr	r3, [pc, #384]	; (800df00 <HAL_RTC_Init+0x1e0>)
 800dd80:	21c8      	movs	r1, #200	; 0xc8
 800dd82:	0018      	movs	r0, r3
 800dd84:	f7f5 fc2b 	bl	80035de <assert_failed>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	691b      	ldr	r3, [r3, #16]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d010      	beq.n	800ddb2 <HAL_RTC_Init+0x92>
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	691a      	ldr	r2, [r3, #16]
 800dd94:	2380      	movs	r3, #128	; 0x80
 800dd96:	039b      	lsls	r3, r3, #14
 800dd98:	429a      	cmp	r2, r3
 800dd9a:	d00a      	beq.n	800ddb2 <HAL_RTC_Init+0x92>
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	691a      	ldr	r2, [r3, #16]
 800dda0:	23c0      	movs	r3, #192	; 0xc0
 800dda2:	03db      	lsls	r3, r3, #15
 800dda4:	429a      	cmp	r2, r3
 800dda6:	d004      	beq.n	800ddb2 <HAL_RTC_Init+0x92>
 800dda8:	4b55      	ldr	r3, [pc, #340]	; (800df00 <HAL_RTC_Init+0x1e0>)
 800ddaa:	21c9      	movs	r1, #201	; 0xc9
 800ddac:	0018      	movs	r0, r3
 800ddae:	f7f5 fc16 	bl	80035de <assert_failed>
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	695b      	ldr	r3, [r3, #20]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d00a      	beq.n	800ddd0 <HAL_RTC_Init+0xb0>
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	695a      	ldr	r2, [r3, #20]
 800ddbe:	2380      	movs	r3, #128	; 0x80
 800ddc0:	035b      	lsls	r3, r3, #13
 800ddc2:	429a      	cmp	r2, r3
 800ddc4:	d004      	beq.n	800ddd0 <HAL_RTC_Init+0xb0>
 800ddc6:	4b4e      	ldr	r3, [pc, #312]	; (800df00 <HAL_RTC_Init+0x1e0>)
 800ddc8:	21ca      	movs	r1, #202	; 0xca
 800ddca:	0018      	movs	r0, r3
 800ddcc:	f7f5 fc07 	bl	80035de <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	699b      	ldr	r3, [r3, #24]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d00a      	beq.n	800ddee <HAL_RTC_Init+0xce>
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	699a      	ldr	r2, [r3, #24]
 800dddc:	2380      	movs	r3, #128	; 0x80
 800ddde:	02db      	lsls	r3, r3, #11
 800dde0:	429a      	cmp	r2, r3
 800dde2:	d004      	beq.n	800ddee <HAL_RTC_Init+0xce>
 800dde4:	4b46      	ldr	r3, [pc, #280]	; (800df00 <HAL_RTC_Init+0x1e0>)
 800dde6:	21cb      	movs	r1, #203	; 0xcb
 800dde8:	0018      	movs	r0, r3
 800ddea:	f7f5 fbf8 	bl	80035de <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	7f5b      	ldrb	r3, [r3, #29]
 800ddf2:	b2db      	uxtb	r3, r3
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d106      	bne.n	800de06 <HAL_RTC_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	0018      	movs	r0, r3
 800de02:	f7f5 fcb3 	bl	800376c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	2202      	movs	r2, #2
 800de0a:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	22ca      	movs	r2, #202	; 0xca
 800de12:	625a      	str	r2, [r3, #36]	; 0x24
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	2253      	movs	r2, #83	; 0x53
 800de1a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	0018      	movs	r0, r3
 800de20:	f000 ff59 	bl	800ecd6 <RTC_EnterInitMode>
 800de24:	1e03      	subs	r3, r0, #0
 800de26:	d008      	beq.n	800de3a <HAL_RTC_Init+0x11a>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	22ff      	movs	r2, #255	; 0xff
 800de2e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	2204      	movs	r2, #4
 800de34:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800de36:	2301      	movs	r3, #1
 800de38:	e05b      	b.n	800def2 <HAL_RTC_Init+0x1d2>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	689a      	ldr	r2, [r3, #8]
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	492f      	ldr	r1, [pc, #188]	; (800df04 <HAL_RTC_Init+0x1e4>)
 800de46:	400a      	ands	r2, r1
 800de48:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	6899      	ldr	r1, [r3, #8]
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	685a      	ldr	r2, [r3, #4]
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	691b      	ldr	r3, [r3, #16]
 800de58:	431a      	orrs	r2, r3
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	695b      	ldr	r3, [r3, #20]
 800de5e:	431a      	orrs	r2, r3
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	430a      	orrs	r2, r1
 800de66:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	687a      	ldr	r2, [r7, #4]
 800de6e:	68d2      	ldr	r2, [r2, #12]
 800de70:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	6919      	ldr	r1, [r3, #16]
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	689b      	ldr	r3, [r3, #8]
 800de7c:	041a      	lsls	r2, r3, #16
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	430a      	orrs	r2, r1
 800de84:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	68da      	ldr	r2, [r3, #12]
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	2180      	movs	r1, #128	; 0x80
 800de92:	438a      	bics	r2, r1
 800de94:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	689b      	ldr	r3, [r3, #8]
 800de9c:	2220      	movs	r2, #32
 800de9e:	4013      	ands	r3, r2
 800dea0:	d10e      	bne.n	800dec0 <HAL_RTC_Init+0x1a0>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	0018      	movs	r0, r3
 800dea6:	f000 feed 	bl	800ec84 <HAL_RTC_WaitForSynchro>
 800deaa:	1e03      	subs	r3, r0, #0
 800deac:	d008      	beq.n	800dec0 <HAL_RTC_Init+0x1a0>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	22ff      	movs	r2, #255	; 0xff
 800deb4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	2204      	movs	r2, #4
 800deba:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800debc:	2301      	movs	r3, #1
 800debe:	e018      	b.n	800def2 <HAL_RTC_Init+0x1d2>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	490f      	ldr	r1, [pc, #60]	; (800df08 <HAL_RTC_Init+0x1e8>)
 800decc:	400a      	ands	r2, r1
 800dece:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	699a      	ldr	r2, [r3, #24]
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	430a      	orrs	r2, r1
 800dee0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	22ff      	movs	r2, #255	; 0xff
 800dee8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	2201      	movs	r2, #1
 800deee:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800def0:	2300      	movs	r3, #0
  }
}
 800def2:	0018      	movs	r0, r3
 800def4:	46bd      	mov	sp, r7
 800def6:	b002      	add	sp, #8
 800def8:	bd80      	pop	{r7, pc}
 800defa:	46c0      	nop			; (mov r8, r8)
 800defc:	40002800 	.word	0x40002800
 800df00:	08017014 	.word	0x08017014
 800df04:	ff8fffbf 	.word	0xff8fffbf
 800df08:	fffbffff 	.word	0xfffbffff

0800df0c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800df0c:	b590      	push	{r4, r7, lr}
 800df0e:	b087      	sub	sp, #28
 800df10:	af00      	add	r7, sp, #0
 800df12:	60f8      	str	r0, [r7, #12]
 800df14:	60b9      	str	r1, [r7, #8]
 800df16:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800df18:	2300      	movs	r3, #0
 800df1a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d008      	beq.n	800df34 <HAL_RTC_SetTime+0x28>
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	2b01      	cmp	r3, #1
 800df26:	d005      	beq.n	800df34 <HAL_RTC_SetTime+0x28>
 800df28:	4ab3      	ldr	r2, [pc, #716]	; (800e1f8 <HAL_RTC_SetTime+0x2ec>)
 800df2a:	4bb4      	ldr	r3, [pc, #720]	; (800e1fc <HAL_RTC_SetTime+0x2f0>)
 800df2c:	0011      	movs	r1, r2
 800df2e:	0018      	movs	r0, r3
 800df30:	f7f5 fb55 	bl	80035de <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 800df34:	68bb      	ldr	r3, [r7, #8]
 800df36:	68da      	ldr	r2, [r3, #12]
 800df38:	2380      	movs	r3, #128	; 0x80
 800df3a:	029b      	lsls	r3, r3, #10
 800df3c:	429a      	cmp	r2, r3
 800df3e:	d00f      	beq.n	800df60 <HAL_RTC_SetTime+0x54>
 800df40:	68bb      	ldr	r3, [r7, #8]
 800df42:	68da      	ldr	r2, [r3, #12]
 800df44:	2380      	movs	r3, #128	; 0x80
 800df46:	025b      	lsls	r3, r3, #9
 800df48:	429a      	cmp	r2, r3
 800df4a:	d009      	beq.n	800df60 <HAL_RTC_SetTime+0x54>
 800df4c:	68bb      	ldr	r3, [r7, #8]
 800df4e:	68db      	ldr	r3, [r3, #12]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d005      	beq.n	800df60 <HAL_RTC_SetTime+0x54>
 800df54:	4aaa      	ldr	r2, [pc, #680]	; (800e200 <HAL_RTC_SetTime+0x2f4>)
 800df56:	4ba9      	ldr	r3, [pc, #676]	; (800e1fc <HAL_RTC_SetTime+0x2f0>)
 800df58:	0011      	movs	r1, r2
 800df5a:	0018      	movs	r0, r3
 800df5c:	f7f5 fb3f 	bl	80035de <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 800df60:	68bb      	ldr	r3, [r7, #8]
 800df62:	691b      	ldr	r3, [r3, #16]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d00b      	beq.n	800df80 <HAL_RTC_SetTime+0x74>
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	691a      	ldr	r2, [r3, #16]
 800df6c:	2380      	movs	r3, #128	; 0x80
 800df6e:	02db      	lsls	r3, r3, #11
 800df70:	429a      	cmp	r2, r3
 800df72:	d005      	beq.n	800df80 <HAL_RTC_SetTime+0x74>
 800df74:	4aa3      	ldr	r2, [pc, #652]	; (800e204 <HAL_RTC_SetTime+0x2f8>)
 800df76:	4ba1      	ldr	r3, [pc, #644]	; (800e1fc <HAL_RTC_SetTime+0x2f0>)
 800df78:	0011      	movs	r1, r2
 800df7a:	0018      	movs	r0, r3
 800df7c:	f7f5 fb2f 	bl	80035de <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	7f1b      	ldrb	r3, [r3, #28]
 800df84:	2b01      	cmp	r3, #1
 800df86:	d101      	bne.n	800df8c <HAL_RTC_SetTime+0x80>
 800df88:	2302      	movs	r3, #2
 800df8a:	e130      	b.n	800e1ee <HAL_RTC_SetTime+0x2e2>
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	2201      	movs	r2, #1
 800df90:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	2202      	movs	r2, #2
 800df96:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d161      	bne.n	800e062 <HAL_RTC_SetTime+0x156>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	689b      	ldr	r3, [r3, #8]
 800dfa4:	2240      	movs	r2, #64	; 0x40
 800dfa6:	4013      	ands	r3, r2
 800dfa8:	d01c      	beq.n	800dfe4 <HAL_RTC_SetTime+0xd8>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 800dfaa:	68bb      	ldr	r3, [r7, #8]
 800dfac:	781b      	ldrb	r3, [r3, #0]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d003      	beq.n	800dfba <HAL_RTC_SetTime+0xae>
 800dfb2:	68bb      	ldr	r3, [r7, #8]
 800dfb4:	781b      	ldrb	r3, [r3, #0]
 800dfb6:	2b0c      	cmp	r3, #12
 800dfb8:	d905      	bls.n	800dfc6 <HAL_RTC_SetTime+0xba>
 800dfba:	4a93      	ldr	r2, [pc, #588]	; (800e208 <HAL_RTC_SetTime+0x2fc>)
 800dfbc:	4b8f      	ldr	r3, [pc, #572]	; (800e1fc <HAL_RTC_SetTime+0x2f0>)
 800dfbe:	0011      	movs	r1, r2
 800dfc0:	0018      	movs	r0, r3
 800dfc2:	f7f5 fb0c 	bl	80035de <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 800dfc6:	68bb      	ldr	r3, [r7, #8]
 800dfc8:	78db      	ldrb	r3, [r3, #3]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d018      	beq.n	800e000 <HAL_RTC_SetTime+0xf4>
 800dfce:	68bb      	ldr	r3, [r7, #8]
 800dfd0:	78db      	ldrb	r3, [r3, #3]
 800dfd2:	2b40      	cmp	r3, #64	; 0x40
 800dfd4:	d014      	beq.n	800e000 <HAL_RTC_SetTime+0xf4>
 800dfd6:	4a8d      	ldr	r2, [pc, #564]	; (800e20c <HAL_RTC_SetTime+0x300>)
 800dfd8:	4b88      	ldr	r3, [pc, #544]	; (800e1fc <HAL_RTC_SetTime+0x2f0>)
 800dfda:	0011      	movs	r1, r2
 800dfdc:	0018      	movs	r0, r3
 800dfde:	f7f5 fafe 	bl	80035de <assert_failed>
 800dfe2:	e00d      	b.n	800e000 <HAL_RTC_SetTime+0xf4>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800dfe4:	68bb      	ldr	r3, [r7, #8]
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 800dfea:	68bb      	ldr	r3, [r7, #8]
 800dfec:	781b      	ldrb	r3, [r3, #0]
 800dfee:	2b17      	cmp	r3, #23
 800dff0:	d906      	bls.n	800e000 <HAL_RTC_SetTime+0xf4>
 800dff2:	23b3      	movs	r3, #179	; 0xb3
 800dff4:	009a      	lsls	r2, r3, #2
 800dff6:	4b81      	ldr	r3, [pc, #516]	; (800e1fc <HAL_RTC_SetTime+0x2f0>)
 800dff8:	0011      	movs	r1, r2
 800dffa:	0018      	movs	r0, r3
 800dffc:	f7f5 faef 	bl	80035de <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 800e000:	68bb      	ldr	r3, [r7, #8]
 800e002:	785b      	ldrb	r3, [r3, #1]
 800e004:	2b3b      	cmp	r3, #59	; 0x3b
 800e006:	d905      	bls.n	800e014 <HAL_RTC_SetTime+0x108>
 800e008:	4a81      	ldr	r2, [pc, #516]	; (800e210 <HAL_RTC_SetTime+0x304>)
 800e00a:	4b7c      	ldr	r3, [pc, #496]	; (800e1fc <HAL_RTC_SetTime+0x2f0>)
 800e00c:	0011      	movs	r1, r2
 800e00e:	0018      	movs	r0, r3
 800e010:	f7f5 fae5 	bl	80035de <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 800e014:	68bb      	ldr	r3, [r7, #8]
 800e016:	789b      	ldrb	r3, [r3, #2]
 800e018:	2b3b      	cmp	r3, #59	; 0x3b
 800e01a:	d905      	bls.n	800e028 <HAL_RTC_SetTime+0x11c>
 800e01c:	4a7d      	ldr	r2, [pc, #500]	; (800e214 <HAL_RTC_SetTime+0x308>)
 800e01e:	4b77      	ldr	r3, [pc, #476]	; (800e1fc <HAL_RTC_SetTime+0x2f0>)
 800e020:	0011      	movs	r1, r2
 800e022:	0018      	movs	r0, r3
 800e024:	f7f5 fadb 	bl	80035de <assert_failed>

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800e028:	68bb      	ldr	r3, [r7, #8]
 800e02a:	781b      	ldrb	r3, [r3, #0]
 800e02c:	0018      	movs	r0, r3
 800e02e:	f000 fe7e 	bl	800ed2e <RTC_ByteToBcd2>
 800e032:	0003      	movs	r3, r0
 800e034:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800e036:	68bb      	ldr	r3, [r7, #8]
 800e038:	785b      	ldrb	r3, [r3, #1]
 800e03a:	0018      	movs	r0, r3
 800e03c:	f000 fe77 	bl	800ed2e <RTC_ByteToBcd2>
 800e040:	0003      	movs	r3, r0
 800e042:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800e044:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800e046:	68bb      	ldr	r3, [r7, #8]
 800e048:	789b      	ldrb	r3, [r3, #2]
 800e04a:	0018      	movs	r0, r3
 800e04c:	f000 fe6f 	bl	800ed2e <RTC_ByteToBcd2>
 800e050:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800e052:	0022      	movs	r2, r4
 800e054:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800e056:	68bb      	ldr	r3, [r7, #8]
 800e058:	78db      	ldrb	r3, [r3, #3]
 800e05a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800e05c:	4313      	orrs	r3, r2
 800e05e:	617b      	str	r3, [r7, #20]
 800e060:	e066      	b.n	800e130 <HAL_RTC_SetTime+0x224>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	689b      	ldr	r3, [r3, #8]
 800e068:	2240      	movs	r2, #64	; 0x40
 800e06a:	4013      	ands	r3, r2
 800e06c:	d023      	beq.n	800e0b6 <HAL_RTC_SetTime+0x1aa>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 800e06e:	68bb      	ldr	r3, [r7, #8]
 800e070:	781b      	ldrb	r3, [r3, #0]
 800e072:	0018      	movs	r0, r3
 800e074:	f000 fe7c 	bl	800ed70 <RTC_Bcd2ToByte>
 800e078:	1e03      	subs	r3, r0, #0
 800e07a:	d007      	beq.n	800e08c <HAL_RTC_SetTime+0x180>
 800e07c:	68bb      	ldr	r3, [r7, #8]
 800e07e:	781b      	ldrb	r3, [r3, #0]
 800e080:	0018      	movs	r0, r3
 800e082:	f000 fe75 	bl	800ed70 <RTC_Bcd2ToByte>
 800e086:	0003      	movs	r3, r0
 800e088:	2b0c      	cmp	r3, #12
 800e08a:	d905      	bls.n	800e098 <HAL_RTC_SetTime+0x18c>
 800e08c:	4a62      	ldr	r2, [pc, #392]	; (800e218 <HAL_RTC_SetTime+0x30c>)
 800e08e:	4b5b      	ldr	r3, [pc, #364]	; (800e1fc <HAL_RTC_SetTime+0x2f0>)
 800e090:	0011      	movs	r1, r2
 800e092:	0018      	movs	r0, r3
 800e094:	f7f5 faa3 	bl	80035de <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	78db      	ldrb	r3, [r3, #3]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d01c      	beq.n	800e0da <HAL_RTC_SetTime+0x1ce>
 800e0a0:	68bb      	ldr	r3, [r7, #8]
 800e0a2:	78db      	ldrb	r3, [r3, #3]
 800e0a4:	2b40      	cmp	r3, #64	; 0x40
 800e0a6:	d018      	beq.n	800e0da <HAL_RTC_SetTime+0x1ce>
 800e0a8:	4a5c      	ldr	r2, [pc, #368]	; (800e21c <HAL_RTC_SetTime+0x310>)
 800e0aa:	4b54      	ldr	r3, [pc, #336]	; (800e1fc <HAL_RTC_SetTime+0x2f0>)
 800e0ac:	0011      	movs	r1, r2
 800e0ae:	0018      	movs	r0, r3
 800e0b0:	f7f5 fa95 	bl	80035de <assert_failed>
 800e0b4:	e011      	b.n	800e0da <HAL_RTC_SetTime+0x1ce>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800e0b6:	68bb      	ldr	r3, [r7, #8]
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 800e0bc:	68bb      	ldr	r3, [r7, #8]
 800e0be:	781b      	ldrb	r3, [r3, #0]
 800e0c0:	0018      	movs	r0, r3
 800e0c2:	f000 fe55 	bl	800ed70 <RTC_Bcd2ToByte>
 800e0c6:	0003      	movs	r3, r0
 800e0c8:	2b17      	cmp	r3, #23
 800e0ca:	d906      	bls.n	800e0da <HAL_RTC_SetTime+0x1ce>
 800e0cc:	23b8      	movs	r3, #184	; 0xb8
 800e0ce:	009a      	lsls	r2, r3, #2
 800e0d0:	4b4a      	ldr	r3, [pc, #296]	; (800e1fc <HAL_RTC_SetTime+0x2f0>)
 800e0d2:	0011      	movs	r1, r2
 800e0d4:	0018      	movs	r0, r3
 800e0d6:	f7f5 fa82 	bl	80035de <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	785b      	ldrb	r3, [r3, #1]
 800e0de:	0018      	movs	r0, r3
 800e0e0:	f000 fe46 	bl	800ed70 <RTC_Bcd2ToByte>
 800e0e4:	0003      	movs	r3, r0
 800e0e6:	2b3b      	cmp	r3, #59	; 0x3b
 800e0e8:	d905      	bls.n	800e0f6 <HAL_RTC_SetTime+0x1ea>
 800e0ea:	4a4d      	ldr	r2, [pc, #308]	; (800e220 <HAL_RTC_SetTime+0x314>)
 800e0ec:	4b43      	ldr	r3, [pc, #268]	; (800e1fc <HAL_RTC_SetTime+0x2f0>)
 800e0ee:	0011      	movs	r1, r2
 800e0f0:	0018      	movs	r0, r3
 800e0f2:	f7f5 fa74 	bl	80035de <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 800e0f6:	68bb      	ldr	r3, [r7, #8]
 800e0f8:	789b      	ldrb	r3, [r3, #2]
 800e0fa:	0018      	movs	r0, r3
 800e0fc:	f000 fe38 	bl	800ed70 <RTC_Bcd2ToByte>
 800e100:	0003      	movs	r3, r0
 800e102:	2b3b      	cmp	r3, #59	; 0x3b
 800e104:	d905      	bls.n	800e112 <HAL_RTC_SetTime+0x206>
 800e106:	4a47      	ldr	r2, [pc, #284]	; (800e224 <HAL_RTC_SetTime+0x318>)
 800e108:	4b3c      	ldr	r3, [pc, #240]	; (800e1fc <HAL_RTC_SetTime+0x2f0>)
 800e10a:	0011      	movs	r1, r2
 800e10c:	0018      	movs	r0, r3
 800e10e:	f7f5 fa66 	bl	80035de <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800e112:	68bb      	ldr	r3, [r7, #8]
 800e114:	781b      	ldrb	r3, [r3, #0]
 800e116:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	785b      	ldrb	r3, [r3, #1]
 800e11c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800e11e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800e120:	68ba      	ldr	r2, [r7, #8]
 800e122:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800e124:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800e126:	68bb      	ldr	r3, [r7, #8]
 800e128:	78db      	ldrb	r3, [r3, #3]
 800e12a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800e12c:	4313      	orrs	r3, r2
 800e12e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	22ca      	movs	r2, #202	; 0xca
 800e136:	625a      	str	r2, [r3, #36]	; 0x24
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	2253      	movs	r2, #83	; 0x53
 800e13e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	0018      	movs	r0, r3
 800e144:	f000 fdc7 	bl	800ecd6 <RTC_EnterInitMode>
 800e148:	1e03      	subs	r3, r0, #0
 800e14a:	d00b      	beq.n	800e164 <HAL_RTC_SetTime+0x258>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	22ff      	movs	r2, #255	; 0xff
 800e152:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	2204      	movs	r2, #4
 800e158:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	2200      	movs	r2, #0
 800e15e:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800e160:	2301      	movs	r3, #1
 800e162:	e044      	b.n	800e1ee <HAL_RTC_SetTime+0x2e2>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	697a      	ldr	r2, [r7, #20]
 800e16a:	492f      	ldr	r1, [pc, #188]	; (800e228 <HAL_RTC_SetTime+0x31c>)
 800e16c:	400a      	ands	r2, r1
 800e16e:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	689a      	ldr	r2, [r3, #8]
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	492c      	ldr	r1, [pc, #176]	; (800e22c <HAL_RTC_SetTime+0x320>)
 800e17c:	400a      	ands	r2, r1
 800e17e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	6899      	ldr	r1, [r3, #8]
 800e186:	68bb      	ldr	r3, [r7, #8]
 800e188:	68da      	ldr	r2, [r3, #12]
 800e18a:	68bb      	ldr	r3, [r7, #8]
 800e18c:	691b      	ldr	r3, [r3, #16]
 800e18e:	431a      	orrs	r2, r3
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	430a      	orrs	r2, r1
 800e196:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	68da      	ldr	r2, [r3, #12]
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	2180      	movs	r1, #128	; 0x80
 800e1a4:	438a      	bics	r2, r1
 800e1a6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	689b      	ldr	r3, [r3, #8]
 800e1ae:	2220      	movs	r2, #32
 800e1b0:	4013      	ands	r3, r2
 800e1b2:	d111      	bne.n	800e1d8 <HAL_RTC_SetTime+0x2cc>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	0018      	movs	r0, r3
 800e1b8:	f000 fd64 	bl	800ec84 <HAL_RTC_WaitForSynchro>
 800e1bc:	1e03      	subs	r3, r0, #0
 800e1be:	d00b      	beq.n	800e1d8 <HAL_RTC_SetTime+0x2cc>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	22ff      	movs	r2, #255	; 0xff
 800e1c6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	2204      	movs	r2, #4
 800e1cc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800e1d4:	2301      	movs	r3, #1
 800e1d6:	e00a      	b.n	800e1ee <HAL_RTC_SetTime+0x2e2>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	22ff      	movs	r2, #255	; 0xff
 800e1de:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	2201      	movs	r2, #1
 800e1e4:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800e1ec:	2300      	movs	r3, #0
  }
}
 800e1ee:	0018      	movs	r0, r3
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	b007      	add	sp, #28
 800e1f4:	bd90      	pop	{r4, r7, pc}
 800e1f6:	46c0      	nop			; (mov r8, r8)
 800e1f8:	000002b9 	.word	0x000002b9
 800e1fc:	08017014 	.word	0x08017014
 800e200:	000002ba 	.word	0x000002ba
 800e204:	000002bb 	.word	0x000002bb
 800e208:	000002c6 	.word	0x000002c6
 800e20c:	000002c7 	.word	0x000002c7
 800e210:	000002ce 	.word	0x000002ce
 800e214:	000002cf 	.word	0x000002cf
 800e218:	000002da 	.word	0x000002da
 800e21c:	000002db 	.word	0x000002db
 800e220:	000002e2 	.word	0x000002e2
 800e224:	000002e3 	.word	0x000002e3
 800e228:	007f7f7f 	.word	0x007f7f7f
 800e22c:	fffbffff 	.word	0xfffbffff

0800e230 <HAL_RTC_GetTime>:
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read
  * to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b086      	sub	sp, #24
 800e234:	af00      	add	r7, sp, #0
 800e236:	60f8      	str	r0, [r7, #12]
 800e238:	60b9      	str	r1, [r7, #8]
 800e23a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800e23c:	2300      	movs	r3, #0
 800e23e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d008      	beq.n	800e258 <HAL_RTC_GetTime+0x28>
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	2b01      	cmp	r3, #1
 800e24a:	d005      	beq.n	800e258 <HAL_RTC_GetTime+0x28>
 800e24c:	4a2c      	ldr	r2, [pc, #176]	; (800e300 <HAL_RTC_GetTime+0xd0>)
 800e24e:	4b2d      	ldr	r3, [pc, #180]	; (800e304 <HAL_RTC_GetTime+0xd4>)
 800e250:	0011      	movs	r1, r2
 800e252:	0018      	movs	r0, r3
 800e254:	f7f5 f9c3 	bl	80035de <assert_failed>

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e25e:	68bb      	ldr	r3, [r7, #8]
 800e260:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	691b      	ldr	r3, [r3, #16]
 800e268:	045b      	lsls	r3, r3, #17
 800e26a:	0c5a      	lsrs	r2, r3, #17
 800e26c:	68bb      	ldr	r3, [r7, #8]
 800e26e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	4a24      	ldr	r2, [pc, #144]	; (800e308 <HAL_RTC_GetTime+0xd8>)
 800e278:	4013      	ands	r3, r2
 800e27a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800e27c:	697b      	ldr	r3, [r7, #20]
 800e27e:	0c1b      	lsrs	r3, r3, #16
 800e280:	b2db      	uxtb	r3, r3
 800e282:	223f      	movs	r2, #63	; 0x3f
 800e284:	4013      	ands	r3, r2
 800e286:	b2da      	uxtb	r2, r3
 800e288:	68bb      	ldr	r3, [r7, #8]
 800e28a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800e28c:	697b      	ldr	r3, [r7, #20]
 800e28e:	0a1b      	lsrs	r3, r3, #8
 800e290:	b2db      	uxtb	r3, r3
 800e292:	227f      	movs	r2, #127	; 0x7f
 800e294:	4013      	ands	r3, r2
 800e296:	b2da      	uxtb	r2, r3
 800e298:	68bb      	ldr	r3, [r7, #8]
 800e29a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800e29c:	697b      	ldr	r3, [r7, #20]
 800e29e:	b2db      	uxtb	r3, r3
 800e2a0:	227f      	movs	r2, #127	; 0x7f
 800e2a2:	4013      	ands	r3, r2
 800e2a4:	b2da      	uxtb	r2, r3
 800e2a6:	68bb      	ldr	r3, [r7, #8]
 800e2a8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800e2aa:	697b      	ldr	r3, [r7, #20]
 800e2ac:	0c1b      	lsrs	r3, r3, #16
 800e2ae:	b2db      	uxtb	r3, r3
 800e2b0:	2240      	movs	r2, #64	; 0x40
 800e2b2:	4013      	ands	r3, r2
 800e2b4:	b2da      	uxtb	r2, r3
 800e2b6:	68bb      	ldr	r3, [r7, #8]
 800e2b8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d11a      	bne.n	800e2f6 <HAL_RTC_GetTime+0xc6>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800e2c0:	68bb      	ldr	r3, [r7, #8]
 800e2c2:	781b      	ldrb	r3, [r3, #0]
 800e2c4:	0018      	movs	r0, r3
 800e2c6:	f000 fd53 	bl	800ed70 <RTC_Bcd2ToByte>
 800e2ca:	0003      	movs	r3, r0
 800e2cc:	001a      	movs	r2, r3
 800e2ce:	68bb      	ldr	r3, [r7, #8]
 800e2d0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800e2d2:	68bb      	ldr	r3, [r7, #8]
 800e2d4:	785b      	ldrb	r3, [r3, #1]
 800e2d6:	0018      	movs	r0, r3
 800e2d8:	f000 fd4a 	bl	800ed70 <RTC_Bcd2ToByte>
 800e2dc:	0003      	movs	r3, r0
 800e2de:	001a      	movs	r2, r3
 800e2e0:	68bb      	ldr	r3, [r7, #8]
 800e2e2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800e2e4:	68bb      	ldr	r3, [r7, #8]
 800e2e6:	789b      	ldrb	r3, [r3, #2]
 800e2e8:	0018      	movs	r0, r3
 800e2ea:	f000 fd41 	bl	800ed70 <RTC_Bcd2ToByte>
 800e2ee:	0003      	movs	r3, r0
 800e2f0:	001a      	movs	r2, r3
 800e2f2:	68bb      	ldr	r3, [r7, #8]
 800e2f4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800e2f6:	2300      	movs	r3, #0
}
 800e2f8:	0018      	movs	r0, r3
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	b006      	add	sp, #24
 800e2fe:	bd80      	pop	{r7, pc}
 800e300:	0000033f 	.word	0x0000033f
 800e304:	08017014 	.word	0x08017014
 800e308:	007f7f7f 	.word	0x007f7f7f

0800e30c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800e30c:	b590      	push	{r4, r7, lr}
 800e30e:	b087      	sub	sp, #28
 800e310:	af00      	add	r7, sp, #0
 800e312:	60f8      	str	r0, [r7, #12]
 800e314:	60b9      	str	r1, [r7, #8]
 800e316:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800e318:	2300      	movs	r3, #0
 800e31a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d008      	beq.n	800e334 <HAL_RTC_SetDate+0x28>
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	2b01      	cmp	r3, #1
 800e326:	d005      	beq.n	800e334 <HAL_RTC_SetDate+0x28>
 800e328:	4a91      	ldr	r2, [pc, #580]	; (800e570 <HAL_RTC_SetDate+0x264>)
 800e32a:	4b92      	ldr	r3, [pc, #584]	; (800e574 <HAL_RTC_SetDate+0x268>)
 800e32c:	0011      	movs	r1, r2
 800e32e:	0018      	movs	r0, r3
 800e330:	f7f5 f955 	bl	80035de <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	7f1b      	ldrb	r3, [r3, #28]
 800e338:	2b01      	cmp	r3, #1
 800e33a:	d101      	bne.n	800e340 <HAL_RTC_SetDate+0x34>
 800e33c:	2302      	movs	r3, #2
 800e33e:	e113      	b.n	800e568 <HAL_RTC_SetDate+0x25c>
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	2201      	movs	r2, #1
 800e344:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	2202      	movs	r2, #2
 800e34a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d10e      	bne.n	800e370 <HAL_RTC_SetDate+0x64>
 800e352:	68bb      	ldr	r3, [r7, #8]
 800e354:	785b      	ldrb	r3, [r3, #1]
 800e356:	001a      	movs	r2, r3
 800e358:	2310      	movs	r3, #16
 800e35a:	4013      	ands	r3, r2
 800e35c:	d008      	beq.n	800e370 <HAL_RTC_SetDate+0x64>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800e35e:	68bb      	ldr	r3, [r7, #8]
 800e360:	785b      	ldrb	r3, [r3, #1]
 800e362:	2210      	movs	r2, #16
 800e364:	4393      	bics	r3, r2
 800e366:	b2db      	uxtb	r3, r3
 800e368:	330a      	adds	r3, #10
 800e36a:	b2da      	uxtb	r2, r3
 800e36c:	68bb      	ldr	r3, [r7, #8]
 800e36e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 800e370:	68bb      	ldr	r3, [r7, #8]
 800e372:	781b      	ldrb	r3, [r3, #0]
 800e374:	2b01      	cmp	r3, #1
 800e376:	d01d      	beq.n	800e3b4 <HAL_RTC_SetDate+0xa8>
 800e378:	68bb      	ldr	r3, [r7, #8]
 800e37a:	781b      	ldrb	r3, [r3, #0]
 800e37c:	2b02      	cmp	r3, #2
 800e37e:	d019      	beq.n	800e3b4 <HAL_RTC_SetDate+0xa8>
 800e380:	68bb      	ldr	r3, [r7, #8]
 800e382:	781b      	ldrb	r3, [r3, #0]
 800e384:	2b03      	cmp	r3, #3
 800e386:	d015      	beq.n	800e3b4 <HAL_RTC_SetDate+0xa8>
 800e388:	68bb      	ldr	r3, [r7, #8]
 800e38a:	781b      	ldrb	r3, [r3, #0]
 800e38c:	2b04      	cmp	r3, #4
 800e38e:	d011      	beq.n	800e3b4 <HAL_RTC_SetDate+0xa8>
 800e390:	68bb      	ldr	r3, [r7, #8]
 800e392:	781b      	ldrb	r3, [r3, #0]
 800e394:	2b05      	cmp	r3, #5
 800e396:	d00d      	beq.n	800e3b4 <HAL_RTC_SetDate+0xa8>
 800e398:	68bb      	ldr	r3, [r7, #8]
 800e39a:	781b      	ldrb	r3, [r3, #0]
 800e39c:	2b06      	cmp	r3, #6
 800e39e:	d009      	beq.n	800e3b4 <HAL_RTC_SetDate+0xa8>
 800e3a0:	68bb      	ldr	r3, [r7, #8]
 800e3a2:	781b      	ldrb	r3, [r3, #0]
 800e3a4:	2b07      	cmp	r3, #7
 800e3a6:	d005      	beq.n	800e3b4 <HAL_RTC_SetDate+0xa8>
 800e3a8:	4a73      	ldr	r2, [pc, #460]	; (800e578 <HAL_RTC_SetDate+0x26c>)
 800e3aa:	4b72      	ldr	r3, [pc, #456]	; (800e574 <HAL_RTC_SetDate+0x268>)
 800e3ac:	0011      	movs	r1, r2
 800e3ae:	0018      	movs	r0, r3
 800e3b0:	f7f5 f915 	bl	80035de <assert_failed>

  if (Format == RTC_FORMAT_BIN)
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d143      	bne.n	800e442 <HAL_RTC_SetDate+0x136>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 800e3ba:	68bb      	ldr	r3, [r7, #8]
 800e3bc:	78db      	ldrb	r3, [r3, #3]
 800e3be:	2b63      	cmp	r3, #99	; 0x63
 800e3c0:	d905      	bls.n	800e3ce <HAL_RTC_SetDate+0xc2>
 800e3c2:	4a6e      	ldr	r2, [pc, #440]	; (800e57c <HAL_RTC_SetDate+0x270>)
 800e3c4:	4b6b      	ldr	r3, [pc, #428]	; (800e574 <HAL_RTC_SetDate+0x268>)
 800e3c6:	0011      	movs	r1, r2
 800e3c8:	0018      	movs	r0, r3
 800e3ca:	f7f5 f908 	bl	80035de <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 800e3ce:	68bb      	ldr	r3, [r7, #8]
 800e3d0:	785b      	ldrb	r3, [r3, #1]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d003      	beq.n	800e3de <HAL_RTC_SetDate+0xd2>
 800e3d6:	68bb      	ldr	r3, [r7, #8]
 800e3d8:	785b      	ldrb	r3, [r3, #1]
 800e3da:	2b0c      	cmp	r3, #12
 800e3dc:	d906      	bls.n	800e3ec <HAL_RTC_SetDate+0xe0>
 800e3de:	23df      	movs	r3, #223	; 0xdf
 800e3e0:	009a      	lsls	r2, r3, #2
 800e3e2:	4b64      	ldr	r3, [pc, #400]	; (800e574 <HAL_RTC_SetDate+0x268>)
 800e3e4:	0011      	movs	r1, r2
 800e3e6:	0018      	movs	r0, r3
 800e3e8:	f7f5 f8f9 	bl	80035de <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 800e3ec:	68bb      	ldr	r3, [r7, #8]
 800e3ee:	789b      	ldrb	r3, [r3, #2]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d003      	beq.n	800e3fc <HAL_RTC_SetDate+0xf0>
 800e3f4:	68bb      	ldr	r3, [r7, #8]
 800e3f6:	789b      	ldrb	r3, [r3, #2]
 800e3f8:	2b1f      	cmp	r3, #31
 800e3fa:	d905      	bls.n	800e408 <HAL_RTC_SetDate+0xfc>
 800e3fc:	4a60      	ldr	r2, [pc, #384]	; (800e580 <HAL_RTC_SetDate+0x274>)
 800e3fe:	4b5d      	ldr	r3, [pc, #372]	; (800e574 <HAL_RTC_SetDate+0x268>)
 800e400:	0011      	movs	r1, r2
 800e402:	0018      	movs	r0, r3
 800e404:	f7f5 f8eb 	bl	80035de <assert_failed>

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800e408:	68bb      	ldr	r3, [r7, #8]
 800e40a:	78db      	ldrb	r3, [r3, #3]
 800e40c:	0018      	movs	r0, r3
 800e40e:	f000 fc8e 	bl	800ed2e <RTC_ByteToBcd2>
 800e412:	0003      	movs	r3, r0
 800e414:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800e416:	68bb      	ldr	r3, [r7, #8]
 800e418:	785b      	ldrb	r3, [r3, #1]
 800e41a:	0018      	movs	r0, r3
 800e41c:	f000 fc87 	bl	800ed2e <RTC_ByteToBcd2>
 800e420:	0003      	movs	r3, r0
 800e422:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800e424:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800e426:	68bb      	ldr	r3, [r7, #8]
 800e428:	789b      	ldrb	r3, [r3, #2]
 800e42a:	0018      	movs	r0, r3
 800e42c:	f000 fc7f 	bl	800ed2e <RTC_ByteToBcd2>
 800e430:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800e432:	0022      	movs	r2, r4
 800e434:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800e436:	68bb      	ldr	r3, [r7, #8]
 800e438:	781b      	ldrb	r3, [r3, #0]
 800e43a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800e43c:	4313      	orrs	r3, r2
 800e43e:	617b      	str	r3, [r7, #20]
 800e440:	e047      	b.n	800e4d2 <HAL_RTC_SetDate+0x1c6>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 800e442:	68bb      	ldr	r3, [r7, #8]
 800e444:	78db      	ldrb	r3, [r3, #3]
 800e446:	0018      	movs	r0, r3
 800e448:	f000 fc92 	bl	800ed70 <RTC_Bcd2ToByte>
 800e44c:	0003      	movs	r3, r0
 800e44e:	2b63      	cmp	r3, #99	; 0x63
 800e450:	d905      	bls.n	800e45e <HAL_RTC_SetDate+0x152>
 800e452:	4a4c      	ldr	r2, [pc, #304]	; (800e584 <HAL_RTC_SetDate+0x278>)
 800e454:	4b47      	ldr	r3, [pc, #284]	; (800e574 <HAL_RTC_SetDate+0x268>)
 800e456:	0011      	movs	r1, r2
 800e458:	0018      	movs	r0, r3
 800e45a:	f7f5 f8c0 	bl	80035de <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	785b      	ldrb	r3, [r3, #1]
 800e462:	0018      	movs	r0, r3
 800e464:	f000 fc84 	bl	800ed70 <RTC_Bcd2ToByte>
 800e468:	1e03      	subs	r3, r0, #0
 800e46a:	d007      	beq.n	800e47c <HAL_RTC_SetDate+0x170>
 800e46c:	68bb      	ldr	r3, [r7, #8]
 800e46e:	785b      	ldrb	r3, [r3, #1]
 800e470:	0018      	movs	r0, r3
 800e472:	f000 fc7d 	bl	800ed70 <RTC_Bcd2ToByte>
 800e476:	0003      	movs	r3, r0
 800e478:	2b0c      	cmp	r3, #12
 800e47a:	d905      	bls.n	800e488 <HAL_RTC_SetDate+0x17c>
 800e47c:	4a42      	ldr	r2, [pc, #264]	; (800e588 <HAL_RTC_SetDate+0x27c>)
 800e47e:	4b3d      	ldr	r3, [pc, #244]	; (800e574 <HAL_RTC_SetDate+0x268>)
 800e480:	0011      	movs	r1, r2
 800e482:	0018      	movs	r0, r3
 800e484:	f7f5 f8ab 	bl	80035de <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 800e488:	68bb      	ldr	r3, [r7, #8]
 800e48a:	789b      	ldrb	r3, [r3, #2]
 800e48c:	0018      	movs	r0, r3
 800e48e:	f000 fc6f 	bl	800ed70 <RTC_Bcd2ToByte>
 800e492:	1e03      	subs	r3, r0, #0
 800e494:	d007      	beq.n	800e4a6 <HAL_RTC_SetDate+0x19a>
 800e496:	68bb      	ldr	r3, [r7, #8]
 800e498:	789b      	ldrb	r3, [r3, #2]
 800e49a:	0018      	movs	r0, r3
 800e49c:	f000 fc68 	bl	800ed70 <RTC_Bcd2ToByte>
 800e4a0:	0003      	movs	r3, r0
 800e4a2:	2b1f      	cmp	r3, #31
 800e4a4:	d906      	bls.n	800e4b4 <HAL_RTC_SetDate+0x1a8>
 800e4a6:	23e2      	movs	r3, #226	; 0xe2
 800e4a8:	009a      	lsls	r2, r3, #2
 800e4aa:	4b32      	ldr	r3, [pc, #200]	; (800e574 <HAL_RTC_SetDate+0x268>)
 800e4ac:	0011      	movs	r1, r2
 800e4ae:	0018      	movs	r0, r3
 800e4b0:	f7f5 f895 	bl	80035de <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800e4b4:	68bb      	ldr	r3, [r7, #8]
 800e4b6:	78db      	ldrb	r3, [r3, #3]
 800e4b8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800e4ba:	68bb      	ldr	r3, [r7, #8]
 800e4bc:	785b      	ldrb	r3, [r3, #1]
 800e4be:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800e4c0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800e4c2:	68ba      	ldr	r2, [r7, #8]
 800e4c4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800e4c6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800e4c8:	68bb      	ldr	r3, [r7, #8]
 800e4ca:	781b      	ldrb	r3, [r3, #0]
 800e4cc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800e4ce:	4313      	orrs	r3, r2
 800e4d0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	22ca      	movs	r2, #202	; 0xca
 800e4d8:	625a      	str	r2, [r3, #36]	; 0x24
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	2253      	movs	r2, #83	; 0x53
 800e4e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	0018      	movs	r0, r3
 800e4e6:	f000 fbf6 	bl	800ecd6 <RTC_EnterInitMode>
 800e4ea:	1e03      	subs	r3, r0, #0
 800e4ec:	d00b      	beq.n	800e506 <HAL_RTC_SetDate+0x1fa>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	22ff      	movs	r2, #255	; 0xff
 800e4f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	2204      	movs	r2, #4
 800e4fa:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	2200      	movs	r2, #0
 800e500:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800e502:	2301      	movs	r3, #1
 800e504:	e030      	b.n	800e568 <HAL_RTC_SetDate+0x25c>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	697a      	ldr	r2, [r7, #20]
 800e50c:	491f      	ldr	r1, [pc, #124]	; (800e58c <HAL_RTC_SetDate+0x280>)
 800e50e:	400a      	ands	r2, r1
 800e510:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	68da      	ldr	r2, [r3, #12]
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	2180      	movs	r1, #128	; 0x80
 800e51e:	438a      	bics	r2, r1
 800e520:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	689b      	ldr	r3, [r3, #8]
 800e528:	2220      	movs	r2, #32
 800e52a:	4013      	ands	r3, r2
 800e52c:	d111      	bne.n	800e552 <HAL_RTC_SetDate+0x246>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	0018      	movs	r0, r3
 800e532:	f000 fba7 	bl	800ec84 <HAL_RTC_WaitForSynchro>
 800e536:	1e03      	subs	r3, r0, #0
 800e538:	d00b      	beq.n	800e552 <HAL_RTC_SetDate+0x246>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	22ff      	movs	r2, #255	; 0xff
 800e540:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	2204      	movs	r2, #4
 800e546:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	2200      	movs	r2, #0
 800e54c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800e54e:	2301      	movs	r3, #1
 800e550:	e00a      	b.n	800e568 <HAL_RTC_SetDate+0x25c>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	22ff      	movs	r2, #255	; 0xff
 800e558:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	2201      	movs	r2, #1
 800e55e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	2200      	movs	r2, #0
 800e564:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800e566:	2300      	movs	r3, #0
  }
}
 800e568:	0018      	movs	r0, r3
 800e56a:	46bd      	mov	sp, r7
 800e56c:	b007      	add	sp, #28
 800e56e:	bd90      	pop	{r4, r7, pc}
 800e570:	0000036b 	.word	0x0000036b
 800e574:	08017014 	.word	0x08017014
 800e578:	00000377 	.word	0x00000377
 800e57c:	0000037b 	.word	0x0000037b
 800e580:	0000037d 	.word	0x0000037d
 800e584:	00000386 	.word	0x00000386
 800e588:	00000387 	.word	0x00000387
 800e58c:	00ffff3f 	.word	0x00ffff3f

0800e590 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b086      	sub	sp, #24
 800e594:	af00      	add	r7, sp, #0
 800e596:	60f8      	str	r0, [r7, #12]
 800e598:	60b9      	str	r1, [r7, #8]
 800e59a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800e59c:	2300      	movs	r3, #0
 800e59e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d009      	beq.n	800e5ba <HAL_RTC_GetDate+0x2a>
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	2b01      	cmp	r3, #1
 800e5aa:	d006      	beq.n	800e5ba <HAL_RTC_GetDate+0x2a>
 800e5ac:	23f6      	movs	r3, #246	; 0xf6
 800e5ae:	009a      	lsls	r2, r3, #2
 800e5b0:	4b24      	ldr	r3, [pc, #144]	; (800e644 <HAL_RTC_GetDate+0xb4>)
 800e5b2:	0011      	movs	r1, r2
 800e5b4:	0018      	movs	r0, r3
 800e5b6:	f7f5 f812 	bl	80035de <assert_failed>

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	685b      	ldr	r3, [r3, #4]
 800e5c0:	4a21      	ldr	r2, [pc, #132]	; (800e648 <HAL_RTC_GetDate+0xb8>)
 800e5c2:	4013      	ands	r3, r2
 800e5c4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800e5c6:	697b      	ldr	r3, [r7, #20]
 800e5c8:	0c1b      	lsrs	r3, r3, #16
 800e5ca:	b2da      	uxtb	r2, r3
 800e5cc:	68bb      	ldr	r3, [r7, #8]
 800e5ce:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800e5d0:	697b      	ldr	r3, [r7, #20]
 800e5d2:	0a1b      	lsrs	r3, r3, #8
 800e5d4:	b2db      	uxtb	r3, r3
 800e5d6:	221f      	movs	r2, #31
 800e5d8:	4013      	ands	r3, r2
 800e5da:	b2da      	uxtb	r2, r3
 800e5dc:	68bb      	ldr	r3, [r7, #8]
 800e5de:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800e5e0:	697b      	ldr	r3, [r7, #20]
 800e5e2:	b2db      	uxtb	r3, r3
 800e5e4:	223f      	movs	r2, #63	; 0x3f
 800e5e6:	4013      	ands	r3, r2
 800e5e8:	b2da      	uxtb	r2, r3
 800e5ea:	68bb      	ldr	r3, [r7, #8]
 800e5ec:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800e5ee:	697b      	ldr	r3, [r7, #20]
 800e5f0:	0b5b      	lsrs	r3, r3, #13
 800e5f2:	b2db      	uxtb	r3, r3
 800e5f4:	2207      	movs	r2, #7
 800e5f6:	4013      	ands	r3, r2
 800e5f8:	b2da      	uxtb	r2, r3
 800e5fa:	68bb      	ldr	r3, [r7, #8]
 800e5fc:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d11a      	bne.n	800e63a <HAL_RTC_GetDate+0xaa>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800e604:	68bb      	ldr	r3, [r7, #8]
 800e606:	78db      	ldrb	r3, [r3, #3]
 800e608:	0018      	movs	r0, r3
 800e60a:	f000 fbb1 	bl	800ed70 <RTC_Bcd2ToByte>
 800e60e:	0003      	movs	r3, r0
 800e610:	001a      	movs	r2, r3
 800e612:	68bb      	ldr	r3, [r7, #8]
 800e614:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800e616:	68bb      	ldr	r3, [r7, #8]
 800e618:	785b      	ldrb	r3, [r3, #1]
 800e61a:	0018      	movs	r0, r3
 800e61c:	f000 fba8 	bl	800ed70 <RTC_Bcd2ToByte>
 800e620:	0003      	movs	r3, r0
 800e622:	001a      	movs	r2, r3
 800e624:	68bb      	ldr	r3, [r7, #8]
 800e626:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800e628:	68bb      	ldr	r3, [r7, #8]
 800e62a:	789b      	ldrb	r3, [r3, #2]
 800e62c:	0018      	movs	r0, r3
 800e62e:	f000 fb9f 	bl	800ed70 <RTC_Bcd2ToByte>
 800e632:	0003      	movs	r3, r0
 800e634:	001a      	movs	r2, r3
 800e636:	68bb      	ldr	r3, [r7, #8]
 800e638:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800e63a:	2300      	movs	r3, #0
}
 800e63c:	0018      	movs	r0, r3
 800e63e:	46bd      	mov	sp, r7
 800e640:	b006      	add	sp, #24
 800e642:	bd80      	pop	{r7, pc}
 800e644:	08017014 	.word	0x08017014
 800e648:	00ffff3f 	.word	0x00ffff3f

0800e64c <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800e64c:	b590      	push	{r4, r7, lr}
 800e64e:	b089      	sub	sp, #36	; 0x24
 800e650:	af00      	add	r7, sp, #0
 800e652:	60f8      	str	r0, [r7, #12]
 800e654:	60b9      	str	r1, [r7, #8]
 800e656:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800e658:	2300      	movs	r3, #0
 800e65a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 800e65c:	2300      	movs	r3, #0
 800e65e:	61fb      	str	r3, [r7, #28]
 800e660:	2300      	movs	r3, #0
 800e662:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d008      	beq.n	800e67c <HAL_RTC_SetAlarm_IT+0x30>
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	2b01      	cmp	r3, #1
 800e66e:	d005      	beq.n	800e67c <HAL_RTC_SetAlarm_IT+0x30>
 800e670:	4ac3      	ldr	r2, [pc, #780]	; (800e980 <HAL_RTC_SetAlarm_IT+0x334>)
 800e672:	4bc4      	ldr	r3, [pc, #784]	; (800e984 <HAL_RTC_SetAlarm_IT+0x338>)
 800e674:	0011      	movs	r1, r2
 800e676:	0018      	movs	r0, r3
 800e678:	f7f4 ffb1 	bl	80035de <assert_failed>
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));
 800e67c:	68bb      	ldr	r3, [r7, #8]
 800e67e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e680:	2380      	movs	r3, #128	; 0x80
 800e682:	005b      	lsls	r3, r3, #1
 800e684:	429a      	cmp	r2, r3
 800e686:	d005      	beq.n	800e694 <HAL_RTC_SetAlarm_IT+0x48>
 800e688:	4abf      	ldr	r2, [pc, #764]	; (800e988 <HAL_RTC_SetAlarm_IT+0x33c>)
 800e68a:	4bbe      	ldr	r3, [pc, #760]	; (800e984 <HAL_RTC_SetAlarm_IT+0x338>)
 800e68c:	0011      	movs	r1, r2
 800e68e:	0018      	movs	r0, r3
 800e690:	f7f4 ffa5 	bl	80035de <assert_failed>
  assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
 800e694:	68bb      	ldr	r3, [r7, #8]
 800e696:	695b      	ldr	r3, [r3, #20]
 800e698:	4abc      	ldr	r2, [pc, #752]	; (800e98c <HAL_RTC_SetAlarm_IT+0x340>)
 800e69a:	4013      	ands	r3, r2
 800e69c:	d005      	beq.n	800e6aa <HAL_RTC_SetAlarm_IT+0x5e>
 800e69e:	4abc      	ldr	r2, [pc, #752]	; (800e990 <HAL_RTC_SetAlarm_IT+0x344>)
 800e6a0:	4bb8      	ldr	r3, [pc, #736]	; (800e984 <HAL_RTC_SetAlarm_IT+0x338>)
 800e6a2:	0011      	movs	r1, r2
 800e6a4:	0018      	movs	r0, r3
 800e6a6:	f7f4 ff9a 	bl	80035de <assert_failed>
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
 800e6aa:	68bb      	ldr	r3, [r7, #8]
 800e6ac:	69db      	ldr	r3, [r3, #28]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d00b      	beq.n	800e6ca <HAL_RTC_SetAlarm_IT+0x7e>
 800e6b2:	68bb      	ldr	r3, [r7, #8]
 800e6b4:	69da      	ldr	r2, [r3, #28]
 800e6b6:	2380      	movs	r3, #128	; 0x80
 800e6b8:	05db      	lsls	r3, r3, #23
 800e6ba:	429a      	cmp	r2, r3
 800e6bc:	d005      	beq.n	800e6ca <HAL_RTC_SetAlarm_IT+0x7e>
 800e6be:	4ab5      	ldr	r2, [pc, #724]	; (800e994 <HAL_RTC_SetAlarm_IT+0x348>)
 800e6c0:	4bb0      	ldr	r3, [pc, #704]	; (800e984 <HAL_RTC_SetAlarm_IT+0x338>)
 800e6c2:	0011      	movs	r1, r2
 800e6c4:	0018      	movs	r0, r3
 800e6c6:	f7f4 ff8a 	bl	80035de <assert_failed>
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
 800e6ca:	68bb      	ldr	r3, [r7, #8]
 800e6cc:	685a      	ldr	r2, [r3, #4]
 800e6ce:	2380      	movs	r3, #128	; 0x80
 800e6d0:	021b      	lsls	r3, r3, #8
 800e6d2:	429a      	cmp	r2, r3
 800e6d4:	d305      	bcc.n	800e6e2 <HAL_RTC_SetAlarm_IT+0x96>
 800e6d6:	4ab0      	ldr	r2, [pc, #704]	; (800e998 <HAL_RTC_SetAlarm_IT+0x34c>)
 800e6d8:	4baa      	ldr	r3, [pc, #680]	; (800e984 <HAL_RTC_SetAlarm_IT+0x338>)
 800e6da:	0011      	movs	r1, r2
 800e6dc:	0018      	movs	r0, r3
 800e6de:	f7f4 ff7e 	bl	80035de <assert_failed>
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
 800e6e2:	68bb      	ldr	r3, [r7, #8]
 800e6e4:	699b      	ldr	r3, [r3, #24]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d05f      	beq.n	800e7aa <HAL_RTC_SetAlarm_IT+0x15e>
 800e6ea:	68bb      	ldr	r3, [r7, #8]
 800e6ec:	699a      	ldr	r2, [r3, #24]
 800e6ee:	2380      	movs	r3, #128	; 0x80
 800e6f0:	045b      	lsls	r3, r3, #17
 800e6f2:	429a      	cmp	r2, r3
 800e6f4:	d059      	beq.n	800e7aa <HAL_RTC_SetAlarm_IT+0x15e>
 800e6f6:	68bb      	ldr	r3, [r7, #8]
 800e6f8:	699a      	ldr	r2, [r3, #24]
 800e6fa:	2380      	movs	r3, #128	; 0x80
 800e6fc:	049b      	lsls	r3, r3, #18
 800e6fe:	429a      	cmp	r2, r3
 800e700:	d053      	beq.n	800e7aa <HAL_RTC_SetAlarm_IT+0x15e>
 800e702:	68bb      	ldr	r3, [r7, #8]
 800e704:	699a      	ldr	r2, [r3, #24]
 800e706:	23c0      	movs	r3, #192	; 0xc0
 800e708:	049b      	lsls	r3, r3, #18
 800e70a:	429a      	cmp	r2, r3
 800e70c:	d04d      	beq.n	800e7aa <HAL_RTC_SetAlarm_IT+0x15e>
 800e70e:	68bb      	ldr	r3, [r7, #8]
 800e710:	699a      	ldr	r2, [r3, #24]
 800e712:	2380      	movs	r3, #128	; 0x80
 800e714:	04db      	lsls	r3, r3, #19
 800e716:	429a      	cmp	r2, r3
 800e718:	d047      	beq.n	800e7aa <HAL_RTC_SetAlarm_IT+0x15e>
 800e71a:	68bb      	ldr	r3, [r7, #8]
 800e71c:	699a      	ldr	r2, [r3, #24]
 800e71e:	23a0      	movs	r3, #160	; 0xa0
 800e720:	04db      	lsls	r3, r3, #19
 800e722:	429a      	cmp	r2, r3
 800e724:	d041      	beq.n	800e7aa <HAL_RTC_SetAlarm_IT+0x15e>
 800e726:	68bb      	ldr	r3, [r7, #8]
 800e728:	699a      	ldr	r2, [r3, #24]
 800e72a:	23c0      	movs	r3, #192	; 0xc0
 800e72c:	04db      	lsls	r3, r3, #19
 800e72e:	429a      	cmp	r2, r3
 800e730:	d03b      	beq.n	800e7aa <HAL_RTC_SetAlarm_IT+0x15e>
 800e732:	68bb      	ldr	r3, [r7, #8]
 800e734:	699a      	ldr	r2, [r3, #24]
 800e736:	23e0      	movs	r3, #224	; 0xe0
 800e738:	04db      	lsls	r3, r3, #19
 800e73a:	429a      	cmp	r2, r3
 800e73c:	d035      	beq.n	800e7aa <HAL_RTC_SetAlarm_IT+0x15e>
 800e73e:	68bb      	ldr	r3, [r7, #8]
 800e740:	699a      	ldr	r2, [r3, #24]
 800e742:	2380      	movs	r3, #128	; 0x80
 800e744:	051b      	lsls	r3, r3, #20
 800e746:	429a      	cmp	r2, r3
 800e748:	d02f      	beq.n	800e7aa <HAL_RTC_SetAlarm_IT+0x15e>
 800e74a:	68bb      	ldr	r3, [r7, #8]
 800e74c:	699a      	ldr	r2, [r3, #24]
 800e74e:	2390      	movs	r3, #144	; 0x90
 800e750:	051b      	lsls	r3, r3, #20
 800e752:	429a      	cmp	r2, r3
 800e754:	d029      	beq.n	800e7aa <HAL_RTC_SetAlarm_IT+0x15e>
 800e756:	68bb      	ldr	r3, [r7, #8]
 800e758:	699a      	ldr	r2, [r3, #24]
 800e75a:	23a0      	movs	r3, #160	; 0xa0
 800e75c:	051b      	lsls	r3, r3, #20
 800e75e:	429a      	cmp	r2, r3
 800e760:	d023      	beq.n	800e7aa <HAL_RTC_SetAlarm_IT+0x15e>
 800e762:	68bb      	ldr	r3, [r7, #8]
 800e764:	699a      	ldr	r2, [r3, #24]
 800e766:	23b0      	movs	r3, #176	; 0xb0
 800e768:	051b      	lsls	r3, r3, #20
 800e76a:	429a      	cmp	r2, r3
 800e76c:	d01d      	beq.n	800e7aa <HAL_RTC_SetAlarm_IT+0x15e>
 800e76e:	68bb      	ldr	r3, [r7, #8]
 800e770:	699a      	ldr	r2, [r3, #24]
 800e772:	23c0      	movs	r3, #192	; 0xc0
 800e774:	051b      	lsls	r3, r3, #20
 800e776:	429a      	cmp	r2, r3
 800e778:	d017      	beq.n	800e7aa <HAL_RTC_SetAlarm_IT+0x15e>
 800e77a:	68bb      	ldr	r3, [r7, #8]
 800e77c:	699a      	ldr	r2, [r3, #24]
 800e77e:	23d0      	movs	r3, #208	; 0xd0
 800e780:	051b      	lsls	r3, r3, #20
 800e782:	429a      	cmp	r2, r3
 800e784:	d011      	beq.n	800e7aa <HAL_RTC_SetAlarm_IT+0x15e>
 800e786:	68bb      	ldr	r3, [r7, #8]
 800e788:	699a      	ldr	r2, [r3, #24]
 800e78a:	23e0      	movs	r3, #224	; 0xe0
 800e78c:	051b      	lsls	r3, r3, #20
 800e78e:	429a      	cmp	r2, r3
 800e790:	d00b      	beq.n	800e7aa <HAL_RTC_SetAlarm_IT+0x15e>
 800e792:	68bb      	ldr	r3, [r7, #8]
 800e794:	699a      	ldr	r2, [r3, #24]
 800e796:	23f0      	movs	r3, #240	; 0xf0
 800e798:	051b      	lsls	r3, r3, #20
 800e79a:	429a      	cmp	r2, r3
 800e79c:	d005      	beq.n	800e7aa <HAL_RTC_SetAlarm_IT+0x15e>
 800e79e:	4a7f      	ldr	r2, [pc, #508]	; (800e99c <HAL_RTC_SetAlarm_IT+0x350>)
 800e7a0:	4b78      	ldr	r3, [pc, #480]	; (800e984 <HAL_RTC_SetAlarm_IT+0x338>)
 800e7a2:	0011      	movs	r1, r2
 800e7a4:	0018      	movs	r0, r3
 800e7a6:	f7f4 ff1a 	bl	80035de <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	7f1b      	ldrb	r3, [r3, #28]
 800e7ae:	2b01      	cmp	r3, #1
 800e7b0:	d101      	bne.n	800e7b6 <HAL_RTC_SetAlarm_IT+0x16a>
 800e7b2:	2302      	movs	r3, #2
 800e7b4:	e21f      	b.n	800ebf6 <HAL_RTC_SetAlarm_IT+0x5aa>
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	2201      	movs	r2, #1
 800e7ba:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	2202      	movs	r2, #2
 800e7c0:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d000      	beq.n	800e7ca <HAL_RTC_SetAlarm_IT+0x17e>
 800e7c8:	e0af      	b.n	800e92a <HAL_RTC_SetAlarm_IT+0x2de>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	689b      	ldr	r3, [r3, #8]
 800e7d0:	2240      	movs	r2, #64	; 0x40
 800e7d2:	4013      	ands	r3, r2
 800e7d4:	d01c      	beq.n	800e810 <HAL_RTC_SetAlarm_IT+0x1c4>
    {
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
 800e7d6:	68bb      	ldr	r3, [r7, #8]
 800e7d8:	781b      	ldrb	r3, [r3, #0]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d003      	beq.n	800e7e6 <HAL_RTC_SetAlarm_IT+0x19a>
 800e7de:	68bb      	ldr	r3, [r7, #8]
 800e7e0:	781b      	ldrb	r3, [r3, #0]
 800e7e2:	2b0c      	cmp	r3, #12
 800e7e4:	d905      	bls.n	800e7f2 <HAL_RTC_SetAlarm_IT+0x1a6>
 800e7e6:	4a6e      	ldr	r2, [pc, #440]	; (800e9a0 <HAL_RTC_SetAlarm_IT+0x354>)
 800e7e8:	4b66      	ldr	r3, [pc, #408]	; (800e984 <HAL_RTC_SetAlarm_IT+0x338>)
 800e7ea:	0011      	movs	r1, r2
 800e7ec:	0018      	movs	r0, r3
 800e7ee:	f7f4 fef6 	bl	80035de <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 800e7f2:	68bb      	ldr	r3, [r7, #8]
 800e7f4:	78db      	ldrb	r3, [r3, #3]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d017      	beq.n	800e82a <HAL_RTC_SetAlarm_IT+0x1de>
 800e7fa:	68bb      	ldr	r3, [r7, #8]
 800e7fc:	78db      	ldrb	r3, [r3, #3]
 800e7fe:	2b40      	cmp	r3, #64	; 0x40
 800e800:	d013      	beq.n	800e82a <HAL_RTC_SetAlarm_IT+0x1de>
 800e802:	4a68      	ldr	r2, [pc, #416]	; (800e9a4 <HAL_RTC_SetAlarm_IT+0x358>)
 800e804:	4b5f      	ldr	r3, [pc, #380]	; (800e984 <HAL_RTC_SetAlarm_IT+0x338>)
 800e806:	0011      	movs	r1, r2
 800e808:	0018      	movs	r0, r3
 800e80a:	f7f4 fee8 	bl	80035de <assert_failed>
 800e80e:	e00c      	b.n	800e82a <HAL_RTC_SetAlarm_IT+0x1de>
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800e810:	68bb      	ldr	r3, [r7, #8]
 800e812:	2200      	movs	r2, #0
 800e814:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 800e816:	68bb      	ldr	r3, [r7, #8]
 800e818:	781b      	ldrb	r3, [r3, #0]
 800e81a:	2b17      	cmp	r3, #23
 800e81c:	d905      	bls.n	800e82a <HAL_RTC_SetAlarm_IT+0x1de>
 800e81e:	4a62      	ldr	r2, [pc, #392]	; (800e9a8 <HAL_RTC_SetAlarm_IT+0x35c>)
 800e820:	4b58      	ldr	r3, [pc, #352]	; (800e984 <HAL_RTC_SetAlarm_IT+0x338>)
 800e822:	0011      	movs	r1, r2
 800e824:	0018      	movs	r0, r3
 800e826:	f7f4 feda 	bl	80035de <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
 800e82a:	68bb      	ldr	r3, [r7, #8]
 800e82c:	785b      	ldrb	r3, [r3, #1]
 800e82e:	2b3b      	cmp	r3, #59	; 0x3b
 800e830:	d905      	bls.n	800e83e <HAL_RTC_SetAlarm_IT+0x1f2>
 800e832:	4a5e      	ldr	r2, [pc, #376]	; (800e9ac <HAL_RTC_SetAlarm_IT+0x360>)
 800e834:	4b53      	ldr	r3, [pc, #332]	; (800e984 <HAL_RTC_SetAlarm_IT+0x338>)
 800e836:	0011      	movs	r1, r2
 800e838:	0018      	movs	r0, r3
 800e83a:	f7f4 fed0 	bl	80035de <assert_failed>
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
 800e83e:	68bb      	ldr	r3, [r7, #8]
 800e840:	789b      	ldrb	r3, [r3, #2]
 800e842:	2b3b      	cmp	r3, #59	; 0x3b
 800e844:	d905      	bls.n	800e852 <HAL_RTC_SetAlarm_IT+0x206>
 800e846:	4a5a      	ldr	r2, [pc, #360]	; (800e9b0 <HAL_RTC_SetAlarm_IT+0x364>)
 800e848:	4b4e      	ldr	r3, [pc, #312]	; (800e984 <HAL_RTC_SetAlarm_IT+0x338>)
 800e84a:	0011      	movs	r1, r2
 800e84c:	0018      	movs	r0, r3
 800e84e:	f7f4 fec6 	bl	80035de <assert_failed>

    if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 800e852:	68bb      	ldr	r3, [r7, #8]
 800e854:	69db      	ldr	r3, [r3, #28]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d110      	bne.n	800e87c <HAL_RTC_SetAlarm_IT+0x230>
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
 800e85a:	68bb      	ldr	r3, [r7, #8]
 800e85c:	2220      	movs	r2, #32
 800e85e:	5c9b      	ldrb	r3, [r3, r2]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d004      	beq.n	800e86e <HAL_RTC_SetAlarm_IT+0x222>
 800e864:	68bb      	ldr	r3, [r7, #8]
 800e866:	2220      	movs	r2, #32
 800e868:	5c9b      	ldrb	r3, [r3, r2]
 800e86a:	2b1f      	cmp	r3, #31
 800e86c:	d92f      	bls.n	800e8ce <HAL_RTC_SetAlarm_IT+0x282>
 800e86e:	4a51      	ldr	r2, [pc, #324]	; (800e9b4 <HAL_RTC_SetAlarm_IT+0x368>)
 800e870:	4b44      	ldr	r3, [pc, #272]	; (800e984 <HAL_RTC_SetAlarm_IT+0x338>)
 800e872:	0011      	movs	r1, r2
 800e874:	0018      	movs	r0, r3
 800e876:	f7f4 feb2 	bl	80035de <assert_failed>
 800e87a:	e028      	b.n	800e8ce <HAL_RTC_SetAlarm_IT+0x282>
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
 800e87c:	68bb      	ldr	r3, [r7, #8]
 800e87e:	2220      	movs	r2, #32
 800e880:	5c9b      	ldrb	r3, [r3, r2]
 800e882:	2b01      	cmp	r3, #1
 800e884:	d023      	beq.n	800e8ce <HAL_RTC_SetAlarm_IT+0x282>
 800e886:	68bb      	ldr	r3, [r7, #8]
 800e888:	2220      	movs	r2, #32
 800e88a:	5c9b      	ldrb	r3, [r3, r2]
 800e88c:	2b02      	cmp	r3, #2
 800e88e:	d01e      	beq.n	800e8ce <HAL_RTC_SetAlarm_IT+0x282>
 800e890:	68bb      	ldr	r3, [r7, #8]
 800e892:	2220      	movs	r2, #32
 800e894:	5c9b      	ldrb	r3, [r3, r2]
 800e896:	2b03      	cmp	r3, #3
 800e898:	d019      	beq.n	800e8ce <HAL_RTC_SetAlarm_IT+0x282>
 800e89a:	68bb      	ldr	r3, [r7, #8]
 800e89c:	2220      	movs	r2, #32
 800e89e:	5c9b      	ldrb	r3, [r3, r2]
 800e8a0:	2b04      	cmp	r3, #4
 800e8a2:	d014      	beq.n	800e8ce <HAL_RTC_SetAlarm_IT+0x282>
 800e8a4:	68bb      	ldr	r3, [r7, #8]
 800e8a6:	2220      	movs	r2, #32
 800e8a8:	5c9b      	ldrb	r3, [r3, r2]
 800e8aa:	2b05      	cmp	r3, #5
 800e8ac:	d00f      	beq.n	800e8ce <HAL_RTC_SetAlarm_IT+0x282>
 800e8ae:	68bb      	ldr	r3, [r7, #8]
 800e8b0:	2220      	movs	r2, #32
 800e8b2:	5c9b      	ldrb	r3, [r3, r2]
 800e8b4:	2b06      	cmp	r3, #6
 800e8b6:	d00a      	beq.n	800e8ce <HAL_RTC_SetAlarm_IT+0x282>
 800e8b8:	68bb      	ldr	r3, [r7, #8]
 800e8ba:	2220      	movs	r2, #32
 800e8bc:	5c9b      	ldrb	r3, [r3, r2]
 800e8be:	2b07      	cmp	r3, #7
 800e8c0:	d005      	beq.n	800e8ce <HAL_RTC_SetAlarm_IT+0x282>
 800e8c2:	4a3d      	ldr	r2, [pc, #244]	; (800e9b8 <HAL_RTC_SetAlarm_IT+0x36c>)
 800e8c4:	4b2f      	ldr	r3, [pc, #188]	; (800e984 <HAL_RTC_SetAlarm_IT+0x338>)
 800e8c6:	0011      	movs	r1, r2
 800e8c8:	0018      	movs	r0, r3
 800e8ca:	f7f4 fe88 	bl	80035de <assert_failed>
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800e8ce:	68bb      	ldr	r3, [r7, #8]
 800e8d0:	781b      	ldrb	r3, [r3, #0]
 800e8d2:	0018      	movs	r0, r3
 800e8d4:	f000 fa2b 	bl	800ed2e <RTC_ByteToBcd2>
 800e8d8:	0003      	movs	r3, r0
 800e8da:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800e8dc:	68bb      	ldr	r3, [r7, #8]
 800e8de:	785b      	ldrb	r3, [r3, #1]
 800e8e0:	0018      	movs	r0, r3
 800e8e2:	f000 fa24 	bl	800ed2e <RTC_ByteToBcd2>
 800e8e6:	0003      	movs	r3, r0
 800e8e8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800e8ea:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800e8ec:	68bb      	ldr	r3, [r7, #8]
 800e8ee:	789b      	ldrb	r3, [r3, #2]
 800e8f0:	0018      	movs	r0, r3
 800e8f2:	f000 fa1c 	bl	800ed2e <RTC_ByteToBcd2>
 800e8f6:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800e8f8:	0022      	movs	r2, r4
 800e8fa:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800e8fc:	68bb      	ldr	r3, [r7, #8]
 800e8fe:	78db      	ldrb	r3, [r3, #3]
 800e900:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800e902:	431a      	orrs	r2, r3
 800e904:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800e906:	68bb      	ldr	r3, [r7, #8]
 800e908:	2220      	movs	r2, #32
 800e90a:	5c9b      	ldrb	r3, [r3, r2]
 800e90c:	0018      	movs	r0, r3
 800e90e:	f000 fa0e 	bl	800ed2e <RTC_ByteToBcd2>
 800e912:	0003      	movs	r3, r0
 800e914:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800e916:	0022      	movs	r2, r4
 800e918:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800e91a:	68bb      	ldr	r3, [r7, #8]
 800e91c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800e91e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800e920:	68bb      	ldr	r3, [r7, #8]
 800e922:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800e924:	4313      	orrs	r3, r2
 800e926:	61fb      	str	r3, [r7, #28]
 800e928:	e0f2      	b.n	800eb10 <HAL_RTC_SetAlarm_IT+0x4c4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	689b      	ldr	r3, [r3, #8]
 800e930:	2240      	movs	r2, #64	; 0x40
 800e932:	4013      	ands	r3, r2
 800e934:	d044      	beq.n	800e9c0 <HAL_RTC_SetAlarm_IT+0x374>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 800e936:	68bb      	ldr	r3, [r7, #8]
 800e938:	781b      	ldrb	r3, [r3, #0]
 800e93a:	0018      	movs	r0, r3
 800e93c:	f000 fa18 	bl	800ed70 <RTC_Bcd2ToByte>
 800e940:	1e03      	subs	r3, r0, #0
 800e942:	d007      	beq.n	800e954 <HAL_RTC_SetAlarm_IT+0x308>
 800e944:	68bb      	ldr	r3, [r7, #8]
 800e946:	781b      	ldrb	r3, [r3, #0]
 800e948:	0018      	movs	r0, r3
 800e94a:	f000 fa11 	bl	800ed70 <RTC_Bcd2ToByte>
 800e94e:	0003      	movs	r3, r0
 800e950:	2b0c      	cmp	r3, #12
 800e952:	d906      	bls.n	800e962 <HAL_RTC_SetAlarm_IT+0x316>
 800e954:	23a2      	movs	r3, #162	; 0xa2
 800e956:	00da      	lsls	r2, r3, #3
 800e958:	4b0a      	ldr	r3, [pc, #40]	; (800e984 <HAL_RTC_SetAlarm_IT+0x338>)
 800e95a:	0011      	movs	r1, r2
 800e95c:	0018      	movs	r0, r3
 800e95e:	f7f4 fe3e 	bl	80035de <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 800e962:	68bb      	ldr	r3, [r7, #8]
 800e964:	78db      	ldrb	r3, [r3, #3]
 800e966:	2b00      	cmp	r3, #0
 800e968:	d03b      	beq.n	800e9e2 <HAL_RTC_SetAlarm_IT+0x396>
 800e96a:	68bb      	ldr	r3, [r7, #8]
 800e96c:	78db      	ldrb	r3, [r3, #3]
 800e96e:	2b40      	cmp	r3, #64	; 0x40
 800e970:	d037      	beq.n	800e9e2 <HAL_RTC_SetAlarm_IT+0x396>
 800e972:	4a12      	ldr	r2, [pc, #72]	; (800e9bc <HAL_RTC_SetAlarm_IT+0x370>)
 800e974:	4b03      	ldr	r3, [pc, #12]	; (800e984 <HAL_RTC_SetAlarm_IT+0x338>)
 800e976:	0011      	movs	r1, r2
 800e978:	0018      	movs	r0, r3
 800e97a:	f7f4 fe30 	bl	80035de <assert_failed>
 800e97e:	e030      	b.n	800e9e2 <HAL_RTC_SetAlarm_IT+0x396>
 800e980:	000004e1 	.word	0x000004e1
 800e984:	08017014 	.word	0x08017014
 800e988:	000004e2 	.word	0x000004e2
 800e98c:	7f7f7f7f 	.word	0x7f7f7f7f
 800e990:	000004e3 	.word	0x000004e3
 800e994:	000004e4 	.word	0x000004e4
 800e998:	000004e5 	.word	0x000004e5
 800e99c:	000004e6 	.word	0x000004e6
 800e9a0:	000004f1 	.word	0x000004f1
 800e9a4:	000004f2 	.word	0x000004f2
 800e9a8:	000004f7 	.word	0x000004f7
 800e9ac:	000004f9 	.word	0x000004f9
 800e9b0:	000004fa 	.word	0x000004fa
 800e9b4:	000004fe 	.word	0x000004fe
 800e9b8:	00000502 	.word	0x00000502
 800e9bc:	00000511 	.word	0x00000511
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800e9c0:	68bb      	ldr	r3, [r7, #8]
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 800e9c6:	68bb      	ldr	r3, [r7, #8]
 800e9c8:	781b      	ldrb	r3, [r3, #0]
 800e9ca:	0018      	movs	r0, r3
 800e9cc:	f000 f9d0 	bl	800ed70 <RTC_Bcd2ToByte>
 800e9d0:	0003      	movs	r3, r0
 800e9d2:	2b17      	cmp	r3, #23
 800e9d4:	d905      	bls.n	800e9e2 <HAL_RTC_SetAlarm_IT+0x396>
 800e9d6:	4a8a      	ldr	r2, [pc, #552]	; (800ec00 <HAL_RTC_SetAlarm_IT+0x5b4>)
 800e9d8:	4b8a      	ldr	r3, [pc, #552]	; (800ec04 <HAL_RTC_SetAlarm_IT+0x5b8>)
 800e9da:	0011      	movs	r1, r2
 800e9dc:	0018      	movs	r0, r3
 800e9de:	f7f4 fdfe 	bl	80035de <assert_failed>
    }

    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
 800e9e2:	68bb      	ldr	r3, [r7, #8]
 800e9e4:	785b      	ldrb	r3, [r3, #1]
 800e9e6:	0018      	movs	r0, r3
 800e9e8:	f000 f9c2 	bl	800ed70 <RTC_Bcd2ToByte>
 800e9ec:	0003      	movs	r3, r0
 800e9ee:	2b3b      	cmp	r3, #59	; 0x3b
 800e9f0:	d905      	bls.n	800e9fe <HAL_RTC_SetAlarm_IT+0x3b2>
 800e9f2:	4a85      	ldr	r2, [pc, #532]	; (800ec08 <HAL_RTC_SetAlarm_IT+0x5bc>)
 800e9f4:	4b83      	ldr	r3, [pc, #524]	; (800ec04 <HAL_RTC_SetAlarm_IT+0x5b8>)
 800e9f6:	0011      	movs	r1, r2
 800e9f8:	0018      	movs	r0, r3
 800e9fa:	f7f4 fdf0 	bl	80035de <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 800e9fe:	68bb      	ldr	r3, [r7, #8]
 800ea00:	789b      	ldrb	r3, [r3, #2]
 800ea02:	0018      	movs	r0, r3
 800ea04:	f000 f9b4 	bl	800ed70 <RTC_Bcd2ToByte>
 800ea08:	0003      	movs	r3, r0
 800ea0a:	2b3b      	cmp	r3, #59	; 0x3b
 800ea0c:	d905      	bls.n	800ea1a <HAL_RTC_SetAlarm_IT+0x3ce>
 800ea0e:	4a7f      	ldr	r2, [pc, #508]	; (800ec0c <HAL_RTC_SetAlarm_IT+0x5c0>)
 800ea10:	4b7c      	ldr	r3, [pc, #496]	; (800ec04 <HAL_RTC_SetAlarm_IT+0x5b8>)
 800ea12:	0011      	movs	r1, r2
 800ea14:	0018      	movs	r0, r3
 800ea16:	f7f4 fde2 	bl	80035de <assert_failed>

    if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 800ea1a:	68bb      	ldr	r3, [r7, #8]
 800ea1c:	69db      	ldr	r3, [r3, #28]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d117      	bne.n	800ea52 <HAL_RTC_SetAlarm_IT+0x406>
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 800ea22:	68bb      	ldr	r3, [r7, #8]
 800ea24:	2220      	movs	r2, #32
 800ea26:	5c9b      	ldrb	r3, [r3, r2]
 800ea28:	0018      	movs	r0, r3
 800ea2a:	f000 f9a1 	bl	800ed70 <RTC_Bcd2ToByte>
 800ea2e:	1e03      	subs	r3, r0, #0
 800ea30:	d008      	beq.n	800ea44 <HAL_RTC_SetAlarm_IT+0x3f8>
 800ea32:	68bb      	ldr	r3, [r7, #8]
 800ea34:	2220      	movs	r2, #32
 800ea36:	5c9b      	ldrb	r3, [r3, r2]
 800ea38:	0018      	movs	r0, r3
 800ea3a:	f000 f999 	bl	800ed70 <RTC_Bcd2ToByte>
 800ea3e:	0003      	movs	r3, r0
 800ea40:	2b1f      	cmp	r3, #31
 800ea42:	d94b      	bls.n	800eadc <HAL_RTC_SetAlarm_IT+0x490>
 800ea44:	4a72      	ldr	r2, [pc, #456]	; (800ec10 <HAL_RTC_SetAlarm_IT+0x5c4>)
 800ea46:	4b6f      	ldr	r3, [pc, #444]	; (800ec04 <HAL_RTC_SetAlarm_IT+0x5b8>)
 800ea48:	0011      	movs	r1, r2
 800ea4a:	0018      	movs	r0, r3
 800ea4c:	f7f4 fdc7 	bl	80035de <assert_failed>
 800ea50:	e044      	b.n	800eadc <HAL_RTC_SetAlarm_IT+0x490>
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 800ea52:	68bb      	ldr	r3, [r7, #8]
 800ea54:	2220      	movs	r2, #32
 800ea56:	5c9b      	ldrb	r3, [r3, r2]
 800ea58:	0018      	movs	r0, r3
 800ea5a:	f000 f989 	bl	800ed70 <RTC_Bcd2ToByte>
 800ea5e:	0003      	movs	r3, r0
 800ea60:	2b01      	cmp	r3, #1
 800ea62:	d03b      	beq.n	800eadc <HAL_RTC_SetAlarm_IT+0x490>
 800ea64:	68bb      	ldr	r3, [r7, #8]
 800ea66:	2220      	movs	r2, #32
 800ea68:	5c9b      	ldrb	r3, [r3, r2]
 800ea6a:	0018      	movs	r0, r3
 800ea6c:	f000 f980 	bl	800ed70 <RTC_Bcd2ToByte>
 800ea70:	0003      	movs	r3, r0
 800ea72:	2b02      	cmp	r3, #2
 800ea74:	d032      	beq.n	800eadc <HAL_RTC_SetAlarm_IT+0x490>
 800ea76:	68bb      	ldr	r3, [r7, #8]
 800ea78:	2220      	movs	r2, #32
 800ea7a:	5c9b      	ldrb	r3, [r3, r2]
 800ea7c:	0018      	movs	r0, r3
 800ea7e:	f000 f977 	bl	800ed70 <RTC_Bcd2ToByte>
 800ea82:	0003      	movs	r3, r0
 800ea84:	2b03      	cmp	r3, #3
 800ea86:	d029      	beq.n	800eadc <HAL_RTC_SetAlarm_IT+0x490>
 800ea88:	68bb      	ldr	r3, [r7, #8]
 800ea8a:	2220      	movs	r2, #32
 800ea8c:	5c9b      	ldrb	r3, [r3, r2]
 800ea8e:	0018      	movs	r0, r3
 800ea90:	f000 f96e 	bl	800ed70 <RTC_Bcd2ToByte>
 800ea94:	0003      	movs	r3, r0
 800ea96:	2b04      	cmp	r3, #4
 800ea98:	d020      	beq.n	800eadc <HAL_RTC_SetAlarm_IT+0x490>
 800ea9a:	68bb      	ldr	r3, [r7, #8]
 800ea9c:	2220      	movs	r2, #32
 800ea9e:	5c9b      	ldrb	r3, [r3, r2]
 800eaa0:	0018      	movs	r0, r3
 800eaa2:	f000 f965 	bl	800ed70 <RTC_Bcd2ToByte>
 800eaa6:	0003      	movs	r3, r0
 800eaa8:	2b05      	cmp	r3, #5
 800eaaa:	d017      	beq.n	800eadc <HAL_RTC_SetAlarm_IT+0x490>
 800eaac:	68bb      	ldr	r3, [r7, #8]
 800eaae:	2220      	movs	r2, #32
 800eab0:	5c9b      	ldrb	r3, [r3, r2]
 800eab2:	0018      	movs	r0, r3
 800eab4:	f000 f95c 	bl	800ed70 <RTC_Bcd2ToByte>
 800eab8:	0003      	movs	r3, r0
 800eaba:	2b06      	cmp	r3, #6
 800eabc:	d00e      	beq.n	800eadc <HAL_RTC_SetAlarm_IT+0x490>
 800eabe:	68bb      	ldr	r3, [r7, #8]
 800eac0:	2220      	movs	r2, #32
 800eac2:	5c9b      	ldrb	r3, [r3, r2]
 800eac4:	0018      	movs	r0, r3
 800eac6:	f000 f953 	bl	800ed70 <RTC_Bcd2ToByte>
 800eaca:	0003      	movs	r3, r0
 800eacc:	2b07      	cmp	r3, #7
 800eace:	d005      	beq.n	800eadc <HAL_RTC_SetAlarm_IT+0x490>
 800ead0:	4a50      	ldr	r2, [pc, #320]	; (800ec14 <HAL_RTC_SetAlarm_IT+0x5c8>)
 800ead2:	4b4c      	ldr	r3, [pc, #304]	; (800ec04 <HAL_RTC_SetAlarm_IT+0x5b8>)
 800ead4:	0011      	movs	r1, r2
 800ead6:	0018      	movs	r0, r3
 800ead8:	f7f4 fd81 	bl	80035de <assert_failed>
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800eadc:	68bb      	ldr	r3, [r7, #8]
 800eade:	781b      	ldrb	r3, [r3, #0]
 800eae0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800eae2:	68bb      	ldr	r3, [r7, #8]
 800eae4:	785b      	ldrb	r3, [r3, #1]
 800eae6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800eae8:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800eaea:	68ba      	ldr	r2, [r7, #8]
 800eaec:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800eaee:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800eaf0:	68bb      	ldr	r3, [r7, #8]
 800eaf2:	78db      	ldrb	r3, [r3, #3]
 800eaf4:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800eaf6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800eaf8:	68bb      	ldr	r3, [r7, #8]
 800eafa:	2120      	movs	r1, #32
 800eafc:	5c5b      	ldrb	r3, [r3, r1]
 800eafe:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800eb00:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800eb02:	68bb      	ldr	r3, [r7, #8]
 800eb04:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800eb06:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800eb08:	68bb      	ldr	r3, [r7, #8]
 800eb0a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800eb0c:	4313      	orrs	r3, r2
 800eb0e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800eb10:	68bb      	ldr	r3, [r7, #8]
 800eb12:	685a      	ldr	r2, [r3, #4]
 800eb14:	68bb      	ldr	r3, [r7, #8]
 800eb16:	699b      	ldr	r3, [r3, #24]
 800eb18:	4313      	orrs	r3, r2
 800eb1a:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	22ca      	movs	r2, #202	; 0xca
 800eb22:	625a      	str	r2, [r3, #36]	; 0x24
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	2253      	movs	r2, #83	; 0x53
 800eb2a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Alarm A interrupt */
  __HAL_RTC_ALARMA_DISABLE(hrtc);
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	689a      	ldr	r2, [r3, #8]
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	4938      	ldr	r1, [pc, #224]	; (800ec18 <HAL_RTC_SetAlarm_IT+0x5cc>)
 800eb38:	400a      	ands	r2, r1
 800eb3a:	609a      	str	r2, [r3, #8]

  /* Clear flag alarm A */
  __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	68db      	ldr	r3, [r3, #12]
 800eb42:	22ff      	movs	r2, #255	; 0xff
 800eb44:	401a      	ands	r2, r3
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	4934      	ldr	r1, [pc, #208]	; (800ec1c <HAL_RTC_SetAlarm_IT+0x5d0>)
 800eb4c:	430a      	orrs	r2, r1
 800eb4e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800eb50:	f7fa fe12 	bl	8009778 <HAL_GetTick>
 800eb54:	0003      	movs	r3, r0
 800eb56:	61bb      	str	r3, [r7, #24]

  /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800eb58:	e014      	b.n	800eb84 <HAL_RTC_SetAlarm_IT+0x538>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800eb5a:	f7fa fe0d 	bl	8009778 <HAL_GetTick>
 800eb5e:	0002      	movs	r2, r0
 800eb60:	69bb      	ldr	r3, [r7, #24]
 800eb62:	1ad2      	subs	r2, r2, r3
 800eb64:	23fa      	movs	r3, #250	; 0xfa
 800eb66:	009b      	lsls	r3, r3, #2
 800eb68:	429a      	cmp	r2, r3
 800eb6a:	d90b      	bls.n	800eb84 <HAL_RTC_SetAlarm_IT+0x538>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	22ff      	movs	r2, #255	; 0xff
 800eb72:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	2203      	movs	r2, #3
 800eb78:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800eb80:	2303      	movs	r3, #3
 800eb82:	e038      	b.n	800ebf6 <HAL_RTC_SetAlarm_IT+0x5aa>
  while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	68db      	ldr	r3, [r3, #12]
 800eb8a:	2201      	movs	r2, #1
 800eb8c:	4013      	ands	r3, r2
 800eb8e:	d0e4      	beq.n	800eb5a <HAL_RTC_SetAlarm_IT+0x50e>
    }
  }

  hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	69fa      	ldr	r2, [r7, #28]
 800eb96:	61da      	str	r2, [r3, #28]
  /* Configure the Alarm A Sub Second register */
  hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	697a      	ldr	r2, [r7, #20]
 800eb9e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Configure the Alarm state: Enable Alarm */
  __HAL_RTC_ALARMA_ENABLE(hrtc);
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	689a      	ldr	r2, [r3, #8]
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	2180      	movs	r1, #128	; 0x80
 800ebac:	0049      	lsls	r1, r1, #1
 800ebae:	430a      	orrs	r2, r1
 800ebb0:	609a      	str	r2, [r3, #8]
  /* Configure the Alarm interrupt */
  __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	689a      	ldr	r2, [r3, #8]
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	2180      	movs	r1, #128	; 0x80
 800ebbe:	0149      	lsls	r1, r1, #5
 800ebc0:	430a      	orrs	r2, r1
 800ebc2:	609a      	str	r2, [r3, #8]

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800ebc4:	4b16      	ldr	r3, [pc, #88]	; (800ec20 <HAL_RTC_SetAlarm_IT+0x5d4>)
 800ebc6:	681a      	ldr	r2, [r3, #0]
 800ebc8:	4b15      	ldr	r3, [pc, #84]	; (800ec20 <HAL_RTC_SetAlarm_IT+0x5d4>)
 800ebca:	2180      	movs	r1, #128	; 0x80
 800ebcc:	0289      	lsls	r1, r1, #10
 800ebce:	430a      	orrs	r2, r1
 800ebd0:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800ebd2:	4b13      	ldr	r3, [pc, #76]	; (800ec20 <HAL_RTC_SetAlarm_IT+0x5d4>)
 800ebd4:	689a      	ldr	r2, [r3, #8]
 800ebd6:	4b12      	ldr	r3, [pc, #72]	; (800ec20 <HAL_RTC_SetAlarm_IT+0x5d4>)
 800ebd8:	2180      	movs	r1, #128	; 0x80
 800ebda:	0289      	lsls	r1, r1, #10
 800ebdc:	430a      	orrs	r2, r1
 800ebde:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	22ff      	movs	r2, #255	; 0xff
 800ebe6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	2201      	movs	r2, #1
 800ebec:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	2200      	movs	r2, #0
 800ebf2:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800ebf4:	2300      	movs	r3, #0
}
 800ebf6:	0018      	movs	r0, r3
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	b009      	add	sp, #36	; 0x24
 800ebfc:	bd90      	pop	{r4, r7, pc}
 800ebfe:	46c0      	nop			; (mov r8, r8)
 800ec00:	00000516 	.word	0x00000516
 800ec04:	08017014 	.word	0x08017014
 800ec08:	00000519 	.word	0x00000519
 800ec0c:	0000051a 	.word	0x0000051a
 800ec10:	0000051e 	.word	0x0000051e
 800ec14:	00000522 	.word	0x00000522
 800ec18:	fffffeff 	.word	0xfffffeff
 800ec1c:	fffffe7f 	.word	0xfffffe7f
 800ec20:	40010400 	.word	0x40010400

0800ec24 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b082      	sub	sp, #8
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	689a      	ldr	r2, [r3, #8]
 800ec32:	2380      	movs	r3, #128	; 0x80
 800ec34:	015b      	lsls	r3, r3, #5
 800ec36:	4013      	ands	r3, r2
 800ec38:	d014      	beq.n	800ec64 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	68da      	ldr	r2, [r3, #12]
 800ec40:	2380      	movs	r3, #128	; 0x80
 800ec42:	005b      	lsls	r3, r3, #1
 800ec44:	4013      	ands	r3, r2
 800ec46:	d00d      	beq.n	800ec64 <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	0018      	movs	r0, r3
 800ec4c:	f7f4 f902 	bl	8002e54 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	68db      	ldr	r3, [r3, #12]
 800ec56:	22ff      	movs	r2, #255	; 0xff
 800ec58:	401a      	ands	r2, r3
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	4907      	ldr	r1, [pc, #28]	; (800ec7c <HAL_RTC_AlarmIRQHandler+0x58>)
 800ec60:	430a      	orrs	r2, r1
 800ec62:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800ec64:	4b06      	ldr	r3, [pc, #24]	; (800ec80 <HAL_RTC_AlarmIRQHandler+0x5c>)
 800ec66:	2280      	movs	r2, #128	; 0x80
 800ec68:	0292      	lsls	r2, r2, #10
 800ec6a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	2201      	movs	r2, #1
 800ec70:	775a      	strb	r2, [r3, #29]
}
 800ec72:	46c0      	nop			; (mov r8, r8)
 800ec74:	46bd      	mov	sp, r7
 800ec76:	b002      	add	sp, #8
 800ec78:	bd80      	pop	{r7, pc}
 800ec7a:	46c0      	nop			; (mov r8, r8)
 800ec7c:	fffffe7f 	.word	0xfffffe7f
 800ec80:	40010400 	.word	0x40010400

0800ec84 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b084      	sub	sp, #16
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	68da      	ldr	r2, [r3, #12]
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	21a0      	movs	r1, #160	; 0xa0
 800ec9c:	438a      	bics	r2, r1
 800ec9e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800eca0:	f7fa fd6a 	bl	8009778 <HAL_GetTick>
 800eca4:	0003      	movs	r3, r0
 800eca6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800eca8:	e00a      	b.n	800ecc0 <HAL_RTC_WaitForSynchro+0x3c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ecaa:	f7fa fd65 	bl	8009778 <HAL_GetTick>
 800ecae:	0002      	movs	r2, r0
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	1ad2      	subs	r2, r2, r3
 800ecb4:	23fa      	movs	r3, #250	; 0xfa
 800ecb6:	009b      	lsls	r3, r3, #2
 800ecb8:	429a      	cmp	r2, r3
 800ecba:	d901      	bls.n	800ecc0 <HAL_RTC_WaitForSynchro+0x3c>
    {
      return HAL_TIMEOUT;
 800ecbc:	2303      	movs	r3, #3
 800ecbe:	e006      	b.n	800ecce <HAL_RTC_WaitForSynchro+0x4a>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	68db      	ldr	r3, [r3, #12]
 800ecc6:	2220      	movs	r2, #32
 800ecc8:	4013      	ands	r3, r2
 800ecca:	d0ee      	beq.n	800ecaa <HAL_RTC_WaitForSynchro+0x26>
    }
  }

  return HAL_OK;
 800eccc:	2300      	movs	r3, #0
}
 800ecce:	0018      	movs	r0, r3
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	b004      	add	sp, #16
 800ecd4:	bd80      	pop	{r7, pc}

0800ecd6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800ecd6:	b580      	push	{r7, lr}
 800ecd8:	b084      	sub	sp, #16
 800ecda:	af00      	add	r7, sp, #0
 800ecdc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ecde:	2300      	movs	r3, #0
 800ece0:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	68db      	ldr	r3, [r3, #12]
 800ece8:	2240      	movs	r2, #64	; 0x40
 800ecea:	4013      	ands	r3, r2
 800ecec:	d11a      	bne.n	800ed24 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	2201      	movs	r2, #1
 800ecf4:	4252      	negs	r2, r2
 800ecf6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800ecf8:	f7fa fd3e 	bl	8009778 <HAL_GetTick>
 800ecfc:	0003      	movs	r3, r0
 800ecfe:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800ed00:	e00a      	b.n	800ed18 <RTC_EnterInitMode+0x42>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ed02:	f7fa fd39 	bl	8009778 <HAL_GetTick>
 800ed06:	0002      	movs	r2, r0
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	1ad2      	subs	r2, r2, r3
 800ed0c:	23fa      	movs	r3, #250	; 0xfa
 800ed0e:	009b      	lsls	r3, r3, #2
 800ed10:	429a      	cmp	r2, r3
 800ed12:	d901      	bls.n	800ed18 <RTC_EnterInitMode+0x42>
      {
        return HAL_TIMEOUT;
 800ed14:	2303      	movs	r3, #3
 800ed16:	e006      	b.n	800ed26 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	68db      	ldr	r3, [r3, #12]
 800ed1e:	2240      	movs	r2, #64	; 0x40
 800ed20:	4013      	ands	r3, r2
 800ed22:	d0ee      	beq.n	800ed02 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800ed24:	2300      	movs	r3, #0
}
 800ed26:	0018      	movs	r0, r3
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	b004      	add	sp, #16
 800ed2c:	bd80      	pop	{r7, pc}

0800ed2e <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800ed2e:	b580      	push	{r7, lr}
 800ed30:	b084      	sub	sp, #16
 800ed32:	af00      	add	r7, sp, #0
 800ed34:	0002      	movs	r2, r0
 800ed36:	1dfb      	adds	r3, r7, #7
 800ed38:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800ed3e:	e007      	b.n	800ed50 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	3301      	adds	r3, #1
 800ed44:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800ed46:	1dfb      	adds	r3, r7, #7
 800ed48:	1dfa      	adds	r2, r7, #7
 800ed4a:	7812      	ldrb	r2, [r2, #0]
 800ed4c:	3a0a      	subs	r2, #10
 800ed4e:	701a      	strb	r2, [r3, #0]
  while (Value >= 10U)
 800ed50:	1dfb      	adds	r3, r7, #7
 800ed52:	781b      	ldrb	r3, [r3, #0]
 800ed54:	2b09      	cmp	r3, #9
 800ed56:	d8f3      	bhi.n	800ed40 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	b2db      	uxtb	r3, r3
 800ed5c:	011b      	lsls	r3, r3, #4
 800ed5e:	b2da      	uxtb	r2, r3
 800ed60:	1dfb      	adds	r3, r7, #7
 800ed62:	781b      	ldrb	r3, [r3, #0]
 800ed64:	4313      	orrs	r3, r2
 800ed66:	b2db      	uxtb	r3, r3
}
 800ed68:	0018      	movs	r0, r3
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	b004      	add	sp, #16
 800ed6e:	bd80      	pop	{r7, pc}

0800ed70 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b084      	sub	sp, #16
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	0002      	movs	r2, r0
 800ed78:	1dfb      	adds	r3, r7, #7
 800ed7a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0U;
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 800ed80:	1dfb      	adds	r3, r7, #7
 800ed82:	781b      	ldrb	r3, [r3, #0]
 800ed84:	091b      	lsrs	r3, r3, #4
 800ed86:	b2db      	uxtb	r3, r3
 800ed88:	001a      	movs	r2, r3
 800ed8a:	0013      	movs	r3, r2
 800ed8c:	009b      	lsls	r3, r3, #2
 800ed8e:	189b      	adds	r3, r3, r2
 800ed90:	005b      	lsls	r3, r3, #1
 800ed92:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 800ed94:	1dfb      	adds	r3, r7, #7
 800ed96:	781b      	ldrb	r3, [r3, #0]
 800ed98:	220f      	movs	r2, #15
 800ed9a:	4013      	ands	r3, r2
 800ed9c:	b2da      	uxtb	r2, r3
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	b2db      	uxtb	r3, r3
 800eda2:	18d3      	adds	r3, r2, r3
 800eda4:	b2db      	uxtb	r3, r3
}
 800eda6:	0018      	movs	r0, r3
 800eda8:	46bd      	mov	sp, r7
 800edaa:	b004      	add	sp, #16
 800edac:	bd80      	pop	{r7, pc}
	...

0800edb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b082      	sub	sp, #8
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d101      	bne.n	800edc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800edbe:	2301      	movs	r3, #1
 800edc0:	e0b4      	b.n	800ef2c <HAL_TIM_Base_Init+0x17c>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	4a5b      	ldr	r2, [pc, #364]	; (800ef34 <HAL_TIM_Base_Init+0x184>)
 800edc8:	4293      	cmp	r3, r2
 800edca:	d02a      	beq.n	800ee22 <HAL_TIM_Base_Init+0x72>
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	4a59      	ldr	r2, [pc, #356]	; (800ef38 <HAL_TIM_Base_Init+0x188>)
 800edd2:	4293      	cmp	r3, r2
 800edd4:	d025      	beq.n	800ee22 <HAL_TIM_Base_Init+0x72>
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	4a58      	ldr	r2, [pc, #352]	; (800ef3c <HAL_TIM_Base_Init+0x18c>)
 800eddc:	4293      	cmp	r3, r2
 800edde:	d020      	beq.n	800ee22 <HAL_TIM_Base_Init+0x72>
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	4a56      	ldr	r2, [pc, #344]	; (800ef40 <HAL_TIM_Base_Init+0x190>)
 800ede6:	4293      	cmp	r3, r2
 800ede8:	d01b      	beq.n	800ee22 <HAL_TIM_Base_Init+0x72>
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	4a55      	ldr	r2, [pc, #340]	; (800ef44 <HAL_TIM_Base_Init+0x194>)
 800edf0:	4293      	cmp	r3, r2
 800edf2:	d016      	beq.n	800ee22 <HAL_TIM_Base_Init+0x72>
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	4a53      	ldr	r2, [pc, #332]	; (800ef48 <HAL_TIM_Base_Init+0x198>)
 800edfa:	4293      	cmp	r3, r2
 800edfc:	d011      	beq.n	800ee22 <HAL_TIM_Base_Init+0x72>
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	4a52      	ldr	r2, [pc, #328]	; (800ef4c <HAL_TIM_Base_Init+0x19c>)
 800ee04:	4293      	cmp	r3, r2
 800ee06:	d00c      	beq.n	800ee22 <HAL_TIM_Base_Init+0x72>
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	4a50      	ldr	r2, [pc, #320]	; (800ef50 <HAL_TIM_Base_Init+0x1a0>)
 800ee0e:	4293      	cmp	r3, r2
 800ee10:	d007      	beq.n	800ee22 <HAL_TIM_Base_Init+0x72>
 800ee12:	2314      	movs	r3, #20
 800ee14:	33ff      	adds	r3, #255	; 0xff
 800ee16:	001a      	movs	r2, r3
 800ee18:	4b4e      	ldr	r3, [pc, #312]	; (800ef54 <HAL_TIM_Base_Init+0x1a4>)
 800ee1a:	0011      	movs	r1, r2
 800ee1c:	0018      	movs	r0, r3
 800ee1e:	f7f4 fbde 	bl	80035de <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	689b      	ldr	r3, [r3, #8]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d016      	beq.n	800ee58 <HAL_TIM_Base_Init+0xa8>
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	689b      	ldr	r3, [r3, #8]
 800ee2e:	2b10      	cmp	r3, #16
 800ee30:	d012      	beq.n	800ee58 <HAL_TIM_Base_Init+0xa8>
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	689b      	ldr	r3, [r3, #8]
 800ee36:	2b20      	cmp	r3, #32
 800ee38:	d00e      	beq.n	800ee58 <HAL_TIM_Base_Init+0xa8>
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	689b      	ldr	r3, [r3, #8]
 800ee3e:	2b40      	cmp	r3, #64	; 0x40
 800ee40:	d00a      	beq.n	800ee58 <HAL_TIM_Base_Init+0xa8>
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	689b      	ldr	r3, [r3, #8]
 800ee46:	2b60      	cmp	r3, #96	; 0x60
 800ee48:	d006      	beq.n	800ee58 <HAL_TIM_Base_Init+0xa8>
 800ee4a:	238a      	movs	r3, #138	; 0x8a
 800ee4c:	005a      	lsls	r2, r3, #1
 800ee4e:	4b41      	ldr	r3, [pc, #260]	; (800ef54 <HAL_TIM_Base_Init+0x1a4>)
 800ee50:	0011      	movs	r1, r2
 800ee52:	0018      	movs	r0, r3
 800ee54:	f7f4 fbc3 	bl	80035de <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	691b      	ldr	r3, [r3, #16]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d013      	beq.n	800ee88 <HAL_TIM_Base_Init+0xd8>
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	691a      	ldr	r2, [r3, #16]
 800ee64:	2380      	movs	r3, #128	; 0x80
 800ee66:	005b      	lsls	r3, r3, #1
 800ee68:	429a      	cmp	r2, r3
 800ee6a:	d00d      	beq.n	800ee88 <HAL_TIM_Base_Init+0xd8>
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	691a      	ldr	r2, [r3, #16]
 800ee70:	2380      	movs	r3, #128	; 0x80
 800ee72:	009b      	lsls	r3, r3, #2
 800ee74:	429a      	cmp	r2, r3
 800ee76:	d007      	beq.n	800ee88 <HAL_TIM_Base_Init+0xd8>
 800ee78:	2316      	movs	r3, #22
 800ee7a:	33ff      	adds	r3, #255	; 0xff
 800ee7c:	001a      	movs	r2, r3
 800ee7e:	4b35      	ldr	r3, [pc, #212]	; (800ef54 <HAL_TIM_Base_Init+0x1a4>)
 800ee80:	0011      	movs	r1, r2
 800ee82:	0018      	movs	r0, r3
 800ee84:	f7f4 fbab 	bl	80035de <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	699b      	ldr	r3, [r3, #24]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d00a      	beq.n	800eea6 <HAL_TIM_Base_Init+0xf6>
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	699b      	ldr	r3, [r3, #24]
 800ee94:	2b80      	cmp	r3, #128	; 0x80
 800ee96:	d006      	beq.n	800eea6 <HAL_TIM_Base_Init+0xf6>
 800ee98:	238b      	movs	r3, #139	; 0x8b
 800ee9a:	005a      	lsls	r2, r3, #1
 800ee9c:	4b2d      	ldr	r3, [pc, #180]	; (800ef54 <HAL_TIM_Base_Init+0x1a4>)
 800ee9e:	0011      	movs	r1, r2
 800eea0:	0018      	movs	r0, r3
 800eea2:	f7f4 fb9c 	bl	80035de <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	223d      	movs	r2, #61	; 0x3d
 800eeaa:	5c9b      	ldrb	r3, [r3, r2]
 800eeac:	b2db      	uxtb	r3, r3
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d107      	bne.n	800eec2 <HAL_TIM_Base_Init+0x112>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	223c      	movs	r2, #60	; 0x3c
 800eeb6:	2100      	movs	r1, #0
 800eeb8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	0018      	movs	r0, r3
 800eebe:	f7f4 fc6d 	bl	800379c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	223d      	movs	r2, #61	; 0x3d
 800eec6:	2102      	movs	r1, #2
 800eec8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681a      	ldr	r2, [r3, #0]
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	3304      	adds	r3, #4
 800eed2:	0019      	movs	r1, r3
 800eed4:	0010      	movs	r0, r2
 800eed6:	f000 f9fd 	bl	800f2d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	2246      	movs	r2, #70	; 0x46
 800eede:	2101      	movs	r1, #1
 800eee0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	223e      	movs	r2, #62	; 0x3e
 800eee6:	2101      	movs	r1, #1
 800eee8:	5499      	strb	r1, [r3, r2]
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	223f      	movs	r2, #63	; 0x3f
 800eeee:	2101      	movs	r1, #1
 800eef0:	5499      	strb	r1, [r3, r2]
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	2240      	movs	r2, #64	; 0x40
 800eef6:	2101      	movs	r1, #1
 800eef8:	5499      	strb	r1, [r3, r2]
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	2241      	movs	r2, #65	; 0x41
 800eefe:	2101      	movs	r1, #1
 800ef00:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	2242      	movs	r2, #66	; 0x42
 800ef06:	2101      	movs	r1, #1
 800ef08:	5499      	strb	r1, [r3, r2]
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	2243      	movs	r2, #67	; 0x43
 800ef0e:	2101      	movs	r1, #1
 800ef10:	5499      	strb	r1, [r3, r2]
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	2244      	movs	r2, #68	; 0x44
 800ef16:	2101      	movs	r1, #1
 800ef18:	5499      	strb	r1, [r3, r2]
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	2245      	movs	r2, #69	; 0x45
 800ef1e:	2101      	movs	r1, #1
 800ef20:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	223d      	movs	r2, #61	; 0x3d
 800ef26:	2101      	movs	r1, #1
 800ef28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ef2a:	2300      	movs	r3, #0
}
 800ef2c:	0018      	movs	r0, r3
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	b002      	add	sp, #8
 800ef32:	bd80      	pop	{r7, pc}
 800ef34:	40012c00 	.word	0x40012c00
 800ef38:	40000400 	.word	0x40000400
 800ef3c:	40001000 	.word	0x40001000
 800ef40:	40001400 	.word	0x40001400
 800ef44:	40002000 	.word	0x40002000
 800ef48:	40014000 	.word	0x40014000
 800ef4c:	40014400 	.word	0x40014400
 800ef50:	40014800 	.word	0x40014800
 800ef54:	0801704c 	.word	0x0801704c

0800ef58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b084      	sub	sp, #16
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	4a37      	ldr	r2, [pc, #220]	; (800f044 <HAL_TIM_Base_Start_IT+0xec>)
 800ef66:	4293      	cmp	r3, r2
 800ef68:	d02a      	beq.n	800efc0 <HAL_TIM_Base_Start_IT+0x68>
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	4a36      	ldr	r2, [pc, #216]	; (800f048 <HAL_TIM_Base_Start_IT+0xf0>)
 800ef70:	4293      	cmp	r3, r2
 800ef72:	d025      	beq.n	800efc0 <HAL_TIM_Base_Start_IT+0x68>
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	4a34      	ldr	r2, [pc, #208]	; (800f04c <HAL_TIM_Base_Start_IT+0xf4>)
 800ef7a:	4293      	cmp	r3, r2
 800ef7c:	d020      	beq.n	800efc0 <HAL_TIM_Base_Start_IT+0x68>
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	4a33      	ldr	r2, [pc, #204]	; (800f050 <HAL_TIM_Base_Start_IT+0xf8>)
 800ef84:	4293      	cmp	r3, r2
 800ef86:	d01b      	beq.n	800efc0 <HAL_TIM_Base_Start_IT+0x68>
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	4a31      	ldr	r2, [pc, #196]	; (800f054 <HAL_TIM_Base_Start_IT+0xfc>)
 800ef8e:	4293      	cmp	r3, r2
 800ef90:	d016      	beq.n	800efc0 <HAL_TIM_Base_Start_IT+0x68>
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	4a30      	ldr	r2, [pc, #192]	; (800f058 <HAL_TIM_Base_Start_IT+0x100>)
 800ef98:	4293      	cmp	r3, r2
 800ef9a:	d011      	beq.n	800efc0 <HAL_TIM_Base_Start_IT+0x68>
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	4a2e      	ldr	r2, [pc, #184]	; (800f05c <HAL_TIM_Base_Start_IT+0x104>)
 800efa2:	4293      	cmp	r3, r2
 800efa4:	d00c      	beq.n	800efc0 <HAL_TIM_Base_Start_IT+0x68>
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	4a2d      	ldr	r2, [pc, #180]	; (800f060 <HAL_TIM_Base_Start_IT+0x108>)
 800efac:	4293      	cmp	r3, r2
 800efae:	d007      	beq.n	800efc0 <HAL_TIM_Base_Start_IT+0x68>
 800efb0:	23d0      	movs	r3, #208	; 0xd0
 800efb2:	33ff      	adds	r3, #255	; 0xff
 800efb4:	001a      	movs	r2, r3
 800efb6:	4b2b      	ldr	r3, [pc, #172]	; (800f064 <HAL_TIM_Base_Start_IT+0x10c>)
 800efb8:	0011      	movs	r1, r2
 800efba:	0018      	movs	r0, r3
 800efbc:	f7f4 fb0f 	bl	80035de <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	223d      	movs	r2, #61	; 0x3d
 800efc4:	5c9b      	ldrb	r3, [r3, r2]
 800efc6:	b2db      	uxtb	r3, r3
 800efc8:	2b01      	cmp	r3, #1
 800efca:	d001      	beq.n	800efd0 <HAL_TIM_Base_Start_IT+0x78>
  {
    return HAL_ERROR;
 800efcc:	2301      	movs	r3, #1
 800efce:	e035      	b.n	800f03c <HAL_TIM_Base_Start_IT+0xe4>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	223d      	movs	r2, #61	; 0x3d
 800efd4:	2102      	movs	r1, #2
 800efd6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	68da      	ldr	r2, [r3, #12]
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	2101      	movs	r1, #1
 800efe4:	430a      	orrs	r2, r1
 800efe6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	4a15      	ldr	r2, [pc, #84]	; (800f044 <HAL_TIM_Base_Start_IT+0xec>)
 800efee:	4293      	cmp	r3, r2
 800eff0:	d009      	beq.n	800f006 <HAL_TIM_Base_Start_IT+0xae>
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	4a14      	ldr	r2, [pc, #80]	; (800f048 <HAL_TIM_Base_Start_IT+0xf0>)
 800eff8:	4293      	cmp	r3, r2
 800effa:	d004      	beq.n	800f006 <HAL_TIM_Base_Start_IT+0xae>
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	4a15      	ldr	r2, [pc, #84]	; (800f058 <HAL_TIM_Base_Start_IT+0x100>)
 800f002:	4293      	cmp	r3, r2
 800f004:	d111      	bne.n	800f02a <HAL_TIM_Base_Start_IT+0xd2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	689b      	ldr	r3, [r3, #8]
 800f00c:	2207      	movs	r2, #7
 800f00e:	4013      	ands	r3, r2
 800f010:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	2b06      	cmp	r3, #6
 800f016:	d010      	beq.n	800f03a <HAL_TIM_Base_Start_IT+0xe2>
    {
      __HAL_TIM_ENABLE(htim);
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	681a      	ldr	r2, [r3, #0]
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	2101      	movs	r1, #1
 800f024:	430a      	orrs	r2, r1
 800f026:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f028:	e007      	b.n	800f03a <HAL_TIM_Base_Start_IT+0xe2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	681a      	ldr	r2, [r3, #0]
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	2101      	movs	r1, #1
 800f036:	430a      	orrs	r2, r1
 800f038:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f03a:	2300      	movs	r3, #0
}
 800f03c:	0018      	movs	r0, r3
 800f03e:	46bd      	mov	sp, r7
 800f040:	b004      	add	sp, #16
 800f042:	bd80      	pop	{r7, pc}
 800f044:	40012c00 	.word	0x40012c00
 800f048:	40000400 	.word	0x40000400
 800f04c:	40001000 	.word	0x40001000
 800f050:	40001400 	.word	0x40001400
 800f054:	40002000 	.word	0x40002000
 800f058:	40014000 	.word	0x40014000
 800f05c:	40014400 	.word	0x40014400
 800f060:	40014800 	.word	0x40014800
 800f064:	0801704c 	.word	0x0801704c

0800f068 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b082      	sub	sp, #8
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	691b      	ldr	r3, [r3, #16]
 800f076:	2202      	movs	r2, #2
 800f078:	4013      	ands	r3, r2
 800f07a:	2b02      	cmp	r3, #2
 800f07c:	d124      	bne.n	800f0c8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	68db      	ldr	r3, [r3, #12]
 800f084:	2202      	movs	r2, #2
 800f086:	4013      	ands	r3, r2
 800f088:	2b02      	cmp	r3, #2
 800f08a:	d11d      	bne.n	800f0c8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	2203      	movs	r2, #3
 800f092:	4252      	negs	r2, r2
 800f094:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	2201      	movs	r2, #1
 800f09a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	699b      	ldr	r3, [r3, #24]
 800f0a2:	2203      	movs	r2, #3
 800f0a4:	4013      	ands	r3, r2
 800f0a6:	d004      	beq.n	800f0b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	0018      	movs	r0, r3
 800f0ac:	f000 f8fa 	bl	800f2a4 <HAL_TIM_IC_CaptureCallback>
 800f0b0:	e007      	b.n	800f0c2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	0018      	movs	r0, r3
 800f0b6:	f000 f8ed 	bl	800f294 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	0018      	movs	r0, r3
 800f0be:	f000 f8f9 	bl	800f2b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	2200      	movs	r2, #0
 800f0c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	691b      	ldr	r3, [r3, #16]
 800f0ce:	2204      	movs	r2, #4
 800f0d0:	4013      	ands	r3, r2
 800f0d2:	2b04      	cmp	r3, #4
 800f0d4:	d125      	bne.n	800f122 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	68db      	ldr	r3, [r3, #12]
 800f0dc:	2204      	movs	r2, #4
 800f0de:	4013      	ands	r3, r2
 800f0e0:	2b04      	cmp	r3, #4
 800f0e2:	d11e      	bne.n	800f122 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	2205      	movs	r2, #5
 800f0ea:	4252      	negs	r2, r2
 800f0ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	2202      	movs	r2, #2
 800f0f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	699a      	ldr	r2, [r3, #24]
 800f0fa:	23c0      	movs	r3, #192	; 0xc0
 800f0fc:	009b      	lsls	r3, r3, #2
 800f0fe:	4013      	ands	r3, r2
 800f100:	d004      	beq.n	800f10c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	0018      	movs	r0, r3
 800f106:	f000 f8cd 	bl	800f2a4 <HAL_TIM_IC_CaptureCallback>
 800f10a:	e007      	b.n	800f11c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	0018      	movs	r0, r3
 800f110:	f000 f8c0 	bl	800f294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	0018      	movs	r0, r3
 800f118:	f000 f8cc 	bl	800f2b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	2200      	movs	r2, #0
 800f120:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	691b      	ldr	r3, [r3, #16]
 800f128:	2208      	movs	r2, #8
 800f12a:	4013      	ands	r3, r2
 800f12c:	2b08      	cmp	r3, #8
 800f12e:	d124      	bne.n	800f17a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	68db      	ldr	r3, [r3, #12]
 800f136:	2208      	movs	r2, #8
 800f138:	4013      	ands	r3, r2
 800f13a:	2b08      	cmp	r3, #8
 800f13c:	d11d      	bne.n	800f17a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	2209      	movs	r2, #9
 800f144:	4252      	negs	r2, r2
 800f146:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	2204      	movs	r2, #4
 800f14c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	69db      	ldr	r3, [r3, #28]
 800f154:	2203      	movs	r2, #3
 800f156:	4013      	ands	r3, r2
 800f158:	d004      	beq.n	800f164 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	0018      	movs	r0, r3
 800f15e:	f000 f8a1 	bl	800f2a4 <HAL_TIM_IC_CaptureCallback>
 800f162:	e007      	b.n	800f174 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	0018      	movs	r0, r3
 800f168:	f000 f894 	bl	800f294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	0018      	movs	r0, r3
 800f170:	f000 f8a0 	bl	800f2b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	2200      	movs	r2, #0
 800f178:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	691b      	ldr	r3, [r3, #16]
 800f180:	2210      	movs	r2, #16
 800f182:	4013      	ands	r3, r2
 800f184:	2b10      	cmp	r3, #16
 800f186:	d125      	bne.n	800f1d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	68db      	ldr	r3, [r3, #12]
 800f18e:	2210      	movs	r2, #16
 800f190:	4013      	ands	r3, r2
 800f192:	2b10      	cmp	r3, #16
 800f194:	d11e      	bne.n	800f1d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	2211      	movs	r2, #17
 800f19c:	4252      	negs	r2, r2
 800f19e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	2208      	movs	r2, #8
 800f1a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	69da      	ldr	r2, [r3, #28]
 800f1ac:	23c0      	movs	r3, #192	; 0xc0
 800f1ae:	009b      	lsls	r3, r3, #2
 800f1b0:	4013      	ands	r3, r2
 800f1b2:	d004      	beq.n	800f1be <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	0018      	movs	r0, r3
 800f1b8:	f000 f874 	bl	800f2a4 <HAL_TIM_IC_CaptureCallback>
 800f1bc:	e007      	b.n	800f1ce <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	0018      	movs	r0, r3
 800f1c2:	f000 f867 	bl	800f294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	0018      	movs	r0, r3
 800f1ca:	f000 f873 	bl	800f2b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	2200      	movs	r2, #0
 800f1d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	691b      	ldr	r3, [r3, #16]
 800f1da:	2201      	movs	r2, #1
 800f1dc:	4013      	ands	r3, r2
 800f1de:	2b01      	cmp	r3, #1
 800f1e0:	d10f      	bne.n	800f202 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	68db      	ldr	r3, [r3, #12]
 800f1e8:	2201      	movs	r2, #1
 800f1ea:	4013      	ands	r3, r2
 800f1ec:	2b01      	cmp	r3, #1
 800f1ee:	d108      	bne.n	800f202 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	2202      	movs	r2, #2
 800f1f6:	4252      	negs	r2, r2
 800f1f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	0018      	movs	r0, r3
 800f1fe:	f7f4 f9d7 	bl	80035b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	691b      	ldr	r3, [r3, #16]
 800f208:	2280      	movs	r2, #128	; 0x80
 800f20a:	4013      	ands	r3, r2
 800f20c:	2b80      	cmp	r3, #128	; 0x80
 800f20e:	d10f      	bne.n	800f230 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	68db      	ldr	r3, [r3, #12]
 800f216:	2280      	movs	r2, #128	; 0x80
 800f218:	4013      	ands	r3, r2
 800f21a:	2b80      	cmp	r3, #128	; 0x80
 800f21c:	d108      	bne.n	800f230 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	2281      	movs	r2, #129	; 0x81
 800f224:	4252      	negs	r2, r2
 800f226:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	0018      	movs	r0, r3
 800f22c:	f000 f8d0 	bl	800f3d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	691b      	ldr	r3, [r3, #16]
 800f236:	2240      	movs	r2, #64	; 0x40
 800f238:	4013      	ands	r3, r2
 800f23a:	2b40      	cmp	r3, #64	; 0x40
 800f23c:	d10f      	bne.n	800f25e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	68db      	ldr	r3, [r3, #12]
 800f244:	2240      	movs	r2, #64	; 0x40
 800f246:	4013      	ands	r3, r2
 800f248:	2b40      	cmp	r3, #64	; 0x40
 800f24a:	d108      	bne.n	800f25e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	2241      	movs	r2, #65	; 0x41
 800f252:	4252      	negs	r2, r2
 800f254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	0018      	movs	r0, r3
 800f25a:	f000 f833 	bl	800f2c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	691b      	ldr	r3, [r3, #16]
 800f264:	2220      	movs	r2, #32
 800f266:	4013      	ands	r3, r2
 800f268:	2b20      	cmp	r3, #32
 800f26a:	d10f      	bne.n	800f28c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	68db      	ldr	r3, [r3, #12]
 800f272:	2220      	movs	r2, #32
 800f274:	4013      	ands	r3, r2
 800f276:	2b20      	cmp	r3, #32
 800f278:	d108      	bne.n	800f28c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	2221      	movs	r2, #33	; 0x21
 800f280:	4252      	negs	r2, r2
 800f282:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	0018      	movs	r0, r3
 800f288:	f000 f89a 	bl	800f3c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f28c:	46c0      	nop			; (mov r8, r8)
 800f28e:	46bd      	mov	sp, r7
 800f290:	b002      	add	sp, #8
 800f292:	bd80      	pop	{r7, pc}

0800f294 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f294:	b580      	push	{r7, lr}
 800f296:	b082      	sub	sp, #8
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f29c:	46c0      	nop			; (mov r8, r8)
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	b002      	add	sp, #8
 800f2a2:	bd80      	pop	{r7, pc}

0800f2a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f2a4:	b580      	push	{r7, lr}
 800f2a6:	b082      	sub	sp, #8
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f2ac:	46c0      	nop			; (mov r8, r8)
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	b002      	add	sp, #8
 800f2b2:	bd80      	pop	{r7, pc}

0800f2b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	b082      	sub	sp, #8
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f2bc:	46c0      	nop			; (mov r8, r8)
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	b002      	add	sp, #8
 800f2c2:	bd80      	pop	{r7, pc}

0800f2c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	b082      	sub	sp, #8
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f2cc:	46c0      	nop			; (mov r8, r8)
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	b002      	add	sp, #8
 800f2d2:	bd80      	pop	{r7, pc}

0800f2d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f2d4:	b580      	push	{r7, lr}
 800f2d6:	b084      	sub	sp, #16
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	6078      	str	r0, [r7, #4]
 800f2dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	4a2f      	ldr	r2, [pc, #188]	; (800f3a4 <TIM_Base_SetConfig+0xd0>)
 800f2e8:	4293      	cmp	r3, r2
 800f2ea:	d003      	beq.n	800f2f4 <TIM_Base_SetConfig+0x20>
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	4a2e      	ldr	r2, [pc, #184]	; (800f3a8 <TIM_Base_SetConfig+0xd4>)
 800f2f0:	4293      	cmp	r3, r2
 800f2f2:	d108      	bne.n	800f306 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	2270      	movs	r2, #112	; 0x70
 800f2f8:	4393      	bics	r3, r2
 800f2fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	685b      	ldr	r3, [r3, #4]
 800f300:	68fa      	ldr	r2, [r7, #12]
 800f302:	4313      	orrs	r3, r2
 800f304:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	4a26      	ldr	r2, [pc, #152]	; (800f3a4 <TIM_Base_SetConfig+0xd0>)
 800f30a:	4293      	cmp	r3, r2
 800f30c:	d013      	beq.n	800f336 <TIM_Base_SetConfig+0x62>
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	4a25      	ldr	r2, [pc, #148]	; (800f3a8 <TIM_Base_SetConfig+0xd4>)
 800f312:	4293      	cmp	r3, r2
 800f314:	d00f      	beq.n	800f336 <TIM_Base_SetConfig+0x62>
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	4a24      	ldr	r2, [pc, #144]	; (800f3ac <TIM_Base_SetConfig+0xd8>)
 800f31a:	4293      	cmp	r3, r2
 800f31c:	d00b      	beq.n	800f336 <TIM_Base_SetConfig+0x62>
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	4a23      	ldr	r2, [pc, #140]	; (800f3b0 <TIM_Base_SetConfig+0xdc>)
 800f322:	4293      	cmp	r3, r2
 800f324:	d007      	beq.n	800f336 <TIM_Base_SetConfig+0x62>
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	4a22      	ldr	r2, [pc, #136]	; (800f3b4 <TIM_Base_SetConfig+0xe0>)
 800f32a:	4293      	cmp	r3, r2
 800f32c:	d003      	beq.n	800f336 <TIM_Base_SetConfig+0x62>
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	4a21      	ldr	r2, [pc, #132]	; (800f3b8 <TIM_Base_SetConfig+0xe4>)
 800f332:	4293      	cmp	r3, r2
 800f334:	d108      	bne.n	800f348 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	4a20      	ldr	r2, [pc, #128]	; (800f3bc <TIM_Base_SetConfig+0xe8>)
 800f33a:	4013      	ands	r3, r2
 800f33c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f33e:	683b      	ldr	r3, [r7, #0]
 800f340:	68db      	ldr	r3, [r3, #12]
 800f342:	68fa      	ldr	r2, [r7, #12]
 800f344:	4313      	orrs	r3, r2
 800f346:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	2280      	movs	r2, #128	; 0x80
 800f34c:	4393      	bics	r3, r2
 800f34e:	001a      	movs	r2, r3
 800f350:	683b      	ldr	r3, [r7, #0]
 800f352:	695b      	ldr	r3, [r3, #20]
 800f354:	4313      	orrs	r3, r2
 800f356:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	68fa      	ldr	r2, [r7, #12]
 800f35c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f35e:	683b      	ldr	r3, [r7, #0]
 800f360:	689a      	ldr	r2, [r3, #8]
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f366:	683b      	ldr	r3, [r7, #0]
 800f368:	681a      	ldr	r2, [r3, #0]
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	4a0c      	ldr	r2, [pc, #48]	; (800f3a4 <TIM_Base_SetConfig+0xd0>)
 800f372:	4293      	cmp	r3, r2
 800f374:	d00b      	beq.n	800f38e <TIM_Base_SetConfig+0xba>
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	4a0d      	ldr	r2, [pc, #52]	; (800f3b0 <TIM_Base_SetConfig+0xdc>)
 800f37a:	4293      	cmp	r3, r2
 800f37c:	d007      	beq.n	800f38e <TIM_Base_SetConfig+0xba>
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	4a0c      	ldr	r2, [pc, #48]	; (800f3b4 <TIM_Base_SetConfig+0xe0>)
 800f382:	4293      	cmp	r3, r2
 800f384:	d003      	beq.n	800f38e <TIM_Base_SetConfig+0xba>
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	4a0b      	ldr	r2, [pc, #44]	; (800f3b8 <TIM_Base_SetConfig+0xe4>)
 800f38a:	4293      	cmp	r3, r2
 800f38c:	d103      	bne.n	800f396 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f38e:	683b      	ldr	r3, [r7, #0]
 800f390:	691a      	ldr	r2, [r3, #16]
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	2201      	movs	r2, #1
 800f39a:	615a      	str	r2, [r3, #20]
}
 800f39c:	46c0      	nop			; (mov r8, r8)
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	b004      	add	sp, #16
 800f3a2:	bd80      	pop	{r7, pc}
 800f3a4:	40012c00 	.word	0x40012c00
 800f3a8:	40000400 	.word	0x40000400
 800f3ac:	40002000 	.word	0x40002000
 800f3b0:	40014000 	.word	0x40014000
 800f3b4:	40014400 	.word	0x40014400
 800f3b8:	40014800 	.word	0x40014800
 800f3bc:	fffffcff 	.word	0xfffffcff

0800f3c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f3c0:	b580      	push	{r7, lr}
 800f3c2:	b082      	sub	sp, #8
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f3c8:	46c0      	nop			; (mov r8, r8)
 800f3ca:	46bd      	mov	sp, r7
 800f3cc:	b002      	add	sp, #8
 800f3ce:	bd80      	pop	{r7, pc}

0800f3d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b082      	sub	sp, #8
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f3d8:	46c0      	nop			; (mov r8, r8)
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	b002      	add	sp, #8
 800f3de:	bd80      	pop	{r7, pc}

0800f3e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b082      	sub	sp, #8
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d101      	bne.n	800f3f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f3ee:	2301      	movs	r3, #1
 800f3f0:	e080      	b.n	800f4f4 <HAL_UART_Init+0x114>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	699b      	ldr	r3, [r3, #24]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d01b      	beq.n	800f432 <HAL_UART_Init+0x52>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	4a3f      	ldr	r2, [pc, #252]	; (800f4fc <HAL_UART_Init+0x11c>)
 800f400:	4293      	cmp	r3, r2
 800f402:	d032      	beq.n	800f46a <HAL_UART_Init+0x8a>
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	4a3d      	ldr	r2, [pc, #244]	; (800f500 <HAL_UART_Init+0x120>)
 800f40a:	4293      	cmp	r3, r2
 800f40c:	d02d      	beq.n	800f46a <HAL_UART_Init+0x8a>
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	4a3c      	ldr	r2, [pc, #240]	; (800f504 <HAL_UART_Init+0x124>)
 800f414:	4293      	cmp	r3, r2
 800f416:	d028      	beq.n	800f46a <HAL_UART_Init+0x8a>
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	4a3a      	ldr	r2, [pc, #232]	; (800f508 <HAL_UART_Init+0x128>)
 800f41e:	4293      	cmp	r3, r2
 800f420:	d023      	beq.n	800f46a <HAL_UART_Init+0x8a>
 800f422:	2396      	movs	r3, #150	; 0x96
 800f424:	005a      	lsls	r2, r3, #1
 800f426:	4b39      	ldr	r3, [pc, #228]	; (800f50c <HAL_UART_Init+0x12c>)
 800f428:	0011      	movs	r1, r2
 800f42a:	0018      	movs	r0, r3
 800f42c:	f7f4 f8d7 	bl	80035de <assert_failed>
 800f430:	e01b      	b.n	800f46a <HAL_UART_Init+0x8a>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	4a31      	ldr	r2, [pc, #196]	; (800f4fc <HAL_UART_Init+0x11c>)
 800f438:	4293      	cmp	r3, r2
 800f43a:	d016      	beq.n	800f46a <HAL_UART_Init+0x8a>
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	4a2f      	ldr	r2, [pc, #188]	; (800f500 <HAL_UART_Init+0x120>)
 800f442:	4293      	cmp	r3, r2
 800f444:	d011      	beq.n	800f46a <HAL_UART_Init+0x8a>
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	4a2e      	ldr	r2, [pc, #184]	; (800f504 <HAL_UART_Init+0x124>)
 800f44c:	4293      	cmp	r3, r2
 800f44e:	d00c      	beq.n	800f46a <HAL_UART_Init+0x8a>
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	4a2c      	ldr	r2, [pc, #176]	; (800f508 <HAL_UART_Init+0x128>)
 800f456:	4293      	cmp	r3, r2
 800f458:	d007      	beq.n	800f46a <HAL_UART_Init+0x8a>
 800f45a:	2332      	movs	r3, #50	; 0x32
 800f45c:	33ff      	adds	r3, #255	; 0xff
 800f45e:	001a      	movs	r2, r3
 800f460:	4b2a      	ldr	r3, [pc, #168]	; (800f50c <HAL_UART_Init+0x12c>)
 800f462:	0011      	movs	r1, r2
 800f464:	0018      	movs	r0, r3
 800f466:	f7f4 f8ba 	bl	80035de <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d107      	bne.n	800f482 <HAL_UART_Init+0xa2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	2274      	movs	r2, #116	; 0x74
 800f476:	2100      	movs	r1, #0
 800f478:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	0018      	movs	r0, r3
 800f47e:	f7f4 f9bf 	bl	8003800 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	2224      	movs	r2, #36	; 0x24
 800f486:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	681a      	ldr	r2, [r3, #0]
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	2101      	movs	r1, #1
 800f494:	438a      	bics	r2, r1
 800f496:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	0018      	movs	r0, r3
 800f49c:	f000 fc20 	bl	800fce0 <UART_SetConfig>
 800f4a0:	0003      	movs	r3, r0
 800f4a2:	2b01      	cmp	r3, #1
 800f4a4:	d101      	bne.n	800f4aa <HAL_UART_Init+0xca>
  {
    return HAL_ERROR;
 800f4a6:	2301      	movs	r3, #1
 800f4a8:	e024      	b.n	800f4f4 <HAL_UART_Init+0x114>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d003      	beq.n	800f4ba <HAL_UART_Init+0xda>
  {
    UART_AdvFeatureConfig(huart);
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	0018      	movs	r0, r3
 800f4b6:	f000 fe21 	bl	80100fc <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	685a      	ldr	r2, [r3, #4]
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	4912      	ldr	r1, [pc, #72]	; (800f510 <HAL_UART_Init+0x130>)
 800f4c6:	400a      	ands	r2, r1
 800f4c8:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	689a      	ldr	r2, [r3, #8]
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	2108      	movs	r1, #8
 800f4d6:	438a      	bics	r2, r1
 800f4d8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	681a      	ldr	r2, [r3, #0]
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	2101      	movs	r1, #1
 800f4e6:	430a      	orrs	r2, r1
 800f4e8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	0018      	movs	r0, r3
 800f4ee:	f000 ff89 	bl	8010404 <UART_CheckIdleState>
 800f4f2:	0003      	movs	r3, r0
}
 800f4f4:	0018      	movs	r0, r3
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	b002      	add	sp, #8
 800f4fa:	bd80      	pop	{r7, pc}
 800f4fc:	40013800 	.word	0x40013800
 800f500:	40004400 	.word	0x40004400
 800f504:	40004800 	.word	0x40004800
 800f508:	40004c00 	.word	0x40004c00
 800f50c:	08017084 	.word	0x08017084
 800f510:	fffff7ff 	.word	0xfffff7ff

0800f514 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b08a      	sub	sp, #40	; 0x28
 800f518:	af02      	add	r7, sp, #8
 800f51a:	60f8      	str	r0, [r7, #12]
 800f51c:	60b9      	str	r1, [r7, #8]
 800f51e:	603b      	str	r3, [r7, #0]
 800f520:	1dbb      	adds	r3, r7, #6
 800f522:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f528:	2b20      	cmp	r3, #32
 800f52a:	d000      	beq.n	800f52e <HAL_UART_Transmit+0x1a>
 800f52c:	e096      	b.n	800f65c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800f52e:	68bb      	ldr	r3, [r7, #8]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d003      	beq.n	800f53c <HAL_UART_Transmit+0x28>
 800f534:	1dbb      	adds	r3, r7, #6
 800f536:	881b      	ldrh	r3, [r3, #0]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d101      	bne.n	800f540 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800f53c:	2301      	movs	r3, #1
 800f53e:	e08e      	b.n	800f65e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	689a      	ldr	r2, [r3, #8]
 800f544:	2380      	movs	r3, #128	; 0x80
 800f546:	015b      	lsls	r3, r3, #5
 800f548:	429a      	cmp	r2, r3
 800f54a:	d109      	bne.n	800f560 <HAL_UART_Transmit+0x4c>
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	691b      	ldr	r3, [r3, #16]
 800f550:	2b00      	cmp	r3, #0
 800f552:	d105      	bne.n	800f560 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800f554:	68bb      	ldr	r3, [r7, #8]
 800f556:	2201      	movs	r2, #1
 800f558:	4013      	ands	r3, r2
 800f55a:	d001      	beq.n	800f560 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800f55c:	2301      	movs	r3, #1
 800f55e:	e07e      	b.n	800f65e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	2274      	movs	r2, #116	; 0x74
 800f564:	5c9b      	ldrb	r3, [r3, r2]
 800f566:	2b01      	cmp	r3, #1
 800f568:	d101      	bne.n	800f56e <HAL_UART_Transmit+0x5a>
 800f56a:	2302      	movs	r3, #2
 800f56c:	e077      	b.n	800f65e <HAL_UART_Transmit+0x14a>
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	2274      	movs	r2, #116	; 0x74
 800f572:	2101      	movs	r1, #1
 800f574:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	2280      	movs	r2, #128	; 0x80
 800f57a:	2100      	movs	r1, #0
 800f57c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	2221      	movs	r2, #33	; 0x21
 800f582:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f584:	f7fa f8f8 	bl	8009778 <HAL_GetTick>
 800f588:	0003      	movs	r3, r0
 800f58a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	1dba      	adds	r2, r7, #6
 800f590:	2150      	movs	r1, #80	; 0x50
 800f592:	8812      	ldrh	r2, [r2, #0]
 800f594:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	1dba      	adds	r2, r7, #6
 800f59a:	2152      	movs	r1, #82	; 0x52
 800f59c:	8812      	ldrh	r2, [r2, #0]
 800f59e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	689a      	ldr	r2, [r3, #8]
 800f5a4:	2380      	movs	r3, #128	; 0x80
 800f5a6:	015b      	lsls	r3, r3, #5
 800f5a8:	429a      	cmp	r2, r3
 800f5aa:	d108      	bne.n	800f5be <HAL_UART_Transmit+0xaa>
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	691b      	ldr	r3, [r3, #16]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d104      	bne.n	800f5be <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f5b8:	68bb      	ldr	r3, [r7, #8]
 800f5ba:	61bb      	str	r3, [r7, #24]
 800f5bc:	e003      	b.n	800f5c6 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800f5be:	68bb      	ldr	r3, [r7, #8]
 800f5c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f5c2:	2300      	movs	r3, #0
 800f5c4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	2274      	movs	r2, #116	; 0x74
 800f5ca:	2100      	movs	r1, #0
 800f5cc:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800f5ce:	e02d      	b.n	800f62c <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f5d0:	697a      	ldr	r2, [r7, #20]
 800f5d2:	68f8      	ldr	r0, [r7, #12]
 800f5d4:	683b      	ldr	r3, [r7, #0]
 800f5d6:	9300      	str	r3, [sp, #0]
 800f5d8:	0013      	movs	r3, r2
 800f5da:	2200      	movs	r2, #0
 800f5dc:	2180      	movs	r1, #128	; 0x80
 800f5de:	f000 ff59 	bl	8010494 <UART_WaitOnFlagUntilTimeout>
 800f5e2:	1e03      	subs	r3, r0, #0
 800f5e4:	d001      	beq.n	800f5ea <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800f5e6:	2303      	movs	r3, #3
 800f5e8:	e039      	b.n	800f65e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800f5ea:	69fb      	ldr	r3, [r7, #28]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d10b      	bne.n	800f608 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f5f0:	69bb      	ldr	r3, [r7, #24]
 800f5f2:	881a      	ldrh	r2, [r3, #0]
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	05d2      	lsls	r2, r2, #23
 800f5fa:	0dd2      	lsrs	r2, r2, #23
 800f5fc:	b292      	uxth	r2, r2
 800f5fe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800f600:	69bb      	ldr	r3, [r7, #24]
 800f602:	3302      	adds	r3, #2
 800f604:	61bb      	str	r3, [r7, #24]
 800f606:	e008      	b.n	800f61a <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f608:	69fb      	ldr	r3, [r7, #28]
 800f60a:	781a      	ldrb	r2, [r3, #0]
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	b292      	uxth	r2, r2
 800f612:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800f614:	69fb      	ldr	r3, [r7, #28]
 800f616:	3301      	adds	r3, #1
 800f618:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	2252      	movs	r2, #82	; 0x52
 800f61e:	5a9b      	ldrh	r3, [r3, r2]
 800f620:	b29b      	uxth	r3, r3
 800f622:	3b01      	subs	r3, #1
 800f624:	b299      	uxth	r1, r3
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	2252      	movs	r2, #82	; 0x52
 800f62a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	2252      	movs	r2, #82	; 0x52
 800f630:	5a9b      	ldrh	r3, [r3, r2]
 800f632:	b29b      	uxth	r3, r3
 800f634:	2b00      	cmp	r3, #0
 800f636:	d1cb      	bne.n	800f5d0 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f638:	697a      	ldr	r2, [r7, #20]
 800f63a:	68f8      	ldr	r0, [r7, #12]
 800f63c:	683b      	ldr	r3, [r7, #0]
 800f63e:	9300      	str	r3, [sp, #0]
 800f640:	0013      	movs	r3, r2
 800f642:	2200      	movs	r2, #0
 800f644:	2140      	movs	r1, #64	; 0x40
 800f646:	f000 ff25 	bl	8010494 <UART_WaitOnFlagUntilTimeout>
 800f64a:	1e03      	subs	r3, r0, #0
 800f64c:	d001      	beq.n	800f652 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 800f64e:	2303      	movs	r3, #3
 800f650:	e005      	b.n	800f65e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	2220      	movs	r2, #32
 800f656:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800f658:	2300      	movs	r3, #0
 800f65a:	e000      	b.n	800f65e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800f65c:	2302      	movs	r3, #2
  }
}
 800f65e:	0018      	movs	r0, r3
 800f660:	46bd      	mov	sp, r7
 800f662:	b008      	add	sp, #32
 800f664:	bd80      	pop	{r7, pc}

0800f666 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f666:	b580      	push	{r7, lr}
 800f668:	b088      	sub	sp, #32
 800f66a:	af00      	add	r7, sp, #0
 800f66c:	60f8      	str	r0, [r7, #12]
 800f66e:	60b9      	str	r1, [r7, #8]
 800f670:	1dbb      	adds	r3, r7, #6
 800f672:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f678:	2b20      	cmp	r3, #32
 800f67a:	d150      	bne.n	800f71e <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 800f67c:	68bb      	ldr	r3, [r7, #8]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d003      	beq.n	800f68a <HAL_UART_Receive_IT+0x24>
 800f682:	1dbb      	adds	r3, r7, #6
 800f684:	881b      	ldrh	r3, [r3, #0]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d101      	bne.n	800f68e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800f68a:	2301      	movs	r3, #1
 800f68c:	e048      	b.n	800f720 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	689a      	ldr	r2, [r3, #8]
 800f692:	2380      	movs	r3, #128	; 0x80
 800f694:	015b      	lsls	r3, r3, #5
 800f696:	429a      	cmp	r2, r3
 800f698:	d109      	bne.n	800f6ae <HAL_UART_Receive_IT+0x48>
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	691b      	ldr	r3, [r3, #16]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d105      	bne.n	800f6ae <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800f6a2:	68bb      	ldr	r3, [r7, #8]
 800f6a4:	2201      	movs	r2, #1
 800f6a6:	4013      	ands	r3, r2
 800f6a8:	d001      	beq.n	800f6ae <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 800f6aa:	2301      	movs	r3, #1
 800f6ac:	e038      	b.n	800f720 <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	2274      	movs	r2, #116	; 0x74
 800f6b2:	5c9b      	ldrb	r3, [r3, r2]
 800f6b4:	2b01      	cmp	r3, #1
 800f6b6:	d101      	bne.n	800f6bc <HAL_UART_Receive_IT+0x56>
 800f6b8:	2302      	movs	r3, #2
 800f6ba:	e031      	b.n	800f720 <HAL_UART_Receive_IT+0xba>
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	2274      	movs	r2, #116	; 0x74
 800f6c0:	2101      	movs	r1, #1
 800f6c2:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	2200      	movs	r2, #0
 800f6c8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	685a      	ldr	r2, [r3, #4]
 800f6d0:	2380      	movs	r3, #128	; 0x80
 800f6d2:	041b      	lsls	r3, r3, #16
 800f6d4:	4013      	ands	r3, r2
 800f6d6:	d019      	beq.n	800f70c <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f6d8:	f3ef 8310 	mrs	r3, PRIMASK
 800f6dc:	613b      	str	r3, [r7, #16]
  return(result);
 800f6de:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f6e0:	61fb      	str	r3, [r7, #28]
 800f6e2:	2301      	movs	r3, #1
 800f6e4:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f6e6:	697b      	ldr	r3, [r7, #20]
 800f6e8:	f383 8810 	msr	PRIMASK, r3
}
 800f6ec:	46c0      	nop			; (mov r8, r8)
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	681a      	ldr	r2, [r3, #0]
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	2180      	movs	r1, #128	; 0x80
 800f6fa:	04c9      	lsls	r1, r1, #19
 800f6fc:	430a      	orrs	r2, r1
 800f6fe:	601a      	str	r2, [r3, #0]
 800f700:	69fb      	ldr	r3, [r7, #28]
 800f702:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f704:	69bb      	ldr	r3, [r7, #24]
 800f706:	f383 8810 	msr	PRIMASK, r3
}
 800f70a:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800f70c:	1dbb      	adds	r3, r7, #6
 800f70e:	881a      	ldrh	r2, [r3, #0]
 800f710:	68b9      	ldr	r1, [r7, #8]
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	0018      	movs	r0, r3
 800f716:	f000 ff81 	bl	801061c <UART_Start_Receive_IT>
 800f71a:	0003      	movs	r3, r0
 800f71c:	e000      	b.n	800f720 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 800f71e:	2302      	movs	r3, #2
  }
}
 800f720:	0018      	movs	r0, r3
 800f722:	46bd      	mov	sp, r7
 800f724:	b008      	add	sp, #32
 800f726:	bd80      	pop	{r7, pc}

0800f728 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f728:	b590      	push	{r4, r7, lr}
 800f72a:	b0ab      	sub	sp, #172	; 0xac
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	69db      	ldr	r3, [r3, #28]
 800f736:	22a4      	movs	r2, #164	; 0xa4
 800f738:	18b9      	adds	r1, r7, r2
 800f73a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	20a0      	movs	r0, #160	; 0xa0
 800f744:	1839      	adds	r1, r7, r0
 800f746:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	689b      	ldr	r3, [r3, #8]
 800f74e:	219c      	movs	r1, #156	; 0x9c
 800f750:	1879      	adds	r1, r7, r1
 800f752:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f754:	0011      	movs	r1, r2
 800f756:	18bb      	adds	r3, r7, r2
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	4a99      	ldr	r2, [pc, #612]	; (800f9c0 <HAL_UART_IRQHandler+0x298>)
 800f75c:	4013      	ands	r3, r2
 800f75e:	2298      	movs	r2, #152	; 0x98
 800f760:	18bc      	adds	r4, r7, r2
 800f762:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800f764:	18bb      	adds	r3, r7, r2
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d114      	bne.n	800f796 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800f76c:	187b      	adds	r3, r7, r1
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	2220      	movs	r2, #32
 800f772:	4013      	ands	r3, r2
 800f774:	d00f      	beq.n	800f796 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800f776:	183b      	adds	r3, r7, r0
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	2220      	movs	r2, #32
 800f77c:	4013      	ands	r3, r2
 800f77e:	d00a      	beq.n	800f796 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f784:	2b00      	cmp	r3, #0
 800f786:	d100      	bne.n	800f78a <HAL_UART_IRQHandler+0x62>
 800f788:	e27e      	b.n	800fc88 <HAL_UART_IRQHandler+0x560>
      {
        huart->RxISR(huart);
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f78e:	687a      	ldr	r2, [r7, #4]
 800f790:	0010      	movs	r0, r2
 800f792:	4798      	blx	r3
      }
      return;
 800f794:	e278      	b.n	800fc88 <HAL_UART_IRQHandler+0x560>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f796:	2398      	movs	r3, #152	; 0x98
 800f798:	18fb      	adds	r3, r7, r3
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d100      	bne.n	800f7a2 <HAL_UART_IRQHandler+0x7a>
 800f7a0:	e114      	b.n	800f9cc <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800f7a2:	239c      	movs	r3, #156	; 0x9c
 800f7a4:	18fb      	adds	r3, r7, r3
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	2201      	movs	r2, #1
 800f7aa:	4013      	ands	r3, r2
 800f7ac:	d106      	bne.n	800f7bc <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800f7ae:	23a0      	movs	r3, #160	; 0xa0
 800f7b0:	18fb      	adds	r3, r7, r3
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	4a83      	ldr	r2, [pc, #524]	; (800f9c4 <HAL_UART_IRQHandler+0x29c>)
 800f7b6:	4013      	ands	r3, r2
 800f7b8:	d100      	bne.n	800f7bc <HAL_UART_IRQHandler+0x94>
 800f7ba:	e107      	b.n	800f9cc <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f7bc:	23a4      	movs	r3, #164	; 0xa4
 800f7be:	18fb      	adds	r3, r7, r3
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	2201      	movs	r2, #1
 800f7c4:	4013      	ands	r3, r2
 800f7c6:	d012      	beq.n	800f7ee <HAL_UART_IRQHandler+0xc6>
 800f7c8:	23a0      	movs	r3, #160	; 0xa0
 800f7ca:	18fb      	adds	r3, r7, r3
 800f7cc:	681a      	ldr	r2, [r3, #0]
 800f7ce:	2380      	movs	r3, #128	; 0x80
 800f7d0:	005b      	lsls	r3, r3, #1
 800f7d2:	4013      	ands	r3, r2
 800f7d4:	d00b      	beq.n	800f7ee <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	2201      	movs	r2, #1
 800f7dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	2280      	movs	r2, #128	; 0x80
 800f7e2:	589b      	ldr	r3, [r3, r2]
 800f7e4:	2201      	movs	r2, #1
 800f7e6:	431a      	orrs	r2, r3
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	2180      	movs	r1, #128	; 0x80
 800f7ec:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f7ee:	23a4      	movs	r3, #164	; 0xa4
 800f7f0:	18fb      	adds	r3, r7, r3
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	2202      	movs	r2, #2
 800f7f6:	4013      	ands	r3, r2
 800f7f8:	d011      	beq.n	800f81e <HAL_UART_IRQHandler+0xf6>
 800f7fa:	239c      	movs	r3, #156	; 0x9c
 800f7fc:	18fb      	adds	r3, r7, r3
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	2201      	movs	r2, #1
 800f802:	4013      	ands	r3, r2
 800f804:	d00b      	beq.n	800f81e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	2202      	movs	r2, #2
 800f80c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	2280      	movs	r2, #128	; 0x80
 800f812:	589b      	ldr	r3, [r3, r2]
 800f814:	2204      	movs	r2, #4
 800f816:	431a      	orrs	r2, r3
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	2180      	movs	r1, #128	; 0x80
 800f81c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f81e:	23a4      	movs	r3, #164	; 0xa4
 800f820:	18fb      	adds	r3, r7, r3
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	2204      	movs	r2, #4
 800f826:	4013      	ands	r3, r2
 800f828:	d011      	beq.n	800f84e <HAL_UART_IRQHandler+0x126>
 800f82a:	239c      	movs	r3, #156	; 0x9c
 800f82c:	18fb      	adds	r3, r7, r3
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	2201      	movs	r2, #1
 800f832:	4013      	ands	r3, r2
 800f834:	d00b      	beq.n	800f84e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	2204      	movs	r2, #4
 800f83c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	2280      	movs	r2, #128	; 0x80
 800f842:	589b      	ldr	r3, [r3, r2]
 800f844:	2202      	movs	r2, #2
 800f846:	431a      	orrs	r2, r3
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	2180      	movs	r1, #128	; 0x80
 800f84c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f84e:	23a4      	movs	r3, #164	; 0xa4
 800f850:	18fb      	adds	r3, r7, r3
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	2208      	movs	r2, #8
 800f856:	4013      	ands	r3, r2
 800f858:	d017      	beq.n	800f88a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800f85a:	23a0      	movs	r3, #160	; 0xa0
 800f85c:	18fb      	adds	r3, r7, r3
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	2220      	movs	r2, #32
 800f862:	4013      	ands	r3, r2
 800f864:	d105      	bne.n	800f872 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800f866:	239c      	movs	r3, #156	; 0x9c
 800f868:	18fb      	adds	r3, r7, r3
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	2201      	movs	r2, #1
 800f86e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800f870:	d00b      	beq.n	800f88a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	2208      	movs	r2, #8
 800f878:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	2280      	movs	r2, #128	; 0x80
 800f87e:	589b      	ldr	r3, [r3, r2]
 800f880:	2208      	movs	r2, #8
 800f882:	431a      	orrs	r2, r3
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	2180      	movs	r1, #128	; 0x80
 800f888:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f88a:	23a4      	movs	r3, #164	; 0xa4
 800f88c:	18fb      	adds	r3, r7, r3
 800f88e:	681a      	ldr	r2, [r3, #0]
 800f890:	2380      	movs	r3, #128	; 0x80
 800f892:	011b      	lsls	r3, r3, #4
 800f894:	4013      	ands	r3, r2
 800f896:	d013      	beq.n	800f8c0 <HAL_UART_IRQHandler+0x198>
 800f898:	23a0      	movs	r3, #160	; 0xa0
 800f89a:	18fb      	adds	r3, r7, r3
 800f89c:	681a      	ldr	r2, [r3, #0]
 800f89e:	2380      	movs	r3, #128	; 0x80
 800f8a0:	04db      	lsls	r3, r3, #19
 800f8a2:	4013      	ands	r3, r2
 800f8a4:	d00c      	beq.n	800f8c0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	2280      	movs	r2, #128	; 0x80
 800f8ac:	0112      	lsls	r2, r2, #4
 800f8ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	2280      	movs	r2, #128	; 0x80
 800f8b4:	589b      	ldr	r3, [r3, r2]
 800f8b6:	2220      	movs	r2, #32
 800f8b8:	431a      	orrs	r2, r3
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	2180      	movs	r1, #128	; 0x80
 800f8be:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	2280      	movs	r2, #128	; 0x80
 800f8c4:	589b      	ldr	r3, [r3, r2]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d100      	bne.n	800f8cc <HAL_UART_IRQHandler+0x1a4>
 800f8ca:	e1df      	b.n	800fc8c <HAL_UART_IRQHandler+0x564>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800f8cc:	23a4      	movs	r3, #164	; 0xa4
 800f8ce:	18fb      	adds	r3, r7, r3
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	2220      	movs	r2, #32
 800f8d4:	4013      	ands	r3, r2
 800f8d6:	d00e      	beq.n	800f8f6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800f8d8:	23a0      	movs	r3, #160	; 0xa0
 800f8da:	18fb      	adds	r3, r7, r3
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	2220      	movs	r2, #32
 800f8e0:	4013      	ands	r3, r2
 800f8e2:	d008      	beq.n	800f8f6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d004      	beq.n	800f8f6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f8f0:	687a      	ldr	r2, [r7, #4]
 800f8f2:	0010      	movs	r0, r2
 800f8f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	2280      	movs	r2, #128	; 0x80
 800f8fa:	589b      	ldr	r3, [r3, r2]
 800f8fc:	2194      	movs	r1, #148	; 0x94
 800f8fe:	187a      	adds	r2, r7, r1
 800f900:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	689b      	ldr	r3, [r3, #8]
 800f908:	2240      	movs	r2, #64	; 0x40
 800f90a:	4013      	ands	r3, r2
 800f90c:	2b40      	cmp	r3, #64	; 0x40
 800f90e:	d004      	beq.n	800f91a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f910:	187b      	adds	r3, r7, r1
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	2228      	movs	r2, #40	; 0x28
 800f916:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f918:	d047      	beq.n	800f9aa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	0018      	movs	r0, r3
 800f91e:	f000 ff2d 	bl	801077c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	689b      	ldr	r3, [r3, #8]
 800f928:	2240      	movs	r2, #64	; 0x40
 800f92a:	4013      	ands	r3, r2
 800f92c:	2b40      	cmp	r3, #64	; 0x40
 800f92e:	d137      	bne.n	800f9a0 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f930:	f3ef 8310 	mrs	r3, PRIMASK
 800f934:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800f936:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f938:	2090      	movs	r0, #144	; 0x90
 800f93a:	183a      	adds	r2, r7, r0
 800f93c:	6013      	str	r3, [r2, #0]
 800f93e:	2301      	movs	r3, #1
 800f940:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f942:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f944:	f383 8810 	msr	PRIMASK, r3
}
 800f948:	46c0      	nop			; (mov r8, r8)
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	689a      	ldr	r2, [r3, #8]
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	2140      	movs	r1, #64	; 0x40
 800f956:	438a      	bics	r2, r1
 800f958:	609a      	str	r2, [r3, #8]
 800f95a:	183b      	adds	r3, r7, r0
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f960:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f962:	f383 8810 	msr	PRIMASK, r3
}
 800f966:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d012      	beq.n	800f996 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f974:	4a14      	ldr	r2, [pc, #80]	; (800f9c8 <HAL_UART_IRQHandler+0x2a0>)
 800f976:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f97c:	0018      	movs	r0, r3
 800f97e:	f7fa ffb5 	bl	800a8ec <HAL_DMA_Abort_IT>
 800f982:	1e03      	subs	r3, r0, #0
 800f984:	d01a      	beq.n	800f9bc <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f98a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f990:	0018      	movs	r0, r3
 800f992:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f994:	e012      	b.n	800f9bc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	0018      	movs	r0, r3
 800f99a:	f000 f98d 	bl	800fcb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f99e:	e00d      	b.n	800f9bc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	0018      	movs	r0, r3
 800f9a4:	f000 f988 	bl	800fcb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f9a8:	e008      	b.n	800f9bc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	0018      	movs	r0, r3
 800f9ae:	f000 f983 	bl	800fcb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	2280      	movs	r2, #128	; 0x80
 800f9b6:	2100      	movs	r1, #0
 800f9b8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800f9ba:	e167      	b.n	800fc8c <HAL_UART_IRQHandler+0x564>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f9bc:	46c0      	nop			; (mov r8, r8)
    return;
 800f9be:	e165      	b.n	800fc8c <HAL_UART_IRQHandler+0x564>
 800f9c0:	0000080f 	.word	0x0000080f
 800f9c4:	04000120 	.word	0x04000120
 800f9c8:	08010841 	.word	0x08010841

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f9d0:	2b01      	cmp	r3, #1
 800f9d2:	d000      	beq.n	800f9d6 <HAL_UART_IRQHandler+0x2ae>
 800f9d4:	e131      	b.n	800fc3a <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f9d6:	23a4      	movs	r3, #164	; 0xa4
 800f9d8:	18fb      	adds	r3, r7, r3
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	2210      	movs	r2, #16
 800f9de:	4013      	ands	r3, r2
 800f9e0:	d100      	bne.n	800f9e4 <HAL_UART_IRQHandler+0x2bc>
 800f9e2:	e12a      	b.n	800fc3a <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f9e4:	23a0      	movs	r3, #160	; 0xa0
 800f9e6:	18fb      	adds	r3, r7, r3
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	2210      	movs	r2, #16
 800f9ec:	4013      	ands	r3, r2
 800f9ee:	d100      	bne.n	800f9f2 <HAL_UART_IRQHandler+0x2ca>
 800f9f0:	e123      	b.n	800fc3a <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	2210      	movs	r2, #16
 800f9f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	689b      	ldr	r3, [r3, #8]
 800fa00:	2240      	movs	r2, #64	; 0x40
 800fa02:	4013      	ands	r3, r2
 800fa04:	2b40      	cmp	r3, #64	; 0x40
 800fa06:	d000      	beq.n	800fa0a <HAL_UART_IRQHandler+0x2e2>
 800fa08:	e09b      	b.n	800fb42 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	685a      	ldr	r2, [r3, #4]
 800fa12:	217e      	movs	r1, #126	; 0x7e
 800fa14:	187b      	adds	r3, r7, r1
 800fa16:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800fa18:	187b      	adds	r3, r7, r1
 800fa1a:	881b      	ldrh	r3, [r3, #0]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d100      	bne.n	800fa22 <HAL_UART_IRQHandler+0x2fa>
 800fa20:	e136      	b.n	800fc90 <HAL_UART_IRQHandler+0x568>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	2258      	movs	r2, #88	; 0x58
 800fa26:	5a9b      	ldrh	r3, [r3, r2]
 800fa28:	187a      	adds	r2, r7, r1
 800fa2a:	8812      	ldrh	r2, [r2, #0]
 800fa2c:	429a      	cmp	r2, r3
 800fa2e:	d300      	bcc.n	800fa32 <HAL_UART_IRQHandler+0x30a>
 800fa30:	e12e      	b.n	800fc90 <HAL_UART_IRQHandler+0x568>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	187a      	adds	r2, r7, r1
 800fa36:	215a      	movs	r1, #90	; 0x5a
 800fa38:	8812      	ldrh	r2, [r2, #0]
 800fa3a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa40:	699b      	ldr	r3, [r3, #24]
 800fa42:	2b20      	cmp	r3, #32
 800fa44:	d06e      	beq.n	800fb24 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fa46:	f3ef 8310 	mrs	r3, PRIMASK
 800fa4a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800fa4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fa4e:	67bb      	str	r3, [r7, #120]	; 0x78
 800fa50:	2301      	movs	r3, #1
 800fa52:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fa54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa56:	f383 8810 	msr	PRIMASK, r3
}
 800fa5a:	46c0      	nop			; (mov r8, r8)
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	681a      	ldr	r2, [r3, #0]
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	498e      	ldr	r1, [pc, #568]	; (800fca0 <HAL_UART_IRQHandler+0x578>)
 800fa68:	400a      	ands	r2, r1
 800fa6a:	601a      	str	r2, [r3, #0]
 800fa6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fa6e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fa70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa72:	f383 8810 	msr	PRIMASK, r3
}
 800fa76:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fa78:	f3ef 8310 	mrs	r3, PRIMASK
 800fa7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800fa7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fa80:	677b      	str	r3, [r7, #116]	; 0x74
 800fa82:	2301      	movs	r3, #1
 800fa84:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fa86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa88:	f383 8810 	msr	PRIMASK, r3
}
 800fa8c:	46c0      	nop			; (mov r8, r8)
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	689a      	ldr	r2, [r3, #8]
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	2101      	movs	r1, #1
 800fa9a:	438a      	bics	r2, r1
 800fa9c:	609a      	str	r2, [r3, #8]
 800fa9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800faa0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800faa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800faa4:	f383 8810 	msr	PRIMASK, r3
}
 800faa8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800faaa:	f3ef 8310 	mrs	r3, PRIMASK
 800faae:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800fab0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fab2:	673b      	str	r3, [r7, #112]	; 0x70
 800fab4:	2301      	movs	r3, #1
 800fab6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800faba:	f383 8810 	msr	PRIMASK, r3
}
 800fabe:	46c0      	nop			; (mov r8, r8)
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	689a      	ldr	r2, [r3, #8]
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	2140      	movs	r1, #64	; 0x40
 800facc:	438a      	bics	r2, r1
 800face:	609a      	str	r2, [r3, #8]
 800fad0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fad2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fad4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fad6:	f383 8810 	msr	PRIMASK, r3
}
 800fada:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	2220      	movs	r2, #32
 800fae0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	2200      	movs	r2, #0
 800fae6:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fae8:	f3ef 8310 	mrs	r3, PRIMASK
 800faec:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800faee:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800faf0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800faf2:	2301      	movs	r3, #1
 800faf4:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800faf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800faf8:	f383 8810 	msr	PRIMASK, r3
}
 800fafc:	46c0      	nop			; (mov r8, r8)
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	681a      	ldr	r2, [r3, #0]
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	2110      	movs	r1, #16
 800fb0a:	438a      	bics	r2, r1
 800fb0c:	601a      	str	r2, [r3, #0]
 800fb0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fb10:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fb12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb14:	f383 8810 	msr	PRIMASK, r3
}
 800fb18:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb1e:	0018      	movs	r0, r3
 800fb20:	f7fa feac 	bl	800a87c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	2258      	movs	r2, #88	; 0x58
 800fb28:	5a9a      	ldrh	r2, [r3, r2]
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	215a      	movs	r1, #90	; 0x5a
 800fb2e:	5a5b      	ldrh	r3, [r3, r1]
 800fb30:	b29b      	uxth	r3, r3
 800fb32:	1ad3      	subs	r3, r2, r3
 800fb34:	b29a      	uxth	r2, r3
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	0011      	movs	r1, r2
 800fb3a:	0018      	movs	r0, r3
 800fb3c:	f000 f8c4 	bl	800fcc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fb40:	e0a6      	b.n	800fc90 <HAL_UART_IRQHandler+0x568>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	2258      	movs	r2, #88	; 0x58
 800fb46:	5a99      	ldrh	r1, [r3, r2]
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	225a      	movs	r2, #90	; 0x5a
 800fb4c:	5a9b      	ldrh	r3, [r3, r2]
 800fb4e:	b29a      	uxth	r2, r3
 800fb50:	208e      	movs	r0, #142	; 0x8e
 800fb52:	183b      	adds	r3, r7, r0
 800fb54:	1a8a      	subs	r2, r1, r2
 800fb56:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	225a      	movs	r2, #90	; 0x5a
 800fb5c:	5a9b      	ldrh	r3, [r3, r2]
 800fb5e:	b29b      	uxth	r3, r3
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d100      	bne.n	800fb66 <HAL_UART_IRQHandler+0x43e>
 800fb64:	e096      	b.n	800fc94 <HAL_UART_IRQHandler+0x56c>
          && (nb_rx_data > 0U))
 800fb66:	183b      	adds	r3, r7, r0
 800fb68:	881b      	ldrh	r3, [r3, #0]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d100      	bne.n	800fb70 <HAL_UART_IRQHandler+0x448>
 800fb6e:	e091      	b.n	800fc94 <HAL_UART_IRQHandler+0x56c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fb70:	f3ef 8310 	mrs	r3, PRIMASK
 800fb74:	60fb      	str	r3, [r7, #12]
  return(result);
 800fb76:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fb78:	2488      	movs	r4, #136	; 0x88
 800fb7a:	193a      	adds	r2, r7, r4
 800fb7c:	6013      	str	r3, [r2, #0]
 800fb7e:	2301      	movs	r3, #1
 800fb80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fb82:	693b      	ldr	r3, [r7, #16]
 800fb84:	f383 8810 	msr	PRIMASK, r3
}
 800fb88:	46c0      	nop			; (mov r8, r8)
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	681a      	ldr	r2, [r3, #0]
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	4943      	ldr	r1, [pc, #268]	; (800fca4 <HAL_UART_IRQHandler+0x57c>)
 800fb96:	400a      	ands	r2, r1
 800fb98:	601a      	str	r2, [r3, #0]
 800fb9a:	193b      	adds	r3, r7, r4
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fba0:	697b      	ldr	r3, [r7, #20]
 800fba2:	f383 8810 	msr	PRIMASK, r3
}
 800fba6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fba8:	f3ef 8310 	mrs	r3, PRIMASK
 800fbac:	61bb      	str	r3, [r7, #24]
  return(result);
 800fbae:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fbb0:	2484      	movs	r4, #132	; 0x84
 800fbb2:	193a      	adds	r2, r7, r4
 800fbb4:	6013      	str	r3, [r2, #0]
 800fbb6:	2301      	movs	r3, #1
 800fbb8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fbba:	69fb      	ldr	r3, [r7, #28]
 800fbbc:	f383 8810 	msr	PRIMASK, r3
}
 800fbc0:	46c0      	nop			; (mov r8, r8)
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	689a      	ldr	r2, [r3, #8]
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	2101      	movs	r1, #1
 800fbce:	438a      	bics	r2, r1
 800fbd0:	609a      	str	r2, [r3, #8]
 800fbd2:	193b      	adds	r3, r7, r4
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fbd8:	6a3b      	ldr	r3, [r7, #32]
 800fbda:	f383 8810 	msr	PRIMASK, r3
}
 800fbde:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	2220      	movs	r2, #32
 800fbe4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	2200      	movs	r2, #0
 800fbea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	2200      	movs	r2, #0
 800fbf0:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fbf2:	f3ef 8310 	mrs	r3, PRIMASK
 800fbf6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800fbf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fbfa:	2480      	movs	r4, #128	; 0x80
 800fbfc:	193a      	adds	r2, r7, r4
 800fbfe:	6013      	str	r3, [r2, #0]
 800fc00:	2301      	movs	r3, #1
 800fc02:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fc04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc06:	f383 8810 	msr	PRIMASK, r3
}
 800fc0a:	46c0      	nop			; (mov r8, r8)
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	681a      	ldr	r2, [r3, #0]
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	2110      	movs	r1, #16
 800fc18:	438a      	bics	r2, r1
 800fc1a:	601a      	str	r2, [r3, #0]
 800fc1c:	193b      	adds	r3, r7, r4
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fc22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc24:	f383 8810 	msr	PRIMASK, r3
}
 800fc28:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800fc2a:	183b      	adds	r3, r7, r0
 800fc2c:	881a      	ldrh	r2, [r3, #0]
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	0011      	movs	r1, r2
 800fc32:	0018      	movs	r0, r3
 800fc34:	f000 f848 	bl	800fcc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fc38:	e02c      	b.n	800fc94 <HAL_UART_IRQHandler+0x56c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800fc3a:	23a4      	movs	r3, #164	; 0xa4
 800fc3c:	18fb      	adds	r3, r7, r3
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	2280      	movs	r2, #128	; 0x80
 800fc42:	4013      	ands	r3, r2
 800fc44:	d00f      	beq.n	800fc66 <HAL_UART_IRQHandler+0x53e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800fc46:	23a0      	movs	r3, #160	; 0xa0
 800fc48:	18fb      	adds	r3, r7, r3
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	2280      	movs	r2, #128	; 0x80
 800fc4e:	4013      	ands	r3, r2
 800fc50:	d009      	beq.n	800fc66 <HAL_UART_IRQHandler+0x53e>
  {
    if (huart->TxISR != NULL)
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d01e      	beq.n	800fc98 <HAL_UART_IRQHandler+0x570>
    {
      huart->TxISR(huart);
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fc5e:	687a      	ldr	r2, [r7, #4]
 800fc60:	0010      	movs	r0, r2
 800fc62:	4798      	blx	r3
    }
    return;
 800fc64:	e018      	b.n	800fc98 <HAL_UART_IRQHandler+0x570>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800fc66:	23a4      	movs	r3, #164	; 0xa4
 800fc68:	18fb      	adds	r3, r7, r3
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	2240      	movs	r2, #64	; 0x40
 800fc6e:	4013      	ands	r3, r2
 800fc70:	d013      	beq.n	800fc9a <HAL_UART_IRQHandler+0x572>
 800fc72:	23a0      	movs	r3, #160	; 0xa0
 800fc74:	18fb      	adds	r3, r7, r3
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	2240      	movs	r2, #64	; 0x40
 800fc7a:	4013      	ands	r3, r2
 800fc7c:	d00d      	beq.n	800fc9a <HAL_UART_IRQHandler+0x572>
  {
    UART_EndTransmit_IT(huart);
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	0018      	movs	r0, r3
 800fc82:	f000 fdf4 	bl	801086e <UART_EndTransmit_IT>
    return;
 800fc86:	e008      	b.n	800fc9a <HAL_UART_IRQHandler+0x572>
      return;
 800fc88:	46c0      	nop			; (mov r8, r8)
 800fc8a:	e006      	b.n	800fc9a <HAL_UART_IRQHandler+0x572>
    return;
 800fc8c:	46c0      	nop			; (mov r8, r8)
 800fc8e:	e004      	b.n	800fc9a <HAL_UART_IRQHandler+0x572>
      return;
 800fc90:	46c0      	nop			; (mov r8, r8)
 800fc92:	e002      	b.n	800fc9a <HAL_UART_IRQHandler+0x572>
      return;
 800fc94:	46c0      	nop			; (mov r8, r8)
 800fc96:	e000      	b.n	800fc9a <HAL_UART_IRQHandler+0x572>
    return;
 800fc98:	46c0      	nop			; (mov r8, r8)
  }

}
 800fc9a:	46bd      	mov	sp, r7
 800fc9c:	b02b      	add	sp, #172	; 0xac
 800fc9e:	bd90      	pop	{r4, r7, pc}
 800fca0:	fffffeff 	.word	0xfffffeff
 800fca4:	fffffedf 	.word	0xfffffedf

0800fca8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b082      	sub	sp, #8
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800fcb0:	46c0      	nop			; (mov r8, r8)
 800fcb2:	46bd      	mov	sp, r7
 800fcb4:	b002      	add	sp, #8
 800fcb6:	bd80      	pop	{r7, pc}

0800fcb8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b082      	sub	sp, #8
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800fcc0:	46c0      	nop			; (mov r8, r8)
 800fcc2:	46bd      	mov	sp, r7
 800fcc4:	b002      	add	sp, #8
 800fcc6:	bd80      	pop	{r7, pc}

0800fcc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800fcc8:	b580      	push	{r7, lr}
 800fcca:	b082      	sub	sp, #8
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	6078      	str	r0, [r7, #4]
 800fcd0:	000a      	movs	r2, r1
 800fcd2:	1cbb      	adds	r3, r7, #2
 800fcd4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800fcd6:	46c0      	nop			; (mov r8, r8)
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	b002      	add	sp, #8
 800fcdc:	bd80      	pop	{r7, pc}
	...

0800fce0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b088      	sub	sp, #32
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fce8:	231e      	movs	r3, #30
 800fcea:	18fb      	adds	r3, r7, r3
 800fcec:	2200      	movs	r2, #0
 800fcee:	701a      	strb	r2, [r3, #0]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	685b      	ldr	r3, [r3, #4]
 800fcf4:	4ac3      	ldr	r2, [pc, #780]	; (8010004 <UART_SetConfig+0x324>)
 800fcf6:	4293      	cmp	r3, r2
 800fcf8:	d905      	bls.n	800fd06 <UART_SetConfig+0x26>
 800fcfa:	4ac3      	ldr	r2, [pc, #780]	; (8010008 <UART_SetConfig+0x328>)
 800fcfc:	4bc3      	ldr	r3, [pc, #780]	; (801000c <UART_SetConfig+0x32c>)
 800fcfe:	0011      	movs	r1, r2
 800fd00:	0018      	movs	r0, r3
 800fd02:	f7f3 fc6c 	bl	80035de <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	689a      	ldr	r2, [r3, #8]
 800fd0a:	2380      	movs	r3, #128	; 0x80
 800fd0c:	055b      	lsls	r3, r3, #21
 800fd0e:	429a      	cmp	r2, r3
 800fd10:	d00f      	beq.n	800fd32 <UART_SetConfig+0x52>
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	689b      	ldr	r3, [r3, #8]
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d00b      	beq.n	800fd32 <UART_SetConfig+0x52>
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	689a      	ldr	r2, [r3, #8]
 800fd1e:	2380      	movs	r3, #128	; 0x80
 800fd20:	015b      	lsls	r3, r3, #5
 800fd22:	429a      	cmp	r2, r3
 800fd24:	d005      	beq.n	800fd32 <UART_SetConfig+0x52>
 800fd26:	4aba      	ldr	r2, [pc, #744]	; (8010010 <UART_SetConfig+0x330>)
 800fd28:	4bb8      	ldr	r3, [pc, #736]	; (801000c <UART_SetConfig+0x32c>)
 800fd2a:	0011      	movs	r1, r2
 800fd2c:	0018      	movs	r0, r3
 800fd2e:	f7f3 fc56 	bl	80035de <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	68da      	ldr	r2, [r3, #12]
 800fd36:	2380      	movs	r3, #128	; 0x80
 800fd38:	015b      	lsls	r3, r3, #5
 800fd3a:	429a      	cmp	r2, r3
 800fd3c:	d015      	beq.n	800fd6a <UART_SetConfig+0x8a>
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	68db      	ldr	r3, [r3, #12]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d011      	beq.n	800fd6a <UART_SetConfig+0x8a>
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	68da      	ldr	r2, [r3, #12]
 800fd4a:	23c0      	movs	r3, #192	; 0xc0
 800fd4c:	019b      	lsls	r3, r3, #6
 800fd4e:	429a      	cmp	r2, r3
 800fd50:	d00b      	beq.n	800fd6a <UART_SetConfig+0x8a>
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	68da      	ldr	r2, [r3, #12]
 800fd56:	2380      	movs	r3, #128	; 0x80
 800fd58:	019b      	lsls	r3, r3, #6
 800fd5a:	429a      	cmp	r2, r3
 800fd5c:	d005      	beq.n	800fd6a <UART_SetConfig+0x8a>
 800fd5e:	4aad      	ldr	r2, [pc, #692]	; (8010014 <UART_SetConfig+0x334>)
 800fd60:	4baa      	ldr	r3, [pc, #680]	; (801000c <UART_SetConfig+0x32c>)
 800fd62:	0011      	movs	r1, r2
 800fd64:	0018      	movs	r0, r3
 800fd66:	f7f3 fc3a 	bl	80035de <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	6a1b      	ldr	r3, [r3, #32]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d00c      	beq.n	800fd8c <UART_SetConfig+0xac>
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	6a1a      	ldr	r2, [r3, #32]
 800fd76:	2380      	movs	r3, #128	; 0x80
 800fd78:	011b      	lsls	r3, r3, #4
 800fd7a:	429a      	cmp	r2, r3
 800fd7c:	d006      	beq.n	800fd8c <UART_SetConfig+0xac>
 800fd7e:	23bf      	movs	r3, #191	; 0xbf
 800fd80:	011a      	lsls	r2, r3, #4
 800fd82:	4ba2      	ldr	r3, [pc, #648]	; (801000c <UART_SetConfig+0x32c>)
 800fd84:	0011      	movs	r1, r2
 800fd86:	0018      	movs	r0, r3
 800fd88:	f7f3 fc29 	bl	80035de <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	691b      	ldr	r3, [r3, #16]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d011      	beq.n	800fdb8 <UART_SetConfig+0xd8>
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	691a      	ldr	r2, [r3, #16]
 800fd98:	2380      	movs	r3, #128	; 0x80
 800fd9a:	00db      	lsls	r3, r3, #3
 800fd9c:	429a      	cmp	r2, r3
 800fd9e:	d00b      	beq.n	800fdb8 <UART_SetConfig+0xd8>
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	691a      	ldr	r2, [r3, #16]
 800fda4:	23c0      	movs	r3, #192	; 0xc0
 800fda6:	00db      	lsls	r3, r3, #3
 800fda8:	429a      	cmp	r2, r3
 800fdaa:	d005      	beq.n	800fdb8 <UART_SetConfig+0xd8>
 800fdac:	4a9a      	ldr	r2, [pc, #616]	; (8010018 <UART_SetConfig+0x338>)
 800fdae:	4b97      	ldr	r3, [pc, #604]	; (801000c <UART_SetConfig+0x32c>)
 800fdb0:	0011      	movs	r1, r2
 800fdb2:	0018      	movs	r0, r3
 800fdb4:	f7f3 fc13 	bl	80035de <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	695b      	ldr	r3, [r3, #20]
 800fdbc:	220c      	movs	r2, #12
 800fdbe:	4393      	bics	r3, r2
 800fdc0:	d103      	bne.n	800fdca <UART_SetConfig+0xea>
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	695b      	ldr	r3, [r3, #20]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d105      	bne.n	800fdd6 <UART_SetConfig+0xf6>
 800fdca:	4a94      	ldr	r2, [pc, #592]	; (801001c <UART_SetConfig+0x33c>)
 800fdcc:	4b8f      	ldr	r3, [pc, #572]	; (801000c <UART_SetConfig+0x32c>)
 800fdce:	0011      	movs	r1, r2
 800fdd0:	0018      	movs	r0, r3
 800fdd2:	f7f3 fc04 	bl	80035de <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	699b      	ldr	r3, [r3, #24]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d017      	beq.n	800fe0e <UART_SetConfig+0x12e>
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	699a      	ldr	r2, [r3, #24]
 800fde2:	2380      	movs	r3, #128	; 0x80
 800fde4:	005b      	lsls	r3, r3, #1
 800fde6:	429a      	cmp	r2, r3
 800fde8:	d011      	beq.n	800fe0e <UART_SetConfig+0x12e>
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	699a      	ldr	r2, [r3, #24]
 800fdee:	2380      	movs	r3, #128	; 0x80
 800fdf0:	009b      	lsls	r3, r3, #2
 800fdf2:	429a      	cmp	r2, r3
 800fdf4:	d00b      	beq.n	800fe0e <UART_SetConfig+0x12e>
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	699a      	ldr	r2, [r3, #24]
 800fdfa:	23c0      	movs	r3, #192	; 0xc0
 800fdfc:	009b      	lsls	r3, r3, #2
 800fdfe:	429a      	cmp	r2, r3
 800fe00:	d005      	beq.n	800fe0e <UART_SetConfig+0x12e>
 800fe02:	4a87      	ldr	r2, [pc, #540]	; (8010020 <UART_SetConfig+0x340>)
 800fe04:	4b81      	ldr	r3, [pc, #516]	; (801000c <UART_SetConfig+0x32c>)
 800fe06:	0011      	movs	r1, r2
 800fe08:	0018      	movs	r0, r3
 800fe0a:	f7f3 fbe8 	bl	80035de <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	69db      	ldr	r3, [r3, #28]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d00b      	beq.n	800fe2e <UART_SetConfig+0x14e>
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	69da      	ldr	r2, [r3, #28]
 800fe1a:	2380      	movs	r3, #128	; 0x80
 800fe1c:	021b      	lsls	r3, r3, #8
 800fe1e:	429a      	cmp	r2, r3
 800fe20:	d005      	beq.n	800fe2e <UART_SetConfig+0x14e>
 800fe22:	4a80      	ldr	r2, [pc, #512]	; (8010024 <UART_SetConfig+0x344>)
 800fe24:	4b79      	ldr	r3, [pc, #484]	; (801000c <UART_SetConfig+0x32c>)
 800fe26:	0011      	movs	r1, r2
 800fe28:	0018      	movs	r0, r3
 800fe2a:	f7f3 fbd8 	bl	80035de <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	689a      	ldr	r2, [r3, #8]
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	691b      	ldr	r3, [r3, #16]
 800fe36:	431a      	orrs	r2, r3
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	695b      	ldr	r3, [r3, #20]
 800fe3c:	431a      	orrs	r2, r3
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	69db      	ldr	r3, [r3, #28]
 800fe42:	4313      	orrs	r3, r2
 800fe44:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	4a76      	ldr	r2, [pc, #472]	; (8010028 <UART_SetConfig+0x348>)
 800fe4e:	4013      	ands	r3, r2
 800fe50:	0019      	movs	r1, r3
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	697a      	ldr	r2, [r7, #20]
 800fe58:	430a      	orrs	r2, r1
 800fe5a:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	685b      	ldr	r3, [r3, #4]
 800fe62:	4a72      	ldr	r2, [pc, #456]	; (801002c <UART_SetConfig+0x34c>)
 800fe64:	4013      	ands	r3, r2
 800fe66:	0019      	movs	r1, r3
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	68da      	ldr	r2, [r3, #12]
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	430a      	orrs	r2, r1
 800fe72:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	699b      	ldr	r3, [r3, #24]
 800fe78:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	6a1b      	ldr	r3, [r3, #32]
 800fe7e:	697a      	ldr	r2, [r7, #20]
 800fe80:	4313      	orrs	r3, r2
 800fe82:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	689b      	ldr	r3, [r3, #8]
 800fe8a:	4a69      	ldr	r2, [pc, #420]	; (8010030 <UART_SetConfig+0x350>)
 800fe8c:	4013      	ands	r3, r2
 800fe8e:	0019      	movs	r1, r3
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	697a      	ldr	r2, [r7, #20]
 800fe96:	430a      	orrs	r2, r1
 800fe98:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	4a65      	ldr	r2, [pc, #404]	; (8010034 <UART_SetConfig+0x354>)
 800fea0:	4293      	cmp	r3, r2
 800fea2:	d127      	bne.n	800fef4 <UART_SetConfig+0x214>
 800fea4:	4b64      	ldr	r3, [pc, #400]	; (8010038 <UART_SetConfig+0x358>)
 800fea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fea8:	2203      	movs	r2, #3
 800feaa:	4013      	ands	r3, r2
 800feac:	2b03      	cmp	r3, #3
 800feae:	d00d      	beq.n	800fecc <UART_SetConfig+0x1ec>
 800feb0:	d81b      	bhi.n	800feea <UART_SetConfig+0x20a>
 800feb2:	2b02      	cmp	r3, #2
 800feb4:	d014      	beq.n	800fee0 <UART_SetConfig+0x200>
 800feb6:	d818      	bhi.n	800feea <UART_SetConfig+0x20a>
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d002      	beq.n	800fec2 <UART_SetConfig+0x1e2>
 800febc:	2b01      	cmp	r3, #1
 800febe:	d00a      	beq.n	800fed6 <UART_SetConfig+0x1f6>
 800fec0:	e013      	b.n	800feea <UART_SetConfig+0x20a>
 800fec2:	231f      	movs	r3, #31
 800fec4:	18fb      	adds	r3, r7, r3
 800fec6:	2200      	movs	r2, #0
 800fec8:	701a      	strb	r2, [r3, #0]
 800feca:	e035      	b.n	800ff38 <UART_SetConfig+0x258>
 800fecc:	231f      	movs	r3, #31
 800fece:	18fb      	adds	r3, r7, r3
 800fed0:	2202      	movs	r2, #2
 800fed2:	701a      	strb	r2, [r3, #0]
 800fed4:	e030      	b.n	800ff38 <UART_SetConfig+0x258>
 800fed6:	231f      	movs	r3, #31
 800fed8:	18fb      	adds	r3, r7, r3
 800feda:	2204      	movs	r2, #4
 800fedc:	701a      	strb	r2, [r3, #0]
 800fede:	e02b      	b.n	800ff38 <UART_SetConfig+0x258>
 800fee0:	231f      	movs	r3, #31
 800fee2:	18fb      	adds	r3, r7, r3
 800fee4:	2208      	movs	r2, #8
 800fee6:	701a      	strb	r2, [r3, #0]
 800fee8:	e026      	b.n	800ff38 <UART_SetConfig+0x258>
 800feea:	231f      	movs	r3, #31
 800feec:	18fb      	adds	r3, r7, r3
 800feee:	2210      	movs	r2, #16
 800fef0:	701a      	strb	r2, [r3, #0]
 800fef2:	e021      	b.n	800ff38 <UART_SetConfig+0x258>
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	4a50      	ldr	r2, [pc, #320]	; (801003c <UART_SetConfig+0x35c>)
 800fefa:	4293      	cmp	r3, r2
 800fefc:	d104      	bne.n	800ff08 <UART_SetConfig+0x228>
 800fefe:	231f      	movs	r3, #31
 800ff00:	18fb      	adds	r3, r7, r3
 800ff02:	2200      	movs	r2, #0
 800ff04:	701a      	strb	r2, [r3, #0]
 800ff06:	e017      	b.n	800ff38 <UART_SetConfig+0x258>
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	4a4c      	ldr	r2, [pc, #304]	; (8010040 <UART_SetConfig+0x360>)
 800ff0e:	4293      	cmp	r3, r2
 800ff10:	d104      	bne.n	800ff1c <UART_SetConfig+0x23c>
 800ff12:	231f      	movs	r3, #31
 800ff14:	18fb      	adds	r3, r7, r3
 800ff16:	2200      	movs	r2, #0
 800ff18:	701a      	strb	r2, [r3, #0]
 800ff1a:	e00d      	b.n	800ff38 <UART_SetConfig+0x258>
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	4a48      	ldr	r2, [pc, #288]	; (8010044 <UART_SetConfig+0x364>)
 800ff22:	4293      	cmp	r3, r2
 800ff24:	d104      	bne.n	800ff30 <UART_SetConfig+0x250>
 800ff26:	231f      	movs	r3, #31
 800ff28:	18fb      	adds	r3, r7, r3
 800ff2a:	2200      	movs	r2, #0
 800ff2c:	701a      	strb	r2, [r3, #0]
 800ff2e:	e003      	b.n	800ff38 <UART_SetConfig+0x258>
 800ff30:	231f      	movs	r3, #31
 800ff32:	18fb      	adds	r3, r7, r3
 800ff34:	2210      	movs	r2, #16
 800ff36:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	69da      	ldr	r2, [r3, #28]
 800ff3c:	2380      	movs	r3, #128	; 0x80
 800ff3e:	021b      	lsls	r3, r3, #8
 800ff40:	429a      	cmp	r2, r3
 800ff42:	d000      	beq.n	800ff46 <UART_SetConfig+0x266>
 800ff44:	e082      	b.n	801004c <UART_SetConfig+0x36c>
  {
    switch (clocksource)
 800ff46:	231f      	movs	r3, #31
 800ff48:	18fb      	adds	r3, r7, r3
 800ff4a:	781b      	ldrb	r3, [r3, #0]
 800ff4c:	2b08      	cmp	r3, #8
 800ff4e:	d015      	beq.n	800ff7c <UART_SetConfig+0x29c>
 800ff50:	dc18      	bgt.n	800ff84 <UART_SetConfig+0x2a4>
 800ff52:	2b04      	cmp	r3, #4
 800ff54:	d00d      	beq.n	800ff72 <UART_SetConfig+0x292>
 800ff56:	dc15      	bgt.n	800ff84 <UART_SetConfig+0x2a4>
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d002      	beq.n	800ff62 <UART_SetConfig+0x282>
 800ff5c:	2b02      	cmp	r3, #2
 800ff5e:	d005      	beq.n	800ff6c <UART_SetConfig+0x28c>
 800ff60:	e010      	b.n	800ff84 <UART_SetConfig+0x2a4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ff62:	f7fd fd4f 	bl	800da04 <HAL_RCC_GetPCLK1Freq>
 800ff66:	0003      	movs	r3, r0
 800ff68:	61bb      	str	r3, [r7, #24]
        break;
 800ff6a:	e012      	b.n	800ff92 <UART_SetConfig+0x2b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ff6c:	4b36      	ldr	r3, [pc, #216]	; (8010048 <UART_SetConfig+0x368>)
 800ff6e:	61bb      	str	r3, [r7, #24]
        break;
 800ff70:	e00f      	b.n	800ff92 <UART_SetConfig+0x2b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ff72:	f7fd fcd7 	bl	800d924 <HAL_RCC_GetSysClockFreq>
 800ff76:	0003      	movs	r3, r0
 800ff78:	61bb      	str	r3, [r7, #24]
        break;
 800ff7a:	e00a      	b.n	800ff92 <UART_SetConfig+0x2b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ff7c:	2380      	movs	r3, #128	; 0x80
 800ff7e:	021b      	lsls	r3, r3, #8
 800ff80:	61bb      	str	r3, [r7, #24]
        break;
 800ff82:	e006      	b.n	800ff92 <UART_SetConfig+0x2b2>
      default:
        pclk = 0U;
 800ff84:	2300      	movs	r3, #0
 800ff86:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ff88:	231e      	movs	r3, #30
 800ff8a:	18fb      	adds	r3, r7, r3
 800ff8c:	2201      	movs	r2, #1
 800ff8e:	701a      	strb	r2, [r3, #0]
        break;
 800ff90:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ff92:	69bb      	ldr	r3, [r7, #24]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d100      	bne.n	800ff9a <UART_SetConfig+0x2ba>
 800ff98:	e0a0      	b.n	80100dc <UART_SetConfig+0x3fc>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ff9a:	69bb      	ldr	r3, [r7, #24]
 800ff9c:	005a      	lsls	r2, r3, #1
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	685b      	ldr	r3, [r3, #4]
 800ffa2:	085b      	lsrs	r3, r3, #1
 800ffa4:	18d2      	adds	r2, r2, r3
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	685b      	ldr	r3, [r3, #4]
 800ffaa:	0019      	movs	r1, r3
 800ffac:	0010      	movs	r0, r2
 800ffae:	f7f0 f8c7 	bl	8000140 <__udivsi3>
 800ffb2:	0003      	movs	r3, r0
 800ffb4:	b29b      	uxth	r3, r3
 800ffb6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ffb8:	693b      	ldr	r3, [r7, #16]
 800ffba:	2b0f      	cmp	r3, #15
 800ffbc:	d91c      	bls.n	800fff8 <UART_SetConfig+0x318>
 800ffbe:	693a      	ldr	r2, [r7, #16]
 800ffc0:	2380      	movs	r3, #128	; 0x80
 800ffc2:	025b      	lsls	r3, r3, #9
 800ffc4:	429a      	cmp	r2, r3
 800ffc6:	d217      	bcs.n	800fff8 <UART_SetConfig+0x318>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ffc8:	693b      	ldr	r3, [r7, #16]
 800ffca:	b29a      	uxth	r2, r3
 800ffcc:	200e      	movs	r0, #14
 800ffce:	183b      	adds	r3, r7, r0
 800ffd0:	210f      	movs	r1, #15
 800ffd2:	438a      	bics	r2, r1
 800ffd4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ffd6:	693b      	ldr	r3, [r7, #16]
 800ffd8:	085b      	lsrs	r3, r3, #1
 800ffda:	b29b      	uxth	r3, r3
 800ffdc:	2207      	movs	r2, #7
 800ffde:	4013      	ands	r3, r2
 800ffe0:	b299      	uxth	r1, r3
 800ffe2:	183b      	adds	r3, r7, r0
 800ffe4:	183a      	adds	r2, r7, r0
 800ffe6:	8812      	ldrh	r2, [r2, #0]
 800ffe8:	430a      	orrs	r2, r1
 800ffea:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	183a      	adds	r2, r7, r0
 800fff2:	8812      	ldrh	r2, [r2, #0]
 800fff4:	60da      	str	r2, [r3, #12]
 800fff6:	e071      	b.n	80100dc <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 800fff8:	231e      	movs	r3, #30
 800fffa:	18fb      	adds	r3, r7, r3
 800fffc:	2201      	movs	r2, #1
 800fffe:	701a      	strb	r2, [r3, #0]
 8010000:	e06c      	b.n	80100dc <UART_SetConfig+0x3fc>
 8010002:	46c0      	nop			; (mov r8, r8)
 8010004:	005b8d80 	.word	0x005b8d80
 8010008:	00000bed 	.word	0x00000bed
 801000c:	08017084 	.word	0x08017084
 8010010:	00000bee 	.word	0x00000bee
 8010014:	00000bef 	.word	0x00000bef
 8010018:	00000bf2 	.word	0x00000bf2
 801001c:	00000bf3 	.word	0x00000bf3
 8010020:	00000bf4 	.word	0x00000bf4
 8010024:	00000bf5 	.word	0x00000bf5
 8010028:	efff69f3 	.word	0xefff69f3
 801002c:	ffffcfff 	.word	0xffffcfff
 8010030:	fffff4ff 	.word	0xfffff4ff
 8010034:	40013800 	.word	0x40013800
 8010038:	40021000 	.word	0x40021000
 801003c:	40004400 	.word	0x40004400
 8010040:	40004800 	.word	0x40004800
 8010044:	40004c00 	.word	0x40004c00
 8010048:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 801004c:	231f      	movs	r3, #31
 801004e:	18fb      	adds	r3, r7, r3
 8010050:	781b      	ldrb	r3, [r3, #0]
 8010052:	2b08      	cmp	r3, #8
 8010054:	d015      	beq.n	8010082 <UART_SetConfig+0x3a2>
 8010056:	dc18      	bgt.n	801008a <UART_SetConfig+0x3aa>
 8010058:	2b04      	cmp	r3, #4
 801005a:	d00d      	beq.n	8010078 <UART_SetConfig+0x398>
 801005c:	dc15      	bgt.n	801008a <UART_SetConfig+0x3aa>
 801005e:	2b00      	cmp	r3, #0
 8010060:	d002      	beq.n	8010068 <UART_SetConfig+0x388>
 8010062:	2b02      	cmp	r3, #2
 8010064:	d005      	beq.n	8010072 <UART_SetConfig+0x392>
 8010066:	e010      	b.n	801008a <UART_SetConfig+0x3aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010068:	f7fd fccc 	bl	800da04 <HAL_RCC_GetPCLK1Freq>
 801006c:	0003      	movs	r3, r0
 801006e:	61bb      	str	r3, [r7, #24]
        break;
 8010070:	e012      	b.n	8010098 <UART_SetConfig+0x3b8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010072:	4b21      	ldr	r3, [pc, #132]	; (80100f8 <UART_SetConfig+0x418>)
 8010074:	61bb      	str	r3, [r7, #24]
        break;
 8010076:	e00f      	b.n	8010098 <UART_SetConfig+0x3b8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010078:	f7fd fc54 	bl	800d924 <HAL_RCC_GetSysClockFreq>
 801007c:	0003      	movs	r3, r0
 801007e:	61bb      	str	r3, [r7, #24]
        break;
 8010080:	e00a      	b.n	8010098 <UART_SetConfig+0x3b8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010082:	2380      	movs	r3, #128	; 0x80
 8010084:	021b      	lsls	r3, r3, #8
 8010086:	61bb      	str	r3, [r7, #24]
        break;
 8010088:	e006      	b.n	8010098 <UART_SetConfig+0x3b8>
      default:
        pclk = 0U;
 801008a:	2300      	movs	r3, #0
 801008c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 801008e:	231e      	movs	r3, #30
 8010090:	18fb      	adds	r3, r7, r3
 8010092:	2201      	movs	r2, #1
 8010094:	701a      	strb	r2, [r3, #0]
        break;
 8010096:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8010098:	69bb      	ldr	r3, [r7, #24]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d01e      	beq.n	80100dc <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	685b      	ldr	r3, [r3, #4]
 80100a2:	085a      	lsrs	r2, r3, #1
 80100a4:	69bb      	ldr	r3, [r7, #24]
 80100a6:	18d2      	adds	r2, r2, r3
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	685b      	ldr	r3, [r3, #4]
 80100ac:	0019      	movs	r1, r3
 80100ae:	0010      	movs	r0, r2
 80100b0:	f7f0 f846 	bl	8000140 <__udivsi3>
 80100b4:	0003      	movs	r3, r0
 80100b6:	b29b      	uxth	r3, r3
 80100b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80100ba:	693b      	ldr	r3, [r7, #16]
 80100bc:	2b0f      	cmp	r3, #15
 80100be:	d909      	bls.n	80100d4 <UART_SetConfig+0x3f4>
 80100c0:	693a      	ldr	r2, [r7, #16]
 80100c2:	2380      	movs	r3, #128	; 0x80
 80100c4:	025b      	lsls	r3, r3, #9
 80100c6:	429a      	cmp	r2, r3
 80100c8:	d204      	bcs.n	80100d4 <UART_SetConfig+0x3f4>
      {
        huart->Instance->BRR = usartdiv;
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	693a      	ldr	r2, [r7, #16]
 80100d0:	60da      	str	r2, [r3, #12]
 80100d2:	e003      	b.n	80100dc <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 80100d4:	231e      	movs	r3, #30
 80100d6:	18fb      	adds	r3, r7, r3
 80100d8:	2201      	movs	r2, #1
 80100da:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	2200      	movs	r2, #0
 80100e0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	2200      	movs	r2, #0
 80100e6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80100e8:	231e      	movs	r3, #30
 80100ea:	18fb      	adds	r3, r7, r3
 80100ec:	781b      	ldrb	r3, [r3, #0]
}
 80100ee:	0018      	movs	r0, r3
 80100f0:	46bd      	mov	sp, r7
 80100f2:	b008      	add	sp, #32
 80100f4:	bd80      	pop	{r7, pc}
 80100f6:	46c0      	nop			; (mov r8, r8)
 80100f8:	007a1200 	.word	0x007a1200

080100fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b082      	sub	sp, #8
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010108:	2bff      	cmp	r3, #255	; 0xff
 801010a:	d906      	bls.n	801011a <UART_AdvFeatureConfig+0x1e>
 801010c:	23c7      	movs	r3, #199	; 0xc7
 801010e:	011a      	lsls	r2, r3, #4
 8010110:	4ba7      	ldr	r3, [pc, #668]	; (80103b0 <UART_AdvFeatureConfig+0x2b4>)
 8010112:	0011      	movs	r1, r2
 8010114:	0018      	movs	r0, r3
 8010116:	f7f3 fa62 	bl	80035de <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801011e:	2201      	movs	r2, #1
 8010120:	4013      	ands	r3, r2
 8010122:	d01b      	beq.n	801015c <UART_AdvFeatureConfig+0x60>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010128:	2b00      	cmp	r3, #0
 801012a:	d00b      	beq.n	8010144 <UART_AdvFeatureConfig+0x48>
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010130:	2380      	movs	r3, #128	; 0x80
 8010132:	029b      	lsls	r3, r3, #10
 8010134:	429a      	cmp	r2, r3
 8010136:	d005      	beq.n	8010144 <UART_AdvFeatureConfig+0x48>
 8010138:	4a9e      	ldr	r2, [pc, #632]	; (80103b4 <UART_AdvFeatureConfig+0x2b8>)
 801013a:	4b9d      	ldr	r3, [pc, #628]	; (80103b0 <UART_AdvFeatureConfig+0x2b4>)
 801013c:	0011      	movs	r1, r2
 801013e:	0018      	movs	r0, r3
 8010140:	f7f3 fa4d 	bl	80035de <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	685b      	ldr	r3, [r3, #4]
 801014a:	4a9b      	ldr	r2, [pc, #620]	; (80103b8 <UART_AdvFeatureConfig+0x2bc>)
 801014c:	4013      	ands	r3, r2
 801014e:	0019      	movs	r1, r3
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	430a      	orrs	r2, r1
 801015a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010160:	2202      	movs	r2, #2
 8010162:	4013      	ands	r3, r2
 8010164:	d01b      	beq.n	801019e <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801016a:	2b00      	cmp	r3, #0
 801016c:	d00b      	beq.n	8010186 <UART_AdvFeatureConfig+0x8a>
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010172:	2380      	movs	r3, #128	; 0x80
 8010174:	025b      	lsls	r3, r3, #9
 8010176:	429a      	cmp	r2, r3
 8010178:	d005      	beq.n	8010186 <UART_AdvFeatureConfig+0x8a>
 801017a:	4a90      	ldr	r2, [pc, #576]	; (80103bc <UART_AdvFeatureConfig+0x2c0>)
 801017c:	4b8c      	ldr	r3, [pc, #560]	; (80103b0 <UART_AdvFeatureConfig+0x2b4>)
 801017e:	0011      	movs	r1, r2
 8010180:	0018      	movs	r0, r3
 8010182:	f7f3 fa2c 	bl	80035de <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	685b      	ldr	r3, [r3, #4]
 801018c:	4a8c      	ldr	r2, [pc, #560]	; (80103c0 <UART_AdvFeatureConfig+0x2c4>)
 801018e:	4013      	ands	r3, r2
 8010190:	0019      	movs	r1, r3
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	430a      	orrs	r2, r1
 801019c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101a2:	2204      	movs	r2, #4
 80101a4:	4013      	ands	r3, r2
 80101a6:	d01b      	beq.n	80101e0 <UART_AdvFeatureConfig+0xe4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d00b      	beq.n	80101c8 <UART_AdvFeatureConfig+0xcc>
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80101b4:	2380      	movs	r3, #128	; 0x80
 80101b6:	02db      	lsls	r3, r3, #11
 80101b8:	429a      	cmp	r2, r3
 80101ba:	d005      	beq.n	80101c8 <UART_AdvFeatureConfig+0xcc>
 80101bc:	4a81      	ldr	r2, [pc, #516]	; (80103c4 <UART_AdvFeatureConfig+0x2c8>)
 80101be:	4b7c      	ldr	r3, [pc, #496]	; (80103b0 <UART_AdvFeatureConfig+0x2b4>)
 80101c0:	0011      	movs	r1, r2
 80101c2:	0018      	movs	r0, r3
 80101c4:	f7f3 fa0b 	bl	80035de <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	685b      	ldr	r3, [r3, #4]
 80101ce:	4a7e      	ldr	r2, [pc, #504]	; (80103c8 <UART_AdvFeatureConfig+0x2cc>)
 80101d0:	4013      	ands	r3, r2
 80101d2:	0019      	movs	r1, r3
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	430a      	orrs	r2, r1
 80101de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101e4:	2208      	movs	r2, #8
 80101e6:	4013      	ands	r3, r2
 80101e8:	d01b      	beq.n	8010222 <UART_AdvFeatureConfig+0x126>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d00b      	beq.n	801020a <UART_AdvFeatureConfig+0x10e>
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80101f6:	2380      	movs	r3, #128	; 0x80
 80101f8:	021b      	lsls	r3, r3, #8
 80101fa:	429a      	cmp	r2, r3
 80101fc:	d005      	beq.n	801020a <UART_AdvFeatureConfig+0x10e>
 80101fe:	4a73      	ldr	r2, [pc, #460]	; (80103cc <UART_AdvFeatureConfig+0x2d0>)
 8010200:	4b6b      	ldr	r3, [pc, #428]	; (80103b0 <UART_AdvFeatureConfig+0x2b4>)
 8010202:	0011      	movs	r1, r2
 8010204:	0018      	movs	r0, r3
 8010206:	f7f3 f9ea 	bl	80035de <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	685b      	ldr	r3, [r3, #4]
 8010210:	4a6f      	ldr	r2, [pc, #444]	; (80103d0 <UART_AdvFeatureConfig+0x2d4>)
 8010212:	4013      	ands	r3, r2
 8010214:	0019      	movs	r1, r3
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	430a      	orrs	r2, r1
 8010220:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010226:	2210      	movs	r2, #16
 8010228:	4013      	ands	r3, r2
 801022a:	d01b      	beq.n	8010264 <UART_AdvFeatureConfig+0x168>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010230:	2b00      	cmp	r3, #0
 8010232:	d00b      	beq.n	801024c <UART_AdvFeatureConfig+0x150>
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010238:	2380      	movs	r3, #128	; 0x80
 801023a:	015b      	lsls	r3, r3, #5
 801023c:	429a      	cmp	r2, r3
 801023e:	d005      	beq.n	801024c <UART_AdvFeatureConfig+0x150>
 8010240:	4a64      	ldr	r2, [pc, #400]	; (80103d4 <UART_AdvFeatureConfig+0x2d8>)
 8010242:	4b5b      	ldr	r3, [pc, #364]	; (80103b0 <UART_AdvFeatureConfig+0x2b4>)
 8010244:	0011      	movs	r1, r2
 8010246:	0018      	movs	r0, r3
 8010248:	f7f3 f9c9 	bl	80035de <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	689b      	ldr	r3, [r3, #8]
 8010252:	4a61      	ldr	r2, [pc, #388]	; (80103d8 <UART_AdvFeatureConfig+0x2dc>)
 8010254:	4013      	ands	r3, r2
 8010256:	0019      	movs	r1, r3
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	430a      	orrs	r2, r1
 8010262:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010268:	2220      	movs	r2, #32
 801026a:	4013      	ands	r3, r2
 801026c:	d01b      	beq.n	80102a6 <UART_AdvFeatureConfig+0x1aa>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010272:	2b00      	cmp	r3, #0
 8010274:	d00b      	beq.n	801028e <UART_AdvFeatureConfig+0x192>
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801027a:	2380      	movs	r3, #128	; 0x80
 801027c:	019b      	lsls	r3, r3, #6
 801027e:	429a      	cmp	r2, r3
 8010280:	d005      	beq.n	801028e <UART_AdvFeatureConfig+0x192>
 8010282:	4a56      	ldr	r2, [pc, #344]	; (80103dc <UART_AdvFeatureConfig+0x2e0>)
 8010284:	4b4a      	ldr	r3, [pc, #296]	; (80103b0 <UART_AdvFeatureConfig+0x2b4>)
 8010286:	0011      	movs	r1, r2
 8010288:	0018      	movs	r0, r3
 801028a:	f7f3 f9a8 	bl	80035de <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	689b      	ldr	r3, [r3, #8]
 8010294:	4a52      	ldr	r2, [pc, #328]	; (80103e0 <UART_AdvFeatureConfig+0x2e4>)
 8010296:	4013      	ands	r3, r2
 8010298:	0019      	movs	r1, r3
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	430a      	orrs	r2, r1
 80102a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102aa:	2240      	movs	r2, #64	; 0x40
 80102ac:	4013      	ands	r3, r2
 80102ae:	d05a      	beq.n	8010366 <UART_AdvFeatureConfig+0x26a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	4a4b      	ldr	r2, [pc, #300]	; (80103e4 <UART_AdvFeatureConfig+0x2e8>)
 80102b6:	4293      	cmp	r3, r2
 80102b8:	d00a      	beq.n	80102d0 <UART_AdvFeatureConfig+0x1d4>
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	4a4a      	ldr	r2, [pc, #296]	; (80103e8 <UART_AdvFeatureConfig+0x2ec>)
 80102c0:	4293      	cmp	r3, r2
 80102c2:	d005      	beq.n	80102d0 <UART_AdvFeatureConfig+0x1d4>
 80102c4:	4a49      	ldr	r2, [pc, #292]	; (80103ec <UART_AdvFeatureConfig+0x2f0>)
 80102c6:	4b3a      	ldr	r3, [pc, #232]	; (80103b0 <UART_AdvFeatureConfig+0x2b4>)
 80102c8:	0011      	movs	r1, r2
 80102ca:	0018      	movs	r0, r3
 80102cc:	f7f3 f987 	bl	80035de <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d00c      	beq.n	80102f2 <UART_AdvFeatureConfig+0x1f6>
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80102dc:	2380      	movs	r3, #128	; 0x80
 80102de:	035b      	lsls	r3, r3, #13
 80102e0:	429a      	cmp	r2, r3
 80102e2:	d006      	beq.n	80102f2 <UART_AdvFeatureConfig+0x1f6>
 80102e4:	23ca      	movs	r3, #202	; 0xca
 80102e6:	011a      	lsls	r2, r3, #4
 80102e8:	4b31      	ldr	r3, [pc, #196]	; (80103b0 <UART_AdvFeatureConfig+0x2b4>)
 80102ea:	0011      	movs	r1, r2
 80102ec:	0018      	movs	r0, r3
 80102ee:	f7f3 f976 	bl	80035de <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	685b      	ldr	r3, [r3, #4]
 80102f8:	4a3d      	ldr	r2, [pc, #244]	; (80103f0 <UART_AdvFeatureConfig+0x2f4>)
 80102fa:	4013      	ands	r3, r2
 80102fc:	0019      	movs	r1, r3
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	430a      	orrs	r2, r1
 8010308:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801030e:	2380      	movs	r3, #128	; 0x80
 8010310:	035b      	lsls	r3, r3, #13
 8010312:	429a      	cmp	r2, r3
 8010314:	d127      	bne.n	8010366 <UART_AdvFeatureConfig+0x26a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801031a:	2b00      	cmp	r3, #0
 801031c:	d017      	beq.n	801034e <UART_AdvFeatureConfig+0x252>
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010322:	2380      	movs	r3, #128	; 0x80
 8010324:	039b      	lsls	r3, r3, #14
 8010326:	429a      	cmp	r2, r3
 8010328:	d011      	beq.n	801034e <UART_AdvFeatureConfig+0x252>
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801032e:	2380      	movs	r3, #128	; 0x80
 8010330:	03db      	lsls	r3, r3, #15
 8010332:	429a      	cmp	r2, r3
 8010334:	d00b      	beq.n	801034e <UART_AdvFeatureConfig+0x252>
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801033a:	23c0      	movs	r3, #192	; 0xc0
 801033c:	03db      	lsls	r3, r3, #15
 801033e:	429a      	cmp	r2, r3
 8010340:	d005      	beq.n	801034e <UART_AdvFeatureConfig+0x252>
 8010342:	4a2c      	ldr	r2, [pc, #176]	; (80103f4 <UART_AdvFeatureConfig+0x2f8>)
 8010344:	4b1a      	ldr	r3, [pc, #104]	; (80103b0 <UART_AdvFeatureConfig+0x2b4>)
 8010346:	0011      	movs	r1, r2
 8010348:	0018      	movs	r0, r3
 801034a:	f7f3 f948 	bl	80035de <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	685b      	ldr	r3, [r3, #4]
 8010354:	4a28      	ldr	r2, [pc, #160]	; (80103f8 <UART_AdvFeatureConfig+0x2fc>)
 8010356:	4013      	ands	r3, r2
 8010358:	0019      	movs	r1, r3
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	430a      	orrs	r2, r1
 8010364:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801036a:	2280      	movs	r2, #128	; 0x80
 801036c:	4013      	ands	r3, r2
 801036e:	d01b      	beq.n	80103a8 <UART_AdvFeatureConfig+0x2ac>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010374:	2b00      	cmp	r3, #0
 8010376:	d00b      	beq.n	8010390 <UART_AdvFeatureConfig+0x294>
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801037c:	2380      	movs	r3, #128	; 0x80
 801037e:	031b      	lsls	r3, r3, #12
 8010380:	429a      	cmp	r2, r3
 8010382:	d005      	beq.n	8010390 <UART_AdvFeatureConfig+0x294>
 8010384:	4a1d      	ldr	r2, [pc, #116]	; (80103fc <UART_AdvFeatureConfig+0x300>)
 8010386:	4b0a      	ldr	r3, [pc, #40]	; (80103b0 <UART_AdvFeatureConfig+0x2b4>)
 8010388:	0011      	movs	r1, r2
 801038a:	0018      	movs	r0, r3
 801038c:	f7f3 f927 	bl	80035de <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	685b      	ldr	r3, [r3, #4]
 8010396:	4a1a      	ldr	r2, [pc, #104]	; (8010400 <UART_AdvFeatureConfig+0x304>)
 8010398:	4013      	ands	r3, r2
 801039a:	0019      	movs	r1, r3
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	430a      	orrs	r2, r1
 80103a6:	605a      	str	r2, [r3, #4]
  }
}
 80103a8:	46c0      	nop			; (mov r8, r8)
 80103aa:	46bd      	mov	sp, r7
 80103ac:	b002      	add	sp, #8
 80103ae:	bd80      	pop	{r7, pc}
 80103b0:	08017084 	.word	0x08017084
 80103b4:	00000c75 	.word	0x00000c75
 80103b8:	fffdffff 	.word	0xfffdffff
 80103bc:	00000c7c 	.word	0x00000c7c
 80103c0:	fffeffff 	.word	0xfffeffff
 80103c4:	00000c83 	.word	0x00000c83
 80103c8:	fffbffff 	.word	0xfffbffff
 80103cc:	00000c8a 	.word	0x00000c8a
 80103d0:	ffff7fff 	.word	0xffff7fff
 80103d4:	00000c91 	.word	0x00000c91
 80103d8:	ffffefff 	.word	0xffffefff
 80103dc:	00000c98 	.word	0x00000c98
 80103e0:	ffffdfff 	.word	0xffffdfff
 80103e4:	40013800 	.word	0x40013800
 80103e8:	40004400 	.word	0x40004400
 80103ec:	00000c9f 	.word	0x00000c9f
 80103f0:	ffefffff 	.word	0xffefffff
 80103f4:	00000ca5 	.word	0x00000ca5
 80103f8:	ff9fffff 	.word	0xff9fffff
 80103fc:	00000cad 	.word	0x00000cad
 8010400:	fff7ffff 	.word	0xfff7ffff

08010404 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010404:	b580      	push	{r7, lr}
 8010406:	b086      	sub	sp, #24
 8010408:	af02      	add	r7, sp, #8
 801040a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	2280      	movs	r2, #128	; 0x80
 8010410:	2100      	movs	r1, #0
 8010412:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010414:	f7f9 f9b0 	bl	8009778 <HAL_GetTick>
 8010418:	0003      	movs	r3, r0
 801041a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	2208      	movs	r2, #8
 8010424:	4013      	ands	r3, r2
 8010426:	2b08      	cmp	r3, #8
 8010428:	d10c      	bne.n	8010444 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	2280      	movs	r2, #128	; 0x80
 801042e:	0391      	lsls	r1, r2, #14
 8010430:	6878      	ldr	r0, [r7, #4]
 8010432:	4a17      	ldr	r2, [pc, #92]	; (8010490 <UART_CheckIdleState+0x8c>)
 8010434:	9200      	str	r2, [sp, #0]
 8010436:	2200      	movs	r2, #0
 8010438:	f000 f82c 	bl	8010494 <UART_WaitOnFlagUntilTimeout>
 801043c:	1e03      	subs	r3, r0, #0
 801043e:	d001      	beq.n	8010444 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010440:	2303      	movs	r3, #3
 8010442:	e021      	b.n	8010488 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	2204      	movs	r2, #4
 801044c:	4013      	ands	r3, r2
 801044e:	2b04      	cmp	r3, #4
 8010450:	d10c      	bne.n	801046c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	2280      	movs	r2, #128	; 0x80
 8010456:	03d1      	lsls	r1, r2, #15
 8010458:	6878      	ldr	r0, [r7, #4]
 801045a:	4a0d      	ldr	r2, [pc, #52]	; (8010490 <UART_CheckIdleState+0x8c>)
 801045c:	9200      	str	r2, [sp, #0]
 801045e:	2200      	movs	r2, #0
 8010460:	f000 f818 	bl	8010494 <UART_WaitOnFlagUntilTimeout>
 8010464:	1e03      	subs	r3, r0, #0
 8010466:	d001      	beq.n	801046c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010468:	2303      	movs	r3, #3
 801046a:	e00d      	b.n	8010488 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	2220      	movs	r2, #32
 8010470:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	2220      	movs	r2, #32
 8010476:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	2200      	movs	r2, #0
 801047c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	2274      	movs	r2, #116	; 0x74
 8010482:	2100      	movs	r1, #0
 8010484:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010486:	2300      	movs	r3, #0
}
 8010488:	0018      	movs	r0, r3
 801048a:	46bd      	mov	sp, r7
 801048c:	b004      	add	sp, #16
 801048e:	bd80      	pop	{r7, pc}
 8010490:	01ffffff 	.word	0x01ffffff

08010494 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010494:	b580      	push	{r7, lr}
 8010496:	b094      	sub	sp, #80	; 0x50
 8010498:	af00      	add	r7, sp, #0
 801049a:	60f8      	str	r0, [r7, #12]
 801049c:	60b9      	str	r1, [r7, #8]
 801049e:	603b      	str	r3, [r7, #0]
 80104a0:	1dfb      	adds	r3, r7, #7
 80104a2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80104a4:	e0a3      	b.n	80105ee <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80104a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80104a8:	3301      	adds	r3, #1
 80104aa:	d100      	bne.n	80104ae <UART_WaitOnFlagUntilTimeout+0x1a>
 80104ac:	e09f      	b.n	80105ee <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80104ae:	f7f9 f963 	bl	8009778 <HAL_GetTick>
 80104b2:	0002      	movs	r2, r0
 80104b4:	683b      	ldr	r3, [r7, #0]
 80104b6:	1ad3      	subs	r3, r2, r3
 80104b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80104ba:	429a      	cmp	r2, r3
 80104bc:	d302      	bcc.n	80104c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80104be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d13d      	bne.n	8010540 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80104c4:	f3ef 8310 	mrs	r3, PRIMASK
 80104c8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80104ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80104cc:	647b      	str	r3, [r7, #68]	; 0x44
 80104ce:	2301      	movs	r3, #1
 80104d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80104d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104d4:	f383 8810 	msr	PRIMASK, r3
}
 80104d8:	46c0      	nop			; (mov r8, r8)
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	681a      	ldr	r2, [r3, #0]
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	494c      	ldr	r1, [pc, #304]	; (8010618 <UART_WaitOnFlagUntilTimeout+0x184>)
 80104e6:	400a      	ands	r2, r1
 80104e8:	601a      	str	r2, [r3, #0]
 80104ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80104ec:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80104ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104f0:	f383 8810 	msr	PRIMASK, r3
}
 80104f4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80104f6:	f3ef 8310 	mrs	r3, PRIMASK
 80104fa:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80104fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80104fe:	643b      	str	r3, [r7, #64]	; 0x40
 8010500:	2301      	movs	r3, #1
 8010502:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010506:	f383 8810 	msr	PRIMASK, r3
}
 801050a:	46c0      	nop			; (mov r8, r8)
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	689a      	ldr	r2, [r3, #8]
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	2101      	movs	r1, #1
 8010518:	438a      	bics	r2, r1
 801051a:	609a      	str	r2, [r3, #8]
 801051c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801051e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010522:	f383 8810 	msr	PRIMASK, r3
}
 8010526:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	2220      	movs	r2, #32
 801052c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	2220      	movs	r2, #32
 8010532:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	2274      	movs	r2, #116	; 0x74
 8010538:	2100      	movs	r1, #0
 801053a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 801053c:	2303      	movs	r3, #3
 801053e:	e067      	b.n	8010610 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	2204      	movs	r2, #4
 8010548:	4013      	ands	r3, r2
 801054a:	d050      	beq.n	80105ee <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	69da      	ldr	r2, [r3, #28]
 8010552:	2380      	movs	r3, #128	; 0x80
 8010554:	011b      	lsls	r3, r3, #4
 8010556:	401a      	ands	r2, r3
 8010558:	2380      	movs	r3, #128	; 0x80
 801055a:	011b      	lsls	r3, r3, #4
 801055c:	429a      	cmp	r2, r3
 801055e:	d146      	bne.n	80105ee <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	2280      	movs	r2, #128	; 0x80
 8010566:	0112      	lsls	r2, r2, #4
 8010568:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801056a:	f3ef 8310 	mrs	r3, PRIMASK
 801056e:	613b      	str	r3, [r7, #16]
  return(result);
 8010570:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010572:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010574:	2301      	movs	r3, #1
 8010576:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010578:	697b      	ldr	r3, [r7, #20]
 801057a:	f383 8810 	msr	PRIMASK, r3
}
 801057e:	46c0      	nop			; (mov r8, r8)
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	681a      	ldr	r2, [r3, #0]
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	4923      	ldr	r1, [pc, #140]	; (8010618 <UART_WaitOnFlagUntilTimeout+0x184>)
 801058c:	400a      	ands	r2, r1
 801058e:	601a      	str	r2, [r3, #0]
 8010590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010592:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010594:	69bb      	ldr	r3, [r7, #24]
 8010596:	f383 8810 	msr	PRIMASK, r3
}
 801059a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801059c:	f3ef 8310 	mrs	r3, PRIMASK
 80105a0:	61fb      	str	r3, [r7, #28]
  return(result);
 80105a2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80105a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80105a6:	2301      	movs	r3, #1
 80105a8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80105aa:	6a3b      	ldr	r3, [r7, #32]
 80105ac:	f383 8810 	msr	PRIMASK, r3
}
 80105b0:	46c0      	nop			; (mov r8, r8)
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	689a      	ldr	r2, [r3, #8]
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	2101      	movs	r1, #1
 80105be:	438a      	bics	r2, r1
 80105c0:	609a      	str	r2, [r3, #8]
 80105c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80105c4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80105c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105c8:	f383 8810 	msr	PRIMASK, r3
}
 80105cc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	2220      	movs	r2, #32
 80105d2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	2220      	movs	r2, #32
 80105d8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	2280      	movs	r2, #128	; 0x80
 80105de:	2120      	movs	r1, #32
 80105e0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	2274      	movs	r2, #116	; 0x74
 80105e6:	2100      	movs	r1, #0
 80105e8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80105ea:	2303      	movs	r3, #3
 80105ec:	e010      	b.n	8010610 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	69db      	ldr	r3, [r3, #28]
 80105f4:	68ba      	ldr	r2, [r7, #8]
 80105f6:	4013      	ands	r3, r2
 80105f8:	68ba      	ldr	r2, [r7, #8]
 80105fa:	1ad3      	subs	r3, r2, r3
 80105fc:	425a      	negs	r2, r3
 80105fe:	4153      	adcs	r3, r2
 8010600:	b2db      	uxtb	r3, r3
 8010602:	001a      	movs	r2, r3
 8010604:	1dfb      	adds	r3, r7, #7
 8010606:	781b      	ldrb	r3, [r3, #0]
 8010608:	429a      	cmp	r2, r3
 801060a:	d100      	bne.n	801060e <UART_WaitOnFlagUntilTimeout+0x17a>
 801060c:	e74b      	b.n	80104a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801060e:	2300      	movs	r3, #0
}
 8010610:	0018      	movs	r0, r3
 8010612:	46bd      	mov	sp, r7
 8010614:	b014      	add	sp, #80	; 0x50
 8010616:	bd80      	pop	{r7, pc}
 8010618:	fffffe5f 	.word	0xfffffe5f

0801061c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801061c:	b580      	push	{r7, lr}
 801061e:	b08c      	sub	sp, #48	; 0x30
 8010620:	af00      	add	r7, sp, #0
 8010622:	60f8      	str	r0, [r7, #12]
 8010624:	60b9      	str	r1, [r7, #8]
 8010626:	1dbb      	adds	r3, r7, #6
 8010628:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	68ba      	ldr	r2, [r7, #8]
 801062e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	1dba      	adds	r2, r7, #6
 8010634:	2158      	movs	r1, #88	; 0x58
 8010636:	8812      	ldrh	r2, [r2, #0]
 8010638:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	1dba      	adds	r2, r7, #6
 801063e:	215a      	movs	r1, #90	; 0x5a
 8010640:	8812      	ldrh	r2, [r2, #0]
 8010642:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	2200      	movs	r2, #0
 8010648:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	689a      	ldr	r2, [r3, #8]
 801064e:	2380      	movs	r3, #128	; 0x80
 8010650:	015b      	lsls	r3, r3, #5
 8010652:	429a      	cmp	r2, r3
 8010654:	d10d      	bne.n	8010672 <UART_Start_Receive_IT+0x56>
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	691b      	ldr	r3, [r3, #16]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d104      	bne.n	8010668 <UART_Start_Receive_IT+0x4c>
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	225c      	movs	r2, #92	; 0x5c
 8010662:	4943      	ldr	r1, [pc, #268]	; (8010770 <UART_Start_Receive_IT+0x154>)
 8010664:	5299      	strh	r1, [r3, r2]
 8010666:	e02e      	b.n	80106c6 <UART_Start_Receive_IT+0xaa>
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	225c      	movs	r2, #92	; 0x5c
 801066c:	21ff      	movs	r1, #255	; 0xff
 801066e:	5299      	strh	r1, [r3, r2]
 8010670:	e029      	b.n	80106c6 <UART_Start_Receive_IT+0xaa>
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	689b      	ldr	r3, [r3, #8]
 8010676:	2b00      	cmp	r3, #0
 8010678:	d10d      	bne.n	8010696 <UART_Start_Receive_IT+0x7a>
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	691b      	ldr	r3, [r3, #16]
 801067e:	2b00      	cmp	r3, #0
 8010680:	d104      	bne.n	801068c <UART_Start_Receive_IT+0x70>
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	225c      	movs	r2, #92	; 0x5c
 8010686:	21ff      	movs	r1, #255	; 0xff
 8010688:	5299      	strh	r1, [r3, r2]
 801068a:	e01c      	b.n	80106c6 <UART_Start_Receive_IT+0xaa>
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	225c      	movs	r2, #92	; 0x5c
 8010690:	217f      	movs	r1, #127	; 0x7f
 8010692:	5299      	strh	r1, [r3, r2]
 8010694:	e017      	b.n	80106c6 <UART_Start_Receive_IT+0xaa>
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	689a      	ldr	r2, [r3, #8]
 801069a:	2380      	movs	r3, #128	; 0x80
 801069c:	055b      	lsls	r3, r3, #21
 801069e:	429a      	cmp	r2, r3
 80106a0:	d10d      	bne.n	80106be <UART_Start_Receive_IT+0xa2>
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	691b      	ldr	r3, [r3, #16]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d104      	bne.n	80106b4 <UART_Start_Receive_IT+0x98>
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	225c      	movs	r2, #92	; 0x5c
 80106ae:	217f      	movs	r1, #127	; 0x7f
 80106b0:	5299      	strh	r1, [r3, r2]
 80106b2:	e008      	b.n	80106c6 <UART_Start_Receive_IT+0xaa>
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	225c      	movs	r2, #92	; 0x5c
 80106b8:	213f      	movs	r1, #63	; 0x3f
 80106ba:	5299      	strh	r1, [r3, r2]
 80106bc:	e003      	b.n	80106c6 <UART_Start_Receive_IT+0xaa>
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	225c      	movs	r2, #92	; 0x5c
 80106c2:	2100      	movs	r1, #0
 80106c4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	2280      	movs	r2, #128	; 0x80
 80106ca:	2100      	movs	r1, #0
 80106cc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	2222      	movs	r2, #34	; 0x22
 80106d2:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80106d4:	f3ef 8310 	mrs	r3, PRIMASK
 80106d8:	61fb      	str	r3, [r7, #28]
  return(result);
 80106da:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80106dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80106de:	2301      	movs	r3, #1
 80106e0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80106e2:	6a3b      	ldr	r3, [r7, #32]
 80106e4:	f383 8810 	msr	PRIMASK, r3
}
 80106e8:	46c0      	nop			; (mov r8, r8)
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	689a      	ldr	r2, [r3, #8]
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	2101      	movs	r1, #1
 80106f6:	430a      	orrs	r2, r1
 80106f8:	609a      	str	r2, [r3, #8]
 80106fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106fc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80106fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010700:	f383 8810 	msr	PRIMASK, r3
}
 8010704:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	689a      	ldr	r2, [r3, #8]
 801070a:	2380      	movs	r3, #128	; 0x80
 801070c:	015b      	lsls	r3, r3, #5
 801070e:	429a      	cmp	r2, r3
 8010710:	d107      	bne.n	8010722 <UART_Start_Receive_IT+0x106>
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	691b      	ldr	r3, [r3, #16]
 8010716:	2b00      	cmp	r3, #0
 8010718:	d103      	bne.n	8010722 <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	4a15      	ldr	r2, [pc, #84]	; (8010774 <UART_Start_Receive_IT+0x158>)
 801071e:	665a      	str	r2, [r3, #100]	; 0x64
 8010720:	e002      	b.n	8010728 <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	4a14      	ldr	r2, [pc, #80]	; (8010778 <UART_Start_Receive_IT+0x15c>)
 8010726:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	2274      	movs	r2, #116	; 0x74
 801072c:	2100      	movs	r1, #0
 801072e:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010730:	f3ef 8310 	mrs	r3, PRIMASK
 8010734:	613b      	str	r3, [r7, #16]
  return(result);
 8010736:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8010738:	62bb      	str	r3, [r7, #40]	; 0x28
 801073a:	2301      	movs	r3, #1
 801073c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801073e:	697b      	ldr	r3, [r7, #20]
 8010740:	f383 8810 	msr	PRIMASK, r3
}
 8010744:	46c0      	nop			; (mov r8, r8)
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	681a      	ldr	r2, [r3, #0]
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	2190      	movs	r1, #144	; 0x90
 8010752:	0049      	lsls	r1, r1, #1
 8010754:	430a      	orrs	r2, r1
 8010756:	601a      	str	r2, [r3, #0]
 8010758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801075a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801075c:	69bb      	ldr	r3, [r7, #24]
 801075e:	f383 8810 	msr	PRIMASK, r3
}
 8010762:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8010764:	2300      	movs	r3, #0
}
 8010766:	0018      	movs	r0, r3
 8010768:	46bd      	mov	sp, r7
 801076a:	b00c      	add	sp, #48	; 0x30
 801076c:	bd80      	pop	{r7, pc}
 801076e:	46c0      	nop			; (mov r8, r8)
 8010770:	000001ff 	.word	0x000001ff
 8010774:	08010a2d 	.word	0x08010a2d
 8010778:	080108c5 	.word	0x080108c5

0801077c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801077c:	b580      	push	{r7, lr}
 801077e:	b08e      	sub	sp, #56	; 0x38
 8010780:	af00      	add	r7, sp, #0
 8010782:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010784:	f3ef 8310 	mrs	r3, PRIMASK
 8010788:	617b      	str	r3, [r7, #20]
  return(result);
 801078a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801078c:	637b      	str	r3, [r7, #52]	; 0x34
 801078e:	2301      	movs	r3, #1
 8010790:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010792:	69bb      	ldr	r3, [r7, #24]
 8010794:	f383 8810 	msr	PRIMASK, r3
}
 8010798:	46c0      	nop			; (mov r8, r8)
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	681a      	ldr	r2, [r3, #0]
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	4925      	ldr	r1, [pc, #148]	; (801083c <UART_EndRxTransfer+0xc0>)
 80107a6:	400a      	ands	r2, r1
 80107a8:	601a      	str	r2, [r3, #0]
 80107aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80107ae:	69fb      	ldr	r3, [r7, #28]
 80107b0:	f383 8810 	msr	PRIMASK, r3
}
 80107b4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80107b6:	f3ef 8310 	mrs	r3, PRIMASK
 80107ba:	623b      	str	r3, [r7, #32]
  return(result);
 80107bc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80107be:	633b      	str	r3, [r7, #48]	; 0x30
 80107c0:	2301      	movs	r3, #1
 80107c2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80107c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107c6:	f383 8810 	msr	PRIMASK, r3
}
 80107ca:	46c0      	nop			; (mov r8, r8)
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	689a      	ldr	r2, [r3, #8]
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	2101      	movs	r1, #1
 80107d8:	438a      	bics	r2, r1
 80107da:	609a      	str	r2, [r3, #8]
 80107dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107de:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80107e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107e2:	f383 8810 	msr	PRIMASK, r3
}
 80107e6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80107ec:	2b01      	cmp	r3, #1
 80107ee:	d118      	bne.n	8010822 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80107f0:	f3ef 8310 	mrs	r3, PRIMASK
 80107f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80107f6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80107f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80107fa:	2301      	movs	r3, #1
 80107fc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	f383 8810 	msr	PRIMASK, r3
}
 8010804:	46c0      	nop			; (mov r8, r8)
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	681a      	ldr	r2, [r3, #0]
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	2110      	movs	r1, #16
 8010812:	438a      	bics	r2, r1
 8010814:	601a      	str	r2, [r3, #0]
 8010816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010818:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801081a:	693b      	ldr	r3, [r7, #16]
 801081c:	f383 8810 	msr	PRIMASK, r3
}
 8010820:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	2220      	movs	r2, #32
 8010826:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	2200      	movs	r2, #0
 801082c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	2200      	movs	r2, #0
 8010832:	665a      	str	r2, [r3, #100]	; 0x64
}
 8010834:	46c0      	nop			; (mov r8, r8)
 8010836:	46bd      	mov	sp, r7
 8010838:	b00e      	add	sp, #56	; 0x38
 801083a:	bd80      	pop	{r7, pc}
 801083c:	fffffedf 	.word	0xfffffedf

08010840 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010840:	b580      	push	{r7, lr}
 8010842:	b084      	sub	sp, #16
 8010844:	af00      	add	r7, sp, #0
 8010846:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801084c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	225a      	movs	r2, #90	; 0x5a
 8010852:	2100      	movs	r1, #0
 8010854:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	2252      	movs	r2, #82	; 0x52
 801085a:	2100      	movs	r1, #0
 801085c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	0018      	movs	r0, r3
 8010862:	f7ff fa29 	bl	800fcb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010866:	46c0      	nop			; (mov r8, r8)
 8010868:	46bd      	mov	sp, r7
 801086a:	b004      	add	sp, #16
 801086c:	bd80      	pop	{r7, pc}

0801086e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801086e:	b580      	push	{r7, lr}
 8010870:	b086      	sub	sp, #24
 8010872:	af00      	add	r7, sp, #0
 8010874:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010876:	f3ef 8310 	mrs	r3, PRIMASK
 801087a:	60bb      	str	r3, [r7, #8]
  return(result);
 801087c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801087e:	617b      	str	r3, [r7, #20]
 8010880:	2301      	movs	r3, #1
 8010882:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	f383 8810 	msr	PRIMASK, r3
}
 801088a:	46c0      	nop			; (mov r8, r8)
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	681a      	ldr	r2, [r3, #0]
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	2140      	movs	r1, #64	; 0x40
 8010898:	438a      	bics	r2, r1
 801089a:	601a      	str	r2, [r3, #0]
 801089c:	697b      	ldr	r3, [r7, #20]
 801089e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80108a0:	693b      	ldr	r3, [r7, #16]
 80108a2:	f383 8810 	msr	PRIMASK, r3
}
 80108a6:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	2220      	movs	r2, #32
 80108ac:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	2200      	movs	r2, #0
 80108b2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	0018      	movs	r0, r3
 80108b8:	f7ff f9f6 	bl	800fca8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80108bc:	46c0      	nop			; (mov r8, r8)
 80108be:	46bd      	mov	sp, r7
 80108c0:	b006      	add	sp, #24
 80108c2:	bd80      	pop	{r7, pc}

080108c4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80108c4:	b580      	push	{r7, lr}
 80108c6:	b090      	sub	sp, #64	; 0x40
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80108cc:	203e      	movs	r0, #62	; 0x3e
 80108ce:	183b      	adds	r3, r7, r0
 80108d0:	687a      	ldr	r2, [r7, #4]
 80108d2:	215c      	movs	r1, #92	; 0x5c
 80108d4:	5a52      	ldrh	r2, [r2, r1]
 80108d6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80108dc:	2b22      	cmp	r3, #34	; 0x22
 80108de:	d000      	beq.n	80108e2 <UART_RxISR_8BIT+0x1e>
 80108e0:	e095      	b.n	8010a0e <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	681a      	ldr	r2, [r3, #0]
 80108e6:	213c      	movs	r1, #60	; 0x3c
 80108e8:	187b      	adds	r3, r7, r1
 80108ea:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80108ec:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80108ee:	187b      	adds	r3, r7, r1
 80108f0:	881b      	ldrh	r3, [r3, #0]
 80108f2:	b2da      	uxtb	r2, r3
 80108f4:	183b      	adds	r3, r7, r0
 80108f6:	881b      	ldrh	r3, [r3, #0]
 80108f8:	b2d9      	uxtb	r1, r3
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80108fe:	400a      	ands	r2, r1
 8010900:	b2d2      	uxtb	r2, r2
 8010902:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010908:	1c5a      	adds	r2, r3, #1
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	225a      	movs	r2, #90	; 0x5a
 8010912:	5a9b      	ldrh	r3, [r3, r2]
 8010914:	b29b      	uxth	r3, r3
 8010916:	3b01      	subs	r3, #1
 8010918:	b299      	uxth	r1, r3
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	225a      	movs	r2, #90	; 0x5a
 801091e:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	225a      	movs	r2, #90	; 0x5a
 8010924:	5a9b      	ldrh	r3, [r3, r2]
 8010926:	b29b      	uxth	r3, r3
 8010928:	2b00      	cmp	r3, #0
 801092a:	d178      	bne.n	8010a1e <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801092c:	f3ef 8310 	mrs	r3, PRIMASK
 8010930:	61bb      	str	r3, [r7, #24]
  return(result);
 8010932:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010934:	63bb      	str	r3, [r7, #56]	; 0x38
 8010936:	2301      	movs	r3, #1
 8010938:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801093a:	69fb      	ldr	r3, [r7, #28]
 801093c:	f383 8810 	msr	PRIMASK, r3
}
 8010940:	46c0      	nop			; (mov r8, r8)
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	681a      	ldr	r2, [r3, #0]
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	4936      	ldr	r1, [pc, #216]	; (8010a28 <UART_RxISR_8BIT+0x164>)
 801094e:	400a      	ands	r2, r1
 8010950:	601a      	str	r2, [r3, #0]
 8010952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010954:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010956:	6a3b      	ldr	r3, [r7, #32]
 8010958:	f383 8810 	msr	PRIMASK, r3
}
 801095c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801095e:	f3ef 8310 	mrs	r3, PRIMASK
 8010962:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8010964:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010966:	637b      	str	r3, [r7, #52]	; 0x34
 8010968:	2301      	movs	r3, #1
 801096a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801096c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801096e:	f383 8810 	msr	PRIMASK, r3
}
 8010972:	46c0      	nop			; (mov r8, r8)
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	689a      	ldr	r2, [r3, #8]
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	2101      	movs	r1, #1
 8010980:	438a      	bics	r2, r1
 8010982:	609a      	str	r2, [r3, #8]
 8010984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010986:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801098a:	f383 8810 	msr	PRIMASK, r3
}
 801098e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	2220      	movs	r2, #32
 8010994:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	2200      	movs	r2, #0
 801099a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80109a0:	2b01      	cmp	r3, #1
 80109a2:	d12f      	bne.n	8010a04 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	2200      	movs	r2, #0
 80109a8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80109aa:	f3ef 8310 	mrs	r3, PRIMASK
 80109ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80109b0:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80109b2:	633b      	str	r3, [r7, #48]	; 0x30
 80109b4:	2301      	movs	r3, #1
 80109b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80109b8:	693b      	ldr	r3, [r7, #16]
 80109ba:	f383 8810 	msr	PRIMASK, r3
}
 80109be:	46c0      	nop			; (mov r8, r8)
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	681a      	ldr	r2, [r3, #0]
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	2110      	movs	r1, #16
 80109cc:	438a      	bics	r2, r1
 80109ce:	601a      	str	r2, [r3, #0]
 80109d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80109d4:	697b      	ldr	r3, [r7, #20]
 80109d6:	f383 8810 	msr	PRIMASK, r3
}
 80109da:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	69db      	ldr	r3, [r3, #28]
 80109e2:	2210      	movs	r2, #16
 80109e4:	4013      	ands	r3, r2
 80109e6:	2b10      	cmp	r3, #16
 80109e8:	d103      	bne.n	80109f2 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	2210      	movs	r2, #16
 80109f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	2258      	movs	r2, #88	; 0x58
 80109f6:	5a9a      	ldrh	r2, [r3, r2]
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	0011      	movs	r1, r2
 80109fc:	0018      	movs	r0, r3
 80109fe:	f7ff f963 	bl	800fcc8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010a02:	e00c      	b.n	8010a1e <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	0018      	movs	r0, r3
 8010a08:	f7f1 fe24 	bl	8002654 <HAL_UART_RxCpltCallback>
}
 8010a0c:	e007      	b.n	8010a1e <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	699a      	ldr	r2, [r3, #24]
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	2108      	movs	r1, #8
 8010a1a:	430a      	orrs	r2, r1
 8010a1c:	619a      	str	r2, [r3, #24]
}
 8010a1e:	46c0      	nop			; (mov r8, r8)
 8010a20:	46bd      	mov	sp, r7
 8010a22:	b010      	add	sp, #64	; 0x40
 8010a24:	bd80      	pop	{r7, pc}
 8010a26:	46c0      	nop			; (mov r8, r8)
 8010a28:	fffffedf 	.word	0xfffffedf

08010a2c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	b090      	sub	sp, #64	; 0x40
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8010a34:	203e      	movs	r0, #62	; 0x3e
 8010a36:	183b      	adds	r3, r7, r0
 8010a38:	687a      	ldr	r2, [r7, #4]
 8010a3a:	215c      	movs	r1, #92	; 0x5c
 8010a3c:	5a52      	ldrh	r2, [r2, r1]
 8010a3e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010a44:	2b22      	cmp	r3, #34	; 0x22
 8010a46:	d000      	beq.n	8010a4a <UART_RxISR_16BIT+0x1e>
 8010a48:	e095      	b.n	8010b76 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	681a      	ldr	r2, [r3, #0]
 8010a4e:	213c      	movs	r1, #60	; 0x3c
 8010a50:	187b      	adds	r3, r7, r1
 8010a52:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8010a54:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a5a:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8010a5c:	187b      	adds	r3, r7, r1
 8010a5e:	183a      	adds	r2, r7, r0
 8010a60:	881b      	ldrh	r3, [r3, #0]
 8010a62:	8812      	ldrh	r2, [r2, #0]
 8010a64:	4013      	ands	r3, r2
 8010a66:	b29a      	uxth	r2, r3
 8010a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a6a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a70:	1c9a      	adds	r2, r3, #2
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	225a      	movs	r2, #90	; 0x5a
 8010a7a:	5a9b      	ldrh	r3, [r3, r2]
 8010a7c:	b29b      	uxth	r3, r3
 8010a7e:	3b01      	subs	r3, #1
 8010a80:	b299      	uxth	r1, r3
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	225a      	movs	r2, #90	; 0x5a
 8010a86:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	225a      	movs	r2, #90	; 0x5a
 8010a8c:	5a9b      	ldrh	r3, [r3, r2]
 8010a8e:	b29b      	uxth	r3, r3
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d178      	bne.n	8010b86 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010a94:	f3ef 8310 	mrs	r3, PRIMASK
 8010a98:	617b      	str	r3, [r7, #20]
  return(result);
 8010a9a:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010a9c:	637b      	str	r3, [r7, #52]	; 0x34
 8010a9e:	2301      	movs	r3, #1
 8010aa0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010aa2:	69bb      	ldr	r3, [r7, #24]
 8010aa4:	f383 8810 	msr	PRIMASK, r3
}
 8010aa8:	46c0      	nop			; (mov r8, r8)
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	681a      	ldr	r2, [r3, #0]
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	4936      	ldr	r1, [pc, #216]	; (8010b90 <UART_RxISR_16BIT+0x164>)
 8010ab6:	400a      	ands	r2, r1
 8010ab8:	601a      	str	r2, [r3, #0]
 8010aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010abc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010abe:	69fb      	ldr	r3, [r7, #28]
 8010ac0:	f383 8810 	msr	PRIMASK, r3
}
 8010ac4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010ac6:	f3ef 8310 	mrs	r3, PRIMASK
 8010aca:	623b      	str	r3, [r7, #32]
  return(result);
 8010acc:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010ace:	633b      	str	r3, [r7, #48]	; 0x30
 8010ad0:	2301      	movs	r3, #1
 8010ad2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ad6:	f383 8810 	msr	PRIMASK, r3
}
 8010ada:	46c0      	nop			; (mov r8, r8)
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	689a      	ldr	r2, [r3, #8]
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	2101      	movs	r1, #1
 8010ae8:	438a      	bics	r2, r1
 8010aea:	609a      	str	r2, [r3, #8]
 8010aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aee:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010af2:	f383 8810 	msr	PRIMASK, r3
}
 8010af6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	2220      	movs	r2, #32
 8010afc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	2200      	movs	r2, #0
 8010b02:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010b08:	2b01      	cmp	r3, #1
 8010b0a:	d12f      	bne.n	8010b6c <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	2200      	movs	r2, #0
 8010b10:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010b12:	f3ef 8310 	mrs	r3, PRIMASK
 8010b16:	60bb      	str	r3, [r7, #8]
  return(result);
 8010b18:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010b1c:	2301      	movs	r3, #1
 8010b1e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	f383 8810 	msr	PRIMASK, r3
}
 8010b26:	46c0      	nop			; (mov r8, r8)
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	681a      	ldr	r2, [r3, #0]
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	2110      	movs	r1, #16
 8010b34:	438a      	bics	r2, r1
 8010b36:	601a      	str	r2, [r3, #0]
 8010b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010b3c:	693b      	ldr	r3, [r7, #16]
 8010b3e:	f383 8810 	msr	PRIMASK, r3
}
 8010b42:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	69db      	ldr	r3, [r3, #28]
 8010b4a:	2210      	movs	r2, #16
 8010b4c:	4013      	ands	r3, r2
 8010b4e:	2b10      	cmp	r3, #16
 8010b50:	d103      	bne.n	8010b5a <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	2210      	movs	r2, #16
 8010b58:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	2258      	movs	r2, #88	; 0x58
 8010b5e:	5a9a      	ldrh	r2, [r3, r2]
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	0011      	movs	r1, r2
 8010b64:	0018      	movs	r0, r3
 8010b66:	f7ff f8af 	bl	800fcc8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010b6a:	e00c      	b.n	8010b86 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	0018      	movs	r0, r3
 8010b70:	f7f1 fd70 	bl	8002654 <HAL_UART_RxCpltCallback>
}
 8010b74:	e007      	b.n	8010b86 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	699a      	ldr	r2, [r3, #24]
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	2108      	movs	r1, #8
 8010b82:	430a      	orrs	r2, r1
 8010b84:	619a      	str	r2, [r3, #24]
}
 8010b86:	46c0      	nop			; (mov r8, r8)
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	b010      	add	sp, #64	; 0x40
 8010b8c:	bd80      	pop	{r7, pc}
 8010b8e:	46c0      	nop			; (mov r8, r8)
 8010b90:	fffffedf 	.word	0xfffffedf

08010b94 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8010b94:	b580      	push	{r7, lr}
 8010b96:	b084      	sub	sp, #16
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	0002      	movs	r2, r0
 8010b9c:	1dbb      	adds	r3, r7, #6
 8010b9e:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8010ba0:	2300      	movs	r3, #0
 8010ba2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8010ba4:	1dbb      	adds	r3, r7, #6
 8010ba6:	2200      	movs	r2, #0
 8010ba8:	5e9b      	ldrsh	r3, [r3, r2]
 8010baa:	2b84      	cmp	r3, #132	; 0x84
 8010bac:	d006      	beq.n	8010bbc <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8010bae:	1dbb      	adds	r3, r7, #6
 8010bb0:	2200      	movs	r2, #0
 8010bb2:	5e9a      	ldrsh	r2, [r3, r2]
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	18d3      	adds	r3, r2, r3
 8010bb8:	3303      	adds	r3, #3
 8010bba:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8010bbc:	68fb      	ldr	r3, [r7, #12]
}
 8010bbe:	0018      	movs	r0, r3
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	b004      	add	sp, #16
 8010bc4:	bd80      	pop	{r7, pc}

08010bc6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8010bc6:	b580      	push	{r7, lr}
 8010bc8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8010bca:	f000 fab7 	bl	801113c <vTaskStartScheduler>
  
  return osOK;
 8010bce:	2300      	movs	r3, #0
}
 8010bd0:	0018      	movs	r0, r3
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	bd80      	pop	{r7, pc}

08010bd6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8010bd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010bd8:	b089      	sub	sp, #36	; 0x24
 8010bda:	af04      	add	r7, sp, #16
 8010bdc:	6078      	str	r0, [r7, #4]
 8010bde:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	695b      	ldr	r3, [r3, #20]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d020      	beq.n	8010c2a <osThreadCreate+0x54>
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	699b      	ldr	r3, [r3, #24]
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d01c      	beq.n	8010c2a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	685c      	ldr	r4, [r3, #4]
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	681d      	ldr	r5, [r3, #0]
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	691e      	ldr	r6, [r3, #16]
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	2208      	movs	r2, #8
 8010c00:	5e9b      	ldrsh	r3, [r3, r2]
 8010c02:	0018      	movs	r0, r3
 8010c04:	f7ff ffc6 	bl	8010b94 <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	695a      	ldr	r2, [r3, #20]
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010c10:	6839      	ldr	r1, [r7, #0]
 8010c12:	9302      	str	r3, [sp, #8]
 8010c14:	9201      	str	r2, [sp, #4]
 8010c16:	9000      	str	r0, [sp, #0]
 8010c18:	000b      	movs	r3, r1
 8010c1a:	0032      	movs	r2, r6
 8010c1c:	0029      	movs	r1, r5
 8010c1e:	0020      	movs	r0, r4
 8010c20:	f000 f8e3 	bl	8010dea <xTaskCreateStatic>
 8010c24:	0003      	movs	r3, r0
 8010c26:	60fb      	str	r3, [r7, #12]
 8010c28:	e01d      	b.n	8010c66 <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	685c      	ldr	r4, [r3, #4]
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010c36:	b29e      	uxth	r6, r3
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	2208      	movs	r2, #8
 8010c3c:	5e9b      	ldrsh	r3, [r3, r2]
 8010c3e:	0018      	movs	r0, r3
 8010c40:	f7ff ffa8 	bl	8010b94 <makeFreeRtosPriority>
 8010c44:	0001      	movs	r1, r0
 8010c46:	683a      	ldr	r2, [r7, #0]
 8010c48:	230c      	movs	r3, #12
 8010c4a:	18fb      	adds	r3, r7, r3
 8010c4c:	9301      	str	r3, [sp, #4]
 8010c4e:	9100      	str	r1, [sp, #0]
 8010c50:	0013      	movs	r3, r2
 8010c52:	0032      	movs	r2, r6
 8010c54:	0029      	movs	r1, r5
 8010c56:	0020      	movs	r0, r4
 8010c58:	f000 f90a 	bl	8010e70 <xTaskCreate>
 8010c5c:	0003      	movs	r3, r0
 8010c5e:	2b01      	cmp	r3, #1
 8010c60:	d001      	beq.n	8010c66 <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 8010c62:	2300      	movs	r3, #0
 8010c64:	e000      	b.n	8010c68 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8010c66:	68fb      	ldr	r3, [r7, #12]
}
 8010c68:	0018      	movs	r0, r3
 8010c6a:	46bd      	mov	sp, r7
 8010c6c:	b005      	add	sp, #20
 8010c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010c70 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b084      	sub	sp, #16
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d001      	beq.n	8010c86 <osDelay+0x16>
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	e000      	b.n	8010c88 <osDelay+0x18>
 8010c86:	2301      	movs	r3, #1
 8010c88:	0018      	movs	r0, r3
 8010c8a:	f000 fa31 	bl	80110f0 <vTaskDelay>
  
  return osOK;
 8010c8e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8010c90:	0018      	movs	r0, r3
 8010c92:	46bd      	mov	sp, r7
 8010c94:	b004      	add	sp, #16
 8010c96:	bd80      	pop	{r7, pc}

08010c98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	b082      	sub	sp, #8
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	3308      	adds	r3, #8
 8010ca4:	001a      	movs	r2, r3
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	2201      	movs	r2, #1
 8010cae:	4252      	negs	r2, r2
 8010cb0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	3308      	adds	r3, #8
 8010cb6:	001a      	movs	r2, r3
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	3308      	adds	r3, #8
 8010cc0:	001a      	movs	r2, r3
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	2200      	movs	r2, #0
 8010cca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010ccc:	46c0      	nop			; (mov r8, r8)
 8010cce:	46bd      	mov	sp, r7
 8010cd0:	b002      	add	sp, #8
 8010cd2:	bd80      	pop	{r7, pc}

08010cd4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010cd4:	b580      	push	{r7, lr}
 8010cd6:	b082      	sub	sp, #8
 8010cd8:	af00      	add	r7, sp, #0
 8010cda:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	2200      	movs	r2, #0
 8010ce0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010ce2:	46c0      	nop			; (mov r8, r8)
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	b002      	add	sp, #8
 8010ce8:	bd80      	pop	{r7, pc}

08010cea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010cea:	b580      	push	{r7, lr}
 8010cec:	b084      	sub	sp, #16
 8010cee:	af00      	add	r7, sp, #0
 8010cf0:	6078      	str	r0, [r7, #4]
 8010cf2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	685b      	ldr	r3, [r3, #4]
 8010cf8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010cfa:	683b      	ldr	r3, [r7, #0]
 8010cfc:	68fa      	ldr	r2, [r7, #12]
 8010cfe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	689a      	ldr	r2, [r3, #8]
 8010d04:	683b      	ldr	r3, [r7, #0]
 8010d06:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	689b      	ldr	r3, [r3, #8]
 8010d0c:	683a      	ldr	r2, [r7, #0]
 8010d0e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	683a      	ldr	r2, [r7, #0]
 8010d14:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8010d16:	683b      	ldr	r3, [r7, #0]
 8010d18:	687a      	ldr	r2, [r7, #4]
 8010d1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	1c5a      	adds	r2, r3, #1
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	601a      	str	r2, [r3, #0]
}
 8010d26:	46c0      	nop			; (mov r8, r8)
 8010d28:	46bd      	mov	sp, r7
 8010d2a:	b004      	add	sp, #16
 8010d2c:	bd80      	pop	{r7, pc}

08010d2e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010d2e:	b580      	push	{r7, lr}
 8010d30:	b084      	sub	sp, #16
 8010d32:	af00      	add	r7, sp, #0
 8010d34:	6078      	str	r0, [r7, #4]
 8010d36:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010d38:	683b      	ldr	r3, [r7, #0]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010d3e:	68bb      	ldr	r3, [r7, #8]
 8010d40:	3301      	adds	r3, #1
 8010d42:	d103      	bne.n	8010d4c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	691b      	ldr	r3, [r3, #16]
 8010d48:	60fb      	str	r3, [r7, #12]
 8010d4a:	e00c      	b.n	8010d66 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	3308      	adds	r3, #8
 8010d50:	60fb      	str	r3, [r7, #12]
 8010d52:	e002      	b.n	8010d5a <vListInsert+0x2c>
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	685b      	ldr	r3, [r3, #4]
 8010d58:	60fb      	str	r3, [r7, #12]
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	685b      	ldr	r3, [r3, #4]
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	68ba      	ldr	r2, [r7, #8]
 8010d62:	429a      	cmp	r2, r3
 8010d64:	d2f6      	bcs.n	8010d54 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	685a      	ldr	r2, [r3, #4]
 8010d6a:	683b      	ldr	r3, [r7, #0]
 8010d6c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010d6e:	683b      	ldr	r3, [r7, #0]
 8010d70:	685b      	ldr	r3, [r3, #4]
 8010d72:	683a      	ldr	r2, [r7, #0]
 8010d74:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010d76:	683b      	ldr	r3, [r7, #0]
 8010d78:	68fa      	ldr	r2, [r7, #12]
 8010d7a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	683a      	ldr	r2, [r7, #0]
 8010d80:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8010d82:	683b      	ldr	r3, [r7, #0]
 8010d84:	687a      	ldr	r2, [r7, #4]
 8010d86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	1c5a      	adds	r2, r3, #1
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	601a      	str	r2, [r3, #0]
}
 8010d92:	46c0      	nop			; (mov r8, r8)
 8010d94:	46bd      	mov	sp, r7
 8010d96:	b004      	add	sp, #16
 8010d98:	bd80      	pop	{r7, pc}

08010d9a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010d9a:	b580      	push	{r7, lr}
 8010d9c:	b084      	sub	sp, #16
 8010d9e:	af00      	add	r7, sp, #0
 8010da0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	691b      	ldr	r3, [r3, #16]
 8010da6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	685b      	ldr	r3, [r3, #4]
 8010dac:	687a      	ldr	r2, [r7, #4]
 8010dae:	6892      	ldr	r2, [r2, #8]
 8010db0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	689b      	ldr	r3, [r3, #8]
 8010db6:	687a      	ldr	r2, [r7, #4]
 8010db8:	6852      	ldr	r2, [r2, #4]
 8010dba:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	685b      	ldr	r3, [r3, #4]
 8010dc0:	687a      	ldr	r2, [r7, #4]
 8010dc2:	429a      	cmp	r2, r3
 8010dc4:	d103      	bne.n	8010dce <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	689a      	ldr	r2, [r3, #8]
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	2200      	movs	r2, #0
 8010dd2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	1e5a      	subs	r2, r3, #1
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	681b      	ldr	r3, [r3, #0]
}
 8010de2:	0018      	movs	r0, r3
 8010de4:	46bd      	mov	sp, r7
 8010de6:	b004      	add	sp, #16
 8010de8:	bd80      	pop	{r7, pc}

08010dea <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010dea:	b590      	push	{r4, r7, lr}
 8010dec:	b08d      	sub	sp, #52	; 0x34
 8010dee:	af04      	add	r7, sp, #16
 8010df0:	60f8      	str	r0, [r7, #12]
 8010df2:	60b9      	str	r1, [r7, #8]
 8010df4:	607a      	str	r2, [r7, #4]
 8010df6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d101      	bne.n	8010e02 <xTaskCreateStatic+0x18>
 8010dfe:	b672      	cpsid	i
 8010e00:	e7fe      	b.n	8010e00 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8010e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d101      	bne.n	8010e0c <xTaskCreateStatic+0x22>
 8010e08:	b672      	cpsid	i
 8010e0a:	e7fe      	b.n	8010e0a <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010e0c:	23b4      	movs	r3, #180	; 0xb4
 8010e0e:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010e10:	697b      	ldr	r3, [r7, #20]
 8010e12:	2bb4      	cmp	r3, #180	; 0xb4
 8010e14:	d001      	beq.n	8010e1a <xTaskCreateStatic+0x30>
 8010e16:	b672      	cpsid	i
 8010e18:	e7fe      	b.n	8010e18 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d020      	beq.n	8010e62 <xTaskCreateStatic+0x78>
 8010e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d01d      	beq.n	8010e62 <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e28:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010e2a:	69fb      	ldr	r3, [r7, #28]
 8010e2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e2e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010e30:	69fb      	ldr	r3, [r7, #28]
 8010e32:	22b1      	movs	r2, #177	; 0xb1
 8010e34:	2102      	movs	r1, #2
 8010e36:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010e38:	683c      	ldr	r4, [r7, #0]
 8010e3a:	687a      	ldr	r2, [r7, #4]
 8010e3c:	68b9      	ldr	r1, [r7, #8]
 8010e3e:	68f8      	ldr	r0, [r7, #12]
 8010e40:	2300      	movs	r3, #0
 8010e42:	9303      	str	r3, [sp, #12]
 8010e44:	69fb      	ldr	r3, [r7, #28]
 8010e46:	9302      	str	r3, [sp, #8]
 8010e48:	2318      	movs	r3, #24
 8010e4a:	18fb      	adds	r3, r7, r3
 8010e4c:	9301      	str	r3, [sp, #4]
 8010e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e50:	9300      	str	r3, [sp, #0]
 8010e52:	0023      	movs	r3, r4
 8010e54:	f000 f858 	bl	8010f08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010e58:	69fb      	ldr	r3, [r7, #28]
 8010e5a:	0018      	movs	r0, r3
 8010e5c:	f000 f8e4 	bl	8011028 <prvAddNewTaskToReadyList>
 8010e60:	e001      	b.n	8010e66 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 8010e62:	2300      	movs	r3, #0
 8010e64:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010e66:	69bb      	ldr	r3, [r7, #24]
	}
 8010e68:	0018      	movs	r0, r3
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	b009      	add	sp, #36	; 0x24
 8010e6e:	bd90      	pop	{r4, r7, pc}

08010e70 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010e70:	b590      	push	{r4, r7, lr}
 8010e72:	b08d      	sub	sp, #52	; 0x34
 8010e74:	af04      	add	r7, sp, #16
 8010e76:	60f8      	str	r0, [r7, #12]
 8010e78:	60b9      	str	r1, [r7, #8]
 8010e7a:	603b      	str	r3, [r7, #0]
 8010e7c:	1dbb      	adds	r3, r7, #6
 8010e7e:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010e80:	1dbb      	adds	r3, r7, #6
 8010e82:	881b      	ldrh	r3, [r3, #0]
 8010e84:	009b      	lsls	r3, r3, #2
 8010e86:	0018      	movs	r0, r3
 8010e88:	f000 fdb2 	bl	80119f0 <pvPortMalloc>
 8010e8c:	0003      	movs	r3, r0
 8010e8e:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8010e90:	697b      	ldr	r3, [r7, #20]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d010      	beq.n	8010eb8 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8010e96:	20b4      	movs	r0, #180	; 0xb4
 8010e98:	f000 fdaa 	bl	80119f0 <pvPortMalloc>
 8010e9c:	0003      	movs	r3, r0
 8010e9e:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8010ea0:	69fb      	ldr	r3, [r7, #28]
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d003      	beq.n	8010eae <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010ea6:	69fb      	ldr	r3, [r7, #28]
 8010ea8:	697a      	ldr	r2, [r7, #20]
 8010eaa:	631a      	str	r2, [r3, #48]	; 0x30
 8010eac:	e006      	b.n	8010ebc <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010eae:	697b      	ldr	r3, [r7, #20]
 8010eb0:	0018      	movs	r0, r3
 8010eb2:	f000 fe43 	bl	8011b3c <vPortFree>
 8010eb6:	e001      	b.n	8010ebc <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010eb8:	2300      	movs	r3, #0
 8010eba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010ebc:	69fb      	ldr	r3, [r7, #28]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d01a      	beq.n	8010ef8 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010ec2:	69fb      	ldr	r3, [r7, #28]
 8010ec4:	22b1      	movs	r2, #177	; 0xb1
 8010ec6:	2100      	movs	r1, #0
 8010ec8:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010eca:	1dbb      	adds	r3, r7, #6
 8010ecc:	881a      	ldrh	r2, [r3, #0]
 8010ece:	683c      	ldr	r4, [r7, #0]
 8010ed0:	68b9      	ldr	r1, [r7, #8]
 8010ed2:	68f8      	ldr	r0, [r7, #12]
 8010ed4:	2300      	movs	r3, #0
 8010ed6:	9303      	str	r3, [sp, #12]
 8010ed8:	69fb      	ldr	r3, [r7, #28]
 8010eda:	9302      	str	r3, [sp, #8]
 8010edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ede:	9301      	str	r3, [sp, #4]
 8010ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ee2:	9300      	str	r3, [sp, #0]
 8010ee4:	0023      	movs	r3, r4
 8010ee6:	f000 f80f 	bl	8010f08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010eea:	69fb      	ldr	r3, [r7, #28]
 8010eec:	0018      	movs	r0, r3
 8010eee:	f000 f89b 	bl	8011028 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010ef2:	2301      	movs	r3, #1
 8010ef4:	61bb      	str	r3, [r7, #24]
 8010ef6:	e002      	b.n	8010efe <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010ef8:	2301      	movs	r3, #1
 8010efa:	425b      	negs	r3, r3
 8010efc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010efe:	69bb      	ldr	r3, [r7, #24]
	}
 8010f00:	0018      	movs	r0, r3
 8010f02:	46bd      	mov	sp, r7
 8010f04:	b009      	add	sp, #36	; 0x24
 8010f06:	bd90      	pop	{r4, r7, pc}

08010f08 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010f08:	b580      	push	{r7, lr}
 8010f0a:	b086      	sub	sp, #24
 8010f0c:	af00      	add	r7, sp, #0
 8010f0e:	60f8      	str	r0, [r7, #12]
 8010f10:	60b9      	str	r1, [r7, #8]
 8010f12:	607a      	str	r2, [r7, #4]
 8010f14:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8010f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	493e      	ldr	r1, [pc, #248]	; (8011018 <prvInitialiseNewTask+0x110>)
 8010f1e:	468c      	mov	ip, r1
 8010f20:	4463      	add	r3, ip
 8010f22:	009b      	lsls	r3, r3, #2
 8010f24:	18d3      	adds	r3, r2, r3
 8010f26:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8010f28:	693b      	ldr	r3, [r7, #16]
 8010f2a:	2207      	movs	r2, #7
 8010f2c:	4393      	bics	r3, r2
 8010f2e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010f30:	693b      	ldr	r3, [r7, #16]
 8010f32:	2207      	movs	r2, #7
 8010f34:	4013      	ands	r3, r2
 8010f36:	d001      	beq.n	8010f3c <prvInitialiseNewTask+0x34>
 8010f38:	b672      	cpsid	i
 8010f3a:	e7fe      	b.n	8010f3a <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	617b      	str	r3, [r7, #20]
 8010f40:	e013      	b.n	8010f6a <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010f42:	68ba      	ldr	r2, [r7, #8]
 8010f44:	697b      	ldr	r3, [r7, #20]
 8010f46:	18d3      	adds	r3, r2, r3
 8010f48:	7818      	ldrb	r0, [r3, #0]
 8010f4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010f4c:	2134      	movs	r1, #52	; 0x34
 8010f4e:	697b      	ldr	r3, [r7, #20]
 8010f50:	18d3      	adds	r3, r2, r3
 8010f52:	185b      	adds	r3, r3, r1
 8010f54:	1c02      	adds	r2, r0, #0
 8010f56:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8010f58:	68ba      	ldr	r2, [r7, #8]
 8010f5a:	697b      	ldr	r3, [r7, #20]
 8010f5c:	18d3      	adds	r3, r2, r3
 8010f5e:	781b      	ldrb	r3, [r3, #0]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d006      	beq.n	8010f72 <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010f64:	697b      	ldr	r3, [r7, #20]
 8010f66:	3301      	adds	r3, #1
 8010f68:	617b      	str	r3, [r7, #20]
 8010f6a:	697b      	ldr	r3, [r7, #20]
 8010f6c:	2b0f      	cmp	r3, #15
 8010f6e:	d9e8      	bls.n	8010f42 <prvInitialiseNewTask+0x3a>
 8010f70:	e000      	b.n	8010f74 <prvInitialiseNewTask+0x6c>
		{
			break;
 8010f72:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f76:	2243      	movs	r2, #67	; 0x43
 8010f78:	2100      	movs	r1, #0
 8010f7a:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010f7c:	6a3b      	ldr	r3, [r7, #32]
 8010f7e:	2b06      	cmp	r3, #6
 8010f80:	d901      	bls.n	8010f86 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010f82:	2306      	movs	r3, #6
 8010f84:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f88:	6a3a      	ldr	r2, [r7, #32]
 8010f8a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f8e:	6a3a      	ldr	r2, [r7, #32]
 8010f90:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8010f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f94:	2200      	movs	r2, #0
 8010f96:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f9a:	3304      	adds	r3, #4
 8010f9c:	0018      	movs	r0, r3
 8010f9e:	f7ff fe99 	bl	8010cd4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fa4:	3318      	adds	r3, #24
 8010fa6:	0018      	movs	r0, r3
 8010fa8:	f7ff fe94 	bl	8010cd4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010fb0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010fb2:	6a3b      	ldr	r3, [r7, #32]
 8010fb4:	2207      	movs	r2, #7
 8010fb6:	1ad2      	subs	r2, r2, r3
 8010fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fba:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010fc0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fc4:	22ac      	movs	r2, #172	; 0xac
 8010fc6:	2100      	movs	r1, #0
 8010fc8:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fcc:	22b0      	movs	r2, #176	; 0xb0
 8010fce:	2100      	movs	r1, #0
 8010fd0:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fd4:	334c      	adds	r3, #76	; 0x4c
 8010fd6:	2260      	movs	r2, #96	; 0x60
 8010fd8:	2100      	movs	r1, #0
 8010fda:	0018      	movs	r0, r3
 8010fdc:	f001 f80e 	bl	8011ffc <memset>
 8010fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fe2:	4a0e      	ldr	r2, [pc, #56]	; (801101c <prvInitialiseNewTask+0x114>)
 8010fe4:	651a      	str	r2, [r3, #80]	; 0x50
 8010fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fe8:	4a0d      	ldr	r2, [pc, #52]	; (8011020 <prvInitialiseNewTask+0x118>)
 8010fea:	655a      	str	r2, [r3, #84]	; 0x54
 8010fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fee:	4a0d      	ldr	r2, [pc, #52]	; (8011024 <prvInitialiseNewTask+0x11c>)
 8010ff0:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010ff2:	683a      	ldr	r2, [r7, #0]
 8010ff4:	68f9      	ldr	r1, [r7, #12]
 8010ff6:	693b      	ldr	r3, [r7, #16]
 8010ff8:	0018      	movs	r0, r3
 8010ffa:	f000 fbc5 	bl	8011788 <pxPortInitialiseStack>
 8010ffe:	0002      	movs	r2, r0
 8011000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011002:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8011004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011006:	2b00      	cmp	r3, #0
 8011008:	d002      	beq.n	8011010 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801100a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801100c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801100e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011010:	46c0      	nop			; (mov r8, r8)
 8011012:	46bd      	mov	sp, r7
 8011014:	b006      	add	sp, #24
 8011016:	bd80      	pop	{r7, pc}
 8011018:	3fffffff 	.word	0x3fffffff
 801101c:	08017180 	.word	0x08017180
 8011020:	080171a0 	.word	0x080171a0
 8011024:	08017160 	.word	0x08017160

08011028 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011028:	b580      	push	{r7, lr}
 801102a:	b082      	sub	sp, #8
 801102c:	af00      	add	r7, sp, #0
 801102e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011030:	f000 fc46 	bl	80118c0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011034:	4b28      	ldr	r3, [pc, #160]	; (80110d8 <prvAddNewTaskToReadyList+0xb0>)
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	1c5a      	adds	r2, r3, #1
 801103a:	4b27      	ldr	r3, [pc, #156]	; (80110d8 <prvAddNewTaskToReadyList+0xb0>)
 801103c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 801103e:	4b27      	ldr	r3, [pc, #156]	; (80110dc <prvAddNewTaskToReadyList+0xb4>)
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	2b00      	cmp	r3, #0
 8011044:	d109      	bne.n	801105a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011046:	4b25      	ldr	r3, [pc, #148]	; (80110dc <prvAddNewTaskToReadyList+0xb4>)
 8011048:	687a      	ldr	r2, [r7, #4]
 801104a:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801104c:	4b22      	ldr	r3, [pc, #136]	; (80110d8 <prvAddNewTaskToReadyList+0xb0>)
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	2b01      	cmp	r3, #1
 8011052:	d110      	bne.n	8011076 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011054:	f000 fa80 	bl	8011558 <prvInitialiseTaskLists>
 8011058:	e00d      	b.n	8011076 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801105a:	4b21      	ldr	r3, [pc, #132]	; (80110e0 <prvAddNewTaskToReadyList+0xb8>)
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	2b00      	cmp	r3, #0
 8011060:	d109      	bne.n	8011076 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011062:	4b1e      	ldr	r3, [pc, #120]	; (80110dc <prvAddNewTaskToReadyList+0xb4>)
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801106c:	429a      	cmp	r2, r3
 801106e:	d802      	bhi.n	8011076 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011070:	4b1a      	ldr	r3, [pc, #104]	; (80110dc <prvAddNewTaskToReadyList+0xb4>)
 8011072:	687a      	ldr	r2, [r7, #4]
 8011074:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011076:	4b1b      	ldr	r3, [pc, #108]	; (80110e4 <prvAddNewTaskToReadyList+0xbc>)
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	1c5a      	adds	r2, r3, #1
 801107c:	4b19      	ldr	r3, [pc, #100]	; (80110e4 <prvAddNewTaskToReadyList+0xbc>)
 801107e:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011084:	4b18      	ldr	r3, [pc, #96]	; (80110e8 <prvAddNewTaskToReadyList+0xc0>)
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	429a      	cmp	r2, r3
 801108a:	d903      	bls.n	8011094 <prvAddNewTaskToReadyList+0x6c>
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011090:	4b15      	ldr	r3, [pc, #84]	; (80110e8 <prvAddNewTaskToReadyList+0xc0>)
 8011092:	601a      	str	r2, [r3, #0]
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011098:	0013      	movs	r3, r2
 801109a:	009b      	lsls	r3, r3, #2
 801109c:	189b      	adds	r3, r3, r2
 801109e:	009b      	lsls	r3, r3, #2
 80110a0:	4a12      	ldr	r2, [pc, #72]	; (80110ec <prvAddNewTaskToReadyList+0xc4>)
 80110a2:	189a      	adds	r2, r3, r2
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	3304      	adds	r3, #4
 80110a8:	0019      	movs	r1, r3
 80110aa:	0010      	movs	r0, r2
 80110ac:	f7ff fe1d 	bl	8010cea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80110b0:	f000 fc18 	bl	80118e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80110b4:	4b0a      	ldr	r3, [pc, #40]	; (80110e0 <prvAddNewTaskToReadyList+0xb8>)
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d008      	beq.n	80110ce <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80110bc:	4b07      	ldr	r3, [pc, #28]	; (80110dc <prvAddNewTaskToReadyList+0xb4>)
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110c6:	429a      	cmp	r2, r3
 80110c8:	d201      	bcs.n	80110ce <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80110ca:	f000 fbe9 	bl	80118a0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80110ce:	46c0      	nop			; (mov r8, r8)
 80110d0:	46bd      	mov	sp, r7
 80110d2:	b002      	add	sp, #8
 80110d4:	bd80      	pop	{r7, pc}
 80110d6:	46c0      	nop			; (mov r8, r8)
 80110d8:	20002578 	.word	0x20002578
 80110dc:	20002478 	.word	0x20002478
 80110e0:	20002584 	.word	0x20002584
 80110e4:	20002594 	.word	0x20002594
 80110e8:	20002580 	.word	0x20002580
 80110ec:	2000247c 	.word	0x2000247c

080110f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80110f0:	b580      	push	{r7, lr}
 80110f2:	b084      	sub	sp, #16
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80110f8:	2300      	movs	r3, #0
 80110fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d010      	beq.n	8011124 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011102:	4b0d      	ldr	r3, [pc, #52]	; (8011138 <vTaskDelay+0x48>)
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	2b00      	cmp	r3, #0
 8011108:	d001      	beq.n	801110e <vTaskDelay+0x1e>
 801110a:	b672      	cpsid	i
 801110c:	e7fe      	b.n	801110c <vTaskDelay+0x1c>
			vTaskSuspendAll();
 801110e:	f000 f86d 	bl	80111ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	2100      	movs	r1, #0
 8011116:	0018      	movs	r0, r3
 8011118:	f000 fae2 	bl	80116e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801111c:	f000 f872 	bl	8011204 <xTaskResumeAll>
 8011120:	0003      	movs	r3, r0
 8011122:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	2b00      	cmp	r3, #0
 8011128:	d101      	bne.n	801112e <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 801112a:	f000 fbb9 	bl	80118a0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801112e:	46c0      	nop			; (mov r8, r8)
 8011130:	46bd      	mov	sp, r7
 8011132:	b004      	add	sp, #16
 8011134:	bd80      	pop	{r7, pc}
 8011136:	46c0      	nop			; (mov r8, r8)
 8011138:	200025a0 	.word	0x200025a0

0801113c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801113c:	b590      	push	{r4, r7, lr}
 801113e:	b089      	sub	sp, #36	; 0x24
 8011140:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011142:	2300      	movs	r3, #0
 8011144:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011146:	2300      	movs	r3, #0
 8011148:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801114a:	003a      	movs	r2, r7
 801114c:	1d39      	adds	r1, r7, #4
 801114e:	2308      	movs	r3, #8
 8011150:	18fb      	adds	r3, r7, r3
 8011152:	0018      	movs	r0, r3
 8011154:	f7f1 fa66 	bl	8002624 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011158:	683c      	ldr	r4, [r7, #0]
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	68ba      	ldr	r2, [r7, #8]
 801115e:	491b      	ldr	r1, [pc, #108]	; (80111cc <vTaskStartScheduler+0x90>)
 8011160:	481b      	ldr	r0, [pc, #108]	; (80111d0 <vTaskStartScheduler+0x94>)
 8011162:	9202      	str	r2, [sp, #8]
 8011164:	9301      	str	r3, [sp, #4]
 8011166:	2300      	movs	r3, #0
 8011168:	9300      	str	r3, [sp, #0]
 801116a:	2300      	movs	r3, #0
 801116c:	0022      	movs	r2, r4
 801116e:	f7ff fe3c 	bl	8010dea <xTaskCreateStatic>
 8011172:	0002      	movs	r2, r0
 8011174:	4b17      	ldr	r3, [pc, #92]	; (80111d4 <vTaskStartScheduler+0x98>)
 8011176:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011178:	4b16      	ldr	r3, [pc, #88]	; (80111d4 <vTaskStartScheduler+0x98>)
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	2b00      	cmp	r3, #0
 801117e:	d002      	beq.n	8011186 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011180:	2301      	movs	r3, #1
 8011182:	60fb      	str	r3, [r7, #12]
 8011184:	e001      	b.n	801118a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011186:	2300      	movs	r3, #0
 8011188:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	2b01      	cmp	r3, #1
 801118e:	d113      	bne.n	80111b8 <vTaskStartScheduler+0x7c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8011190:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011192:	4b11      	ldr	r3, [pc, #68]	; (80111d8 <vTaskStartScheduler+0x9c>)
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	334c      	adds	r3, #76	; 0x4c
 8011198:	001a      	movs	r2, r3
 801119a:	4b10      	ldr	r3, [pc, #64]	; (80111dc <vTaskStartScheduler+0xa0>)
 801119c:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801119e:	4b10      	ldr	r3, [pc, #64]	; (80111e0 <vTaskStartScheduler+0xa4>)
 80111a0:	2201      	movs	r2, #1
 80111a2:	4252      	negs	r2, r2
 80111a4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80111a6:	4b0f      	ldr	r3, [pc, #60]	; (80111e4 <vTaskStartScheduler+0xa8>)
 80111a8:	2201      	movs	r2, #1
 80111aa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80111ac:	4b0e      	ldr	r3, [pc, #56]	; (80111e8 <vTaskStartScheduler+0xac>)
 80111ae:	2200      	movs	r2, #0
 80111b0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80111b2:	f000 fb51 	bl	8011858 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80111b6:	e004      	b.n	80111c2 <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	3301      	adds	r3, #1
 80111bc:	d101      	bne.n	80111c2 <vTaskStartScheduler+0x86>
 80111be:	b672      	cpsid	i
 80111c0:	e7fe      	b.n	80111c0 <vTaskStartScheduler+0x84>
}
 80111c2:	46c0      	nop			; (mov r8, r8)
 80111c4:	46bd      	mov	sp, r7
 80111c6:	b005      	add	sp, #20
 80111c8:	bd90      	pop	{r4, r7, pc}
 80111ca:	46c0      	nop			; (mov r8, r8)
 80111cc:	080170c0 	.word	0x080170c0
 80111d0:	08011539 	.word	0x08011539
 80111d4:	2000259c 	.word	0x2000259c
 80111d8:	20002478 	.word	0x20002478
 80111dc:	20000014 	.word	0x20000014
 80111e0:	20002598 	.word	0x20002598
 80111e4:	20002584 	.word	0x20002584
 80111e8:	2000257c 	.word	0x2000257c

080111ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80111ec:	b580      	push	{r7, lr}
 80111ee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80111f0:	4b03      	ldr	r3, [pc, #12]	; (8011200 <vTaskSuspendAll+0x14>)
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	1c5a      	adds	r2, r3, #1
 80111f6:	4b02      	ldr	r3, [pc, #8]	; (8011200 <vTaskSuspendAll+0x14>)
 80111f8:	601a      	str	r2, [r3, #0]
}
 80111fa:	46c0      	nop			; (mov r8, r8)
 80111fc:	46bd      	mov	sp, r7
 80111fe:	bd80      	pop	{r7, pc}
 8011200:	200025a0 	.word	0x200025a0

08011204 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011204:	b580      	push	{r7, lr}
 8011206:	b084      	sub	sp, #16
 8011208:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801120a:	2300      	movs	r3, #0
 801120c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801120e:	2300      	movs	r3, #0
 8011210:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011212:	4b3a      	ldr	r3, [pc, #232]	; (80112fc <xTaskResumeAll+0xf8>)
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d101      	bne.n	801121e <xTaskResumeAll+0x1a>
 801121a:	b672      	cpsid	i
 801121c:	e7fe      	b.n	801121c <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801121e:	f000 fb4f 	bl	80118c0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011222:	4b36      	ldr	r3, [pc, #216]	; (80112fc <xTaskResumeAll+0xf8>)
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	1e5a      	subs	r2, r3, #1
 8011228:	4b34      	ldr	r3, [pc, #208]	; (80112fc <xTaskResumeAll+0xf8>)
 801122a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801122c:	4b33      	ldr	r3, [pc, #204]	; (80112fc <xTaskResumeAll+0xf8>)
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d15b      	bne.n	80112ec <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011234:	4b32      	ldr	r3, [pc, #200]	; (8011300 <xTaskResumeAll+0xfc>)
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d057      	beq.n	80112ec <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801123c:	e02f      	b.n	801129e <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 801123e:	4b31      	ldr	r3, [pc, #196]	; (8011304 <xTaskResumeAll+0x100>)
 8011240:	68db      	ldr	r3, [r3, #12]
 8011242:	68db      	ldr	r3, [r3, #12]
 8011244:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	3318      	adds	r3, #24
 801124a:	0018      	movs	r0, r3
 801124c:	f7ff fda5 	bl	8010d9a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	3304      	adds	r3, #4
 8011254:	0018      	movs	r0, r3
 8011256:	f7ff fda0 	bl	8010d9a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801125e:	4b2a      	ldr	r3, [pc, #168]	; (8011308 <xTaskResumeAll+0x104>)
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	429a      	cmp	r2, r3
 8011264:	d903      	bls.n	801126e <xTaskResumeAll+0x6a>
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801126a:	4b27      	ldr	r3, [pc, #156]	; (8011308 <xTaskResumeAll+0x104>)
 801126c:	601a      	str	r2, [r3, #0]
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011272:	0013      	movs	r3, r2
 8011274:	009b      	lsls	r3, r3, #2
 8011276:	189b      	adds	r3, r3, r2
 8011278:	009b      	lsls	r3, r3, #2
 801127a:	4a24      	ldr	r2, [pc, #144]	; (801130c <xTaskResumeAll+0x108>)
 801127c:	189a      	adds	r2, r3, r2
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	3304      	adds	r3, #4
 8011282:	0019      	movs	r1, r3
 8011284:	0010      	movs	r0, r2
 8011286:	f7ff fd30 	bl	8010cea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801128e:	4b20      	ldr	r3, [pc, #128]	; (8011310 <xTaskResumeAll+0x10c>)
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011294:	429a      	cmp	r2, r3
 8011296:	d302      	bcc.n	801129e <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8011298:	4b1e      	ldr	r3, [pc, #120]	; (8011314 <xTaskResumeAll+0x110>)
 801129a:	2201      	movs	r2, #1
 801129c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801129e:	4b19      	ldr	r3, [pc, #100]	; (8011304 <xTaskResumeAll+0x100>)
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d1cb      	bne.n	801123e <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d001      	beq.n	80112b0 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80112ac:	f000 f9f4 	bl	8011698 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80112b0:	4b19      	ldr	r3, [pc, #100]	; (8011318 <xTaskResumeAll+0x114>)
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d00f      	beq.n	80112dc <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80112bc:	f000 f82e 	bl	801131c <xTaskIncrementTick>
 80112c0:	1e03      	subs	r3, r0, #0
 80112c2:	d002      	beq.n	80112ca <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80112c4:	4b13      	ldr	r3, [pc, #76]	; (8011314 <xTaskResumeAll+0x110>)
 80112c6:	2201      	movs	r2, #1
 80112c8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	3b01      	subs	r3, #1
 80112ce:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d1f2      	bne.n	80112bc <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 80112d6:	4b10      	ldr	r3, [pc, #64]	; (8011318 <xTaskResumeAll+0x114>)
 80112d8:	2200      	movs	r2, #0
 80112da:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80112dc:	4b0d      	ldr	r3, [pc, #52]	; (8011314 <xTaskResumeAll+0x110>)
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d003      	beq.n	80112ec <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80112e4:	2301      	movs	r3, #1
 80112e6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80112e8:	f000 fada 	bl	80118a0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80112ec:	f000 fafa 	bl	80118e4 <vPortExitCritical>

	return xAlreadyYielded;
 80112f0:	68bb      	ldr	r3, [r7, #8]
}
 80112f2:	0018      	movs	r0, r3
 80112f4:	46bd      	mov	sp, r7
 80112f6:	b004      	add	sp, #16
 80112f8:	bd80      	pop	{r7, pc}
 80112fa:	46c0      	nop			; (mov r8, r8)
 80112fc:	200025a0 	.word	0x200025a0
 8011300:	20002578 	.word	0x20002578
 8011304:	20002538 	.word	0x20002538
 8011308:	20002580 	.word	0x20002580
 801130c:	2000247c 	.word	0x2000247c
 8011310:	20002478 	.word	0x20002478
 8011314:	2000258c 	.word	0x2000258c
 8011318:	20002588 	.word	0x20002588

0801131c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801131c:	b580      	push	{r7, lr}
 801131e:	b086      	sub	sp, #24
 8011320:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011322:	2300      	movs	r3, #0
 8011324:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011326:	4b4c      	ldr	r3, [pc, #304]	; (8011458 <xTaskIncrementTick+0x13c>)
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	2b00      	cmp	r3, #0
 801132c:	d000      	beq.n	8011330 <xTaskIncrementTick+0x14>
 801132e:	e083      	b.n	8011438 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011330:	4b4a      	ldr	r3, [pc, #296]	; (801145c <xTaskIncrementTick+0x140>)
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	3301      	adds	r3, #1
 8011336:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011338:	4b48      	ldr	r3, [pc, #288]	; (801145c <xTaskIncrementTick+0x140>)
 801133a:	693a      	ldr	r2, [r7, #16]
 801133c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801133e:	693b      	ldr	r3, [r7, #16]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d117      	bne.n	8011374 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8011344:	4b46      	ldr	r3, [pc, #280]	; (8011460 <xTaskIncrementTick+0x144>)
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	2b00      	cmp	r3, #0
 801134c:	d001      	beq.n	8011352 <xTaskIncrementTick+0x36>
 801134e:	b672      	cpsid	i
 8011350:	e7fe      	b.n	8011350 <xTaskIncrementTick+0x34>
 8011352:	4b43      	ldr	r3, [pc, #268]	; (8011460 <xTaskIncrementTick+0x144>)
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	60fb      	str	r3, [r7, #12]
 8011358:	4b42      	ldr	r3, [pc, #264]	; (8011464 <xTaskIncrementTick+0x148>)
 801135a:	681a      	ldr	r2, [r3, #0]
 801135c:	4b40      	ldr	r3, [pc, #256]	; (8011460 <xTaskIncrementTick+0x144>)
 801135e:	601a      	str	r2, [r3, #0]
 8011360:	4b40      	ldr	r3, [pc, #256]	; (8011464 <xTaskIncrementTick+0x148>)
 8011362:	68fa      	ldr	r2, [r7, #12]
 8011364:	601a      	str	r2, [r3, #0]
 8011366:	4b40      	ldr	r3, [pc, #256]	; (8011468 <xTaskIncrementTick+0x14c>)
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	1c5a      	adds	r2, r3, #1
 801136c:	4b3e      	ldr	r3, [pc, #248]	; (8011468 <xTaskIncrementTick+0x14c>)
 801136e:	601a      	str	r2, [r3, #0]
 8011370:	f000 f992 	bl	8011698 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011374:	4b3d      	ldr	r3, [pc, #244]	; (801146c <xTaskIncrementTick+0x150>)
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	693a      	ldr	r2, [r7, #16]
 801137a:	429a      	cmp	r2, r3
 801137c:	d34e      	bcc.n	801141c <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801137e:	4b38      	ldr	r3, [pc, #224]	; (8011460 <xTaskIncrementTick+0x144>)
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	2b00      	cmp	r3, #0
 8011386:	d101      	bne.n	801138c <xTaskIncrementTick+0x70>
 8011388:	2301      	movs	r3, #1
 801138a:	e000      	b.n	801138e <xTaskIncrementTick+0x72>
 801138c:	2300      	movs	r3, #0
 801138e:	2b00      	cmp	r3, #0
 8011390:	d004      	beq.n	801139c <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011392:	4b36      	ldr	r3, [pc, #216]	; (801146c <xTaskIncrementTick+0x150>)
 8011394:	2201      	movs	r2, #1
 8011396:	4252      	negs	r2, r2
 8011398:	601a      	str	r2, [r3, #0]
					break;
 801139a:	e03f      	b.n	801141c <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 801139c:	4b30      	ldr	r3, [pc, #192]	; (8011460 <xTaskIncrementTick+0x144>)
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	68db      	ldr	r3, [r3, #12]
 80113a2:	68db      	ldr	r3, [r3, #12]
 80113a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80113a6:	68bb      	ldr	r3, [r7, #8]
 80113a8:	685b      	ldr	r3, [r3, #4]
 80113aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80113ac:	693a      	ldr	r2, [r7, #16]
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	429a      	cmp	r2, r3
 80113b2:	d203      	bcs.n	80113bc <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80113b4:	4b2d      	ldr	r3, [pc, #180]	; (801146c <xTaskIncrementTick+0x150>)
 80113b6:	687a      	ldr	r2, [r7, #4]
 80113b8:	601a      	str	r2, [r3, #0]
						break;
 80113ba:	e02f      	b.n	801141c <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80113bc:	68bb      	ldr	r3, [r7, #8]
 80113be:	3304      	adds	r3, #4
 80113c0:	0018      	movs	r0, r3
 80113c2:	f7ff fcea 	bl	8010d9a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80113c6:	68bb      	ldr	r3, [r7, #8]
 80113c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d004      	beq.n	80113d8 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80113ce:	68bb      	ldr	r3, [r7, #8]
 80113d0:	3318      	adds	r3, #24
 80113d2:	0018      	movs	r0, r3
 80113d4:	f7ff fce1 	bl	8010d9a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80113d8:	68bb      	ldr	r3, [r7, #8]
 80113da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113dc:	4b24      	ldr	r3, [pc, #144]	; (8011470 <xTaskIncrementTick+0x154>)
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	429a      	cmp	r2, r3
 80113e2:	d903      	bls.n	80113ec <xTaskIncrementTick+0xd0>
 80113e4:	68bb      	ldr	r3, [r7, #8]
 80113e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113e8:	4b21      	ldr	r3, [pc, #132]	; (8011470 <xTaskIncrementTick+0x154>)
 80113ea:	601a      	str	r2, [r3, #0]
 80113ec:	68bb      	ldr	r3, [r7, #8]
 80113ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113f0:	0013      	movs	r3, r2
 80113f2:	009b      	lsls	r3, r3, #2
 80113f4:	189b      	adds	r3, r3, r2
 80113f6:	009b      	lsls	r3, r3, #2
 80113f8:	4a1e      	ldr	r2, [pc, #120]	; (8011474 <xTaskIncrementTick+0x158>)
 80113fa:	189a      	adds	r2, r3, r2
 80113fc:	68bb      	ldr	r3, [r7, #8]
 80113fe:	3304      	adds	r3, #4
 8011400:	0019      	movs	r1, r3
 8011402:	0010      	movs	r0, r2
 8011404:	f7ff fc71 	bl	8010cea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011408:	68bb      	ldr	r3, [r7, #8]
 801140a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801140c:	4b1a      	ldr	r3, [pc, #104]	; (8011478 <xTaskIncrementTick+0x15c>)
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011412:	429a      	cmp	r2, r3
 8011414:	d3b3      	bcc.n	801137e <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8011416:	2301      	movs	r3, #1
 8011418:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801141a:	e7b0      	b.n	801137e <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801141c:	4b16      	ldr	r3, [pc, #88]	; (8011478 <xTaskIncrementTick+0x15c>)
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011422:	4914      	ldr	r1, [pc, #80]	; (8011474 <xTaskIncrementTick+0x158>)
 8011424:	0013      	movs	r3, r2
 8011426:	009b      	lsls	r3, r3, #2
 8011428:	189b      	adds	r3, r3, r2
 801142a:	009b      	lsls	r3, r3, #2
 801142c:	585b      	ldr	r3, [r3, r1]
 801142e:	2b01      	cmp	r3, #1
 8011430:	d907      	bls.n	8011442 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8011432:	2301      	movs	r3, #1
 8011434:	617b      	str	r3, [r7, #20]
 8011436:	e004      	b.n	8011442 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8011438:	4b10      	ldr	r3, [pc, #64]	; (801147c <xTaskIncrementTick+0x160>)
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	1c5a      	adds	r2, r3, #1
 801143e:	4b0f      	ldr	r3, [pc, #60]	; (801147c <xTaskIncrementTick+0x160>)
 8011440:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8011442:	4b0f      	ldr	r3, [pc, #60]	; (8011480 <xTaskIncrementTick+0x164>)
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d001      	beq.n	801144e <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 801144a:	2301      	movs	r3, #1
 801144c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801144e:	697b      	ldr	r3, [r7, #20]
}
 8011450:	0018      	movs	r0, r3
 8011452:	46bd      	mov	sp, r7
 8011454:	b006      	add	sp, #24
 8011456:	bd80      	pop	{r7, pc}
 8011458:	200025a0 	.word	0x200025a0
 801145c:	2000257c 	.word	0x2000257c
 8011460:	20002530 	.word	0x20002530
 8011464:	20002534 	.word	0x20002534
 8011468:	20002590 	.word	0x20002590
 801146c:	20002598 	.word	0x20002598
 8011470:	20002580 	.word	0x20002580
 8011474:	2000247c 	.word	0x2000247c
 8011478:	20002478 	.word	0x20002478
 801147c:	20002588 	.word	0x20002588
 8011480:	2000258c 	.word	0x2000258c

08011484 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011484:	b580      	push	{r7, lr}
 8011486:	b082      	sub	sp, #8
 8011488:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801148a:	4b25      	ldr	r3, [pc, #148]	; (8011520 <vTaskSwitchContext+0x9c>)
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	2b00      	cmp	r3, #0
 8011490:	d003      	beq.n	801149a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011492:	4b24      	ldr	r3, [pc, #144]	; (8011524 <vTaskSwitchContext+0xa0>)
 8011494:	2201      	movs	r2, #1
 8011496:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011498:	e03d      	b.n	8011516 <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 801149a:	4b22      	ldr	r3, [pc, #136]	; (8011524 <vTaskSwitchContext+0xa0>)
 801149c:	2200      	movs	r2, #0
 801149e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80114a0:	4b21      	ldr	r3, [pc, #132]	; (8011528 <vTaskSwitchContext+0xa4>)
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	607b      	str	r3, [r7, #4]
 80114a6:	e007      	b.n	80114b8 <vTaskSwitchContext+0x34>
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d101      	bne.n	80114b2 <vTaskSwitchContext+0x2e>
 80114ae:	b672      	cpsid	i
 80114b0:	e7fe      	b.n	80114b0 <vTaskSwitchContext+0x2c>
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	3b01      	subs	r3, #1
 80114b6:	607b      	str	r3, [r7, #4]
 80114b8:	491c      	ldr	r1, [pc, #112]	; (801152c <vTaskSwitchContext+0xa8>)
 80114ba:	687a      	ldr	r2, [r7, #4]
 80114bc:	0013      	movs	r3, r2
 80114be:	009b      	lsls	r3, r3, #2
 80114c0:	189b      	adds	r3, r3, r2
 80114c2:	009b      	lsls	r3, r3, #2
 80114c4:	585b      	ldr	r3, [r3, r1]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d0ee      	beq.n	80114a8 <vTaskSwitchContext+0x24>
 80114ca:	687a      	ldr	r2, [r7, #4]
 80114cc:	0013      	movs	r3, r2
 80114ce:	009b      	lsls	r3, r3, #2
 80114d0:	189b      	adds	r3, r3, r2
 80114d2:	009b      	lsls	r3, r3, #2
 80114d4:	4a15      	ldr	r2, [pc, #84]	; (801152c <vTaskSwitchContext+0xa8>)
 80114d6:	189b      	adds	r3, r3, r2
 80114d8:	603b      	str	r3, [r7, #0]
 80114da:	683b      	ldr	r3, [r7, #0]
 80114dc:	685b      	ldr	r3, [r3, #4]
 80114de:	685a      	ldr	r2, [r3, #4]
 80114e0:	683b      	ldr	r3, [r7, #0]
 80114e2:	605a      	str	r2, [r3, #4]
 80114e4:	683b      	ldr	r3, [r7, #0]
 80114e6:	685a      	ldr	r2, [r3, #4]
 80114e8:	683b      	ldr	r3, [r7, #0]
 80114ea:	3308      	adds	r3, #8
 80114ec:	429a      	cmp	r2, r3
 80114ee:	d104      	bne.n	80114fa <vTaskSwitchContext+0x76>
 80114f0:	683b      	ldr	r3, [r7, #0]
 80114f2:	685b      	ldr	r3, [r3, #4]
 80114f4:	685a      	ldr	r2, [r3, #4]
 80114f6:	683b      	ldr	r3, [r7, #0]
 80114f8:	605a      	str	r2, [r3, #4]
 80114fa:	683b      	ldr	r3, [r7, #0]
 80114fc:	685b      	ldr	r3, [r3, #4]
 80114fe:	68da      	ldr	r2, [r3, #12]
 8011500:	4b0b      	ldr	r3, [pc, #44]	; (8011530 <vTaskSwitchContext+0xac>)
 8011502:	601a      	str	r2, [r3, #0]
 8011504:	4b08      	ldr	r3, [pc, #32]	; (8011528 <vTaskSwitchContext+0xa4>)
 8011506:	687a      	ldr	r2, [r7, #4]
 8011508:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801150a:	4b09      	ldr	r3, [pc, #36]	; (8011530 <vTaskSwitchContext+0xac>)
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	334c      	adds	r3, #76	; 0x4c
 8011510:	001a      	movs	r2, r3
 8011512:	4b08      	ldr	r3, [pc, #32]	; (8011534 <vTaskSwitchContext+0xb0>)
 8011514:	601a      	str	r2, [r3, #0]
}
 8011516:	46c0      	nop			; (mov r8, r8)
 8011518:	46bd      	mov	sp, r7
 801151a:	b002      	add	sp, #8
 801151c:	bd80      	pop	{r7, pc}
 801151e:	46c0      	nop			; (mov r8, r8)
 8011520:	200025a0 	.word	0x200025a0
 8011524:	2000258c 	.word	0x2000258c
 8011528:	20002580 	.word	0x20002580
 801152c:	2000247c 	.word	0x2000247c
 8011530:	20002478 	.word	0x20002478
 8011534:	20000014 	.word	0x20000014

08011538 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011538:	b580      	push	{r7, lr}
 801153a:	b082      	sub	sp, #8
 801153c:	af00      	add	r7, sp, #0
 801153e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011540:	f000 f84e 	bl	80115e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011544:	4b03      	ldr	r3, [pc, #12]	; (8011554 <prvIdleTask+0x1c>)
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	2b01      	cmp	r3, #1
 801154a:	d9f9      	bls.n	8011540 <prvIdleTask+0x8>
			{
				taskYIELD();
 801154c:	f000 f9a8 	bl	80118a0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8011550:	e7f6      	b.n	8011540 <prvIdleTask+0x8>
 8011552:	46c0      	nop			; (mov r8, r8)
 8011554:	2000247c 	.word	0x2000247c

08011558 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011558:	b580      	push	{r7, lr}
 801155a:	b082      	sub	sp, #8
 801155c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801155e:	2300      	movs	r3, #0
 8011560:	607b      	str	r3, [r7, #4]
 8011562:	e00c      	b.n	801157e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011564:	687a      	ldr	r2, [r7, #4]
 8011566:	0013      	movs	r3, r2
 8011568:	009b      	lsls	r3, r3, #2
 801156a:	189b      	adds	r3, r3, r2
 801156c:	009b      	lsls	r3, r3, #2
 801156e:	4a14      	ldr	r2, [pc, #80]	; (80115c0 <prvInitialiseTaskLists+0x68>)
 8011570:	189b      	adds	r3, r3, r2
 8011572:	0018      	movs	r0, r3
 8011574:	f7ff fb90 	bl	8010c98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	3301      	adds	r3, #1
 801157c:	607b      	str	r3, [r7, #4]
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	2b06      	cmp	r3, #6
 8011582:	d9ef      	bls.n	8011564 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011584:	4b0f      	ldr	r3, [pc, #60]	; (80115c4 <prvInitialiseTaskLists+0x6c>)
 8011586:	0018      	movs	r0, r3
 8011588:	f7ff fb86 	bl	8010c98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801158c:	4b0e      	ldr	r3, [pc, #56]	; (80115c8 <prvInitialiseTaskLists+0x70>)
 801158e:	0018      	movs	r0, r3
 8011590:	f7ff fb82 	bl	8010c98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011594:	4b0d      	ldr	r3, [pc, #52]	; (80115cc <prvInitialiseTaskLists+0x74>)
 8011596:	0018      	movs	r0, r3
 8011598:	f7ff fb7e 	bl	8010c98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801159c:	4b0c      	ldr	r3, [pc, #48]	; (80115d0 <prvInitialiseTaskLists+0x78>)
 801159e:	0018      	movs	r0, r3
 80115a0:	f7ff fb7a 	bl	8010c98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80115a4:	4b0b      	ldr	r3, [pc, #44]	; (80115d4 <prvInitialiseTaskLists+0x7c>)
 80115a6:	0018      	movs	r0, r3
 80115a8:	f7ff fb76 	bl	8010c98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80115ac:	4b0a      	ldr	r3, [pc, #40]	; (80115d8 <prvInitialiseTaskLists+0x80>)
 80115ae:	4a05      	ldr	r2, [pc, #20]	; (80115c4 <prvInitialiseTaskLists+0x6c>)
 80115b0:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80115b2:	4b0a      	ldr	r3, [pc, #40]	; (80115dc <prvInitialiseTaskLists+0x84>)
 80115b4:	4a04      	ldr	r2, [pc, #16]	; (80115c8 <prvInitialiseTaskLists+0x70>)
 80115b6:	601a      	str	r2, [r3, #0]
}
 80115b8:	46c0      	nop			; (mov r8, r8)
 80115ba:	46bd      	mov	sp, r7
 80115bc:	b002      	add	sp, #8
 80115be:	bd80      	pop	{r7, pc}
 80115c0:	2000247c 	.word	0x2000247c
 80115c4:	20002508 	.word	0x20002508
 80115c8:	2000251c 	.word	0x2000251c
 80115cc:	20002538 	.word	0x20002538
 80115d0:	2000254c 	.word	0x2000254c
 80115d4:	20002564 	.word	0x20002564
 80115d8:	20002530 	.word	0x20002530
 80115dc:	20002534 	.word	0x20002534

080115e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80115e0:	b580      	push	{r7, lr}
 80115e2:	b082      	sub	sp, #8
 80115e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80115e6:	e01a      	b.n	801161e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80115e8:	f000 f96a 	bl	80118c0 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80115ec:	4b10      	ldr	r3, [pc, #64]	; (8011630 <prvCheckTasksWaitingTermination+0x50>)
 80115ee:	68db      	ldr	r3, [r3, #12]
 80115f0:	68db      	ldr	r3, [r3, #12]
 80115f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	3304      	adds	r3, #4
 80115f8:	0018      	movs	r0, r3
 80115fa:	f7ff fbce 	bl	8010d9a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80115fe:	4b0d      	ldr	r3, [pc, #52]	; (8011634 <prvCheckTasksWaitingTermination+0x54>)
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	1e5a      	subs	r2, r3, #1
 8011604:	4b0b      	ldr	r3, [pc, #44]	; (8011634 <prvCheckTasksWaitingTermination+0x54>)
 8011606:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011608:	4b0b      	ldr	r3, [pc, #44]	; (8011638 <prvCheckTasksWaitingTermination+0x58>)
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	1e5a      	subs	r2, r3, #1
 801160e:	4b0a      	ldr	r3, [pc, #40]	; (8011638 <prvCheckTasksWaitingTermination+0x58>)
 8011610:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8011612:	f000 f967 	bl	80118e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	0018      	movs	r0, r3
 801161a:	f000 f80f 	bl	801163c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801161e:	4b06      	ldr	r3, [pc, #24]	; (8011638 <prvCheckTasksWaitingTermination+0x58>)
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	2b00      	cmp	r3, #0
 8011624:	d1e0      	bne.n	80115e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011626:	46c0      	nop			; (mov r8, r8)
 8011628:	46c0      	nop			; (mov r8, r8)
 801162a:	46bd      	mov	sp, r7
 801162c:	b002      	add	sp, #8
 801162e:	bd80      	pop	{r7, pc}
 8011630:	2000254c 	.word	0x2000254c
 8011634:	20002578 	.word	0x20002578
 8011638:	20002560 	.word	0x20002560

0801163c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801163c:	b580      	push	{r7, lr}
 801163e:	b082      	sub	sp, #8
 8011640:	af00      	add	r7, sp, #0
 8011642:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	334c      	adds	r3, #76	; 0x4c
 8011648:	0018      	movs	r0, r3
 801164a:	f001 f9f3 	bl	8012a34 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	22b1      	movs	r2, #177	; 0xb1
 8011652:	5c9b      	ldrb	r3, [r3, r2]
 8011654:	2b00      	cmp	r3, #0
 8011656:	d109      	bne.n	801166c <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801165c:	0018      	movs	r0, r3
 801165e:	f000 fa6d 	bl	8011b3c <vPortFree>
				vPortFree( pxTCB );
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	0018      	movs	r0, r3
 8011666:	f000 fa69 	bl	8011b3c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801166a:	e010      	b.n	801168e <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	22b1      	movs	r2, #177	; 0xb1
 8011670:	5c9b      	ldrb	r3, [r3, r2]
 8011672:	2b01      	cmp	r3, #1
 8011674:	d104      	bne.n	8011680 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	0018      	movs	r0, r3
 801167a:	f000 fa5f 	bl	8011b3c <vPortFree>
	}
 801167e:	e006      	b.n	801168e <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	22b1      	movs	r2, #177	; 0xb1
 8011684:	5c9b      	ldrb	r3, [r3, r2]
 8011686:	2b02      	cmp	r3, #2
 8011688:	d001      	beq.n	801168e <prvDeleteTCB+0x52>
 801168a:	b672      	cpsid	i
 801168c:	e7fe      	b.n	801168c <prvDeleteTCB+0x50>
	}
 801168e:	46c0      	nop			; (mov r8, r8)
 8011690:	46bd      	mov	sp, r7
 8011692:	b002      	add	sp, #8
 8011694:	bd80      	pop	{r7, pc}
	...

08011698 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011698:	b580      	push	{r7, lr}
 801169a:	b082      	sub	sp, #8
 801169c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801169e:	4b0e      	ldr	r3, [pc, #56]	; (80116d8 <prvResetNextTaskUnblockTime+0x40>)
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d101      	bne.n	80116ac <prvResetNextTaskUnblockTime+0x14>
 80116a8:	2301      	movs	r3, #1
 80116aa:	e000      	b.n	80116ae <prvResetNextTaskUnblockTime+0x16>
 80116ac:	2300      	movs	r3, #0
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d004      	beq.n	80116bc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80116b2:	4b0a      	ldr	r3, [pc, #40]	; (80116dc <prvResetNextTaskUnblockTime+0x44>)
 80116b4:	2201      	movs	r2, #1
 80116b6:	4252      	negs	r2, r2
 80116b8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80116ba:	e008      	b.n	80116ce <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80116bc:	4b06      	ldr	r3, [pc, #24]	; (80116d8 <prvResetNextTaskUnblockTime+0x40>)
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	68db      	ldr	r3, [r3, #12]
 80116c2:	68db      	ldr	r3, [r3, #12]
 80116c4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	685a      	ldr	r2, [r3, #4]
 80116ca:	4b04      	ldr	r3, [pc, #16]	; (80116dc <prvResetNextTaskUnblockTime+0x44>)
 80116cc:	601a      	str	r2, [r3, #0]
}
 80116ce:	46c0      	nop			; (mov r8, r8)
 80116d0:	46bd      	mov	sp, r7
 80116d2:	b002      	add	sp, #8
 80116d4:	bd80      	pop	{r7, pc}
 80116d6:	46c0      	nop			; (mov r8, r8)
 80116d8:	20002530 	.word	0x20002530
 80116dc:	20002598 	.word	0x20002598

080116e0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80116e0:	b580      	push	{r7, lr}
 80116e2:	b084      	sub	sp, #16
 80116e4:	af00      	add	r7, sp, #0
 80116e6:	6078      	str	r0, [r7, #4]
 80116e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80116ea:	4b21      	ldr	r3, [pc, #132]	; (8011770 <prvAddCurrentTaskToDelayedList+0x90>)
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80116f0:	4b20      	ldr	r3, [pc, #128]	; (8011774 <prvAddCurrentTaskToDelayedList+0x94>)
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	3304      	adds	r3, #4
 80116f6:	0018      	movs	r0, r3
 80116f8:	f7ff fb4f 	bl	8010d9a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	3301      	adds	r3, #1
 8011700:	d10b      	bne.n	801171a <prvAddCurrentTaskToDelayedList+0x3a>
 8011702:	683b      	ldr	r3, [r7, #0]
 8011704:	2b00      	cmp	r3, #0
 8011706:	d008      	beq.n	801171a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011708:	4b1a      	ldr	r3, [pc, #104]	; (8011774 <prvAddCurrentTaskToDelayedList+0x94>)
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	1d1a      	adds	r2, r3, #4
 801170e:	4b1a      	ldr	r3, [pc, #104]	; (8011778 <prvAddCurrentTaskToDelayedList+0x98>)
 8011710:	0011      	movs	r1, r2
 8011712:	0018      	movs	r0, r3
 8011714:	f7ff fae9 	bl	8010cea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011718:	e026      	b.n	8011768 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801171a:	68fa      	ldr	r2, [r7, #12]
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	18d3      	adds	r3, r2, r3
 8011720:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011722:	4b14      	ldr	r3, [pc, #80]	; (8011774 <prvAddCurrentTaskToDelayedList+0x94>)
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	68ba      	ldr	r2, [r7, #8]
 8011728:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801172a:	68ba      	ldr	r2, [r7, #8]
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	429a      	cmp	r2, r3
 8011730:	d209      	bcs.n	8011746 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011732:	4b12      	ldr	r3, [pc, #72]	; (801177c <prvAddCurrentTaskToDelayedList+0x9c>)
 8011734:	681a      	ldr	r2, [r3, #0]
 8011736:	4b0f      	ldr	r3, [pc, #60]	; (8011774 <prvAddCurrentTaskToDelayedList+0x94>)
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	3304      	adds	r3, #4
 801173c:	0019      	movs	r1, r3
 801173e:	0010      	movs	r0, r2
 8011740:	f7ff faf5 	bl	8010d2e <vListInsert>
}
 8011744:	e010      	b.n	8011768 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011746:	4b0e      	ldr	r3, [pc, #56]	; (8011780 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011748:	681a      	ldr	r2, [r3, #0]
 801174a:	4b0a      	ldr	r3, [pc, #40]	; (8011774 <prvAddCurrentTaskToDelayedList+0x94>)
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	3304      	adds	r3, #4
 8011750:	0019      	movs	r1, r3
 8011752:	0010      	movs	r0, r2
 8011754:	f7ff faeb 	bl	8010d2e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011758:	4b0a      	ldr	r3, [pc, #40]	; (8011784 <prvAddCurrentTaskToDelayedList+0xa4>)
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	68ba      	ldr	r2, [r7, #8]
 801175e:	429a      	cmp	r2, r3
 8011760:	d202      	bcs.n	8011768 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011762:	4b08      	ldr	r3, [pc, #32]	; (8011784 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011764:	68ba      	ldr	r2, [r7, #8]
 8011766:	601a      	str	r2, [r3, #0]
}
 8011768:	46c0      	nop			; (mov r8, r8)
 801176a:	46bd      	mov	sp, r7
 801176c:	b004      	add	sp, #16
 801176e:	bd80      	pop	{r7, pc}
 8011770:	2000257c 	.word	0x2000257c
 8011774:	20002478 	.word	0x20002478
 8011778:	20002564 	.word	0x20002564
 801177c:	20002534 	.word	0x20002534
 8011780:	20002530 	.word	0x20002530
 8011784:	20002598 	.word	0x20002598

08011788 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011788:	b580      	push	{r7, lr}
 801178a:	b084      	sub	sp, #16
 801178c:	af00      	add	r7, sp, #0
 801178e:	60f8      	str	r0, [r7, #12]
 8011790:	60b9      	str	r1, [r7, #8]
 8011792:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	3b04      	subs	r3, #4
 8011798:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	2280      	movs	r2, #128	; 0x80
 801179e:	0452      	lsls	r2, r2, #17
 80117a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	3b04      	subs	r3, #4
 80117a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80117a8:	68ba      	ldr	r2, [r7, #8]
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	3b04      	subs	r3, #4
 80117b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80117b4:	4a08      	ldr	r2, [pc, #32]	; (80117d8 <pxPortInitialiseStack+0x50>)
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	3b14      	subs	r3, #20
 80117be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80117c0:	687a      	ldr	r2, [r7, #4]
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	3b20      	subs	r3, #32
 80117ca:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80117cc:	68fb      	ldr	r3, [r7, #12]
}
 80117ce:	0018      	movs	r0, r3
 80117d0:	46bd      	mov	sp, r7
 80117d2:	b004      	add	sp, #16
 80117d4:	bd80      	pop	{r7, pc}
 80117d6:	46c0      	nop			; (mov r8, r8)
 80117d8:	080117dd 	.word	0x080117dd

080117dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80117dc:	b580      	push	{r7, lr}
 80117de:	b082      	sub	sp, #8
 80117e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80117e2:	2300      	movs	r3, #0
 80117e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80117e6:	4b08      	ldr	r3, [pc, #32]	; (8011808 <prvTaskExitError+0x2c>)
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	3301      	adds	r3, #1
 80117ec:	d001      	beq.n	80117f2 <prvTaskExitError+0x16>
 80117ee:	b672      	cpsid	i
 80117f0:	e7fe      	b.n	80117f0 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80117f2:	b672      	cpsid	i
	while( ulDummy == 0 )
 80117f4:	46c0      	nop			; (mov r8, r8)
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d0fc      	beq.n	80117f6 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80117fc:	46c0      	nop			; (mov r8, r8)
 80117fe:	46c0      	nop			; (mov r8, r8)
 8011800:	46bd      	mov	sp, r7
 8011802:	b002      	add	sp, #8
 8011804:	bd80      	pop	{r7, pc}
 8011806:	46c0      	nop			; (mov r8, r8)
 8011808:	20000010 	.word	0x20000010

0801180c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 801180c:	b580      	push	{r7, lr}
 801180e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8011810:	46c0      	nop			; (mov r8, r8)
 8011812:	46bd      	mov	sp, r7
 8011814:	bd80      	pop	{r7, pc}
	...

08011820 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8011820:	4a0b      	ldr	r2, [pc, #44]	; (8011850 <pxCurrentTCBConst2>)
 8011822:	6813      	ldr	r3, [r2, #0]
 8011824:	6818      	ldr	r0, [r3, #0]
 8011826:	3020      	adds	r0, #32
 8011828:	f380 8809 	msr	PSP, r0
 801182c:	2002      	movs	r0, #2
 801182e:	f380 8814 	msr	CONTROL, r0
 8011832:	f3bf 8f6f 	isb	sy
 8011836:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8011838:	46ae      	mov	lr, r5
 801183a:	bc08      	pop	{r3}
 801183c:	bc04      	pop	{r2}
 801183e:	b662      	cpsie	i
 8011840:	4718      	bx	r3
 8011842:	46c0      	nop			; (mov r8, r8)
 8011844:	46c0      	nop			; (mov r8, r8)
 8011846:	46c0      	nop			; (mov r8, r8)
 8011848:	46c0      	nop			; (mov r8, r8)
 801184a:	46c0      	nop			; (mov r8, r8)
 801184c:	46c0      	nop			; (mov r8, r8)
 801184e:	46c0      	nop			; (mov r8, r8)

08011850 <pxCurrentTCBConst2>:
 8011850:	20002478 	.word	0x20002478
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8011854:	46c0      	nop			; (mov r8, r8)
 8011856:	46c0      	nop			; (mov r8, r8)

08011858 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011858:	b580      	push	{r7, lr}
 801185a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 801185c:	4b0e      	ldr	r3, [pc, #56]	; (8011898 <xPortStartScheduler+0x40>)
 801185e:	681a      	ldr	r2, [r3, #0]
 8011860:	4b0d      	ldr	r3, [pc, #52]	; (8011898 <xPortStartScheduler+0x40>)
 8011862:	21ff      	movs	r1, #255	; 0xff
 8011864:	0409      	lsls	r1, r1, #16
 8011866:	430a      	orrs	r2, r1
 8011868:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 801186a:	4b0b      	ldr	r3, [pc, #44]	; (8011898 <xPortStartScheduler+0x40>)
 801186c:	681a      	ldr	r2, [r3, #0]
 801186e:	4b0a      	ldr	r3, [pc, #40]	; (8011898 <xPortStartScheduler+0x40>)
 8011870:	21ff      	movs	r1, #255	; 0xff
 8011872:	0609      	lsls	r1, r1, #24
 8011874:	430a      	orrs	r2, r1
 8011876:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8011878:	f000 f898 	bl	80119ac <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801187c:	4b07      	ldr	r3, [pc, #28]	; (801189c <xPortStartScheduler+0x44>)
 801187e:	2200      	movs	r2, #0
 8011880:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8011882:	f7ff ffcd 	bl	8011820 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011886:	f7ff fdfd 	bl	8011484 <vTaskSwitchContext>
	prvTaskExitError();
 801188a:	f7ff ffa7 	bl	80117dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801188e:	2300      	movs	r3, #0
}
 8011890:	0018      	movs	r0, r3
 8011892:	46bd      	mov	sp, r7
 8011894:	bd80      	pop	{r7, pc}
 8011896:	46c0      	nop			; (mov r8, r8)
 8011898:	e000ed20 	.word	0xe000ed20
 801189c:	20000010 	.word	0x20000010

080118a0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80118a0:	b580      	push	{r7, lr}
 80118a2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 80118a4:	4b05      	ldr	r3, [pc, #20]	; (80118bc <vPortYield+0x1c>)
 80118a6:	2280      	movs	r2, #128	; 0x80
 80118a8:	0552      	lsls	r2, r2, #21
 80118aa:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80118ac:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80118b0:	f3bf 8f6f 	isb	sy
}
 80118b4:	46c0      	nop			; (mov r8, r8)
 80118b6:	46bd      	mov	sp, r7
 80118b8:	bd80      	pop	{r7, pc}
 80118ba:	46c0      	nop			; (mov r8, r8)
 80118bc:	e000ed04 	.word	0xe000ed04

080118c0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80118c0:	b580      	push	{r7, lr}
 80118c2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 80118c4:	b672      	cpsid	i
    uxCriticalNesting++;
 80118c6:	4b06      	ldr	r3, [pc, #24]	; (80118e0 <vPortEnterCritical+0x20>)
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	1c5a      	adds	r2, r3, #1
 80118cc:	4b04      	ldr	r3, [pc, #16]	; (80118e0 <vPortEnterCritical+0x20>)
 80118ce:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 80118d0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80118d4:	f3bf 8f6f 	isb	sy
}
 80118d8:	46c0      	nop			; (mov r8, r8)
 80118da:	46bd      	mov	sp, r7
 80118dc:	bd80      	pop	{r7, pc}
 80118de:	46c0      	nop			; (mov r8, r8)
 80118e0:	20000010 	.word	0x20000010

080118e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80118e4:	b580      	push	{r7, lr}
 80118e6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80118e8:	4b09      	ldr	r3, [pc, #36]	; (8011910 <vPortExitCritical+0x2c>)
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d101      	bne.n	80118f4 <vPortExitCritical+0x10>
 80118f0:	b672      	cpsid	i
 80118f2:	e7fe      	b.n	80118f2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 80118f4:	4b06      	ldr	r3, [pc, #24]	; (8011910 <vPortExitCritical+0x2c>)
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	1e5a      	subs	r2, r3, #1
 80118fa:	4b05      	ldr	r3, [pc, #20]	; (8011910 <vPortExitCritical+0x2c>)
 80118fc:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 80118fe:	4b04      	ldr	r3, [pc, #16]	; (8011910 <vPortExitCritical+0x2c>)
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	2b00      	cmp	r3, #0
 8011904:	d100      	bne.n	8011908 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8011906:	b662      	cpsie	i
    }
}
 8011908:	46c0      	nop			; (mov r8, r8)
 801190a:	46bd      	mov	sp, r7
 801190c:	bd80      	pop	{r7, pc}
 801190e:	46c0      	nop			; (mov r8, r8)
 8011910:	20000010 	.word	0x20000010

08011914 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8011914:	f3ef 8010 	mrs	r0, PRIMASK
 8011918:	b672      	cpsid	i
 801191a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 801191c:	46c0      	nop			; (mov r8, r8)
 801191e:	0018      	movs	r0, r3

08011920 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8011920:	f380 8810 	msr	PRIMASK, r0
 8011924:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8011926:	46c0      	nop			; (mov r8, r8)
	...

08011930 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011930:	f3ef 8009 	mrs	r0, PSP
 8011934:	4b0e      	ldr	r3, [pc, #56]	; (8011970 <pxCurrentTCBConst>)
 8011936:	681a      	ldr	r2, [r3, #0]
 8011938:	3820      	subs	r0, #32
 801193a:	6010      	str	r0, [r2, #0]
 801193c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 801193e:	4644      	mov	r4, r8
 8011940:	464d      	mov	r5, r9
 8011942:	4656      	mov	r6, sl
 8011944:	465f      	mov	r7, fp
 8011946:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8011948:	b508      	push	{r3, lr}
 801194a:	b672      	cpsid	i
 801194c:	f7ff fd9a 	bl	8011484 <vTaskSwitchContext>
 8011950:	b662      	cpsie	i
 8011952:	bc0c      	pop	{r2, r3}
 8011954:	6811      	ldr	r1, [r2, #0]
 8011956:	6808      	ldr	r0, [r1, #0]
 8011958:	3010      	adds	r0, #16
 801195a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 801195c:	46a0      	mov	r8, r4
 801195e:	46a9      	mov	r9, r5
 8011960:	46b2      	mov	sl, r6
 8011962:	46bb      	mov	fp, r7
 8011964:	f380 8809 	msr	PSP, r0
 8011968:	3820      	subs	r0, #32
 801196a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 801196c:	4718      	bx	r3
 801196e:	46c0      	nop			; (mov r8, r8)

08011970 <pxCurrentTCBConst>:
 8011970:	20002478 	.word	0x20002478
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8011974:	46c0      	nop			; (mov r8, r8)
 8011976:	46c0      	nop			; (mov r8, r8)

08011978 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011978:	b580      	push	{r7, lr}
 801197a:	b082      	sub	sp, #8
 801197c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 801197e:	f7ff ffc9 	bl	8011914 <ulSetInterruptMaskFromISR>
 8011982:	0003      	movs	r3, r0
 8011984:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011986:	f7ff fcc9 	bl	801131c <xTaskIncrementTick>
 801198a:	1e03      	subs	r3, r0, #0
 801198c:	d003      	beq.n	8011996 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 801198e:	4b06      	ldr	r3, [pc, #24]	; (80119a8 <SysTick_Handler+0x30>)
 8011990:	2280      	movs	r2, #128	; 0x80
 8011992:	0552      	lsls	r2, r2, #21
 8011994:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	0018      	movs	r0, r3
 801199a:	f7ff ffc1 	bl	8011920 <vClearInterruptMaskFromISR>
}
 801199e:	46c0      	nop			; (mov r8, r8)
 80119a0:	46bd      	mov	sp, r7
 80119a2:	b002      	add	sp, #8
 80119a4:	bd80      	pop	{r7, pc}
 80119a6:	46c0      	nop			; (mov r8, r8)
 80119a8:	e000ed04 	.word	0xe000ed04

080119ac <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 80119ac:	b580      	push	{r7, lr}
 80119ae:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 80119b0:	4b0b      	ldr	r3, [pc, #44]	; (80119e0 <prvSetupTimerInterrupt+0x34>)
 80119b2:	2200      	movs	r2, #0
 80119b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 80119b6:	4b0b      	ldr	r3, [pc, #44]	; (80119e4 <prvSetupTimerInterrupt+0x38>)
 80119b8:	2200      	movs	r2, #0
 80119ba:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80119bc:	4b0a      	ldr	r3, [pc, #40]	; (80119e8 <prvSetupTimerInterrupt+0x3c>)
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	22fa      	movs	r2, #250	; 0xfa
 80119c2:	0091      	lsls	r1, r2, #2
 80119c4:	0018      	movs	r0, r3
 80119c6:	f7ee fbbb 	bl	8000140 <__udivsi3>
 80119ca:	0003      	movs	r3, r0
 80119cc:	001a      	movs	r2, r3
 80119ce:	4b07      	ldr	r3, [pc, #28]	; (80119ec <prvSetupTimerInterrupt+0x40>)
 80119d0:	3a01      	subs	r2, #1
 80119d2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 80119d4:	4b02      	ldr	r3, [pc, #8]	; (80119e0 <prvSetupTimerInterrupt+0x34>)
 80119d6:	2207      	movs	r2, #7
 80119d8:	601a      	str	r2, [r3, #0]
}
 80119da:	46c0      	nop			; (mov r8, r8)
 80119dc:	46bd      	mov	sp, r7
 80119de:	bd80      	pop	{r7, pc}
 80119e0:	e000e010 	.word	0xe000e010
 80119e4:	e000e018 	.word	0xe000e018
 80119e8:	20000004 	.word	0x20000004
 80119ec:	e000e014 	.word	0xe000e014

080119f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80119f0:	b580      	push	{r7, lr}
 80119f2:	b086      	sub	sp, #24
 80119f4:	af00      	add	r7, sp, #0
 80119f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80119f8:	2300      	movs	r3, #0
 80119fa:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80119fc:	f7ff fbf6 	bl	80111ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011a00:	4b49      	ldr	r3, [pc, #292]	; (8011b28 <pvPortMalloc+0x138>)
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d101      	bne.n	8011a0c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011a08:	f000 f8e0 	bl	8011bcc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011a0c:	4b47      	ldr	r3, [pc, #284]	; (8011b2c <pvPortMalloc+0x13c>)
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	687a      	ldr	r2, [r7, #4]
 8011a12:	4013      	ands	r3, r2
 8011a14:	d000      	beq.n	8011a18 <pvPortMalloc+0x28>
 8011a16:	e079      	b.n	8011b0c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d012      	beq.n	8011a44 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8011a1e:	2208      	movs	r2, #8
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	189b      	adds	r3, r3, r2
 8011a24:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	2207      	movs	r2, #7
 8011a2a:	4013      	ands	r3, r2
 8011a2c:	d00a      	beq.n	8011a44 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	2207      	movs	r2, #7
 8011a32:	4393      	bics	r3, r2
 8011a34:	3308      	adds	r3, #8
 8011a36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	2207      	movs	r2, #7
 8011a3c:	4013      	ands	r3, r2
 8011a3e:	d001      	beq.n	8011a44 <pvPortMalloc+0x54>
 8011a40:	b672      	cpsid	i
 8011a42:	e7fe      	b.n	8011a42 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d060      	beq.n	8011b0c <pvPortMalloc+0x11c>
 8011a4a:	4b39      	ldr	r3, [pc, #228]	; (8011b30 <pvPortMalloc+0x140>)
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	687a      	ldr	r2, [r7, #4]
 8011a50:	429a      	cmp	r2, r3
 8011a52:	d85b      	bhi.n	8011b0c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011a54:	4b37      	ldr	r3, [pc, #220]	; (8011b34 <pvPortMalloc+0x144>)
 8011a56:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8011a58:	4b36      	ldr	r3, [pc, #216]	; (8011b34 <pvPortMalloc+0x144>)
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011a5e:	e004      	b.n	8011a6a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8011a60:	697b      	ldr	r3, [r7, #20]
 8011a62:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011a64:	697b      	ldr	r3, [r7, #20]
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011a6a:	697b      	ldr	r3, [r7, #20]
 8011a6c:	685b      	ldr	r3, [r3, #4]
 8011a6e:	687a      	ldr	r2, [r7, #4]
 8011a70:	429a      	cmp	r2, r3
 8011a72:	d903      	bls.n	8011a7c <pvPortMalloc+0x8c>
 8011a74:	697b      	ldr	r3, [r7, #20]
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d1f1      	bne.n	8011a60 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011a7c:	4b2a      	ldr	r3, [pc, #168]	; (8011b28 <pvPortMalloc+0x138>)
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	697a      	ldr	r2, [r7, #20]
 8011a82:	429a      	cmp	r2, r3
 8011a84:	d042      	beq.n	8011b0c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011a86:	693b      	ldr	r3, [r7, #16]
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	2208      	movs	r2, #8
 8011a8c:	189b      	adds	r3, r3, r2
 8011a8e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011a90:	697b      	ldr	r3, [r7, #20]
 8011a92:	681a      	ldr	r2, [r3, #0]
 8011a94:	693b      	ldr	r3, [r7, #16]
 8011a96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011a98:	697b      	ldr	r3, [r7, #20]
 8011a9a:	685a      	ldr	r2, [r3, #4]
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	1ad2      	subs	r2, r2, r3
 8011aa0:	2308      	movs	r3, #8
 8011aa2:	005b      	lsls	r3, r3, #1
 8011aa4:	429a      	cmp	r2, r3
 8011aa6:	d916      	bls.n	8011ad6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011aa8:	697a      	ldr	r2, [r7, #20]
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	18d3      	adds	r3, r2, r3
 8011aae:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011ab0:	68bb      	ldr	r3, [r7, #8]
 8011ab2:	2207      	movs	r2, #7
 8011ab4:	4013      	ands	r3, r2
 8011ab6:	d001      	beq.n	8011abc <pvPortMalloc+0xcc>
 8011ab8:	b672      	cpsid	i
 8011aba:	e7fe      	b.n	8011aba <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011abc:	697b      	ldr	r3, [r7, #20]
 8011abe:	685a      	ldr	r2, [r3, #4]
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	1ad2      	subs	r2, r2, r3
 8011ac4:	68bb      	ldr	r3, [r7, #8]
 8011ac6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011ac8:	697b      	ldr	r3, [r7, #20]
 8011aca:	687a      	ldr	r2, [r7, #4]
 8011acc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011ace:	68bb      	ldr	r3, [r7, #8]
 8011ad0:	0018      	movs	r0, r3
 8011ad2:	f000 f8db 	bl	8011c8c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011ad6:	4b16      	ldr	r3, [pc, #88]	; (8011b30 <pvPortMalloc+0x140>)
 8011ad8:	681a      	ldr	r2, [r3, #0]
 8011ada:	697b      	ldr	r3, [r7, #20]
 8011adc:	685b      	ldr	r3, [r3, #4]
 8011ade:	1ad2      	subs	r2, r2, r3
 8011ae0:	4b13      	ldr	r3, [pc, #76]	; (8011b30 <pvPortMalloc+0x140>)
 8011ae2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011ae4:	4b12      	ldr	r3, [pc, #72]	; (8011b30 <pvPortMalloc+0x140>)
 8011ae6:	681a      	ldr	r2, [r3, #0]
 8011ae8:	4b13      	ldr	r3, [pc, #76]	; (8011b38 <pvPortMalloc+0x148>)
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	429a      	cmp	r2, r3
 8011aee:	d203      	bcs.n	8011af8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011af0:	4b0f      	ldr	r3, [pc, #60]	; (8011b30 <pvPortMalloc+0x140>)
 8011af2:	681a      	ldr	r2, [r3, #0]
 8011af4:	4b10      	ldr	r3, [pc, #64]	; (8011b38 <pvPortMalloc+0x148>)
 8011af6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011af8:	697b      	ldr	r3, [r7, #20]
 8011afa:	685a      	ldr	r2, [r3, #4]
 8011afc:	4b0b      	ldr	r3, [pc, #44]	; (8011b2c <pvPortMalloc+0x13c>)
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	431a      	orrs	r2, r3
 8011b02:	697b      	ldr	r3, [r7, #20]
 8011b04:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011b06:	697b      	ldr	r3, [r7, #20]
 8011b08:	2200      	movs	r2, #0
 8011b0a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011b0c:	f7ff fb7a 	bl	8011204 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	2207      	movs	r2, #7
 8011b14:	4013      	ands	r3, r2
 8011b16:	d001      	beq.n	8011b1c <pvPortMalloc+0x12c>
 8011b18:	b672      	cpsid	i
 8011b1a:	e7fe      	b.n	8011b1a <pvPortMalloc+0x12a>
	return pvReturn;
 8011b1c:	68fb      	ldr	r3, [r7, #12]
}
 8011b1e:	0018      	movs	r0, r3
 8011b20:	46bd      	mov	sp, r7
 8011b22:	b006      	add	sp, #24
 8011b24:	bd80      	pop	{r7, pc}
 8011b26:	46c0      	nop			; (mov r8, r8)
 8011b28:	20002d7c 	.word	0x20002d7c
 8011b2c:	20002d88 	.word	0x20002d88
 8011b30:	20002d80 	.word	0x20002d80
 8011b34:	20002d74 	.word	0x20002d74
 8011b38:	20002d84 	.word	0x20002d84

08011b3c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011b3c:	b580      	push	{r7, lr}
 8011b3e:	b084      	sub	sp, #16
 8011b40:	af00      	add	r7, sp, #0
 8011b42:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d035      	beq.n	8011bba <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011b4e:	2308      	movs	r3, #8
 8011b50:	425b      	negs	r3, r3
 8011b52:	68fa      	ldr	r2, [r7, #12]
 8011b54:	18d3      	adds	r3, r2, r3
 8011b56:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011b58:	68fb      	ldr	r3, [r7, #12]
 8011b5a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011b5c:	68bb      	ldr	r3, [r7, #8]
 8011b5e:	685a      	ldr	r2, [r3, #4]
 8011b60:	4b18      	ldr	r3, [pc, #96]	; (8011bc4 <vPortFree+0x88>)
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	4013      	ands	r3, r2
 8011b66:	d101      	bne.n	8011b6c <vPortFree+0x30>
 8011b68:	b672      	cpsid	i
 8011b6a:	e7fe      	b.n	8011b6a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011b6c:	68bb      	ldr	r3, [r7, #8]
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d001      	beq.n	8011b78 <vPortFree+0x3c>
 8011b74:	b672      	cpsid	i
 8011b76:	e7fe      	b.n	8011b76 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011b78:	68bb      	ldr	r3, [r7, #8]
 8011b7a:	685a      	ldr	r2, [r3, #4]
 8011b7c:	4b11      	ldr	r3, [pc, #68]	; (8011bc4 <vPortFree+0x88>)
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	4013      	ands	r3, r2
 8011b82:	d01a      	beq.n	8011bba <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011b84:	68bb      	ldr	r3, [r7, #8]
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d116      	bne.n	8011bba <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011b8c:	68bb      	ldr	r3, [r7, #8]
 8011b8e:	685a      	ldr	r2, [r3, #4]
 8011b90:	4b0c      	ldr	r3, [pc, #48]	; (8011bc4 <vPortFree+0x88>)
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	43db      	mvns	r3, r3
 8011b96:	401a      	ands	r2, r3
 8011b98:	68bb      	ldr	r3, [r7, #8]
 8011b9a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011b9c:	f7ff fb26 	bl	80111ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011ba0:	68bb      	ldr	r3, [r7, #8]
 8011ba2:	685a      	ldr	r2, [r3, #4]
 8011ba4:	4b08      	ldr	r3, [pc, #32]	; (8011bc8 <vPortFree+0x8c>)
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	18d2      	adds	r2, r2, r3
 8011baa:	4b07      	ldr	r3, [pc, #28]	; (8011bc8 <vPortFree+0x8c>)
 8011bac:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011bae:	68bb      	ldr	r3, [r7, #8]
 8011bb0:	0018      	movs	r0, r3
 8011bb2:	f000 f86b 	bl	8011c8c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011bb6:	f7ff fb25 	bl	8011204 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011bba:	46c0      	nop			; (mov r8, r8)
 8011bbc:	46bd      	mov	sp, r7
 8011bbe:	b004      	add	sp, #16
 8011bc0:	bd80      	pop	{r7, pc}
 8011bc2:	46c0      	nop			; (mov r8, r8)
 8011bc4:	20002d88 	.word	0x20002d88
 8011bc8:	20002d80 	.word	0x20002d80

08011bcc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	b084      	sub	sp, #16
 8011bd0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011bd2:	23fa      	movs	r3, #250	; 0xfa
 8011bd4:	00db      	lsls	r3, r3, #3
 8011bd6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011bd8:	4b26      	ldr	r3, [pc, #152]	; (8011c74 <prvHeapInit+0xa8>)
 8011bda:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	2207      	movs	r2, #7
 8011be0:	4013      	ands	r3, r2
 8011be2:	d00c      	beq.n	8011bfe <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	3307      	adds	r3, #7
 8011be8:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	2207      	movs	r2, #7
 8011bee:	4393      	bics	r3, r2
 8011bf0:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011bf2:	68ba      	ldr	r2, [r7, #8]
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	1ad2      	subs	r2, r2, r3
 8011bf8:	4b1e      	ldr	r3, [pc, #120]	; (8011c74 <prvHeapInit+0xa8>)
 8011bfa:	18d3      	adds	r3, r2, r3
 8011bfc:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011c02:	4b1d      	ldr	r3, [pc, #116]	; (8011c78 <prvHeapInit+0xac>)
 8011c04:	687a      	ldr	r2, [r7, #4]
 8011c06:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011c08:	4b1b      	ldr	r3, [pc, #108]	; (8011c78 <prvHeapInit+0xac>)
 8011c0a:	2200      	movs	r2, #0
 8011c0c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	68ba      	ldr	r2, [r7, #8]
 8011c12:	18d3      	adds	r3, r2, r3
 8011c14:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011c16:	2208      	movs	r2, #8
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	1a9b      	subs	r3, r3, r2
 8011c1c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	2207      	movs	r2, #7
 8011c22:	4393      	bics	r3, r2
 8011c24:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011c26:	68fa      	ldr	r2, [r7, #12]
 8011c28:	4b14      	ldr	r3, [pc, #80]	; (8011c7c <prvHeapInit+0xb0>)
 8011c2a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8011c2c:	4b13      	ldr	r3, [pc, #76]	; (8011c7c <prvHeapInit+0xb0>)
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	2200      	movs	r2, #0
 8011c32:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011c34:	4b11      	ldr	r3, [pc, #68]	; (8011c7c <prvHeapInit+0xb0>)
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	2200      	movs	r2, #0
 8011c3a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011c40:	683b      	ldr	r3, [r7, #0]
 8011c42:	68fa      	ldr	r2, [r7, #12]
 8011c44:	1ad2      	subs	r2, r2, r3
 8011c46:	683b      	ldr	r3, [r7, #0]
 8011c48:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011c4a:	4b0c      	ldr	r3, [pc, #48]	; (8011c7c <prvHeapInit+0xb0>)
 8011c4c:	681a      	ldr	r2, [r3, #0]
 8011c4e:	683b      	ldr	r3, [r7, #0]
 8011c50:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011c52:	683b      	ldr	r3, [r7, #0]
 8011c54:	685a      	ldr	r2, [r3, #4]
 8011c56:	4b0a      	ldr	r3, [pc, #40]	; (8011c80 <prvHeapInit+0xb4>)
 8011c58:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011c5a:	683b      	ldr	r3, [r7, #0]
 8011c5c:	685a      	ldr	r2, [r3, #4]
 8011c5e:	4b09      	ldr	r3, [pc, #36]	; (8011c84 <prvHeapInit+0xb8>)
 8011c60:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011c62:	4b09      	ldr	r3, [pc, #36]	; (8011c88 <prvHeapInit+0xbc>)
 8011c64:	2280      	movs	r2, #128	; 0x80
 8011c66:	0612      	lsls	r2, r2, #24
 8011c68:	601a      	str	r2, [r3, #0]
}
 8011c6a:	46c0      	nop			; (mov r8, r8)
 8011c6c:	46bd      	mov	sp, r7
 8011c6e:	b004      	add	sp, #16
 8011c70:	bd80      	pop	{r7, pc}
 8011c72:	46c0      	nop			; (mov r8, r8)
 8011c74:	200025a4 	.word	0x200025a4
 8011c78:	20002d74 	.word	0x20002d74
 8011c7c:	20002d7c 	.word	0x20002d7c
 8011c80:	20002d84 	.word	0x20002d84
 8011c84:	20002d80 	.word	0x20002d80
 8011c88:	20002d88 	.word	0x20002d88

08011c8c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011c8c:	b580      	push	{r7, lr}
 8011c8e:	b084      	sub	sp, #16
 8011c90:	af00      	add	r7, sp, #0
 8011c92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011c94:	4b27      	ldr	r3, [pc, #156]	; (8011d34 <prvInsertBlockIntoFreeList+0xa8>)
 8011c96:	60fb      	str	r3, [r7, #12]
 8011c98:	e002      	b.n	8011ca0 <prvInsertBlockIntoFreeList+0x14>
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	60fb      	str	r3, [r7, #12]
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	687a      	ldr	r2, [r7, #4]
 8011ca6:	429a      	cmp	r2, r3
 8011ca8:	d8f7      	bhi.n	8011c9a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	685b      	ldr	r3, [r3, #4]
 8011cb2:	68ba      	ldr	r2, [r7, #8]
 8011cb4:	18d3      	adds	r3, r2, r3
 8011cb6:	687a      	ldr	r2, [r7, #4]
 8011cb8:	429a      	cmp	r2, r3
 8011cba:	d108      	bne.n	8011cce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	685a      	ldr	r2, [r3, #4]
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	685b      	ldr	r3, [r3, #4]
 8011cc4:	18d2      	adds	r2, r2, r3
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	685b      	ldr	r3, [r3, #4]
 8011cd6:	68ba      	ldr	r2, [r7, #8]
 8011cd8:	18d2      	adds	r2, r2, r3
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	429a      	cmp	r2, r3
 8011ce0:	d118      	bne.n	8011d14 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	681a      	ldr	r2, [r3, #0]
 8011ce6:	4b14      	ldr	r3, [pc, #80]	; (8011d38 <prvInsertBlockIntoFreeList+0xac>)
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	429a      	cmp	r2, r3
 8011cec:	d00d      	beq.n	8011d0a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	685a      	ldr	r2, [r3, #4]
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	685b      	ldr	r3, [r3, #4]
 8011cf8:	18d2      	adds	r2, r2, r3
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	681a      	ldr	r2, [r3, #0]
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	601a      	str	r2, [r3, #0]
 8011d08:	e008      	b.n	8011d1c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011d0a:	4b0b      	ldr	r3, [pc, #44]	; (8011d38 <prvInsertBlockIntoFreeList+0xac>)
 8011d0c:	681a      	ldr	r2, [r3, #0]
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	601a      	str	r2, [r3, #0]
 8011d12:	e003      	b.n	8011d1c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	681a      	ldr	r2, [r3, #0]
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011d1c:	68fa      	ldr	r2, [r7, #12]
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	429a      	cmp	r2, r3
 8011d22:	d002      	beq.n	8011d2a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	687a      	ldr	r2, [r7, #4]
 8011d28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011d2a:	46c0      	nop			; (mov r8, r8)
 8011d2c:	46bd      	mov	sp, r7
 8011d2e:	b004      	add	sp, #16
 8011d30:	bd80      	pop	{r7, pc}
 8011d32:	46c0      	nop			; (mov r8, r8)
 8011d34:	20002d74 	.word	0x20002d74
 8011d38:	20002d7c 	.word	0x20002d7c

08011d3c <atof>:
 8011d3c:	b510      	push	{r4, lr}
 8011d3e:	2100      	movs	r1, #0
 8011d40:	f001 fde8 	bl	8013914 <strtod>
 8011d44:	bd10      	pop	{r4, pc}

08011d46 <atoi>:
 8011d46:	b510      	push	{r4, lr}
 8011d48:	220a      	movs	r2, #10
 8011d4a:	2100      	movs	r1, #0
 8011d4c:	f001 fee2 	bl	8013b14 <strtol>
 8011d50:	bd10      	pop	{r4, pc}
	...

08011d54 <__errno>:
 8011d54:	4b01      	ldr	r3, [pc, #4]	; (8011d5c <__errno+0x8>)
 8011d56:	6818      	ldr	r0, [r3, #0]
 8011d58:	4770      	bx	lr
 8011d5a:	46c0      	nop			; (mov r8, r8)
 8011d5c:	20000014 	.word	0x20000014

08011d60 <std>:
 8011d60:	2300      	movs	r3, #0
 8011d62:	b510      	push	{r4, lr}
 8011d64:	0004      	movs	r4, r0
 8011d66:	6003      	str	r3, [r0, #0]
 8011d68:	6043      	str	r3, [r0, #4]
 8011d6a:	6083      	str	r3, [r0, #8]
 8011d6c:	8181      	strh	r1, [r0, #12]
 8011d6e:	6643      	str	r3, [r0, #100]	; 0x64
 8011d70:	0019      	movs	r1, r3
 8011d72:	81c2      	strh	r2, [r0, #14]
 8011d74:	6103      	str	r3, [r0, #16]
 8011d76:	6143      	str	r3, [r0, #20]
 8011d78:	6183      	str	r3, [r0, #24]
 8011d7a:	2208      	movs	r2, #8
 8011d7c:	305c      	adds	r0, #92	; 0x5c
 8011d7e:	f000 f93d 	bl	8011ffc <memset>
 8011d82:	4b05      	ldr	r3, [pc, #20]	; (8011d98 <std+0x38>)
 8011d84:	6224      	str	r4, [r4, #32]
 8011d86:	6263      	str	r3, [r4, #36]	; 0x24
 8011d88:	4b04      	ldr	r3, [pc, #16]	; (8011d9c <std+0x3c>)
 8011d8a:	62a3      	str	r3, [r4, #40]	; 0x28
 8011d8c:	4b04      	ldr	r3, [pc, #16]	; (8011da0 <std+0x40>)
 8011d8e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011d90:	4b04      	ldr	r3, [pc, #16]	; (8011da4 <std+0x44>)
 8011d92:	6323      	str	r3, [r4, #48]	; 0x30
 8011d94:	bd10      	pop	{r4, pc}
 8011d96:	46c0      	nop			; (mov r8, r8)
 8011d98:	08012b65 	.word	0x08012b65
 8011d9c:	08012b8d 	.word	0x08012b8d
 8011da0:	08012bc5 	.word	0x08012bc5
 8011da4:	08012bf1 	.word	0x08012bf1

08011da8 <_cleanup_r>:
 8011da8:	b510      	push	{r4, lr}
 8011daa:	4902      	ldr	r1, [pc, #8]	; (8011db4 <_cleanup_r+0xc>)
 8011dac:	f000 f8ba 	bl	8011f24 <_fwalk_reent>
 8011db0:	bd10      	pop	{r4, pc}
 8011db2:	46c0      	nop			; (mov r8, r8)
 8011db4:	08014a85 	.word	0x08014a85

08011db8 <__sfmoreglue>:
 8011db8:	b570      	push	{r4, r5, r6, lr}
 8011dba:	2568      	movs	r5, #104	; 0x68
 8011dbc:	1e4a      	subs	r2, r1, #1
 8011dbe:	4355      	muls	r5, r2
 8011dc0:	000e      	movs	r6, r1
 8011dc2:	0029      	movs	r1, r5
 8011dc4:	3174      	adds	r1, #116	; 0x74
 8011dc6:	f000 f943 	bl	8012050 <_malloc_r>
 8011dca:	1e04      	subs	r4, r0, #0
 8011dcc:	d008      	beq.n	8011de0 <__sfmoreglue+0x28>
 8011dce:	2100      	movs	r1, #0
 8011dd0:	002a      	movs	r2, r5
 8011dd2:	6001      	str	r1, [r0, #0]
 8011dd4:	6046      	str	r6, [r0, #4]
 8011dd6:	300c      	adds	r0, #12
 8011dd8:	60a0      	str	r0, [r4, #8]
 8011dda:	3268      	adds	r2, #104	; 0x68
 8011ddc:	f000 f90e 	bl	8011ffc <memset>
 8011de0:	0020      	movs	r0, r4
 8011de2:	bd70      	pop	{r4, r5, r6, pc}

08011de4 <__sfp_lock_acquire>:
 8011de4:	b510      	push	{r4, lr}
 8011de6:	4802      	ldr	r0, [pc, #8]	; (8011df0 <__sfp_lock_acquire+0xc>)
 8011de8:	f000 f8fd 	bl	8011fe6 <__retarget_lock_acquire_recursive>
 8011dec:	bd10      	pop	{r4, pc}
 8011dee:	46c0      	nop			; (mov r8, r8)
 8011df0:	20002d8d 	.word	0x20002d8d

08011df4 <__sfp_lock_release>:
 8011df4:	b510      	push	{r4, lr}
 8011df6:	4802      	ldr	r0, [pc, #8]	; (8011e00 <__sfp_lock_release+0xc>)
 8011df8:	f000 f8f6 	bl	8011fe8 <__retarget_lock_release_recursive>
 8011dfc:	bd10      	pop	{r4, pc}
 8011dfe:	46c0      	nop			; (mov r8, r8)
 8011e00:	20002d8d 	.word	0x20002d8d

08011e04 <__sinit_lock_acquire>:
 8011e04:	b510      	push	{r4, lr}
 8011e06:	4802      	ldr	r0, [pc, #8]	; (8011e10 <__sinit_lock_acquire+0xc>)
 8011e08:	f000 f8ed 	bl	8011fe6 <__retarget_lock_acquire_recursive>
 8011e0c:	bd10      	pop	{r4, pc}
 8011e0e:	46c0      	nop			; (mov r8, r8)
 8011e10:	20002d8e 	.word	0x20002d8e

08011e14 <__sinit_lock_release>:
 8011e14:	b510      	push	{r4, lr}
 8011e16:	4802      	ldr	r0, [pc, #8]	; (8011e20 <__sinit_lock_release+0xc>)
 8011e18:	f000 f8e6 	bl	8011fe8 <__retarget_lock_release_recursive>
 8011e1c:	bd10      	pop	{r4, pc}
 8011e1e:	46c0      	nop			; (mov r8, r8)
 8011e20:	20002d8e 	.word	0x20002d8e

08011e24 <__sinit>:
 8011e24:	b513      	push	{r0, r1, r4, lr}
 8011e26:	0004      	movs	r4, r0
 8011e28:	f7ff ffec 	bl	8011e04 <__sinit_lock_acquire>
 8011e2c:	69a3      	ldr	r3, [r4, #24]
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d002      	beq.n	8011e38 <__sinit+0x14>
 8011e32:	f7ff ffef 	bl	8011e14 <__sinit_lock_release>
 8011e36:	bd13      	pop	{r0, r1, r4, pc}
 8011e38:	64a3      	str	r3, [r4, #72]	; 0x48
 8011e3a:	64e3      	str	r3, [r4, #76]	; 0x4c
 8011e3c:	6523      	str	r3, [r4, #80]	; 0x50
 8011e3e:	4b13      	ldr	r3, [pc, #76]	; (8011e8c <__sinit+0x68>)
 8011e40:	4a13      	ldr	r2, [pc, #76]	; (8011e90 <__sinit+0x6c>)
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	62a2      	str	r2, [r4, #40]	; 0x28
 8011e46:	9301      	str	r3, [sp, #4]
 8011e48:	42a3      	cmp	r3, r4
 8011e4a:	d101      	bne.n	8011e50 <__sinit+0x2c>
 8011e4c:	2301      	movs	r3, #1
 8011e4e:	61a3      	str	r3, [r4, #24]
 8011e50:	0020      	movs	r0, r4
 8011e52:	f000 f81f 	bl	8011e94 <__sfp>
 8011e56:	6060      	str	r0, [r4, #4]
 8011e58:	0020      	movs	r0, r4
 8011e5a:	f000 f81b 	bl	8011e94 <__sfp>
 8011e5e:	60a0      	str	r0, [r4, #8]
 8011e60:	0020      	movs	r0, r4
 8011e62:	f000 f817 	bl	8011e94 <__sfp>
 8011e66:	2200      	movs	r2, #0
 8011e68:	2104      	movs	r1, #4
 8011e6a:	60e0      	str	r0, [r4, #12]
 8011e6c:	6860      	ldr	r0, [r4, #4]
 8011e6e:	f7ff ff77 	bl	8011d60 <std>
 8011e72:	2201      	movs	r2, #1
 8011e74:	2109      	movs	r1, #9
 8011e76:	68a0      	ldr	r0, [r4, #8]
 8011e78:	f7ff ff72 	bl	8011d60 <std>
 8011e7c:	2202      	movs	r2, #2
 8011e7e:	2112      	movs	r1, #18
 8011e80:	68e0      	ldr	r0, [r4, #12]
 8011e82:	f7ff ff6d 	bl	8011d60 <std>
 8011e86:	2301      	movs	r3, #1
 8011e88:	61a3      	str	r3, [r4, #24]
 8011e8a:	e7d2      	b.n	8011e32 <__sinit+0xe>
 8011e8c:	080171c0 	.word	0x080171c0
 8011e90:	08011da9 	.word	0x08011da9

08011e94 <__sfp>:
 8011e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e96:	0007      	movs	r7, r0
 8011e98:	f7ff ffa4 	bl	8011de4 <__sfp_lock_acquire>
 8011e9c:	4b1f      	ldr	r3, [pc, #124]	; (8011f1c <__sfp+0x88>)
 8011e9e:	681e      	ldr	r6, [r3, #0]
 8011ea0:	69b3      	ldr	r3, [r6, #24]
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d102      	bne.n	8011eac <__sfp+0x18>
 8011ea6:	0030      	movs	r0, r6
 8011ea8:	f7ff ffbc 	bl	8011e24 <__sinit>
 8011eac:	3648      	adds	r6, #72	; 0x48
 8011eae:	68b4      	ldr	r4, [r6, #8]
 8011eb0:	6873      	ldr	r3, [r6, #4]
 8011eb2:	3b01      	subs	r3, #1
 8011eb4:	d504      	bpl.n	8011ec0 <__sfp+0x2c>
 8011eb6:	6833      	ldr	r3, [r6, #0]
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d022      	beq.n	8011f02 <__sfp+0x6e>
 8011ebc:	6836      	ldr	r6, [r6, #0]
 8011ebe:	e7f6      	b.n	8011eae <__sfp+0x1a>
 8011ec0:	220c      	movs	r2, #12
 8011ec2:	5ea5      	ldrsh	r5, [r4, r2]
 8011ec4:	2d00      	cmp	r5, #0
 8011ec6:	d11a      	bne.n	8011efe <__sfp+0x6a>
 8011ec8:	0020      	movs	r0, r4
 8011eca:	4b15      	ldr	r3, [pc, #84]	; (8011f20 <__sfp+0x8c>)
 8011ecc:	3058      	adds	r0, #88	; 0x58
 8011ece:	60e3      	str	r3, [r4, #12]
 8011ed0:	6665      	str	r5, [r4, #100]	; 0x64
 8011ed2:	f000 f887 	bl	8011fe4 <__retarget_lock_init_recursive>
 8011ed6:	f7ff ff8d 	bl	8011df4 <__sfp_lock_release>
 8011eda:	0020      	movs	r0, r4
 8011edc:	2208      	movs	r2, #8
 8011ede:	0029      	movs	r1, r5
 8011ee0:	6025      	str	r5, [r4, #0]
 8011ee2:	60a5      	str	r5, [r4, #8]
 8011ee4:	6065      	str	r5, [r4, #4]
 8011ee6:	6125      	str	r5, [r4, #16]
 8011ee8:	6165      	str	r5, [r4, #20]
 8011eea:	61a5      	str	r5, [r4, #24]
 8011eec:	305c      	adds	r0, #92	; 0x5c
 8011eee:	f000 f885 	bl	8011ffc <memset>
 8011ef2:	6365      	str	r5, [r4, #52]	; 0x34
 8011ef4:	63a5      	str	r5, [r4, #56]	; 0x38
 8011ef6:	64a5      	str	r5, [r4, #72]	; 0x48
 8011ef8:	64e5      	str	r5, [r4, #76]	; 0x4c
 8011efa:	0020      	movs	r0, r4
 8011efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011efe:	3468      	adds	r4, #104	; 0x68
 8011f00:	e7d7      	b.n	8011eb2 <__sfp+0x1e>
 8011f02:	2104      	movs	r1, #4
 8011f04:	0038      	movs	r0, r7
 8011f06:	f7ff ff57 	bl	8011db8 <__sfmoreglue>
 8011f0a:	1e04      	subs	r4, r0, #0
 8011f0c:	6030      	str	r0, [r6, #0]
 8011f0e:	d1d5      	bne.n	8011ebc <__sfp+0x28>
 8011f10:	f7ff ff70 	bl	8011df4 <__sfp_lock_release>
 8011f14:	230c      	movs	r3, #12
 8011f16:	603b      	str	r3, [r7, #0]
 8011f18:	e7ef      	b.n	8011efa <__sfp+0x66>
 8011f1a:	46c0      	nop			; (mov r8, r8)
 8011f1c:	080171c0 	.word	0x080171c0
 8011f20:	ffff0001 	.word	0xffff0001

08011f24 <_fwalk_reent>:
 8011f24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011f26:	0004      	movs	r4, r0
 8011f28:	0006      	movs	r6, r0
 8011f2a:	2700      	movs	r7, #0
 8011f2c:	9101      	str	r1, [sp, #4]
 8011f2e:	3448      	adds	r4, #72	; 0x48
 8011f30:	6863      	ldr	r3, [r4, #4]
 8011f32:	68a5      	ldr	r5, [r4, #8]
 8011f34:	9300      	str	r3, [sp, #0]
 8011f36:	9b00      	ldr	r3, [sp, #0]
 8011f38:	3b01      	subs	r3, #1
 8011f3a:	9300      	str	r3, [sp, #0]
 8011f3c:	d504      	bpl.n	8011f48 <_fwalk_reent+0x24>
 8011f3e:	6824      	ldr	r4, [r4, #0]
 8011f40:	2c00      	cmp	r4, #0
 8011f42:	d1f5      	bne.n	8011f30 <_fwalk_reent+0xc>
 8011f44:	0038      	movs	r0, r7
 8011f46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011f48:	89ab      	ldrh	r3, [r5, #12]
 8011f4a:	2b01      	cmp	r3, #1
 8011f4c:	d908      	bls.n	8011f60 <_fwalk_reent+0x3c>
 8011f4e:	220e      	movs	r2, #14
 8011f50:	5eab      	ldrsh	r3, [r5, r2]
 8011f52:	3301      	adds	r3, #1
 8011f54:	d004      	beq.n	8011f60 <_fwalk_reent+0x3c>
 8011f56:	0029      	movs	r1, r5
 8011f58:	0030      	movs	r0, r6
 8011f5a:	9b01      	ldr	r3, [sp, #4]
 8011f5c:	4798      	blx	r3
 8011f5e:	4307      	orrs	r7, r0
 8011f60:	3568      	adds	r5, #104	; 0x68
 8011f62:	e7e8      	b.n	8011f36 <_fwalk_reent+0x12>

08011f64 <__libc_init_array>:
 8011f64:	b570      	push	{r4, r5, r6, lr}
 8011f66:	2600      	movs	r6, #0
 8011f68:	4d0c      	ldr	r5, [pc, #48]	; (8011f9c <__libc_init_array+0x38>)
 8011f6a:	4c0d      	ldr	r4, [pc, #52]	; (8011fa0 <__libc_init_array+0x3c>)
 8011f6c:	1b64      	subs	r4, r4, r5
 8011f6e:	10a4      	asrs	r4, r4, #2
 8011f70:	42a6      	cmp	r6, r4
 8011f72:	d109      	bne.n	8011f88 <__libc_init_array+0x24>
 8011f74:	2600      	movs	r6, #0
 8011f76:	f004 fbbf 	bl	80166f8 <_init>
 8011f7a:	4d0a      	ldr	r5, [pc, #40]	; (8011fa4 <__libc_init_array+0x40>)
 8011f7c:	4c0a      	ldr	r4, [pc, #40]	; (8011fa8 <__libc_init_array+0x44>)
 8011f7e:	1b64      	subs	r4, r4, r5
 8011f80:	10a4      	asrs	r4, r4, #2
 8011f82:	42a6      	cmp	r6, r4
 8011f84:	d105      	bne.n	8011f92 <__libc_init_array+0x2e>
 8011f86:	bd70      	pop	{r4, r5, r6, pc}
 8011f88:	00b3      	lsls	r3, r6, #2
 8011f8a:	58eb      	ldr	r3, [r5, r3]
 8011f8c:	4798      	blx	r3
 8011f8e:	3601      	adds	r6, #1
 8011f90:	e7ee      	b.n	8011f70 <__libc_init_array+0xc>
 8011f92:	00b3      	lsls	r3, r6, #2
 8011f94:	58eb      	ldr	r3, [r5, r3]
 8011f96:	4798      	blx	r3
 8011f98:	3601      	adds	r6, #1
 8011f9a:	e7f2      	b.n	8011f82 <__libc_init_array+0x1e>
 8011f9c:	08017680 	.word	0x08017680
 8011fa0:	08017680 	.word	0x08017680
 8011fa4:	08017680 	.word	0x08017680
 8011fa8:	08017684 	.word	0x08017684

08011fac <__itoa>:
 8011fac:	1e93      	subs	r3, r2, #2
 8011fae:	b510      	push	{r4, lr}
 8011fb0:	000c      	movs	r4, r1
 8011fb2:	2b22      	cmp	r3, #34	; 0x22
 8011fb4:	d904      	bls.n	8011fc0 <__itoa+0x14>
 8011fb6:	2300      	movs	r3, #0
 8011fb8:	001c      	movs	r4, r3
 8011fba:	700b      	strb	r3, [r1, #0]
 8011fbc:	0020      	movs	r0, r4
 8011fbe:	bd10      	pop	{r4, pc}
 8011fc0:	2a0a      	cmp	r2, #10
 8011fc2:	d109      	bne.n	8011fd8 <__itoa+0x2c>
 8011fc4:	2800      	cmp	r0, #0
 8011fc6:	da07      	bge.n	8011fd8 <__itoa+0x2c>
 8011fc8:	232d      	movs	r3, #45	; 0x2d
 8011fca:	700b      	strb	r3, [r1, #0]
 8011fcc:	2101      	movs	r1, #1
 8011fce:	4240      	negs	r0, r0
 8011fd0:	1861      	adds	r1, r4, r1
 8011fd2:	f001 fdab 	bl	8013b2c <__utoa>
 8011fd6:	e7f1      	b.n	8011fbc <__itoa+0x10>
 8011fd8:	2100      	movs	r1, #0
 8011fda:	e7f9      	b.n	8011fd0 <__itoa+0x24>

08011fdc <itoa>:
 8011fdc:	b510      	push	{r4, lr}
 8011fde:	f7ff ffe5 	bl	8011fac <__itoa>
 8011fe2:	bd10      	pop	{r4, pc}

08011fe4 <__retarget_lock_init_recursive>:
 8011fe4:	4770      	bx	lr

08011fe6 <__retarget_lock_acquire_recursive>:
 8011fe6:	4770      	bx	lr

08011fe8 <__retarget_lock_release_recursive>:
 8011fe8:	4770      	bx	lr

08011fea <memcpy>:
 8011fea:	2300      	movs	r3, #0
 8011fec:	b510      	push	{r4, lr}
 8011fee:	429a      	cmp	r2, r3
 8011ff0:	d100      	bne.n	8011ff4 <memcpy+0xa>
 8011ff2:	bd10      	pop	{r4, pc}
 8011ff4:	5ccc      	ldrb	r4, [r1, r3]
 8011ff6:	54c4      	strb	r4, [r0, r3]
 8011ff8:	3301      	adds	r3, #1
 8011ffa:	e7f8      	b.n	8011fee <memcpy+0x4>

08011ffc <memset>:
 8011ffc:	0003      	movs	r3, r0
 8011ffe:	1882      	adds	r2, r0, r2
 8012000:	4293      	cmp	r3, r2
 8012002:	d100      	bne.n	8012006 <memset+0xa>
 8012004:	4770      	bx	lr
 8012006:	7019      	strb	r1, [r3, #0]
 8012008:	3301      	adds	r3, #1
 801200a:	e7f9      	b.n	8012000 <memset+0x4>

0801200c <sbrk_aligned>:
 801200c:	b570      	push	{r4, r5, r6, lr}
 801200e:	4e0f      	ldr	r6, [pc, #60]	; (801204c <sbrk_aligned+0x40>)
 8012010:	000d      	movs	r5, r1
 8012012:	6831      	ldr	r1, [r6, #0]
 8012014:	0004      	movs	r4, r0
 8012016:	2900      	cmp	r1, #0
 8012018:	d102      	bne.n	8012020 <sbrk_aligned+0x14>
 801201a:	f000 fd71 	bl	8012b00 <_sbrk_r>
 801201e:	6030      	str	r0, [r6, #0]
 8012020:	0029      	movs	r1, r5
 8012022:	0020      	movs	r0, r4
 8012024:	f000 fd6c 	bl	8012b00 <_sbrk_r>
 8012028:	1c43      	adds	r3, r0, #1
 801202a:	d00a      	beq.n	8012042 <sbrk_aligned+0x36>
 801202c:	2303      	movs	r3, #3
 801202e:	1cc5      	adds	r5, r0, #3
 8012030:	439d      	bics	r5, r3
 8012032:	42a8      	cmp	r0, r5
 8012034:	d007      	beq.n	8012046 <sbrk_aligned+0x3a>
 8012036:	1a29      	subs	r1, r5, r0
 8012038:	0020      	movs	r0, r4
 801203a:	f000 fd61 	bl	8012b00 <_sbrk_r>
 801203e:	1c43      	adds	r3, r0, #1
 8012040:	d101      	bne.n	8012046 <sbrk_aligned+0x3a>
 8012042:	2501      	movs	r5, #1
 8012044:	426d      	negs	r5, r5
 8012046:	0028      	movs	r0, r5
 8012048:	bd70      	pop	{r4, r5, r6, pc}
 801204a:	46c0      	nop			; (mov r8, r8)
 801204c:	20002d94 	.word	0x20002d94

08012050 <_malloc_r>:
 8012050:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012052:	2203      	movs	r2, #3
 8012054:	1ccb      	adds	r3, r1, #3
 8012056:	4393      	bics	r3, r2
 8012058:	3308      	adds	r3, #8
 801205a:	0006      	movs	r6, r0
 801205c:	001f      	movs	r7, r3
 801205e:	2b0c      	cmp	r3, #12
 8012060:	d232      	bcs.n	80120c8 <_malloc_r+0x78>
 8012062:	270c      	movs	r7, #12
 8012064:	42b9      	cmp	r1, r7
 8012066:	d831      	bhi.n	80120cc <_malloc_r+0x7c>
 8012068:	0030      	movs	r0, r6
 801206a:	f003 f90f 	bl	801528c <__malloc_lock>
 801206e:	4d32      	ldr	r5, [pc, #200]	; (8012138 <_malloc_r+0xe8>)
 8012070:	682b      	ldr	r3, [r5, #0]
 8012072:	001c      	movs	r4, r3
 8012074:	2c00      	cmp	r4, #0
 8012076:	d12e      	bne.n	80120d6 <_malloc_r+0x86>
 8012078:	0039      	movs	r1, r7
 801207a:	0030      	movs	r0, r6
 801207c:	f7ff ffc6 	bl	801200c <sbrk_aligned>
 8012080:	0004      	movs	r4, r0
 8012082:	1c43      	adds	r3, r0, #1
 8012084:	d11e      	bne.n	80120c4 <_malloc_r+0x74>
 8012086:	682c      	ldr	r4, [r5, #0]
 8012088:	0025      	movs	r5, r4
 801208a:	2d00      	cmp	r5, #0
 801208c:	d14a      	bne.n	8012124 <_malloc_r+0xd4>
 801208e:	6823      	ldr	r3, [r4, #0]
 8012090:	0029      	movs	r1, r5
 8012092:	18e3      	adds	r3, r4, r3
 8012094:	0030      	movs	r0, r6
 8012096:	9301      	str	r3, [sp, #4]
 8012098:	f000 fd32 	bl	8012b00 <_sbrk_r>
 801209c:	9b01      	ldr	r3, [sp, #4]
 801209e:	4283      	cmp	r3, r0
 80120a0:	d143      	bne.n	801212a <_malloc_r+0xda>
 80120a2:	6823      	ldr	r3, [r4, #0]
 80120a4:	3703      	adds	r7, #3
 80120a6:	1aff      	subs	r7, r7, r3
 80120a8:	2303      	movs	r3, #3
 80120aa:	439f      	bics	r7, r3
 80120ac:	3708      	adds	r7, #8
 80120ae:	2f0c      	cmp	r7, #12
 80120b0:	d200      	bcs.n	80120b4 <_malloc_r+0x64>
 80120b2:	270c      	movs	r7, #12
 80120b4:	0039      	movs	r1, r7
 80120b6:	0030      	movs	r0, r6
 80120b8:	f7ff ffa8 	bl	801200c <sbrk_aligned>
 80120bc:	1c43      	adds	r3, r0, #1
 80120be:	d034      	beq.n	801212a <_malloc_r+0xda>
 80120c0:	6823      	ldr	r3, [r4, #0]
 80120c2:	19df      	adds	r7, r3, r7
 80120c4:	6027      	str	r7, [r4, #0]
 80120c6:	e013      	b.n	80120f0 <_malloc_r+0xa0>
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	dacb      	bge.n	8012064 <_malloc_r+0x14>
 80120cc:	230c      	movs	r3, #12
 80120ce:	2500      	movs	r5, #0
 80120d0:	6033      	str	r3, [r6, #0]
 80120d2:	0028      	movs	r0, r5
 80120d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80120d6:	6822      	ldr	r2, [r4, #0]
 80120d8:	1bd1      	subs	r1, r2, r7
 80120da:	d420      	bmi.n	801211e <_malloc_r+0xce>
 80120dc:	290b      	cmp	r1, #11
 80120de:	d917      	bls.n	8012110 <_malloc_r+0xc0>
 80120e0:	19e2      	adds	r2, r4, r7
 80120e2:	6027      	str	r7, [r4, #0]
 80120e4:	42a3      	cmp	r3, r4
 80120e6:	d111      	bne.n	801210c <_malloc_r+0xbc>
 80120e8:	602a      	str	r2, [r5, #0]
 80120ea:	6863      	ldr	r3, [r4, #4]
 80120ec:	6011      	str	r1, [r2, #0]
 80120ee:	6053      	str	r3, [r2, #4]
 80120f0:	0030      	movs	r0, r6
 80120f2:	0025      	movs	r5, r4
 80120f4:	f003 f8d2 	bl	801529c <__malloc_unlock>
 80120f8:	2207      	movs	r2, #7
 80120fa:	350b      	adds	r5, #11
 80120fc:	1d23      	adds	r3, r4, #4
 80120fe:	4395      	bics	r5, r2
 8012100:	1aea      	subs	r2, r5, r3
 8012102:	429d      	cmp	r5, r3
 8012104:	d0e5      	beq.n	80120d2 <_malloc_r+0x82>
 8012106:	1b5b      	subs	r3, r3, r5
 8012108:	50a3      	str	r3, [r4, r2]
 801210a:	e7e2      	b.n	80120d2 <_malloc_r+0x82>
 801210c:	605a      	str	r2, [r3, #4]
 801210e:	e7ec      	b.n	80120ea <_malloc_r+0x9a>
 8012110:	6862      	ldr	r2, [r4, #4]
 8012112:	42a3      	cmp	r3, r4
 8012114:	d101      	bne.n	801211a <_malloc_r+0xca>
 8012116:	602a      	str	r2, [r5, #0]
 8012118:	e7ea      	b.n	80120f0 <_malloc_r+0xa0>
 801211a:	605a      	str	r2, [r3, #4]
 801211c:	e7e8      	b.n	80120f0 <_malloc_r+0xa0>
 801211e:	0023      	movs	r3, r4
 8012120:	6864      	ldr	r4, [r4, #4]
 8012122:	e7a7      	b.n	8012074 <_malloc_r+0x24>
 8012124:	002c      	movs	r4, r5
 8012126:	686d      	ldr	r5, [r5, #4]
 8012128:	e7af      	b.n	801208a <_malloc_r+0x3a>
 801212a:	230c      	movs	r3, #12
 801212c:	0030      	movs	r0, r6
 801212e:	6033      	str	r3, [r6, #0]
 8012130:	f003 f8b4 	bl	801529c <__malloc_unlock>
 8012134:	e7cd      	b.n	80120d2 <_malloc_r+0x82>
 8012136:	46c0      	nop			; (mov r8, r8)
 8012138:	20002d90 	.word	0x20002d90

0801213c <__cvt>:
 801213c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801213e:	001e      	movs	r6, r3
 8012140:	2300      	movs	r3, #0
 8012142:	0014      	movs	r4, r2
 8012144:	b08b      	sub	sp, #44	; 0x2c
 8012146:	429e      	cmp	r6, r3
 8012148:	da04      	bge.n	8012154 <__cvt+0x18>
 801214a:	2180      	movs	r1, #128	; 0x80
 801214c:	0609      	lsls	r1, r1, #24
 801214e:	1873      	adds	r3, r6, r1
 8012150:	001e      	movs	r6, r3
 8012152:	232d      	movs	r3, #45	; 0x2d
 8012154:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012156:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8012158:	7013      	strb	r3, [r2, #0]
 801215a:	2320      	movs	r3, #32
 801215c:	2203      	movs	r2, #3
 801215e:	439f      	bics	r7, r3
 8012160:	2f46      	cmp	r7, #70	; 0x46
 8012162:	d007      	beq.n	8012174 <__cvt+0x38>
 8012164:	003b      	movs	r3, r7
 8012166:	3b45      	subs	r3, #69	; 0x45
 8012168:	4259      	negs	r1, r3
 801216a:	414b      	adcs	r3, r1
 801216c:	9910      	ldr	r1, [sp, #64]	; 0x40
 801216e:	3a01      	subs	r2, #1
 8012170:	18cb      	adds	r3, r1, r3
 8012172:	9310      	str	r3, [sp, #64]	; 0x40
 8012174:	ab09      	add	r3, sp, #36	; 0x24
 8012176:	9304      	str	r3, [sp, #16]
 8012178:	ab08      	add	r3, sp, #32
 801217a:	9303      	str	r3, [sp, #12]
 801217c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801217e:	9200      	str	r2, [sp, #0]
 8012180:	9302      	str	r3, [sp, #8]
 8012182:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012184:	0022      	movs	r2, r4
 8012186:	9301      	str	r3, [sp, #4]
 8012188:	0033      	movs	r3, r6
 801218a:	f001 fdd5 	bl	8013d38 <_dtoa_r>
 801218e:	0005      	movs	r5, r0
 8012190:	2f47      	cmp	r7, #71	; 0x47
 8012192:	d102      	bne.n	801219a <__cvt+0x5e>
 8012194:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012196:	07db      	lsls	r3, r3, #31
 8012198:	d528      	bpl.n	80121ec <__cvt+0xb0>
 801219a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801219c:	18eb      	adds	r3, r5, r3
 801219e:	9307      	str	r3, [sp, #28]
 80121a0:	2f46      	cmp	r7, #70	; 0x46
 80121a2:	d114      	bne.n	80121ce <__cvt+0x92>
 80121a4:	782b      	ldrb	r3, [r5, #0]
 80121a6:	2b30      	cmp	r3, #48	; 0x30
 80121a8:	d10c      	bne.n	80121c4 <__cvt+0x88>
 80121aa:	2200      	movs	r2, #0
 80121ac:	2300      	movs	r3, #0
 80121ae:	0020      	movs	r0, r4
 80121b0:	0031      	movs	r1, r6
 80121b2:	f7ee f94b 	bl	800044c <__aeabi_dcmpeq>
 80121b6:	2800      	cmp	r0, #0
 80121b8:	d104      	bne.n	80121c4 <__cvt+0x88>
 80121ba:	2301      	movs	r3, #1
 80121bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80121be:	1a9b      	subs	r3, r3, r2
 80121c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80121c2:	6013      	str	r3, [r2, #0]
 80121c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80121c6:	9a07      	ldr	r2, [sp, #28]
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	18d3      	adds	r3, r2, r3
 80121cc:	9307      	str	r3, [sp, #28]
 80121ce:	2200      	movs	r2, #0
 80121d0:	2300      	movs	r3, #0
 80121d2:	0020      	movs	r0, r4
 80121d4:	0031      	movs	r1, r6
 80121d6:	f7ee f939 	bl	800044c <__aeabi_dcmpeq>
 80121da:	2800      	cmp	r0, #0
 80121dc:	d001      	beq.n	80121e2 <__cvt+0xa6>
 80121de:	9b07      	ldr	r3, [sp, #28]
 80121e0:	9309      	str	r3, [sp, #36]	; 0x24
 80121e2:	2230      	movs	r2, #48	; 0x30
 80121e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121e6:	9907      	ldr	r1, [sp, #28]
 80121e8:	428b      	cmp	r3, r1
 80121ea:	d306      	bcc.n	80121fa <__cvt+0xbe>
 80121ec:	0028      	movs	r0, r5
 80121ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121f0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80121f2:	1b5b      	subs	r3, r3, r5
 80121f4:	6013      	str	r3, [r2, #0]
 80121f6:	b00b      	add	sp, #44	; 0x2c
 80121f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121fa:	1c59      	adds	r1, r3, #1
 80121fc:	9109      	str	r1, [sp, #36]	; 0x24
 80121fe:	701a      	strb	r2, [r3, #0]
 8012200:	e7f0      	b.n	80121e4 <__cvt+0xa8>

08012202 <__exponent>:
 8012202:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012204:	1c83      	adds	r3, r0, #2
 8012206:	b087      	sub	sp, #28
 8012208:	9303      	str	r3, [sp, #12]
 801220a:	0005      	movs	r5, r0
 801220c:	000c      	movs	r4, r1
 801220e:	232b      	movs	r3, #43	; 0x2b
 8012210:	7002      	strb	r2, [r0, #0]
 8012212:	2900      	cmp	r1, #0
 8012214:	da01      	bge.n	801221a <__exponent+0x18>
 8012216:	424c      	negs	r4, r1
 8012218:	3302      	adds	r3, #2
 801221a:	706b      	strb	r3, [r5, #1]
 801221c:	2c09      	cmp	r4, #9
 801221e:	dd31      	ble.n	8012284 <__exponent+0x82>
 8012220:	270a      	movs	r7, #10
 8012222:	ab04      	add	r3, sp, #16
 8012224:	1dde      	adds	r6, r3, #7
 8012226:	0020      	movs	r0, r4
 8012228:	0039      	movs	r1, r7
 801222a:	9601      	str	r6, [sp, #4]
 801222c:	f7ee f8f8 	bl	8000420 <__aeabi_idivmod>
 8012230:	3e01      	subs	r6, #1
 8012232:	3130      	adds	r1, #48	; 0x30
 8012234:	0020      	movs	r0, r4
 8012236:	7031      	strb	r1, [r6, #0]
 8012238:	0039      	movs	r1, r7
 801223a:	9402      	str	r4, [sp, #8]
 801223c:	f7ee f80a 	bl	8000254 <__divsi3>
 8012240:	9b02      	ldr	r3, [sp, #8]
 8012242:	0004      	movs	r4, r0
 8012244:	2b63      	cmp	r3, #99	; 0x63
 8012246:	dcee      	bgt.n	8012226 <__exponent+0x24>
 8012248:	9b01      	ldr	r3, [sp, #4]
 801224a:	3430      	adds	r4, #48	; 0x30
 801224c:	1e9a      	subs	r2, r3, #2
 801224e:	0013      	movs	r3, r2
 8012250:	9903      	ldr	r1, [sp, #12]
 8012252:	7014      	strb	r4, [r2, #0]
 8012254:	a804      	add	r0, sp, #16
 8012256:	3007      	adds	r0, #7
 8012258:	4298      	cmp	r0, r3
 801225a:	d80e      	bhi.n	801227a <__exponent+0x78>
 801225c:	ab04      	add	r3, sp, #16
 801225e:	3307      	adds	r3, #7
 8012260:	2000      	movs	r0, #0
 8012262:	429a      	cmp	r2, r3
 8012264:	d804      	bhi.n	8012270 <__exponent+0x6e>
 8012266:	ab04      	add	r3, sp, #16
 8012268:	3009      	adds	r0, #9
 801226a:	18c0      	adds	r0, r0, r3
 801226c:	9b01      	ldr	r3, [sp, #4]
 801226e:	1ac0      	subs	r0, r0, r3
 8012270:	9b03      	ldr	r3, [sp, #12]
 8012272:	1818      	adds	r0, r3, r0
 8012274:	1b40      	subs	r0, r0, r5
 8012276:	b007      	add	sp, #28
 8012278:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801227a:	7818      	ldrb	r0, [r3, #0]
 801227c:	3301      	adds	r3, #1
 801227e:	7008      	strb	r0, [r1, #0]
 8012280:	3101      	adds	r1, #1
 8012282:	e7e7      	b.n	8012254 <__exponent+0x52>
 8012284:	2330      	movs	r3, #48	; 0x30
 8012286:	18e4      	adds	r4, r4, r3
 8012288:	70ab      	strb	r3, [r5, #2]
 801228a:	1d28      	adds	r0, r5, #4
 801228c:	70ec      	strb	r4, [r5, #3]
 801228e:	e7f1      	b.n	8012274 <__exponent+0x72>

08012290 <_printf_float>:
 8012290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012292:	b095      	sub	sp, #84	; 0x54
 8012294:	000c      	movs	r4, r1
 8012296:	9209      	str	r2, [sp, #36]	; 0x24
 8012298:	001e      	movs	r6, r3
 801229a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801229c:	0007      	movs	r7, r0
 801229e:	f002 ffb5 	bl	801520c <_localeconv_r>
 80122a2:	6803      	ldr	r3, [r0, #0]
 80122a4:	0018      	movs	r0, r3
 80122a6:	930c      	str	r3, [sp, #48]	; 0x30
 80122a8:	f7ed ff2e 	bl	8000108 <strlen>
 80122ac:	2300      	movs	r3, #0
 80122ae:	9312      	str	r3, [sp, #72]	; 0x48
 80122b0:	7e23      	ldrb	r3, [r4, #24]
 80122b2:	2207      	movs	r2, #7
 80122b4:	930a      	str	r3, [sp, #40]	; 0x28
 80122b6:	6823      	ldr	r3, [r4, #0]
 80122b8:	900e      	str	r0, [sp, #56]	; 0x38
 80122ba:	930d      	str	r3, [sp, #52]	; 0x34
 80122bc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80122be:	682b      	ldr	r3, [r5, #0]
 80122c0:	05c9      	lsls	r1, r1, #23
 80122c2:	d547      	bpl.n	8012354 <_printf_float+0xc4>
 80122c4:	189b      	adds	r3, r3, r2
 80122c6:	4393      	bics	r3, r2
 80122c8:	001a      	movs	r2, r3
 80122ca:	3208      	adds	r2, #8
 80122cc:	602a      	str	r2, [r5, #0]
 80122ce:	681a      	ldr	r2, [r3, #0]
 80122d0:	685b      	ldr	r3, [r3, #4]
 80122d2:	64a2      	str	r2, [r4, #72]	; 0x48
 80122d4:	64e3      	str	r3, [r4, #76]	; 0x4c
 80122d6:	2201      	movs	r2, #1
 80122d8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80122da:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80122dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80122de:	006b      	lsls	r3, r5, #1
 80122e0:	085b      	lsrs	r3, r3, #1
 80122e2:	930f      	str	r3, [sp, #60]	; 0x3c
 80122e4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80122e6:	4ba7      	ldr	r3, [pc, #668]	; (8012584 <_printf_float+0x2f4>)
 80122e8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80122ea:	4252      	negs	r2, r2
 80122ec:	f7f0 f802 	bl	80022f4 <__aeabi_dcmpun>
 80122f0:	2800      	cmp	r0, #0
 80122f2:	d131      	bne.n	8012358 <_printf_float+0xc8>
 80122f4:	2201      	movs	r2, #1
 80122f6:	4ba3      	ldr	r3, [pc, #652]	; (8012584 <_printf_float+0x2f4>)
 80122f8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80122fa:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80122fc:	4252      	negs	r2, r2
 80122fe:	f7ee f8b5 	bl	800046c <__aeabi_dcmple>
 8012302:	2800      	cmp	r0, #0
 8012304:	d128      	bne.n	8012358 <_printf_float+0xc8>
 8012306:	2200      	movs	r2, #0
 8012308:	2300      	movs	r3, #0
 801230a:	0029      	movs	r1, r5
 801230c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801230e:	f7ee f8a3 	bl	8000458 <__aeabi_dcmplt>
 8012312:	2800      	cmp	r0, #0
 8012314:	d003      	beq.n	801231e <_printf_float+0x8e>
 8012316:	0023      	movs	r3, r4
 8012318:	222d      	movs	r2, #45	; 0x2d
 801231a:	3343      	adds	r3, #67	; 0x43
 801231c:	701a      	strb	r2, [r3, #0]
 801231e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012320:	4d99      	ldr	r5, [pc, #612]	; (8012588 <_printf_float+0x2f8>)
 8012322:	2b47      	cmp	r3, #71	; 0x47
 8012324:	d900      	bls.n	8012328 <_printf_float+0x98>
 8012326:	4d99      	ldr	r5, [pc, #612]	; (801258c <_printf_float+0x2fc>)
 8012328:	2303      	movs	r3, #3
 801232a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801232c:	6123      	str	r3, [r4, #16]
 801232e:	3301      	adds	r3, #1
 8012330:	439a      	bics	r2, r3
 8012332:	2300      	movs	r3, #0
 8012334:	6022      	str	r2, [r4, #0]
 8012336:	930b      	str	r3, [sp, #44]	; 0x2c
 8012338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801233a:	0021      	movs	r1, r4
 801233c:	0038      	movs	r0, r7
 801233e:	9600      	str	r6, [sp, #0]
 8012340:	aa13      	add	r2, sp, #76	; 0x4c
 8012342:	f000 f9e7 	bl	8012714 <_printf_common>
 8012346:	1c43      	adds	r3, r0, #1
 8012348:	d000      	beq.n	801234c <_printf_float+0xbc>
 801234a:	e0a2      	b.n	8012492 <_printf_float+0x202>
 801234c:	2001      	movs	r0, #1
 801234e:	4240      	negs	r0, r0
 8012350:	b015      	add	sp, #84	; 0x54
 8012352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012354:	3307      	adds	r3, #7
 8012356:	e7b6      	b.n	80122c6 <_printf_float+0x36>
 8012358:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801235a:	002b      	movs	r3, r5
 801235c:	0010      	movs	r0, r2
 801235e:	0029      	movs	r1, r5
 8012360:	f7ef ffc8 	bl	80022f4 <__aeabi_dcmpun>
 8012364:	2800      	cmp	r0, #0
 8012366:	d00b      	beq.n	8012380 <_printf_float+0xf0>
 8012368:	2d00      	cmp	r5, #0
 801236a:	da03      	bge.n	8012374 <_printf_float+0xe4>
 801236c:	0023      	movs	r3, r4
 801236e:	222d      	movs	r2, #45	; 0x2d
 8012370:	3343      	adds	r3, #67	; 0x43
 8012372:	701a      	strb	r2, [r3, #0]
 8012374:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012376:	4d86      	ldr	r5, [pc, #536]	; (8012590 <_printf_float+0x300>)
 8012378:	2b47      	cmp	r3, #71	; 0x47
 801237a:	d9d5      	bls.n	8012328 <_printf_float+0x98>
 801237c:	4d85      	ldr	r5, [pc, #532]	; (8012594 <_printf_float+0x304>)
 801237e:	e7d3      	b.n	8012328 <_printf_float+0x98>
 8012380:	2220      	movs	r2, #32
 8012382:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012384:	6863      	ldr	r3, [r4, #4]
 8012386:	4391      	bics	r1, r2
 8012388:	910f      	str	r1, [sp, #60]	; 0x3c
 801238a:	1c5a      	adds	r2, r3, #1
 801238c:	d149      	bne.n	8012422 <_printf_float+0x192>
 801238e:	3307      	adds	r3, #7
 8012390:	6063      	str	r3, [r4, #4]
 8012392:	2380      	movs	r3, #128	; 0x80
 8012394:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012396:	00db      	lsls	r3, r3, #3
 8012398:	4313      	orrs	r3, r2
 801239a:	2200      	movs	r2, #0
 801239c:	9206      	str	r2, [sp, #24]
 801239e:	aa12      	add	r2, sp, #72	; 0x48
 80123a0:	9205      	str	r2, [sp, #20]
 80123a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80123a4:	a908      	add	r1, sp, #32
 80123a6:	9204      	str	r2, [sp, #16]
 80123a8:	aa11      	add	r2, sp, #68	; 0x44
 80123aa:	9203      	str	r2, [sp, #12]
 80123ac:	2223      	movs	r2, #35	; 0x23
 80123ae:	6023      	str	r3, [r4, #0]
 80123b0:	9301      	str	r3, [sp, #4]
 80123b2:	6863      	ldr	r3, [r4, #4]
 80123b4:	1852      	adds	r2, r2, r1
 80123b6:	9202      	str	r2, [sp, #8]
 80123b8:	9300      	str	r3, [sp, #0]
 80123ba:	0038      	movs	r0, r7
 80123bc:	002b      	movs	r3, r5
 80123be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80123c0:	f7ff febc 	bl	801213c <__cvt>
 80123c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80123c6:	0005      	movs	r5, r0
 80123c8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80123ca:	2b47      	cmp	r3, #71	; 0x47
 80123cc:	d108      	bne.n	80123e0 <_printf_float+0x150>
 80123ce:	1ccb      	adds	r3, r1, #3
 80123d0:	db02      	blt.n	80123d8 <_printf_float+0x148>
 80123d2:	6863      	ldr	r3, [r4, #4]
 80123d4:	4299      	cmp	r1, r3
 80123d6:	dd48      	ble.n	801246a <_printf_float+0x1da>
 80123d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80123da:	3b02      	subs	r3, #2
 80123dc:	b2db      	uxtb	r3, r3
 80123de:	930a      	str	r3, [sp, #40]	; 0x28
 80123e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80123e2:	2b65      	cmp	r3, #101	; 0x65
 80123e4:	d824      	bhi.n	8012430 <_printf_float+0x1a0>
 80123e6:	0020      	movs	r0, r4
 80123e8:	001a      	movs	r2, r3
 80123ea:	3901      	subs	r1, #1
 80123ec:	3050      	adds	r0, #80	; 0x50
 80123ee:	9111      	str	r1, [sp, #68]	; 0x44
 80123f0:	f7ff ff07 	bl	8012202 <__exponent>
 80123f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80123f6:	900b      	str	r0, [sp, #44]	; 0x2c
 80123f8:	1813      	adds	r3, r2, r0
 80123fa:	6123      	str	r3, [r4, #16]
 80123fc:	2a01      	cmp	r2, #1
 80123fe:	dc02      	bgt.n	8012406 <_printf_float+0x176>
 8012400:	6822      	ldr	r2, [r4, #0]
 8012402:	07d2      	lsls	r2, r2, #31
 8012404:	d501      	bpl.n	801240a <_printf_float+0x17a>
 8012406:	3301      	adds	r3, #1
 8012408:	6123      	str	r3, [r4, #16]
 801240a:	2323      	movs	r3, #35	; 0x23
 801240c:	aa08      	add	r2, sp, #32
 801240e:	189b      	adds	r3, r3, r2
 8012410:	781b      	ldrb	r3, [r3, #0]
 8012412:	2b00      	cmp	r3, #0
 8012414:	d100      	bne.n	8012418 <_printf_float+0x188>
 8012416:	e78f      	b.n	8012338 <_printf_float+0xa8>
 8012418:	0023      	movs	r3, r4
 801241a:	222d      	movs	r2, #45	; 0x2d
 801241c:	3343      	adds	r3, #67	; 0x43
 801241e:	701a      	strb	r2, [r3, #0]
 8012420:	e78a      	b.n	8012338 <_printf_float+0xa8>
 8012422:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012424:	2a47      	cmp	r2, #71	; 0x47
 8012426:	d1b4      	bne.n	8012392 <_printf_float+0x102>
 8012428:	2b00      	cmp	r3, #0
 801242a:	d1b2      	bne.n	8012392 <_printf_float+0x102>
 801242c:	3301      	adds	r3, #1
 801242e:	e7af      	b.n	8012390 <_printf_float+0x100>
 8012430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012432:	2b66      	cmp	r3, #102	; 0x66
 8012434:	d11b      	bne.n	801246e <_printf_float+0x1de>
 8012436:	6863      	ldr	r3, [r4, #4]
 8012438:	2900      	cmp	r1, #0
 801243a:	dd0d      	ble.n	8012458 <_printf_float+0x1c8>
 801243c:	6121      	str	r1, [r4, #16]
 801243e:	2b00      	cmp	r3, #0
 8012440:	d102      	bne.n	8012448 <_printf_float+0x1b8>
 8012442:	6822      	ldr	r2, [r4, #0]
 8012444:	07d2      	lsls	r2, r2, #31
 8012446:	d502      	bpl.n	801244e <_printf_float+0x1be>
 8012448:	3301      	adds	r3, #1
 801244a:	1859      	adds	r1, r3, r1
 801244c:	6121      	str	r1, [r4, #16]
 801244e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012450:	65a3      	str	r3, [r4, #88]	; 0x58
 8012452:	2300      	movs	r3, #0
 8012454:	930b      	str	r3, [sp, #44]	; 0x2c
 8012456:	e7d8      	b.n	801240a <_printf_float+0x17a>
 8012458:	2b00      	cmp	r3, #0
 801245a:	d103      	bne.n	8012464 <_printf_float+0x1d4>
 801245c:	2201      	movs	r2, #1
 801245e:	6821      	ldr	r1, [r4, #0]
 8012460:	4211      	tst	r1, r2
 8012462:	d000      	beq.n	8012466 <_printf_float+0x1d6>
 8012464:	1c9a      	adds	r2, r3, #2
 8012466:	6122      	str	r2, [r4, #16]
 8012468:	e7f1      	b.n	801244e <_printf_float+0x1be>
 801246a:	2367      	movs	r3, #103	; 0x67
 801246c:	930a      	str	r3, [sp, #40]	; 0x28
 801246e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012470:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012472:	4293      	cmp	r3, r2
 8012474:	db06      	blt.n	8012484 <_printf_float+0x1f4>
 8012476:	6822      	ldr	r2, [r4, #0]
 8012478:	6123      	str	r3, [r4, #16]
 801247a:	07d2      	lsls	r2, r2, #31
 801247c:	d5e7      	bpl.n	801244e <_printf_float+0x1be>
 801247e:	3301      	adds	r3, #1
 8012480:	6123      	str	r3, [r4, #16]
 8012482:	e7e4      	b.n	801244e <_printf_float+0x1be>
 8012484:	2101      	movs	r1, #1
 8012486:	2b00      	cmp	r3, #0
 8012488:	dc01      	bgt.n	801248e <_printf_float+0x1fe>
 801248a:	1849      	adds	r1, r1, r1
 801248c:	1ac9      	subs	r1, r1, r3
 801248e:	1852      	adds	r2, r2, r1
 8012490:	e7e9      	b.n	8012466 <_printf_float+0x1d6>
 8012492:	6822      	ldr	r2, [r4, #0]
 8012494:	0553      	lsls	r3, r2, #21
 8012496:	d407      	bmi.n	80124a8 <_printf_float+0x218>
 8012498:	6923      	ldr	r3, [r4, #16]
 801249a:	002a      	movs	r2, r5
 801249c:	0038      	movs	r0, r7
 801249e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80124a0:	47b0      	blx	r6
 80124a2:	1c43      	adds	r3, r0, #1
 80124a4:	d128      	bne.n	80124f8 <_printf_float+0x268>
 80124a6:	e751      	b.n	801234c <_printf_float+0xbc>
 80124a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80124aa:	2b65      	cmp	r3, #101	; 0x65
 80124ac:	d800      	bhi.n	80124b0 <_printf_float+0x220>
 80124ae:	e0e1      	b.n	8012674 <_printf_float+0x3e4>
 80124b0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80124b2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80124b4:	2200      	movs	r2, #0
 80124b6:	2300      	movs	r3, #0
 80124b8:	f7ed ffc8 	bl	800044c <__aeabi_dcmpeq>
 80124bc:	2800      	cmp	r0, #0
 80124be:	d031      	beq.n	8012524 <_printf_float+0x294>
 80124c0:	2301      	movs	r3, #1
 80124c2:	0038      	movs	r0, r7
 80124c4:	4a34      	ldr	r2, [pc, #208]	; (8012598 <_printf_float+0x308>)
 80124c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80124c8:	47b0      	blx	r6
 80124ca:	1c43      	adds	r3, r0, #1
 80124cc:	d100      	bne.n	80124d0 <_printf_float+0x240>
 80124ce:	e73d      	b.n	801234c <_printf_float+0xbc>
 80124d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80124d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80124d4:	4293      	cmp	r3, r2
 80124d6:	db02      	blt.n	80124de <_printf_float+0x24e>
 80124d8:	6823      	ldr	r3, [r4, #0]
 80124da:	07db      	lsls	r3, r3, #31
 80124dc:	d50c      	bpl.n	80124f8 <_printf_float+0x268>
 80124de:	0038      	movs	r0, r7
 80124e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80124e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80124e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80124e6:	47b0      	blx	r6
 80124e8:	2500      	movs	r5, #0
 80124ea:	1c43      	adds	r3, r0, #1
 80124ec:	d100      	bne.n	80124f0 <_printf_float+0x260>
 80124ee:	e72d      	b.n	801234c <_printf_float+0xbc>
 80124f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80124f2:	3b01      	subs	r3, #1
 80124f4:	42ab      	cmp	r3, r5
 80124f6:	dc0a      	bgt.n	801250e <_printf_float+0x27e>
 80124f8:	6823      	ldr	r3, [r4, #0]
 80124fa:	079b      	lsls	r3, r3, #30
 80124fc:	d500      	bpl.n	8012500 <_printf_float+0x270>
 80124fe:	e106      	b.n	801270e <_printf_float+0x47e>
 8012500:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012502:	68e0      	ldr	r0, [r4, #12]
 8012504:	4298      	cmp	r0, r3
 8012506:	db00      	blt.n	801250a <_printf_float+0x27a>
 8012508:	e722      	b.n	8012350 <_printf_float+0xc0>
 801250a:	0018      	movs	r0, r3
 801250c:	e720      	b.n	8012350 <_printf_float+0xc0>
 801250e:	0022      	movs	r2, r4
 8012510:	2301      	movs	r3, #1
 8012512:	0038      	movs	r0, r7
 8012514:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012516:	321a      	adds	r2, #26
 8012518:	47b0      	blx	r6
 801251a:	1c43      	adds	r3, r0, #1
 801251c:	d100      	bne.n	8012520 <_printf_float+0x290>
 801251e:	e715      	b.n	801234c <_printf_float+0xbc>
 8012520:	3501      	adds	r5, #1
 8012522:	e7e5      	b.n	80124f0 <_printf_float+0x260>
 8012524:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012526:	2b00      	cmp	r3, #0
 8012528:	dc38      	bgt.n	801259c <_printf_float+0x30c>
 801252a:	2301      	movs	r3, #1
 801252c:	0038      	movs	r0, r7
 801252e:	4a1a      	ldr	r2, [pc, #104]	; (8012598 <_printf_float+0x308>)
 8012530:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012532:	47b0      	blx	r6
 8012534:	1c43      	adds	r3, r0, #1
 8012536:	d100      	bne.n	801253a <_printf_float+0x2aa>
 8012538:	e708      	b.n	801234c <_printf_float+0xbc>
 801253a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801253c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801253e:	4313      	orrs	r3, r2
 8012540:	d102      	bne.n	8012548 <_printf_float+0x2b8>
 8012542:	6823      	ldr	r3, [r4, #0]
 8012544:	07db      	lsls	r3, r3, #31
 8012546:	d5d7      	bpl.n	80124f8 <_printf_float+0x268>
 8012548:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801254a:	0038      	movs	r0, r7
 801254c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801254e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012550:	47b0      	blx	r6
 8012552:	1c43      	adds	r3, r0, #1
 8012554:	d100      	bne.n	8012558 <_printf_float+0x2c8>
 8012556:	e6f9      	b.n	801234c <_printf_float+0xbc>
 8012558:	2300      	movs	r3, #0
 801255a:	930a      	str	r3, [sp, #40]	; 0x28
 801255c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801255e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012560:	425b      	negs	r3, r3
 8012562:	4293      	cmp	r3, r2
 8012564:	dc01      	bgt.n	801256a <_printf_float+0x2da>
 8012566:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012568:	e797      	b.n	801249a <_printf_float+0x20a>
 801256a:	0022      	movs	r2, r4
 801256c:	2301      	movs	r3, #1
 801256e:	0038      	movs	r0, r7
 8012570:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012572:	321a      	adds	r2, #26
 8012574:	47b0      	blx	r6
 8012576:	1c43      	adds	r3, r0, #1
 8012578:	d100      	bne.n	801257c <_printf_float+0x2ec>
 801257a:	e6e7      	b.n	801234c <_printf_float+0xbc>
 801257c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801257e:	3301      	adds	r3, #1
 8012580:	e7eb      	b.n	801255a <_printf_float+0x2ca>
 8012582:	46c0      	nop			; (mov r8, r8)
 8012584:	7fefffff 	.word	0x7fefffff
 8012588:	080171c4 	.word	0x080171c4
 801258c:	080171c8 	.word	0x080171c8
 8012590:	080171cc 	.word	0x080171cc
 8012594:	080171d0 	.word	0x080171d0
 8012598:	080171d4 	.word	0x080171d4
 801259c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801259e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80125a0:	920a      	str	r2, [sp, #40]	; 0x28
 80125a2:	429a      	cmp	r2, r3
 80125a4:	dd00      	ble.n	80125a8 <_printf_float+0x318>
 80125a6:	930a      	str	r3, [sp, #40]	; 0x28
 80125a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	dc3c      	bgt.n	8012628 <_printf_float+0x398>
 80125ae:	2300      	movs	r3, #0
 80125b0:	930d      	str	r3, [sp, #52]	; 0x34
 80125b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80125b4:	43db      	mvns	r3, r3
 80125b6:	17db      	asrs	r3, r3, #31
 80125b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80125ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80125bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80125be:	930b      	str	r3, [sp, #44]	; 0x2c
 80125c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80125c2:	4013      	ands	r3, r2
 80125c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80125c6:	1ad3      	subs	r3, r2, r3
 80125c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80125ca:	4293      	cmp	r3, r2
 80125cc:	dc34      	bgt.n	8012638 <_printf_float+0x3a8>
 80125ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80125d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80125d2:	4293      	cmp	r3, r2
 80125d4:	db3d      	blt.n	8012652 <_printf_float+0x3c2>
 80125d6:	6823      	ldr	r3, [r4, #0]
 80125d8:	07db      	lsls	r3, r3, #31
 80125da:	d43a      	bmi.n	8012652 <_printf_float+0x3c2>
 80125dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80125de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80125e0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80125e2:	1ad3      	subs	r3, r2, r3
 80125e4:	1a52      	subs	r2, r2, r1
 80125e6:	920a      	str	r2, [sp, #40]	; 0x28
 80125e8:	429a      	cmp	r2, r3
 80125ea:	dd00      	ble.n	80125ee <_printf_float+0x35e>
 80125ec:	930a      	str	r3, [sp, #40]	; 0x28
 80125ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	dc36      	bgt.n	8012662 <_printf_float+0x3d2>
 80125f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80125f6:	2500      	movs	r5, #0
 80125f8:	43db      	mvns	r3, r3
 80125fa:	17db      	asrs	r3, r3, #31
 80125fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80125fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012600:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012602:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012604:	1a9b      	subs	r3, r3, r2
 8012606:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012608:	400a      	ands	r2, r1
 801260a:	1a9b      	subs	r3, r3, r2
 801260c:	42ab      	cmp	r3, r5
 801260e:	dc00      	bgt.n	8012612 <_printf_float+0x382>
 8012610:	e772      	b.n	80124f8 <_printf_float+0x268>
 8012612:	0022      	movs	r2, r4
 8012614:	2301      	movs	r3, #1
 8012616:	0038      	movs	r0, r7
 8012618:	9909      	ldr	r1, [sp, #36]	; 0x24
 801261a:	321a      	adds	r2, #26
 801261c:	47b0      	blx	r6
 801261e:	1c43      	adds	r3, r0, #1
 8012620:	d100      	bne.n	8012624 <_printf_float+0x394>
 8012622:	e693      	b.n	801234c <_printf_float+0xbc>
 8012624:	3501      	adds	r5, #1
 8012626:	e7ea      	b.n	80125fe <_printf_float+0x36e>
 8012628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801262a:	002a      	movs	r2, r5
 801262c:	0038      	movs	r0, r7
 801262e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012630:	47b0      	blx	r6
 8012632:	1c43      	adds	r3, r0, #1
 8012634:	d1bb      	bne.n	80125ae <_printf_float+0x31e>
 8012636:	e689      	b.n	801234c <_printf_float+0xbc>
 8012638:	0022      	movs	r2, r4
 801263a:	2301      	movs	r3, #1
 801263c:	0038      	movs	r0, r7
 801263e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012640:	321a      	adds	r2, #26
 8012642:	47b0      	blx	r6
 8012644:	1c43      	adds	r3, r0, #1
 8012646:	d100      	bne.n	801264a <_printf_float+0x3ba>
 8012648:	e680      	b.n	801234c <_printf_float+0xbc>
 801264a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801264c:	3301      	adds	r3, #1
 801264e:	930d      	str	r3, [sp, #52]	; 0x34
 8012650:	e7b3      	b.n	80125ba <_printf_float+0x32a>
 8012652:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012654:	0038      	movs	r0, r7
 8012656:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012658:	9909      	ldr	r1, [sp, #36]	; 0x24
 801265a:	47b0      	blx	r6
 801265c:	1c43      	adds	r3, r0, #1
 801265e:	d1bd      	bne.n	80125dc <_printf_float+0x34c>
 8012660:	e674      	b.n	801234c <_printf_float+0xbc>
 8012662:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012664:	0038      	movs	r0, r7
 8012666:	18ea      	adds	r2, r5, r3
 8012668:	9909      	ldr	r1, [sp, #36]	; 0x24
 801266a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801266c:	47b0      	blx	r6
 801266e:	1c43      	adds	r3, r0, #1
 8012670:	d1c0      	bne.n	80125f4 <_printf_float+0x364>
 8012672:	e66b      	b.n	801234c <_printf_float+0xbc>
 8012674:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012676:	2b01      	cmp	r3, #1
 8012678:	dc02      	bgt.n	8012680 <_printf_float+0x3f0>
 801267a:	2301      	movs	r3, #1
 801267c:	421a      	tst	r2, r3
 801267e:	d034      	beq.n	80126ea <_printf_float+0x45a>
 8012680:	2301      	movs	r3, #1
 8012682:	002a      	movs	r2, r5
 8012684:	0038      	movs	r0, r7
 8012686:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012688:	47b0      	blx	r6
 801268a:	1c43      	adds	r3, r0, #1
 801268c:	d100      	bne.n	8012690 <_printf_float+0x400>
 801268e:	e65d      	b.n	801234c <_printf_float+0xbc>
 8012690:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012692:	0038      	movs	r0, r7
 8012694:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012696:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012698:	47b0      	blx	r6
 801269a:	1c43      	adds	r3, r0, #1
 801269c:	d100      	bne.n	80126a0 <_printf_float+0x410>
 801269e:	e655      	b.n	801234c <_printf_float+0xbc>
 80126a0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80126a2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80126a4:	2200      	movs	r2, #0
 80126a6:	2300      	movs	r3, #0
 80126a8:	f7ed fed0 	bl	800044c <__aeabi_dcmpeq>
 80126ac:	2800      	cmp	r0, #0
 80126ae:	d11a      	bne.n	80126e6 <_printf_float+0x456>
 80126b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80126b2:	1c6a      	adds	r2, r5, #1
 80126b4:	3b01      	subs	r3, #1
 80126b6:	0038      	movs	r0, r7
 80126b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80126ba:	47b0      	blx	r6
 80126bc:	1c43      	adds	r3, r0, #1
 80126be:	d10e      	bne.n	80126de <_printf_float+0x44e>
 80126c0:	e644      	b.n	801234c <_printf_float+0xbc>
 80126c2:	0022      	movs	r2, r4
 80126c4:	2301      	movs	r3, #1
 80126c6:	0038      	movs	r0, r7
 80126c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80126ca:	321a      	adds	r2, #26
 80126cc:	47b0      	blx	r6
 80126ce:	1c43      	adds	r3, r0, #1
 80126d0:	d100      	bne.n	80126d4 <_printf_float+0x444>
 80126d2:	e63b      	b.n	801234c <_printf_float+0xbc>
 80126d4:	3501      	adds	r5, #1
 80126d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80126d8:	3b01      	subs	r3, #1
 80126da:	42ab      	cmp	r3, r5
 80126dc:	dcf1      	bgt.n	80126c2 <_printf_float+0x432>
 80126de:	0022      	movs	r2, r4
 80126e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80126e2:	3250      	adds	r2, #80	; 0x50
 80126e4:	e6da      	b.n	801249c <_printf_float+0x20c>
 80126e6:	2500      	movs	r5, #0
 80126e8:	e7f5      	b.n	80126d6 <_printf_float+0x446>
 80126ea:	002a      	movs	r2, r5
 80126ec:	e7e3      	b.n	80126b6 <_printf_float+0x426>
 80126ee:	0022      	movs	r2, r4
 80126f0:	2301      	movs	r3, #1
 80126f2:	0038      	movs	r0, r7
 80126f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80126f6:	3219      	adds	r2, #25
 80126f8:	47b0      	blx	r6
 80126fa:	1c43      	adds	r3, r0, #1
 80126fc:	d100      	bne.n	8012700 <_printf_float+0x470>
 80126fe:	e625      	b.n	801234c <_printf_float+0xbc>
 8012700:	3501      	adds	r5, #1
 8012702:	68e3      	ldr	r3, [r4, #12]
 8012704:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012706:	1a9b      	subs	r3, r3, r2
 8012708:	42ab      	cmp	r3, r5
 801270a:	dcf0      	bgt.n	80126ee <_printf_float+0x45e>
 801270c:	e6f8      	b.n	8012500 <_printf_float+0x270>
 801270e:	2500      	movs	r5, #0
 8012710:	e7f7      	b.n	8012702 <_printf_float+0x472>
 8012712:	46c0      	nop			; (mov r8, r8)

08012714 <_printf_common>:
 8012714:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012716:	0015      	movs	r5, r2
 8012718:	9301      	str	r3, [sp, #4]
 801271a:	688a      	ldr	r2, [r1, #8]
 801271c:	690b      	ldr	r3, [r1, #16]
 801271e:	000c      	movs	r4, r1
 8012720:	9000      	str	r0, [sp, #0]
 8012722:	4293      	cmp	r3, r2
 8012724:	da00      	bge.n	8012728 <_printf_common+0x14>
 8012726:	0013      	movs	r3, r2
 8012728:	0022      	movs	r2, r4
 801272a:	602b      	str	r3, [r5, #0]
 801272c:	3243      	adds	r2, #67	; 0x43
 801272e:	7812      	ldrb	r2, [r2, #0]
 8012730:	2a00      	cmp	r2, #0
 8012732:	d001      	beq.n	8012738 <_printf_common+0x24>
 8012734:	3301      	adds	r3, #1
 8012736:	602b      	str	r3, [r5, #0]
 8012738:	6823      	ldr	r3, [r4, #0]
 801273a:	069b      	lsls	r3, r3, #26
 801273c:	d502      	bpl.n	8012744 <_printf_common+0x30>
 801273e:	682b      	ldr	r3, [r5, #0]
 8012740:	3302      	adds	r3, #2
 8012742:	602b      	str	r3, [r5, #0]
 8012744:	6822      	ldr	r2, [r4, #0]
 8012746:	2306      	movs	r3, #6
 8012748:	0017      	movs	r7, r2
 801274a:	401f      	ands	r7, r3
 801274c:	421a      	tst	r2, r3
 801274e:	d027      	beq.n	80127a0 <_printf_common+0x8c>
 8012750:	0023      	movs	r3, r4
 8012752:	3343      	adds	r3, #67	; 0x43
 8012754:	781b      	ldrb	r3, [r3, #0]
 8012756:	1e5a      	subs	r2, r3, #1
 8012758:	4193      	sbcs	r3, r2
 801275a:	6822      	ldr	r2, [r4, #0]
 801275c:	0692      	lsls	r2, r2, #26
 801275e:	d430      	bmi.n	80127c2 <_printf_common+0xae>
 8012760:	0022      	movs	r2, r4
 8012762:	9901      	ldr	r1, [sp, #4]
 8012764:	9800      	ldr	r0, [sp, #0]
 8012766:	9e08      	ldr	r6, [sp, #32]
 8012768:	3243      	adds	r2, #67	; 0x43
 801276a:	47b0      	blx	r6
 801276c:	1c43      	adds	r3, r0, #1
 801276e:	d025      	beq.n	80127bc <_printf_common+0xa8>
 8012770:	2306      	movs	r3, #6
 8012772:	6820      	ldr	r0, [r4, #0]
 8012774:	682a      	ldr	r2, [r5, #0]
 8012776:	68e1      	ldr	r1, [r4, #12]
 8012778:	2500      	movs	r5, #0
 801277a:	4003      	ands	r3, r0
 801277c:	2b04      	cmp	r3, #4
 801277e:	d103      	bne.n	8012788 <_printf_common+0x74>
 8012780:	1a8d      	subs	r5, r1, r2
 8012782:	43eb      	mvns	r3, r5
 8012784:	17db      	asrs	r3, r3, #31
 8012786:	401d      	ands	r5, r3
 8012788:	68a3      	ldr	r3, [r4, #8]
 801278a:	6922      	ldr	r2, [r4, #16]
 801278c:	4293      	cmp	r3, r2
 801278e:	dd01      	ble.n	8012794 <_printf_common+0x80>
 8012790:	1a9b      	subs	r3, r3, r2
 8012792:	18ed      	adds	r5, r5, r3
 8012794:	2700      	movs	r7, #0
 8012796:	42bd      	cmp	r5, r7
 8012798:	d120      	bne.n	80127dc <_printf_common+0xc8>
 801279a:	2000      	movs	r0, #0
 801279c:	e010      	b.n	80127c0 <_printf_common+0xac>
 801279e:	3701      	adds	r7, #1
 80127a0:	68e3      	ldr	r3, [r4, #12]
 80127a2:	682a      	ldr	r2, [r5, #0]
 80127a4:	1a9b      	subs	r3, r3, r2
 80127a6:	42bb      	cmp	r3, r7
 80127a8:	ddd2      	ble.n	8012750 <_printf_common+0x3c>
 80127aa:	0022      	movs	r2, r4
 80127ac:	2301      	movs	r3, #1
 80127ae:	9901      	ldr	r1, [sp, #4]
 80127b0:	9800      	ldr	r0, [sp, #0]
 80127b2:	9e08      	ldr	r6, [sp, #32]
 80127b4:	3219      	adds	r2, #25
 80127b6:	47b0      	blx	r6
 80127b8:	1c43      	adds	r3, r0, #1
 80127ba:	d1f0      	bne.n	801279e <_printf_common+0x8a>
 80127bc:	2001      	movs	r0, #1
 80127be:	4240      	negs	r0, r0
 80127c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80127c2:	2030      	movs	r0, #48	; 0x30
 80127c4:	18e1      	adds	r1, r4, r3
 80127c6:	3143      	adds	r1, #67	; 0x43
 80127c8:	7008      	strb	r0, [r1, #0]
 80127ca:	0021      	movs	r1, r4
 80127cc:	1c5a      	adds	r2, r3, #1
 80127ce:	3145      	adds	r1, #69	; 0x45
 80127d0:	7809      	ldrb	r1, [r1, #0]
 80127d2:	18a2      	adds	r2, r4, r2
 80127d4:	3243      	adds	r2, #67	; 0x43
 80127d6:	3302      	adds	r3, #2
 80127d8:	7011      	strb	r1, [r2, #0]
 80127da:	e7c1      	b.n	8012760 <_printf_common+0x4c>
 80127dc:	0022      	movs	r2, r4
 80127de:	2301      	movs	r3, #1
 80127e0:	9901      	ldr	r1, [sp, #4]
 80127e2:	9800      	ldr	r0, [sp, #0]
 80127e4:	9e08      	ldr	r6, [sp, #32]
 80127e6:	321a      	adds	r2, #26
 80127e8:	47b0      	blx	r6
 80127ea:	1c43      	adds	r3, r0, #1
 80127ec:	d0e6      	beq.n	80127bc <_printf_common+0xa8>
 80127ee:	3701      	adds	r7, #1
 80127f0:	e7d1      	b.n	8012796 <_printf_common+0x82>
	...

080127f4 <_printf_i>:
 80127f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80127f6:	b08b      	sub	sp, #44	; 0x2c
 80127f8:	9206      	str	r2, [sp, #24]
 80127fa:	000a      	movs	r2, r1
 80127fc:	3243      	adds	r2, #67	; 0x43
 80127fe:	9307      	str	r3, [sp, #28]
 8012800:	9005      	str	r0, [sp, #20]
 8012802:	9204      	str	r2, [sp, #16]
 8012804:	7e0a      	ldrb	r2, [r1, #24]
 8012806:	000c      	movs	r4, r1
 8012808:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801280a:	2a78      	cmp	r2, #120	; 0x78
 801280c:	d807      	bhi.n	801281e <_printf_i+0x2a>
 801280e:	2a62      	cmp	r2, #98	; 0x62
 8012810:	d809      	bhi.n	8012826 <_printf_i+0x32>
 8012812:	2a00      	cmp	r2, #0
 8012814:	d100      	bne.n	8012818 <_printf_i+0x24>
 8012816:	e0c1      	b.n	801299c <_printf_i+0x1a8>
 8012818:	2a58      	cmp	r2, #88	; 0x58
 801281a:	d100      	bne.n	801281e <_printf_i+0x2a>
 801281c:	e08c      	b.n	8012938 <_printf_i+0x144>
 801281e:	0026      	movs	r6, r4
 8012820:	3642      	adds	r6, #66	; 0x42
 8012822:	7032      	strb	r2, [r6, #0]
 8012824:	e022      	b.n	801286c <_printf_i+0x78>
 8012826:	0010      	movs	r0, r2
 8012828:	3863      	subs	r0, #99	; 0x63
 801282a:	2815      	cmp	r0, #21
 801282c:	d8f7      	bhi.n	801281e <_printf_i+0x2a>
 801282e:	f7ed fc7d 	bl	800012c <__gnu_thumb1_case_shi>
 8012832:	0016      	.short	0x0016
 8012834:	fff6001f 	.word	0xfff6001f
 8012838:	fff6fff6 	.word	0xfff6fff6
 801283c:	001ffff6 	.word	0x001ffff6
 8012840:	fff6fff6 	.word	0xfff6fff6
 8012844:	fff6fff6 	.word	0xfff6fff6
 8012848:	003600a8 	.word	0x003600a8
 801284c:	fff6009a 	.word	0xfff6009a
 8012850:	00b9fff6 	.word	0x00b9fff6
 8012854:	0036fff6 	.word	0x0036fff6
 8012858:	fff6fff6 	.word	0xfff6fff6
 801285c:	009e      	.short	0x009e
 801285e:	0026      	movs	r6, r4
 8012860:	681a      	ldr	r2, [r3, #0]
 8012862:	3642      	adds	r6, #66	; 0x42
 8012864:	1d11      	adds	r1, r2, #4
 8012866:	6019      	str	r1, [r3, #0]
 8012868:	6813      	ldr	r3, [r2, #0]
 801286a:	7033      	strb	r3, [r6, #0]
 801286c:	2301      	movs	r3, #1
 801286e:	e0a7      	b.n	80129c0 <_printf_i+0x1cc>
 8012870:	6808      	ldr	r0, [r1, #0]
 8012872:	6819      	ldr	r1, [r3, #0]
 8012874:	1d0a      	adds	r2, r1, #4
 8012876:	0605      	lsls	r5, r0, #24
 8012878:	d50b      	bpl.n	8012892 <_printf_i+0x9e>
 801287a:	680d      	ldr	r5, [r1, #0]
 801287c:	601a      	str	r2, [r3, #0]
 801287e:	2d00      	cmp	r5, #0
 8012880:	da03      	bge.n	801288a <_printf_i+0x96>
 8012882:	232d      	movs	r3, #45	; 0x2d
 8012884:	9a04      	ldr	r2, [sp, #16]
 8012886:	426d      	negs	r5, r5
 8012888:	7013      	strb	r3, [r2, #0]
 801288a:	4b61      	ldr	r3, [pc, #388]	; (8012a10 <_printf_i+0x21c>)
 801288c:	270a      	movs	r7, #10
 801288e:	9303      	str	r3, [sp, #12]
 8012890:	e01b      	b.n	80128ca <_printf_i+0xd6>
 8012892:	680d      	ldr	r5, [r1, #0]
 8012894:	601a      	str	r2, [r3, #0]
 8012896:	0641      	lsls	r1, r0, #25
 8012898:	d5f1      	bpl.n	801287e <_printf_i+0x8a>
 801289a:	b22d      	sxth	r5, r5
 801289c:	e7ef      	b.n	801287e <_printf_i+0x8a>
 801289e:	680d      	ldr	r5, [r1, #0]
 80128a0:	6819      	ldr	r1, [r3, #0]
 80128a2:	1d08      	adds	r0, r1, #4
 80128a4:	6018      	str	r0, [r3, #0]
 80128a6:	062e      	lsls	r6, r5, #24
 80128a8:	d501      	bpl.n	80128ae <_printf_i+0xba>
 80128aa:	680d      	ldr	r5, [r1, #0]
 80128ac:	e003      	b.n	80128b6 <_printf_i+0xc2>
 80128ae:	066d      	lsls	r5, r5, #25
 80128b0:	d5fb      	bpl.n	80128aa <_printf_i+0xb6>
 80128b2:	680d      	ldr	r5, [r1, #0]
 80128b4:	b2ad      	uxth	r5, r5
 80128b6:	4b56      	ldr	r3, [pc, #344]	; (8012a10 <_printf_i+0x21c>)
 80128b8:	2708      	movs	r7, #8
 80128ba:	9303      	str	r3, [sp, #12]
 80128bc:	2a6f      	cmp	r2, #111	; 0x6f
 80128be:	d000      	beq.n	80128c2 <_printf_i+0xce>
 80128c0:	3702      	adds	r7, #2
 80128c2:	0023      	movs	r3, r4
 80128c4:	2200      	movs	r2, #0
 80128c6:	3343      	adds	r3, #67	; 0x43
 80128c8:	701a      	strb	r2, [r3, #0]
 80128ca:	6863      	ldr	r3, [r4, #4]
 80128cc:	60a3      	str	r3, [r4, #8]
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	db03      	blt.n	80128da <_printf_i+0xe6>
 80128d2:	2204      	movs	r2, #4
 80128d4:	6821      	ldr	r1, [r4, #0]
 80128d6:	4391      	bics	r1, r2
 80128d8:	6021      	str	r1, [r4, #0]
 80128da:	2d00      	cmp	r5, #0
 80128dc:	d102      	bne.n	80128e4 <_printf_i+0xf0>
 80128de:	9e04      	ldr	r6, [sp, #16]
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d00c      	beq.n	80128fe <_printf_i+0x10a>
 80128e4:	9e04      	ldr	r6, [sp, #16]
 80128e6:	0028      	movs	r0, r5
 80128e8:	0039      	movs	r1, r7
 80128ea:	f7ed fcaf 	bl	800024c <__aeabi_uidivmod>
 80128ee:	9b03      	ldr	r3, [sp, #12]
 80128f0:	3e01      	subs	r6, #1
 80128f2:	5c5b      	ldrb	r3, [r3, r1]
 80128f4:	7033      	strb	r3, [r6, #0]
 80128f6:	002b      	movs	r3, r5
 80128f8:	0005      	movs	r5, r0
 80128fa:	429f      	cmp	r7, r3
 80128fc:	d9f3      	bls.n	80128e6 <_printf_i+0xf2>
 80128fe:	2f08      	cmp	r7, #8
 8012900:	d109      	bne.n	8012916 <_printf_i+0x122>
 8012902:	6823      	ldr	r3, [r4, #0]
 8012904:	07db      	lsls	r3, r3, #31
 8012906:	d506      	bpl.n	8012916 <_printf_i+0x122>
 8012908:	6863      	ldr	r3, [r4, #4]
 801290a:	6922      	ldr	r2, [r4, #16]
 801290c:	4293      	cmp	r3, r2
 801290e:	dc02      	bgt.n	8012916 <_printf_i+0x122>
 8012910:	2330      	movs	r3, #48	; 0x30
 8012912:	3e01      	subs	r6, #1
 8012914:	7033      	strb	r3, [r6, #0]
 8012916:	9b04      	ldr	r3, [sp, #16]
 8012918:	1b9b      	subs	r3, r3, r6
 801291a:	6123      	str	r3, [r4, #16]
 801291c:	9b07      	ldr	r3, [sp, #28]
 801291e:	0021      	movs	r1, r4
 8012920:	9300      	str	r3, [sp, #0]
 8012922:	9805      	ldr	r0, [sp, #20]
 8012924:	9b06      	ldr	r3, [sp, #24]
 8012926:	aa09      	add	r2, sp, #36	; 0x24
 8012928:	f7ff fef4 	bl	8012714 <_printf_common>
 801292c:	1c43      	adds	r3, r0, #1
 801292e:	d14c      	bne.n	80129ca <_printf_i+0x1d6>
 8012930:	2001      	movs	r0, #1
 8012932:	4240      	negs	r0, r0
 8012934:	b00b      	add	sp, #44	; 0x2c
 8012936:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012938:	3145      	adds	r1, #69	; 0x45
 801293a:	700a      	strb	r2, [r1, #0]
 801293c:	4a34      	ldr	r2, [pc, #208]	; (8012a10 <_printf_i+0x21c>)
 801293e:	9203      	str	r2, [sp, #12]
 8012940:	681a      	ldr	r2, [r3, #0]
 8012942:	6821      	ldr	r1, [r4, #0]
 8012944:	ca20      	ldmia	r2!, {r5}
 8012946:	601a      	str	r2, [r3, #0]
 8012948:	0608      	lsls	r0, r1, #24
 801294a:	d516      	bpl.n	801297a <_printf_i+0x186>
 801294c:	07cb      	lsls	r3, r1, #31
 801294e:	d502      	bpl.n	8012956 <_printf_i+0x162>
 8012950:	2320      	movs	r3, #32
 8012952:	4319      	orrs	r1, r3
 8012954:	6021      	str	r1, [r4, #0]
 8012956:	2710      	movs	r7, #16
 8012958:	2d00      	cmp	r5, #0
 801295a:	d1b2      	bne.n	80128c2 <_printf_i+0xce>
 801295c:	2320      	movs	r3, #32
 801295e:	6822      	ldr	r2, [r4, #0]
 8012960:	439a      	bics	r2, r3
 8012962:	6022      	str	r2, [r4, #0]
 8012964:	e7ad      	b.n	80128c2 <_printf_i+0xce>
 8012966:	2220      	movs	r2, #32
 8012968:	6809      	ldr	r1, [r1, #0]
 801296a:	430a      	orrs	r2, r1
 801296c:	6022      	str	r2, [r4, #0]
 801296e:	0022      	movs	r2, r4
 8012970:	2178      	movs	r1, #120	; 0x78
 8012972:	3245      	adds	r2, #69	; 0x45
 8012974:	7011      	strb	r1, [r2, #0]
 8012976:	4a27      	ldr	r2, [pc, #156]	; (8012a14 <_printf_i+0x220>)
 8012978:	e7e1      	b.n	801293e <_printf_i+0x14a>
 801297a:	0648      	lsls	r0, r1, #25
 801297c:	d5e6      	bpl.n	801294c <_printf_i+0x158>
 801297e:	b2ad      	uxth	r5, r5
 8012980:	e7e4      	b.n	801294c <_printf_i+0x158>
 8012982:	681a      	ldr	r2, [r3, #0]
 8012984:	680d      	ldr	r5, [r1, #0]
 8012986:	1d10      	adds	r0, r2, #4
 8012988:	6949      	ldr	r1, [r1, #20]
 801298a:	6018      	str	r0, [r3, #0]
 801298c:	6813      	ldr	r3, [r2, #0]
 801298e:	062e      	lsls	r6, r5, #24
 8012990:	d501      	bpl.n	8012996 <_printf_i+0x1a2>
 8012992:	6019      	str	r1, [r3, #0]
 8012994:	e002      	b.n	801299c <_printf_i+0x1a8>
 8012996:	066d      	lsls	r5, r5, #25
 8012998:	d5fb      	bpl.n	8012992 <_printf_i+0x19e>
 801299a:	8019      	strh	r1, [r3, #0]
 801299c:	2300      	movs	r3, #0
 801299e:	9e04      	ldr	r6, [sp, #16]
 80129a0:	6123      	str	r3, [r4, #16]
 80129a2:	e7bb      	b.n	801291c <_printf_i+0x128>
 80129a4:	681a      	ldr	r2, [r3, #0]
 80129a6:	1d11      	adds	r1, r2, #4
 80129a8:	6019      	str	r1, [r3, #0]
 80129aa:	6816      	ldr	r6, [r2, #0]
 80129ac:	2100      	movs	r1, #0
 80129ae:	0030      	movs	r0, r6
 80129b0:	6862      	ldr	r2, [r4, #4]
 80129b2:	f002 fc5f 	bl	8015274 <memchr>
 80129b6:	2800      	cmp	r0, #0
 80129b8:	d001      	beq.n	80129be <_printf_i+0x1ca>
 80129ba:	1b80      	subs	r0, r0, r6
 80129bc:	6060      	str	r0, [r4, #4]
 80129be:	6863      	ldr	r3, [r4, #4]
 80129c0:	6123      	str	r3, [r4, #16]
 80129c2:	2300      	movs	r3, #0
 80129c4:	9a04      	ldr	r2, [sp, #16]
 80129c6:	7013      	strb	r3, [r2, #0]
 80129c8:	e7a8      	b.n	801291c <_printf_i+0x128>
 80129ca:	6923      	ldr	r3, [r4, #16]
 80129cc:	0032      	movs	r2, r6
 80129ce:	9906      	ldr	r1, [sp, #24]
 80129d0:	9805      	ldr	r0, [sp, #20]
 80129d2:	9d07      	ldr	r5, [sp, #28]
 80129d4:	47a8      	blx	r5
 80129d6:	1c43      	adds	r3, r0, #1
 80129d8:	d0aa      	beq.n	8012930 <_printf_i+0x13c>
 80129da:	6823      	ldr	r3, [r4, #0]
 80129dc:	079b      	lsls	r3, r3, #30
 80129de:	d415      	bmi.n	8012a0c <_printf_i+0x218>
 80129e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129e2:	68e0      	ldr	r0, [r4, #12]
 80129e4:	4298      	cmp	r0, r3
 80129e6:	daa5      	bge.n	8012934 <_printf_i+0x140>
 80129e8:	0018      	movs	r0, r3
 80129ea:	e7a3      	b.n	8012934 <_printf_i+0x140>
 80129ec:	0022      	movs	r2, r4
 80129ee:	2301      	movs	r3, #1
 80129f0:	9906      	ldr	r1, [sp, #24]
 80129f2:	9805      	ldr	r0, [sp, #20]
 80129f4:	9e07      	ldr	r6, [sp, #28]
 80129f6:	3219      	adds	r2, #25
 80129f8:	47b0      	blx	r6
 80129fa:	1c43      	adds	r3, r0, #1
 80129fc:	d098      	beq.n	8012930 <_printf_i+0x13c>
 80129fe:	3501      	adds	r5, #1
 8012a00:	68e3      	ldr	r3, [r4, #12]
 8012a02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012a04:	1a9b      	subs	r3, r3, r2
 8012a06:	42ab      	cmp	r3, r5
 8012a08:	dcf0      	bgt.n	80129ec <_printf_i+0x1f8>
 8012a0a:	e7e9      	b.n	80129e0 <_printf_i+0x1ec>
 8012a0c:	2500      	movs	r5, #0
 8012a0e:	e7f7      	b.n	8012a00 <_printf_i+0x20c>
 8012a10:	080171d6 	.word	0x080171d6
 8012a14:	080171e7 	.word	0x080171e7

08012a18 <cleanup_glue>:
 8012a18:	b570      	push	{r4, r5, r6, lr}
 8012a1a:	000d      	movs	r5, r1
 8012a1c:	6809      	ldr	r1, [r1, #0]
 8012a1e:	0004      	movs	r4, r0
 8012a20:	2900      	cmp	r1, #0
 8012a22:	d001      	beq.n	8012a28 <cleanup_glue+0x10>
 8012a24:	f7ff fff8 	bl	8012a18 <cleanup_glue>
 8012a28:	0029      	movs	r1, r5
 8012a2a:	0020      	movs	r0, r4
 8012a2c:	f003 f934 	bl	8015c98 <_free_r>
 8012a30:	bd70      	pop	{r4, r5, r6, pc}
	...

08012a34 <_reclaim_reent>:
 8012a34:	4b31      	ldr	r3, [pc, #196]	; (8012afc <_reclaim_reent+0xc8>)
 8012a36:	b570      	push	{r4, r5, r6, lr}
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	0004      	movs	r4, r0
 8012a3c:	4283      	cmp	r3, r0
 8012a3e:	d049      	beq.n	8012ad4 <_reclaim_reent+0xa0>
 8012a40:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d00a      	beq.n	8012a5c <_reclaim_reent+0x28>
 8012a46:	2500      	movs	r5, #0
 8012a48:	68db      	ldr	r3, [r3, #12]
 8012a4a:	42ab      	cmp	r3, r5
 8012a4c:	d147      	bne.n	8012ade <_reclaim_reent+0xaa>
 8012a4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012a50:	6819      	ldr	r1, [r3, #0]
 8012a52:	2900      	cmp	r1, #0
 8012a54:	d002      	beq.n	8012a5c <_reclaim_reent+0x28>
 8012a56:	0020      	movs	r0, r4
 8012a58:	f003 f91e 	bl	8015c98 <_free_r>
 8012a5c:	6961      	ldr	r1, [r4, #20]
 8012a5e:	2900      	cmp	r1, #0
 8012a60:	d002      	beq.n	8012a68 <_reclaim_reent+0x34>
 8012a62:	0020      	movs	r0, r4
 8012a64:	f003 f918 	bl	8015c98 <_free_r>
 8012a68:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012a6a:	2900      	cmp	r1, #0
 8012a6c:	d002      	beq.n	8012a74 <_reclaim_reent+0x40>
 8012a6e:	0020      	movs	r0, r4
 8012a70:	f003 f912 	bl	8015c98 <_free_r>
 8012a74:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012a76:	2900      	cmp	r1, #0
 8012a78:	d002      	beq.n	8012a80 <_reclaim_reent+0x4c>
 8012a7a:	0020      	movs	r0, r4
 8012a7c:	f003 f90c 	bl	8015c98 <_free_r>
 8012a80:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8012a82:	2900      	cmp	r1, #0
 8012a84:	d002      	beq.n	8012a8c <_reclaim_reent+0x58>
 8012a86:	0020      	movs	r0, r4
 8012a88:	f003 f906 	bl	8015c98 <_free_r>
 8012a8c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8012a8e:	2900      	cmp	r1, #0
 8012a90:	d002      	beq.n	8012a98 <_reclaim_reent+0x64>
 8012a92:	0020      	movs	r0, r4
 8012a94:	f003 f900 	bl	8015c98 <_free_r>
 8012a98:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8012a9a:	2900      	cmp	r1, #0
 8012a9c:	d002      	beq.n	8012aa4 <_reclaim_reent+0x70>
 8012a9e:	0020      	movs	r0, r4
 8012aa0:	f003 f8fa 	bl	8015c98 <_free_r>
 8012aa4:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8012aa6:	2900      	cmp	r1, #0
 8012aa8:	d002      	beq.n	8012ab0 <_reclaim_reent+0x7c>
 8012aaa:	0020      	movs	r0, r4
 8012aac:	f003 f8f4 	bl	8015c98 <_free_r>
 8012ab0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012ab2:	2900      	cmp	r1, #0
 8012ab4:	d002      	beq.n	8012abc <_reclaim_reent+0x88>
 8012ab6:	0020      	movs	r0, r4
 8012ab8:	f003 f8ee 	bl	8015c98 <_free_r>
 8012abc:	69a3      	ldr	r3, [r4, #24]
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d008      	beq.n	8012ad4 <_reclaim_reent+0xa0>
 8012ac2:	0020      	movs	r0, r4
 8012ac4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012ac6:	4798      	blx	r3
 8012ac8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8012aca:	2900      	cmp	r1, #0
 8012acc:	d002      	beq.n	8012ad4 <_reclaim_reent+0xa0>
 8012ace:	0020      	movs	r0, r4
 8012ad0:	f7ff ffa2 	bl	8012a18 <cleanup_glue>
 8012ad4:	bd70      	pop	{r4, r5, r6, pc}
 8012ad6:	5949      	ldr	r1, [r1, r5]
 8012ad8:	2900      	cmp	r1, #0
 8012ada:	d108      	bne.n	8012aee <_reclaim_reent+0xba>
 8012adc:	3504      	adds	r5, #4
 8012ade:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012ae0:	68d9      	ldr	r1, [r3, #12]
 8012ae2:	2d80      	cmp	r5, #128	; 0x80
 8012ae4:	d1f7      	bne.n	8012ad6 <_reclaim_reent+0xa2>
 8012ae6:	0020      	movs	r0, r4
 8012ae8:	f003 f8d6 	bl	8015c98 <_free_r>
 8012aec:	e7af      	b.n	8012a4e <_reclaim_reent+0x1a>
 8012aee:	680e      	ldr	r6, [r1, #0]
 8012af0:	0020      	movs	r0, r4
 8012af2:	f003 f8d1 	bl	8015c98 <_free_r>
 8012af6:	0031      	movs	r1, r6
 8012af8:	e7ee      	b.n	8012ad8 <_reclaim_reent+0xa4>
 8012afa:	46c0      	nop			; (mov r8, r8)
 8012afc:	20000014 	.word	0x20000014

08012b00 <_sbrk_r>:
 8012b00:	2300      	movs	r3, #0
 8012b02:	b570      	push	{r4, r5, r6, lr}
 8012b04:	4d06      	ldr	r5, [pc, #24]	; (8012b20 <_sbrk_r+0x20>)
 8012b06:	0004      	movs	r4, r0
 8012b08:	0008      	movs	r0, r1
 8012b0a:	602b      	str	r3, [r5, #0]
 8012b0c:	f7f1 f888 	bl	8003c20 <_sbrk>
 8012b10:	1c43      	adds	r3, r0, #1
 8012b12:	d103      	bne.n	8012b1c <_sbrk_r+0x1c>
 8012b14:	682b      	ldr	r3, [r5, #0]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d000      	beq.n	8012b1c <_sbrk_r+0x1c>
 8012b1a:	6023      	str	r3, [r4, #0]
 8012b1c:	bd70      	pop	{r4, r5, r6, pc}
 8012b1e:	46c0      	nop			; (mov r8, r8)
 8012b20:	20002d98 	.word	0x20002d98

08012b24 <siprintf>:
 8012b24:	b40e      	push	{r1, r2, r3}
 8012b26:	b500      	push	{lr}
 8012b28:	490b      	ldr	r1, [pc, #44]	; (8012b58 <siprintf+0x34>)
 8012b2a:	b09c      	sub	sp, #112	; 0x70
 8012b2c:	ab1d      	add	r3, sp, #116	; 0x74
 8012b2e:	9002      	str	r0, [sp, #8]
 8012b30:	9006      	str	r0, [sp, #24]
 8012b32:	9107      	str	r1, [sp, #28]
 8012b34:	9104      	str	r1, [sp, #16]
 8012b36:	4809      	ldr	r0, [pc, #36]	; (8012b5c <siprintf+0x38>)
 8012b38:	4909      	ldr	r1, [pc, #36]	; (8012b60 <siprintf+0x3c>)
 8012b3a:	cb04      	ldmia	r3!, {r2}
 8012b3c:	9105      	str	r1, [sp, #20]
 8012b3e:	6800      	ldr	r0, [r0, #0]
 8012b40:	a902      	add	r1, sp, #8
 8012b42:	9301      	str	r3, [sp, #4]
 8012b44:	f003 f954 	bl	8015df0 <_svfiprintf_r>
 8012b48:	2300      	movs	r3, #0
 8012b4a:	9a02      	ldr	r2, [sp, #8]
 8012b4c:	7013      	strb	r3, [r2, #0]
 8012b4e:	b01c      	add	sp, #112	; 0x70
 8012b50:	bc08      	pop	{r3}
 8012b52:	b003      	add	sp, #12
 8012b54:	4718      	bx	r3
 8012b56:	46c0      	nop			; (mov r8, r8)
 8012b58:	7fffffff 	.word	0x7fffffff
 8012b5c:	20000014 	.word	0x20000014
 8012b60:	ffff0208 	.word	0xffff0208

08012b64 <__sread>:
 8012b64:	b570      	push	{r4, r5, r6, lr}
 8012b66:	000c      	movs	r4, r1
 8012b68:	250e      	movs	r5, #14
 8012b6a:	5f49      	ldrsh	r1, [r1, r5]
 8012b6c:	f003 fba2 	bl	80162b4 <_read_r>
 8012b70:	2800      	cmp	r0, #0
 8012b72:	db03      	blt.n	8012b7c <__sread+0x18>
 8012b74:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8012b76:	181b      	adds	r3, r3, r0
 8012b78:	6563      	str	r3, [r4, #84]	; 0x54
 8012b7a:	bd70      	pop	{r4, r5, r6, pc}
 8012b7c:	89a3      	ldrh	r3, [r4, #12]
 8012b7e:	4a02      	ldr	r2, [pc, #8]	; (8012b88 <__sread+0x24>)
 8012b80:	4013      	ands	r3, r2
 8012b82:	81a3      	strh	r3, [r4, #12]
 8012b84:	e7f9      	b.n	8012b7a <__sread+0x16>
 8012b86:	46c0      	nop			; (mov r8, r8)
 8012b88:	ffffefff 	.word	0xffffefff

08012b8c <__swrite>:
 8012b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b8e:	001f      	movs	r7, r3
 8012b90:	898b      	ldrh	r3, [r1, #12]
 8012b92:	0005      	movs	r5, r0
 8012b94:	000c      	movs	r4, r1
 8012b96:	0016      	movs	r6, r2
 8012b98:	05db      	lsls	r3, r3, #23
 8012b9a:	d505      	bpl.n	8012ba8 <__swrite+0x1c>
 8012b9c:	230e      	movs	r3, #14
 8012b9e:	5ec9      	ldrsh	r1, [r1, r3]
 8012ba0:	2200      	movs	r2, #0
 8012ba2:	2302      	movs	r3, #2
 8012ba4:	f002 fb36 	bl	8015214 <_lseek_r>
 8012ba8:	89a3      	ldrh	r3, [r4, #12]
 8012baa:	4a05      	ldr	r2, [pc, #20]	; (8012bc0 <__swrite+0x34>)
 8012bac:	0028      	movs	r0, r5
 8012bae:	4013      	ands	r3, r2
 8012bb0:	81a3      	strh	r3, [r4, #12]
 8012bb2:	0032      	movs	r2, r6
 8012bb4:	230e      	movs	r3, #14
 8012bb6:	5ee1      	ldrsh	r1, [r4, r3]
 8012bb8:	003b      	movs	r3, r7
 8012bba:	f000 ffed 	bl	8013b98 <_write_r>
 8012bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012bc0:	ffffefff 	.word	0xffffefff

08012bc4 <__sseek>:
 8012bc4:	b570      	push	{r4, r5, r6, lr}
 8012bc6:	000c      	movs	r4, r1
 8012bc8:	250e      	movs	r5, #14
 8012bca:	5f49      	ldrsh	r1, [r1, r5]
 8012bcc:	f002 fb22 	bl	8015214 <_lseek_r>
 8012bd0:	89a3      	ldrh	r3, [r4, #12]
 8012bd2:	1c42      	adds	r2, r0, #1
 8012bd4:	d103      	bne.n	8012bde <__sseek+0x1a>
 8012bd6:	4a05      	ldr	r2, [pc, #20]	; (8012bec <__sseek+0x28>)
 8012bd8:	4013      	ands	r3, r2
 8012bda:	81a3      	strh	r3, [r4, #12]
 8012bdc:	bd70      	pop	{r4, r5, r6, pc}
 8012bde:	2280      	movs	r2, #128	; 0x80
 8012be0:	0152      	lsls	r2, r2, #5
 8012be2:	4313      	orrs	r3, r2
 8012be4:	81a3      	strh	r3, [r4, #12]
 8012be6:	6560      	str	r0, [r4, #84]	; 0x54
 8012be8:	e7f8      	b.n	8012bdc <__sseek+0x18>
 8012bea:	46c0      	nop			; (mov r8, r8)
 8012bec:	ffffefff 	.word	0xffffefff

08012bf0 <__sclose>:
 8012bf0:	b510      	push	{r4, lr}
 8012bf2:	230e      	movs	r3, #14
 8012bf4:	5ec9      	ldrsh	r1, [r1, r3]
 8012bf6:	f001 f801 	bl	8013bfc <_close_r>
 8012bfa:	bd10      	pop	{r4, pc}

08012bfc <strcat>:
 8012bfc:	0002      	movs	r2, r0
 8012bfe:	b510      	push	{r4, lr}
 8012c00:	7813      	ldrb	r3, [r2, #0]
 8012c02:	0014      	movs	r4, r2
 8012c04:	3201      	adds	r2, #1
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d1fa      	bne.n	8012c00 <strcat+0x4>
 8012c0a:	5cca      	ldrb	r2, [r1, r3]
 8012c0c:	54e2      	strb	r2, [r4, r3]
 8012c0e:	3301      	adds	r3, #1
 8012c10:	2a00      	cmp	r2, #0
 8012c12:	d1fa      	bne.n	8012c0a <strcat+0xe>
 8012c14:	bd10      	pop	{r4, pc}

08012c16 <strchr>:
 8012c16:	b2c9      	uxtb	r1, r1
 8012c18:	7803      	ldrb	r3, [r0, #0]
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d004      	beq.n	8012c28 <strchr+0x12>
 8012c1e:	428b      	cmp	r3, r1
 8012c20:	d100      	bne.n	8012c24 <strchr+0xe>
 8012c22:	4770      	bx	lr
 8012c24:	3001      	adds	r0, #1
 8012c26:	e7f7      	b.n	8012c18 <strchr+0x2>
 8012c28:	424b      	negs	r3, r1
 8012c2a:	4159      	adcs	r1, r3
 8012c2c:	4249      	negs	r1, r1
 8012c2e:	4008      	ands	r0, r1
 8012c30:	e7f7      	b.n	8012c22 <strchr+0xc>

08012c32 <strcpy>:
 8012c32:	0003      	movs	r3, r0
 8012c34:	780a      	ldrb	r2, [r1, #0]
 8012c36:	3101      	adds	r1, #1
 8012c38:	701a      	strb	r2, [r3, #0]
 8012c3a:	3301      	adds	r3, #1
 8012c3c:	2a00      	cmp	r2, #0
 8012c3e:	d1f9      	bne.n	8012c34 <strcpy+0x2>
 8012c40:	4770      	bx	lr

08012c42 <strncmp>:
 8012c42:	b530      	push	{r4, r5, lr}
 8012c44:	0005      	movs	r5, r0
 8012c46:	1e10      	subs	r0, r2, #0
 8012c48:	d008      	beq.n	8012c5c <strncmp+0x1a>
 8012c4a:	2400      	movs	r4, #0
 8012c4c:	3a01      	subs	r2, #1
 8012c4e:	5d2b      	ldrb	r3, [r5, r4]
 8012c50:	5d08      	ldrb	r0, [r1, r4]
 8012c52:	4283      	cmp	r3, r0
 8012c54:	d101      	bne.n	8012c5a <strncmp+0x18>
 8012c56:	4294      	cmp	r4, r2
 8012c58:	d101      	bne.n	8012c5e <strncmp+0x1c>
 8012c5a:	1a18      	subs	r0, r3, r0
 8012c5c:	bd30      	pop	{r4, r5, pc}
 8012c5e:	3401      	adds	r4, #1
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d1f4      	bne.n	8012c4e <strncmp+0xc>
 8012c64:	e7f9      	b.n	8012c5a <strncmp+0x18>

08012c66 <strncpy>:
 8012c66:	0003      	movs	r3, r0
 8012c68:	b530      	push	{r4, r5, lr}
 8012c6a:	001d      	movs	r5, r3
 8012c6c:	2a00      	cmp	r2, #0
 8012c6e:	d006      	beq.n	8012c7e <strncpy+0x18>
 8012c70:	780c      	ldrb	r4, [r1, #0]
 8012c72:	3a01      	subs	r2, #1
 8012c74:	3301      	adds	r3, #1
 8012c76:	702c      	strb	r4, [r5, #0]
 8012c78:	3101      	adds	r1, #1
 8012c7a:	2c00      	cmp	r4, #0
 8012c7c:	d1f5      	bne.n	8012c6a <strncpy+0x4>
 8012c7e:	2100      	movs	r1, #0
 8012c80:	189a      	adds	r2, r3, r2
 8012c82:	4293      	cmp	r3, r2
 8012c84:	d100      	bne.n	8012c88 <strncpy+0x22>
 8012c86:	bd30      	pop	{r4, r5, pc}
 8012c88:	7019      	strb	r1, [r3, #0]
 8012c8a:	3301      	adds	r3, #1
 8012c8c:	e7f9      	b.n	8012c82 <strncpy+0x1c>

08012c8e <strstr>:
 8012c8e:	780a      	ldrb	r2, [r1, #0]
 8012c90:	b530      	push	{r4, r5, lr}
 8012c92:	2a00      	cmp	r2, #0
 8012c94:	d10c      	bne.n	8012cb0 <strstr+0x22>
 8012c96:	bd30      	pop	{r4, r5, pc}
 8012c98:	429a      	cmp	r2, r3
 8012c9a:	d108      	bne.n	8012cae <strstr+0x20>
 8012c9c:	2301      	movs	r3, #1
 8012c9e:	5ccc      	ldrb	r4, [r1, r3]
 8012ca0:	2c00      	cmp	r4, #0
 8012ca2:	d0f8      	beq.n	8012c96 <strstr+0x8>
 8012ca4:	5cc5      	ldrb	r5, [r0, r3]
 8012ca6:	42a5      	cmp	r5, r4
 8012ca8:	d101      	bne.n	8012cae <strstr+0x20>
 8012caa:	3301      	adds	r3, #1
 8012cac:	e7f7      	b.n	8012c9e <strstr+0x10>
 8012cae:	3001      	adds	r0, #1
 8012cb0:	7803      	ldrb	r3, [r0, #0]
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d1f0      	bne.n	8012c98 <strstr+0xa>
 8012cb6:	0018      	movs	r0, r3
 8012cb8:	e7ed      	b.n	8012c96 <strstr+0x8>
	...

08012cbc <sulp>:
 8012cbc:	b570      	push	{r4, r5, r6, lr}
 8012cbe:	0016      	movs	r6, r2
 8012cc0:	000d      	movs	r5, r1
 8012cc2:	f002 fe77 	bl	80159b4 <__ulp>
 8012cc6:	2e00      	cmp	r6, #0
 8012cc8:	d00d      	beq.n	8012ce6 <sulp+0x2a>
 8012cca:	236b      	movs	r3, #107	; 0x6b
 8012ccc:	006a      	lsls	r2, r5, #1
 8012cce:	0d52      	lsrs	r2, r2, #21
 8012cd0:	1a9b      	subs	r3, r3, r2
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	dd07      	ble.n	8012ce6 <sulp+0x2a>
 8012cd6:	2400      	movs	r4, #0
 8012cd8:	4a03      	ldr	r2, [pc, #12]	; (8012ce8 <sulp+0x2c>)
 8012cda:	051b      	lsls	r3, r3, #20
 8012cdc:	189d      	adds	r5, r3, r2
 8012cde:	002b      	movs	r3, r5
 8012ce0:	0022      	movs	r2, r4
 8012ce2:	f7ee fd09 	bl	80016f8 <__aeabi_dmul>
 8012ce6:	bd70      	pop	{r4, r5, r6, pc}
 8012ce8:	3ff00000 	.word	0x3ff00000

08012cec <_strtod_l>:
 8012cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012cee:	001d      	movs	r5, r3
 8012cf0:	2300      	movs	r3, #0
 8012cf2:	b0a5      	sub	sp, #148	; 0x94
 8012cf4:	9320      	str	r3, [sp, #128]	; 0x80
 8012cf6:	4bac      	ldr	r3, [pc, #688]	; (8012fa8 <_strtod_l+0x2bc>)
 8012cf8:	9005      	str	r0, [sp, #20]
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	9108      	str	r1, [sp, #32]
 8012cfe:	0018      	movs	r0, r3
 8012d00:	9307      	str	r3, [sp, #28]
 8012d02:	921b      	str	r2, [sp, #108]	; 0x6c
 8012d04:	f7ed fa00 	bl	8000108 <strlen>
 8012d08:	2600      	movs	r6, #0
 8012d0a:	0004      	movs	r4, r0
 8012d0c:	2700      	movs	r7, #0
 8012d0e:	9b08      	ldr	r3, [sp, #32]
 8012d10:	931f      	str	r3, [sp, #124]	; 0x7c
 8012d12:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8012d14:	7813      	ldrb	r3, [r2, #0]
 8012d16:	2b2b      	cmp	r3, #43	; 0x2b
 8012d18:	d058      	beq.n	8012dcc <_strtod_l+0xe0>
 8012d1a:	d844      	bhi.n	8012da6 <_strtod_l+0xba>
 8012d1c:	2b0d      	cmp	r3, #13
 8012d1e:	d83d      	bhi.n	8012d9c <_strtod_l+0xb0>
 8012d20:	2b08      	cmp	r3, #8
 8012d22:	d83d      	bhi.n	8012da0 <_strtod_l+0xb4>
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d047      	beq.n	8012db8 <_strtod_l+0xcc>
 8012d28:	2300      	movs	r3, #0
 8012d2a:	930e      	str	r3, [sp, #56]	; 0x38
 8012d2c:	2200      	movs	r2, #0
 8012d2e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012d30:	920a      	str	r2, [sp, #40]	; 0x28
 8012d32:	9306      	str	r3, [sp, #24]
 8012d34:	781b      	ldrb	r3, [r3, #0]
 8012d36:	2b30      	cmp	r3, #48	; 0x30
 8012d38:	d000      	beq.n	8012d3c <_strtod_l+0x50>
 8012d3a:	e07f      	b.n	8012e3c <_strtod_l+0x150>
 8012d3c:	9b06      	ldr	r3, [sp, #24]
 8012d3e:	3220      	adds	r2, #32
 8012d40:	785b      	ldrb	r3, [r3, #1]
 8012d42:	4393      	bics	r3, r2
 8012d44:	2b58      	cmp	r3, #88	; 0x58
 8012d46:	d000      	beq.n	8012d4a <_strtod_l+0x5e>
 8012d48:	e06e      	b.n	8012e28 <_strtod_l+0x13c>
 8012d4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012d4c:	9502      	str	r5, [sp, #8]
 8012d4e:	9301      	str	r3, [sp, #4]
 8012d50:	ab20      	add	r3, sp, #128	; 0x80
 8012d52:	9300      	str	r3, [sp, #0]
 8012d54:	4a95      	ldr	r2, [pc, #596]	; (8012fac <_strtod_l+0x2c0>)
 8012d56:	ab21      	add	r3, sp, #132	; 0x84
 8012d58:	9805      	ldr	r0, [sp, #20]
 8012d5a:	a91f      	add	r1, sp, #124	; 0x7c
 8012d5c:	f001 ff4c 	bl	8014bf8 <__gethex>
 8012d60:	2307      	movs	r3, #7
 8012d62:	0005      	movs	r5, r0
 8012d64:	0004      	movs	r4, r0
 8012d66:	401d      	ands	r5, r3
 8012d68:	4218      	tst	r0, r3
 8012d6a:	d006      	beq.n	8012d7a <_strtod_l+0x8e>
 8012d6c:	2d06      	cmp	r5, #6
 8012d6e:	d12f      	bne.n	8012dd0 <_strtod_l+0xe4>
 8012d70:	9b06      	ldr	r3, [sp, #24]
 8012d72:	3301      	adds	r3, #1
 8012d74:	931f      	str	r3, [sp, #124]	; 0x7c
 8012d76:	2300      	movs	r3, #0
 8012d78:	930e      	str	r3, [sp, #56]	; 0x38
 8012d7a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d002      	beq.n	8012d86 <_strtod_l+0x9a>
 8012d80:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012d82:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8012d84:	601a      	str	r2, [r3, #0]
 8012d86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d01c      	beq.n	8012dc6 <_strtod_l+0xda>
 8012d8c:	2380      	movs	r3, #128	; 0x80
 8012d8e:	0032      	movs	r2, r6
 8012d90:	061b      	lsls	r3, r3, #24
 8012d92:	18fb      	adds	r3, r7, r3
 8012d94:	0010      	movs	r0, r2
 8012d96:	0019      	movs	r1, r3
 8012d98:	b025      	add	sp, #148	; 0x94
 8012d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d9c:	2b20      	cmp	r3, #32
 8012d9e:	d1c3      	bne.n	8012d28 <_strtod_l+0x3c>
 8012da0:	3201      	adds	r2, #1
 8012da2:	921f      	str	r2, [sp, #124]	; 0x7c
 8012da4:	e7b5      	b.n	8012d12 <_strtod_l+0x26>
 8012da6:	2b2d      	cmp	r3, #45	; 0x2d
 8012da8:	d1be      	bne.n	8012d28 <_strtod_l+0x3c>
 8012daa:	3b2c      	subs	r3, #44	; 0x2c
 8012dac:	930e      	str	r3, [sp, #56]	; 0x38
 8012dae:	1c53      	adds	r3, r2, #1
 8012db0:	931f      	str	r3, [sp, #124]	; 0x7c
 8012db2:	7853      	ldrb	r3, [r2, #1]
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d1b9      	bne.n	8012d2c <_strtod_l+0x40>
 8012db8:	9b08      	ldr	r3, [sp, #32]
 8012dba:	931f      	str	r3, [sp, #124]	; 0x7c
 8012dbc:	2300      	movs	r3, #0
 8012dbe:	930e      	str	r3, [sp, #56]	; 0x38
 8012dc0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d1dc      	bne.n	8012d80 <_strtod_l+0x94>
 8012dc6:	0032      	movs	r2, r6
 8012dc8:	003b      	movs	r3, r7
 8012dca:	e7e3      	b.n	8012d94 <_strtod_l+0xa8>
 8012dcc:	2300      	movs	r3, #0
 8012dce:	e7ed      	b.n	8012dac <_strtod_l+0xc0>
 8012dd0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012dd2:	2a00      	cmp	r2, #0
 8012dd4:	d007      	beq.n	8012de6 <_strtod_l+0xfa>
 8012dd6:	2135      	movs	r1, #53	; 0x35
 8012dd8:	a822      	add	r0, sp, #136	; 0x88
 8012dda:	f002 feec 	bl	8015bb6 <__copybits>
 8012dde:	9920      	ldr	r1, [sp, #128]	; 0x80
 8012de0:	9805      	ldr	r0, [sp, #20]
 8012de2:	f002 faa7 	bl	8015334 <_Bfree>
 8012de6:	1e68      	subs	r0, r5, #1
 8012de8:	2804      	cmp	r0, #4
 8012dea:	d806      	bhi.n	8012dfa <_strtod_l+0x10e>
 8012dec:	f7ed f994 	bl	8000118 <__gnu_thumb1_case_uqi>
 8012df0:	1816030b 	.word	0x1816030b
 8012df4:	0b          	.byte	0x0b
 8012df5:	00          	.byte	0x00
 8012df6:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8012df8:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8012dfa:	0723      	lsls	r3, r4, #28
 8012dfc:	d5bd      	bpl.n	8012d7a <_strtod_l+0x8e>
 8012dfe:	2380      	movs	r3, #128	; 0x80
 8012e00:	061b      	lsls	r3, r3, #24
 8012e02:	431f      	orrs	r7, r3
 8012e04:	e7b9      	b.n	8012d7a <_strtod_l+0x8e>
 8012e06:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012e08:	4a69      	ldr	r2, [pc, #420]	; (8012fb0 <_strtod_l+0x2c4>)
 8012e0a:	496a      	ldr	r1, [pc, #424]	; (8012fb4 <_strtod_l+0x2c8>)
 8012e0c:	401a      	ands	r2, r3
 8012e0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012e10:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8012e12:	185b      	adds	r3, r3, r1
 8012e14:	051b      	lsls	r3, r3, #20
 8012e16:	431a      	orrs	r2, r3
 8012e18:	0017      	movs	r7, r2
 8012e1a:	e7ee      	b.n	8012dfa <_strtod_l+0x10e>
 8012e1c:	4f66      	ldr	r7, [pc, #408]	; (8012fb8 <_strtod_l+0x2cc>)
 8012e1e:	e7ec      	b.n	8012dfa <_strtod_l+0x10e>
 8012e20:	2601      	movs	r6, #1
 8012e22:	4f66      	ldr	r7, [pc, #408]	; (8012fbc <_strtod_l+0x2d0>)
 8012e24:	4276      	negs	r6, r6
 8012e26:	e7e8      	b.n	8012dfa <_strtod_l+0x10e>
 8012e28:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012e2a:	1c5a      	adds	r2, r3, #1
 8012e2c:	921f      	str	r2, [sp, #124]	; 0x7c
 8012e2e:	785b      	ldrb	r3, [r3, #1]
 8012e30:	2b30      	cmp	r3, #48	; 0x30
 8012e32:	d0f9      	beq.n	8012e28 <_strtod_l+0x13c>
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d0a0      	beq.n	8012d7a <_strtod_l+0x8e>
 8012e38:	2301      	movs	r3, #1
 8012e3a:	930a      	str	r3, [sp, #40]	; 0x28
 8012e3c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012e3e:	220a      	movs	r2, #10
 8012e40:	9310      	str	r3, [sp, #64]	; 0x40
 8012e42:	2300      	movs	r3, #0
 8012e44:	930f      	str	r3, [sp, #60]	; 0x3c
 8012e46:	930b      	str	r3, [sp, #44]	; 0x2c
 8012e48:	9309      	str	r3, [sp, #36]	; 0x24
 8012e4a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8012e4c:	7805      	ldrb	r5, [r0, #0]
 8012e4e:	002b      	movs	r3, r5
 8012e50:	3b30      	subs	r3, #48	; 0x30
 8012e52:	b2d9      	uxtb	r1, r3
 8012e54:	2909      	cmp	r1, #9
 8012e56:	d927      	bls.n	8012ea8 <_strtod_l+0x1bc>
 8012e58:	0022      	movs	r2, r4
 8012e5a:	9907      	ldr	r1, [sp, #28]
 8012e5c:	f7ff fef1 	bl	8012c42 <strncmp>
 8012e60:	2800      	cmp	r0, #0
 8012e62:	d033      	beq.n	8012ecc <_strtod_l+0x1e0>
 8012e64:	2000      	movs	r0, #0
 8012e66:	002b      	movs	r3, r5
 8012e68:	4684      	mov	ip, r0
 8012e6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012e6c:	900c      	str	r0, [sp, #48]	; 0x30
 8012e6e:	9206      	str	r2, [sp, #24]
 8012e70:	2220      	movs	r2, #32
 8012e72:	0019      	movs	r1, r3
 8012e74:	4391      	bics	r1, r2
 8012e76:	000a      	movs	r2, r1
 8012e78:	2100      	movs	r1, #0
 8012e7a:	9107      	str	r1, [sp, #28]
 8012e7c:	2a45      	cmp	r2, #69	; 0x45
 8012e7e:	d000      	beq.n	8012e82 <_strtod_l+0x196>
 8012e80:	e0c5      	b.n	801300e <_strtod_l+0x322>
 8012e82:	9b06      	ldr	r3, [sp, #24]
 8012e84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012e86:	4303      	orrs	r3, r0
 8012e88:	4313      	orrs	r3, r2
 8012e8a:	428b      	cmp	r3, r1
 8012e8c:	d094      	beq.n	8012db8 <_strtod_l+0xcc>
 8012e8e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012e90:	9308      	str	r3, [sp, #32]
 8012e92:	3301      	adds	r3, #1
 8012e94:	931f      	str	r3, [sp, #124]	; 0x7c
 8012e96:	9b08      	ldr	r3, [sp, #32]
 8012e98:	785b      	ldrb	r3, [r3, #1]
 8012e9a:	2b2b      	cmp	r3, #43	; 0x2b
 8012e9c:	d076      	beq.n	8012f8c <_strtod_l+0x2a0>
 8012e9e:	000c      	movs	r4, r1
 8012ea0:	2b2d      	cmp	r3, #45	; 0x2d
 8012ea2:	d179      	bne.n	8012f98 <_strtod_l+0x2ac>
 8012ea4:	2401      	movs	r4, #1
 8012ea6:	e072      	b.n	8012f8e <_strtod_l+0x2a2>
 8012ea8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012eaa:	2908      	cmp	r1, #8
 8012eac:	dc09      	bgt.n	8012ec2 <_strtod_l+0x1d6>
 8012eae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012eb0:	4351      	muls	r1, r2
 8012eb2:	185b      	adds	r3, r3, r1
 8012eb4:	930b      	str	r3, [sp, #44]	; 0x2c
 8012eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012eb8:	3001      	adds	r0, #1
 8012eba:	3301      	adds	r3, #1
 8012ebc:	9309      	str	r3, [sp, #36]	; 0x24
 8012ebe:	901f      	str	r0, [sp, #124]	; 0x7c
 8012ec0:	e7c3      	b.n	8012e4a <_strtod_l+0x15e>
 8012ec2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012ec4:	4351      	muls	r1, r2
 8012ec6:	185b      	adds	r3, r3, r1
 8012ec8:	930f      	str	r3, [sp, #60]	; 0x3c
 8012eca:	e7f4      	b.n	8012eb6 <_strtod_l+0x1ca>
 8012ecc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012ece:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012ed0:	191c      	adds	r4, r3, r4
 8012ed2:	941f      	str	r4, [sp, #124]	; 0x7c
 8012ed4:	7823      	ldrb	r3, [r4, #0]
 8012ed6:	2a00      	cmp	r2, #0
 8012ed8:	d039      	beq.n	8012f4e <_strtod_l+0x262>
 8012eda:	900c      	str	r0, [sp, #48]	; 0x30
 8012edc:	9206      	str	r2, [sp, #24]
 8012ede:	001a      	movs	r2, r3
 8012ee0:	3a30      	subs	r2, #48	; 0x30
 8012ee2:	2a09      	cmp	r2, #9
 8012ee4:	d912      	bls.n	8012f0c <_strtod_l+0x220>
 8012ee6:	2201      	movs	r2, #1
 8012ee8:	4694      	mov	ip, r2
 8012eea:	e7c1      	b.n	8012e70 <_strtod_l+0x184>
 8012eec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012eee:	3001      	adds	r0, #1
 8012ef0:	1c5a      	adds	r2, r3, #1
 8012ef2:	921f      	str	r2, [sp, #124]	; 0x7c
 8012ef4:	785b      	ldrb	r3, [r3, #1]
 8012ef6:	2b30      	cmp	r3, #48	; 0x30
 8012ef8:	d0f8      	beq.n	8012eec <_strtod_l+0x200>
 8012efa:	001a      	movs	r2, r3
 8012efc:	3a31      	subs	r2, #49	; 0x31
 8012efe:	2a08      	cmp	r2, #8
 8012f00:	d83f      	bhi.n	8012f82 <_strtod_l+0x296>
 8012f02:	900c      	str	r0, [sp, #48]	; 0x30
 8012f04:	2000      	movs	r0, #0
 8012f06:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8012f08:	9006      	str	r0, [sp, #24]
 8012f0a:	9210      	str	r2, [sp, #64]	; 0x40
 8012f0c:	001a      	movs	r2, r3
 8012f0e:	1c41      	adds	r1, r0, #1
 8012f10:	3a30      	subs	r2, #48	; 0x30
 8012f12:	2b30      	cmp	r3, #48	; 0x30
 8012f14:	d015      	beq.n	8012f42 <_strtod_l+0x256>
 8012f16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012f18:	185b      	adds	r3, r3, r1
 8012f1a:	210a      	movs	r1, #10
 8012f1c:	930c      	str	r3, [sp, #48]	; 0x30
 8012f1e:	9b06      	ldr	r3, [sp, #24]
 8012f20:	18c4      	adds	r4, r0, r3
 8012f22:	42a3      	cmp	r3, r4
 8012f24:	d115      	bne.n	8012f52 <_strtod_l+0x266>
 8012f26:	9906      	ldr	r1, [sp, #24]
 8012f28:	9b06      	ldr	r3, [sp, #24]
 8012f2a:	3101      	adds	r1, #1
 8012f2c:	1809      	adds	r1, r1, r0
 8012f2e:	181b      	adds	r3, r3, r0
 8012f30:	9106      	str	r1, [sp, #24]
 8012f32:	2b08      	cmp	r3, #8
 8012f34:	dc1b      	bgt.n	8012f6e <_strtod_l+0x282>
 8012f36:	230a      	movs	r3, #10
 8012f38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012f3a:	434b      	muls	r3, r1
 8012f3c:	2100      	movs	r1, #0
 8012f3e:	18d3      	adds	r3, r2, r3
 8012f40:	930b      	str	r3, [sp, #44]	; 0x2c
 8012f42:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012f44:	0008      	movs	r0, r1
 8012f46:	1c5a      	adds	r2, r3, #1
 8012f48:	921f      	str	r2, [sp, #124]	; 0x7c
 8012f4a:	785b      	ldrb	r3, [r3, #1]
 8012f4c:	e7c7      	b.n	8012ede <_strtod_l+0x1f2>
 8012f4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012f50:	e7d1      	b.n	8012ef6 <_strtod_l+0x20a>
 8012f52:	2b08      	cmp	r3, #8
 8012f54:	dc04      	bgt.n	8012f60 <_strtod_l+0x274>
 8012f56:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8012f58:	434d      	muls	r5, r1
 8012f5a:	950b      	str	r5, [sp, #44]	; 0x2c
 8012f5c:	3301      	adds	r3, #1
 8012f5e:	e7e0      	b.n	8012f22 <_strtod_l+0x236>
 8012f60:	1c5d      	adds	r5, r3, #1
 8012f62:	2d10      	cmp	r5, #16
 8012f64:	dcfa      	bgt.n	8012f5c <_strtod_l+0x270>
 8012f66:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8012f68:	434d      	muls	r5, r1
 8012f6a:	950f      	str	r5, [sp, #60]	; 0x3c
 8012f6c:	e7f6      	b.n	8012f5c <_strtod_l+0x270>
 8012f6e:	9b06      	ldr	r3, [sp, #24]
 8012f70:	2100      	movs	r1, #0
 8012f72:	2b10      	cmp	r3, #16
 8012f74:	dce5      	bgt.n	8012f42 <_strtod_l+0x256>
 8012f76:	230a      	movs	r3, #10
 8012f78:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8012f7a:	4343      	muls	r3, r0
 8012f7c:	18d3      	adds	r3, r2, r3
 8012f7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8012f80:	e7df      	b.n	8012f42 <_strtod_l+0x256>
 8012f82:	2200      	movs	r2, #0
 8012f84:	920c      	str	r2, [sp, #48]	; 0x30
 8012f86:	9206      	str	r2, [sp, #24]
 8012f88:	3201      	adds	r2, #1
 8012f8a:	e7ad      	b.n	8012ee8 <_strtod_l+0x1fc>
 8012f8c:	2400      	movs	r4, #0
 8012f8e:	9b08      	ldr	r3, [sp, #32]
 8012f90:	3302      	adds	r3, #2
 8012f92:	931f      	str	r3, [sp, #124]	; 0x7c
 8012f94:	9b08      	ldr	r3, [sp, #32]
 8012f96:	789b      	ldrb	r3, [r3, #2]
 8012f98:	001a      	movs	r2, r3
 8012f9a:	3a30      	subs	r2, #48	; 0x30
 8012f9c:	2a09      	cmp	r2, #9
 8012f9e:	d913      	bls.n	8012fc8 <_strtod_l+0x2dc>
 8012fa0:	9a08      	ldr	r2, [sp, #32]
 8012fa2:	921f      	str	r2, [sp, #124]	; 0x7c
 8012fa4:	2200      	movs	r2, #0
 8012fa6:	e031      	b.n	801300c <_strtod_l+0x320>
 8012fa8:	080174fc 	.word	0x080174fc
 8012fac:	080171f8 	.word	0x080171f8
 8012fb0:	ffefffff 	.word	0xffefffff
 8012fb4:	00000433 	.word	0x00000433
 8012fb8:	7ff00000 	.word	0x7ff00000
 8012fbc:	7fffffff 	.word	0x7fffffff
 8012fc0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012fc2:	1c5a      	adds	r2, r3, #1
 8012fc4:	921f      	str	r2, [sp, #124]	; 0x7c
 8012fc6:	785b      	ldrb	r3, [r3, #1]
 8012fc8:	2b30      	cmp	r3, #48	; 0x30
 8012fca:	d0f9      	beq.n	8012fc0 <_strtod_l+0x2d4>
 8012fcc:	2200      	movs	r2, #0
 8012fce:	9207      	str	r2, [sp, #28]
 8012fd0:	001a      	movs	r2, r3
 8012fd2:	3a31      	subs	r2, #49	; 0x31
 8012fd4:	2a08      	cmp	r2, #8
 8012fd6:	d81a      	bhi.n	801300e <_strtod_l+0x322>
 8012fd8:	3b30      	subs	r3, #48	; 0x30
 8012fda:	001a      	movs	r2, r3
 8012fdc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012fde:	9307      	str	r3, [sp, #28]
 8012fe0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012fe2:	1c59      	adds	r1, r3, #1
 8012fe4:	911f      	str	r1, [sp, #124]	; 0x7c
 8012fe6:	785b      	ldrb	r3, [r3, #1]
 8012fe8:	001d      	movs	r5, r3
 8012fea:	3d30      	subs	r5, #48	; 0x30
 8012fec:	2d09      	cmp	r5, #9
 8012fee:	d939      	bls.n	8013064 <_strtod_l+0x378>
 8012ff0:	9d07      	ldr	r5, [sp, #28]
 8012ff2:	1b49      	subs	r1, r1, r5
 8012ff4:	4db0      	ldr	r5, [pc, #704]	; (80132b8 <_strtod_l+0x5cc>)
 8012ff6:	9507      	str	r5, [sp, #28]
 8012ff8:	2908      	cmp	r1, #8
 8012ffa:	dc03      	bgt.n	8013004 <_strtod_l+0x318>
 8012ffc:	9207      	str	r2, [sp, #28]
 8012ffe:	42aa      	cmp	r2, r5
 8013000:	dd00      	ble.n	8013004 <_strtod_l+0x318>
 8013002:	9507      	str	r5, [sp, #28]
 8013004:	2c00      	cmp	r4, #0
 8013006:	d002      	beq.n	801300e <_strtod_l+0x322>
 8013008:	9a07      	ldr	r2, [sp, #28]
 801300a:	4252      	negs	r2, r2
 801300c:	9207      	str	r2, [sp, #28]
 801300e:	9a06      	ldr	r2, [sp, #24]
 8013010:	2a00      	cmp	r2, #0
 8013012:	d14b      	bne.n	80130ac <_strtod_l+0x3c0>
 8013014:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013016:	4310      	orrs	r0, r2
 8013018:	d000      	beq.n	801301c <_strtod_l+0x330>
 801301a:	e6ae      	b.n	8012d7a <_strtod_l+0x8e>
 801301c:	4662      	mov	r2, ip
 801301e:	2a00      	cmp	r2, #0
 8013020:	d000      	beq.n	8013024 <_strtod_l+0x338>
 8013022:	e6c9      	b.n	8012db8 <_strtod_l+0xcc>
 8013024:	2b69      	cmp	r3, #105	; 0x69
 8013026:	d025      	beq.n	8013074 <_strtod_l+0x388>
 8013028:	dc21      	bgt.n	801306e <_strtod_l+0x382>
 801302a:	2b49      	cmp	r3, #73	; 0x49
 801302c:	d022      	beq.n	8013074 <_strtod_l+0x388>
 801302e:	2b4e      	cmp	r3, #78	; 0x4e
 8013030:	d000      	beq.n	8013034 <_strtod_l+0x348>
 8013032:	e6c1      	b.n	8012db8 <_strtod_l+0xcc>
 8013034:	49a1      	ldr	r1, [pc, #644]	; (80132bc <_strtod_l+0x5d0>)
 8013036:	a81f      	add	r0, sp, #124	; 0x7c
 8013038:	f002 f82c 	bl	8015094 <__match>
 801303c:	2800      	cmp	r0, #0
 801303e:	d100      	bne.n	8013042 <_strtod_l+0x356>
 8013040:	e6ba      	b.n	8012db8 <_strtod_l+0xcc>
 8013042:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013044:	781b      	ldrb	r3, [r3, #0]
 8013046:	2b28      	cmp	r3, #40	; 0x28
 8013048:	d12a      	bne.n	80130a0 <_strtod_l+0x3b4>
 801304a:	499d      	ldr	r1, [pc, #628]	; (80132c0 <_strtod_l+0x5d4>)
 801304c:	aa22      	add	r2, sp, #136	; 0x88
 801304e:	a81f      	add	r0, sp, #124	; 0x7c
 8013050:	f002 f834 	bl	80150bc <__hexnan>
 8013054:	2805      	cmp	r0, #5
 8013056:	d123      	bne.n	80130a0 <_strtod_l+0x3b4>
 8013058:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801305a:	4a9a      	ldr	r2, [pc, #616]	; (80132c4 <_strtod_l+0x5d8>)
 801305c:	9e22      	ldr	r6, [sp, #136]	; 0x88
 801305e:	431a      	orrs	r2, r3
 8013060:	0017      	movs	r7, r2
 8013062:	e68a      	b.n	8012d7a <_strtod_l+0x8e>
 8013064:	210a      	movs	r1, #10
 8013066:	434a      	muls	r2, r1
 8013068:	18d2      	adds	r2, r2, r3
 801306a:	3a30      	subs	r2, #48	; 0x30
 801306c:	e7b8      	b.n	8012fe0 <_strtod_l+0x2f4>
 801306e:	2b6e      	cmp	r3, #110	; 0x6e
 8013070:	d0e0      	beq.n	8013034 <_strtod_l+0x348>
 8013072:	e6a1      	b.n	8012db8 <_strtod_l+0xcc>
 8013074:	4994      	ldr	r1, [pc, #592]	; (80132c8 <_strtod_l+0x5dc>)
 8013076:	a81f      	add	r0, sp, #124	; 0x7c
 8013078:	f002 f80c 	bl	8015094 <__match>
 801307c:	2800      	cmp	r0, #0
 801307e:	d100      	bne.n	8013082 <_strtod_l+0x396>
 8013080:	e69a      	b.n	8012db8 <_strtod_l+0xcc>
 8013082:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013084:	4991      	ldr	r1, [pc, #580]	; (80132cc <_strtod_l+0x5e0>)
 8013086:	3b01      	subs	r3, #1
 8013088:	a81f      	add	r0, sp, #124	; 0x7c
 801308a:	931f      	str	r3, [sp, #124]	; 0x7c
 801308c:	f002 f802 	bl	8015094 <__match>
 8013090:	2800      	cmp	r0, #0
 8013092:	d102      	bne.n	801309a <_strtod_l+0x3ae>
 8013094:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013096:	3301      	adds	r3, #1
 8013098:	931f      	str	r3, [sp, #124]	; 0x7c
 801309a:	2600      	movs	r6, #0
 801309c:	4f89      	ldr	r7, [pc, #548]	; (80132c4 <_strtod_l+0x5d8>)
 801309e:	e66c      	b.n	8012d7a <_strtod_l+0x8e>
 80130a0:	488b      	ldr	r0, [pc, #556]	; (80132d0 <_strtod_l+0x5e4>)
 80130a2:	f003 f91b 	bl	80162dc <nan>
 80130a6:	0006      	movs	r6, r0
 80130a8:	000f      	movs	r7, r1
 80130aa:	e666      	b.n	8012d7a <_strtod_l+0x8e>
 80130ac:	9b07      	ldr	r3, [sp, #28]
 80130ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80130b0:	1a9b      	subs	r3, r3, r2
 80130b2:	930a      	str	r3, [sp, #40]	; 0x28
 80130b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d101      	bne.n	80130be <_strtod_l+0x3d2>
 80130ba:	9b06      	ldr	r3, [sp, #24]
 80130bc:	9309      	str	r3, [sp, #36]	; 0x24
 80130be:	9c06      	ldr	r4, [sp, #24]
 80130c0:	2c10      	cmp	r4, #16
 80130c2:	dd00      	ble.n	80130c6 <_strtod_l+0x3da>
 80130c4:	2410      	movs	r4, #16
 80130c6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80130c8:	f7ef f998 	bl	80023fc <__aeabi_ui2d>
 80130cc:	9b06      	ldr	r3, [sp, #24]
 80130ce:	0006      	movs	r6, r0
 80130d0:	000f      	movs	r7, r1
 80130d2:	2b09      	cmp	r3, #9
 80130d4:	dd15      	ble.n	8013102 <_strtod_l+0x416>
 80130d6:	0022      	movs	r2, r4
 80130d8:	4b7e      	ldr	r3, [pc, #504]	; (80132d4 <_strtod_l+0x5e8>)
 80130da:	3a09      	subs	r2, #9
 80130dc:	00d2      	lsls	r2, r2, #3
 80130de:	189b      	adds	r3, r3, r2
 80130e0:	681a      	ldr	r2, [r3, #0]
 80130e2:	685b      	ldr	r3, [r3, #4]
 80130e4:	f7ee fb08 	bl	80016f8 <__aeabi_dmul>
 80130e8:	0006      	movs	r6, r0
 80130ea:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80130ec:	000f      	movs	r7, r1
 80130ee:	f7ef f985 	bl	80023fc <__aeabi_ui2d>
 80130f2:	0002      	movs	r2, r0
 80130f4:	000b      	movs	r3, r1
 80130f6:	0030      	movs	r0, r6
 80130f8:	0039      	movs	r1, r7
 80130fa:	f7ed fbbf 	bl	800087c <__aeabi_dadd>
 80130fe:	0006      	movs	r6, r0
 8013100:	000f      	movs	r7, r1
 8013102:	9b06      	ldr	r3, [sp, #24]
 8013104:	2b0f      	cmp	r3, #15
 8013106:	dc39      	bgt.n	801317c <_strtod_l+0x490>
 8013108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801310a:	2b00      	cmp	r3, #0
 801310c:	d100      	bne.n	8013110 <_strtod_l+0x424>
 801310e:	e634      	b.n	8012d7a <_strtod_l+0x8e>
 8013110:	dd24      	ble.n	801315c <_strtod_l+0x470>
 8013112:	2b16      	cmp	r3, #22
 8013114:	dc09      	bgt.n	801312a <_strtod_l+0x43e>
 8013116:	496f      	ldr	r1, [pc, #444]	; (80132d4 <_strtod_l+0x5e8>)
 8013118:	00db      	lsls	r3, r3, #3
 801311a:	18c9      	adds	r1, r1, r3
 801311c:	0032      	movs	r2, r6
 801311e:	6808      	ldr	r0, [r1, #0]
 8013120:	6849      	ldr	r1, [r1, #4]
 8013122:	003b      	movs	r3, r7
 8013124:	f7ee fae8 	bl	80016f8 <__aeabi_dmul>
 8013128:	e7bd      	b.n	80130a6 <_strtod_l+0x3ba>
 801312a:	2325      	movs	r3, #37	; 0x25
 801312c:	9a06      	ldr	r2, [sp, #24]
 801312e:	1a9b      	subs	r3, r3, r2
 8013130:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013132:	4293      	cmp	r3, r2
 8013134:	db22      	blt.n	801317c <_strtod_l+0x490>
 8013136:	240f      	movs	r4, #15
 8013138:	9b06      	ldr	r3, [sp, #24]
 801313a:	4d66      	ldr	r5, [pc, #408]	; (80132d4 <_strtod_l+0x5e8>)
 801313c:	1ae4      	subs	r4, r4, r3
 801313e:	00e1      	lsls	r1, r4, #3
 8013140:	1869      	adds	r1, r5, r1
 8013142:	0032      	movs	r2, r6
 8013144:	6808      	ldr	r0, [r1, #0]
 8013146:	6849      	ldr	r1, [r1, #4]
 8013148:	003b      	movs	r3, r7
 801314a:	f7ee fad5 	bl	80016f8 <__aeabi_dmul>
 801314e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013150:	1b1c      	subs	r4, r3, r4
 8013152:	00e4      	lsls	r4, r4, #3
 8013154:	192c      	adds	r4, r5, r4
 8013156:	6822      	ldr	r2, [r4, #0]
 8013158:	6863      	ldr	r3, [r4, #4]
 801315a:	e7e3      	b.n	8013124 <_strtod_l+0x438>
 801315c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801315e:	3316      	adds	r3, #22
 8013160:	db0c      	blt.n	801317c <_strtod_l+0x490>
 8013162:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013164:	9a07      	ldr	r2, [sp, #28]
 8013166:	0030      	movs	r0, r6
 8013168:	1a9a      	subs	r2, r3, r2
 801316a:	4b5a      	ldr	r3, [pc, #360]	; (80132d4 <_strtod_l+0x5e8>)
 801316c:	00d2      	lsls	r2, r2, #3
 801316e:	189b      	adds	r3, r3, r2
 8013170:	0039      	movs	r1, r7
 8013172:	681a      	ldr	r2, [r3, #0]
 8013174:	685b      	ldr	r3, [r3, #4]
 8013176:	f7ed febd 	bl	8000ef4 <__aeabi_ddiv>
 801317a:	e794      	b.n	80130a6 <_strtod_l+0x3ba>
 801317c:	9b06      	ldr	r3, [sp, #24]
 801317e:	1b1c      	subs	r4, r3, r4
 8013180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013182:	18e4      	adds	r4, r4, r3
 8013184:	2c00      	cmp	r4, #0
 8013186:	dd72      	ble.n	801326e <_strtod_l+0x582>
 8013188:	230f      	movs	r3, #15
 801318a:	0021      	movs	r1, r4
 801318c:	4019      	ands	r1, r3
 801318e:	421c      	tst	r4, r3
 8013190:	d00a      	beq.n	80131a8 <_strtod_l+0x4bc>
 8013192:	00cb      	lsls	r3, r1, #3
 8013194:	494f      	ldr	r1, [pc, #316]	; (80132d4 <_strtod_l+0x5e8>)
 8013196:	0032      	movs	r2, r6
 8013198:	18c9      	adds	r1, r1, r3
 801319a:	6808      	ldr	r0, [r1, #0]
 801319c:	6849      	ldr	r1, [r1, #4]
 801319e:	003b      	movs	r3, r7
 80131a0:	f7ee faaa 	bl	80016f8 <__aeabi_dmul>
 80131a4:	0006      	movs	r6, r0
 80131a6:	000f      	movs	r7, r1
 80131a8:	230f      	movs	r3, #15
 80131aa:	439c      	bics	r4, r3
 80131ac:	d04a      	beq.n	8013244 <_strtod_l+0x558>
 80131ae:	3326      	adds	r3, #38	; 0x26
 80131b0:	33ff      	adds	r3, #255	; 0xff
 80131b2:	429c      	cmp	r4, r3
 80131b4:	dd22      	ble.n	80131fc <_strtod_l+0x510>
 80131b6:	2300      	movs	r3, #0
 80131b8:	9306      	str	r3, [sp, #24]
 80131ba:	9307      	str	r3, [sp, #28]
 80131bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80131be:	9309      	str	r3, [sp, #36]	; 0x24
 80131c0:	2322      	movs	r3, #34	; 0x22
 80131c2:	2600      	movs	r6, #0
 80131c4:	9a05      	ldr	r2, [sp, #20]
 80131c6:	4f3f      	ldr	r7, [pc, #252]	; (80132c4 <_strtod_l+0x5d8>)
 80131c8:	6013      	str	r3, [r2, #0]
 80131ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80131cc:	42b3      	cmp	r3, r6
 80131ce:	d100      	bne.n	80131d2 <_strtod_l+0x4e6>
 80131d0:	e5d3      	b.n	8012d7a <_strtod_l+0x8e>
 80131d2:	9920      	ldr	r1, [sp, #128]	; 0x80
 80131d4:	9805      	ldr	r0, [sp, #20]
 80131d6:	f002 f8ad 	bl	8015334 <_Bfree>
 80131da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80131dc:	9805      	ldr	r0, [sp, #20]
 80131de:	f002 f8a9 	bl	8015334 <_Bfree>
 80131e2:	9907      	ldr	r1, [sp, #28]
 80131e4:	9805      	ldr	r0, [sp, #20]
 80131e6:	f002 f8a5 	bl	8015334 <_Bfree>
 80131ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80131ec:	9805      	ldr	r0, [sp, #20]
 80131ee:	f002 f8a1 	bl	8015334 <_Bfree>
 80131f2:	9906      	ldr	r1, [sp, #24]
 80131f4:	9805      	ldr	r0, [sp, #20]
 80131f6:	f002 f89d 	bl	8015334 <_Bfree>
 80131fa:	e5be      	b.n	8012d7a <_strtod_l+0x8e>
 80131fc:	2300      	movs	r3, #0
 80131fe:	0030      	movs	r0, r6
 8013200:	0039      	movs	r1, r7
 8013202:	4d35      	ldr	r5, [pc, #212]	; (80132d8 <_strtod_l+0x5ec>)
 8013204:	1124      	asrs	r4, r4, #4
 8013206:	9308      	str	r3, [sp, #32]
 8013208:	2c01      	cmp	r4, #1
 801320a:	dc1e      	bgt.n	801324a <_strtod_l+0x55e>
 801320c:	2b00      	cmp	r3, #0
 801320e:	d001      	beq.n	8013214 <_strtod_l+0x528>
 8013210:	0006      	movs	r6, r0
 8013212:	000f      	movs	r7, r1
 8013214:	4b31      	ldr	r3, [pc, #196]	; (80132dc <_strtod_l+0x5f0>)
 8013216:	0032      	movs	r2, r6
 8013218:	18ff      	adds	r7, r7, r3
 801321a:	9b08      	ldr	r3, [sp, #32]
 801321c:	00dd      	lsls	r5, r3, #3
 801321e:	4b2e      	ldr	r3, [pc, #184]	; (80132d8 <_strtod_l+0x5ec>)
 8013220:	195d      	adds	r5, r3, r5
 8013222:	6828      	ldr	r0, [r5, #0]
 8013224:	6869      	ldr	r1, [r5, #4]
 8013226:	003b      	movs	r3, r7
 8013228:	f7ee fa66 	bl	80016f8 <__aeabi_dmul>
 801322c:	4b25      	ldr	r3, [pc, #148]	; (80132c4 <_strtod_l+0x5d8>)
 801322e:	4a2c      	ldr	r2, [pc, #176]	; (80132e0 <_strtod_l+0x5f4>)
 8013230:	0006      	movs	r6, r0
 8013232:	400b      	ands	r3, r1
 8013234:	4293      	cmp	r3, r2
 8013236:	d8be      	bhi.n	80131b6 <_strtod_l+0x4ca>
 8013238:	4a2a      	ldr	r2, [pc, #168]	; (80132e4 <_strtod_l+0x5f8>)
 801323a:	4293      	cmp	r3, r2
 801323c:	d913      	bls.n	8013266 <_strtod_l+0x57a>
 801323e:	2601      	movs	r6, #1
 8013240:	4f29      	ldr	r7, [pc, #164]	; (80132e8 <_strtod_l+0x5fc>)
 8013242:	4276      	negs	r6, r6
 8013244:	2300      	movs	r3, #0
 8013246:	9308      	str	r3, [sp, #32]
 8013248:	e087      	b.n	801335a <_strtod_l+0x66e>
 801324a:	2201      	movs	r2, #1
 801324c:	4214      	tst	r4, r2
 801324e:	d004      	beq.n	801325a <_strtod_l+0x56e>
 8013250:	682a      	ldr	r2, [r5, #0]
 8013252:	686b      	ldr	r3, [r5, #4]
 8013254:	f7ee fa50 	bl	80016f8 <__aeabi_dmul>
 8013258:	2301      	movs	r3, #1
 801325a:	9a08      	ldr	r2, [sp, #32]
 801325c:	1064      	asrs	r4, r4, #1
 801325e:	3201      	adds	r2, #1
 8013260:	9208      	str	r2, [sp, #32]
 8013262:	3508      	adds	r5, #8
 8013264:	e7d0      	b.n	8013208 <_strtod_l+0x51c>
 8013266:	23d4      	movs	r3, #212	; 0xd4
 8013268:	049b      	lsls	r3, r3, #18
 801326a:	18cf      	adds	r7, r1, r3
 801326c:	e7ea      	b.n	8013244 <_strtod_l+0x558>
 801326e:	2c00      	cmp	r4, #0
 8013270:	d0e8      	beq.n	8013244 <_strtod_l+0x558>
 8013272:	4264      	negs	r4, r4
 8013274:	220f      	movs	r2, #15
 8013276:	0023      	movs	r3, r4
 8013278:	4013      	ands	r3, r2
 801327a:	4214      	tst	r4, r2
 801327c:	d00a      	beq.n	8013294 <_strtod_l+0x5a8>
 801327e:	00da      	lsls	r2, r3, #3
 8013280:	4b14      	ldr	r3, [pc, #80]	; (80132d4 <_strtod_l+0x5e8>)
 8013282:	0030      	movs	r0, r6
 8013284:	189b      	adds	r3, r3, r2
 8013286:	0039      	movs	r1, r7
 8013288:	681a      	ldr	r2, [r3, #0]
 801328a:	685b      	ldr	r3, [r3, #4]
 801328c:	f7ed fe32 	bl	8000ef4 <__aeabi_ddiv>
 8013290:	0006      	movs	r6, r0
 8013292:	000f      	movs	r7, r1
 8013294:	1124      	asrs	r4, r4, #4
 8013296:	d0d5      	beq.n	8013244 <_strtod_l+0x558>
 8013298:	2c1f      	cmp	r4, #31
 801329a:	dd27      	ble.n	80132ec <_strtod_l+0x600>
 801329c:	2300      	movs	r3, #0
 801329e:	9306      	str	r3, [sp, #24]
 80132a0:	9307      	str	r3, [sp, #28]
 80132a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80132a4:	9309      	str	r3, [sp, #36]	; 0x24
 80132a6:	2322      	movs	r3, #34	; 0x22
 80132a8:	9a05      	ldr	r2, [sp, #20]
 80132aa:	2600      	movs	r6, #0
 80132ac:	6013      	str	r3, [r2, #0]
 80132ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80132b0:	2700      	movs	r7, #0
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d18d      	bne.n	80131d2 <_strtod_l+0x4e6>
 80132b6:	e560      	b.n	8012d7a <_strtod_l+0x8e>
 80132b8:	00004e1f 	.word	0x00004e1f
 80132bc:	080171d1 	.word	0x080171d1
 80132c0:	0801720c 	.word	0x0801720c
 80132c4:	7ff00000 	.word	0x7ff00000
 80132c8:	080171c9 	.word	0x080171c9
 80132cc:	08017421 	.word	0x08017421
 80132d0:	0801731c 	.word	0x0801731c
 80132d4:	08017598 	.word	0x08017598
 80132d8:	08017570 	.word	0x08017570
 80132dc:	fcb00000 	.word	0xfcb00000
 80132e0:	7ca00000 	.word	0x7ca00000
 80132e4:	7c900000 	.word	0x7c900000
 80132e8:	7fefffff 	.word	0x7fefffff
 80132ec:	2310      	movs	r3, #16
 80132ee:	0022      	movs	r2, r4
 80132f0:	401a      	ands	r2, r3
 80132f2:	9208      	str	r2, [sp, #32]
 80132f4:	421c      	tst	r4, r3
 80132f6:	d001      	beq.n	80132fc <_strtod_l+0x610>
 80132f8:	335a      	adds	r3, #90	; 0x5a
 80132fa:	9308      	str	r3, [sp, #32]
 80132fc:	0030      	movs	r0, r6
 80132fe:	0039      	movs	r1, r7
 8013300:	2300      	movs	r3, #0
 8013302:	4dc5      	ldr	r5, [pc, #788]	; (8013618 <_strtod_l+0x92c>)
 8013304:	2201      	movs	r2, #1
 8013306:	4214      	tst	r4, r2
 8013308:	d004      	beq.n	8013314 <_strtod_l+0x628>
 801330a:	682a      	ldr	r2, [r5, #0]
 801330c:	686b      	ldr	r3, [r5, #4]
 801330e:	f7ee f9f3 	bl	80016f8 <__aeabi_dmul>
 8013312:	2301      	movs	r3, #1
 8013314:	1064      	asrs	r4, r4, #1
 8013316:	3508      	adds	r5, #8
 8013318:	2c00      	cmp	r4, #0
 801331a:	d1f3      	bne.n	8013304 <_strtod_l+0x618>
 801331c:	2b00      	cmp	r3, #0
 801331e:	d001      	beq.n	8013324 <_strtod_l+0x638>
 8013320:	0006      	movs	r6, r0
 8013322:	000f      	movs	r7, r1
 8013324:	9b08      	ldr	r3, [sp, #32]
 8013326:	2b00      	cmp	r3, #0
 8013328:	d00f      	beq.n	801334a <_strtod_l+0x65e>
 801332a:	236b      	movs	r3, #107	; 0x6b
 801332c:	007a      	lsls	r2, r7, #1
 801332e:	0d52      	lsrs	r2, r2, #21
 8013330:	0039      	movs	r1, r7
 8013332:	1a9b      	subs	r3, r3, r2
 8013334:	2b00      	cmp	r3, #0
 8013336:	dd08      	ble.n	801334a <_strtod_l+0x65e>
 8013338:	2b1f      	cmp	r3, #31
 801333a:	dc00      	bgt.n	801333e <_strtod_l+0x652>
 801333c:	e124      	b.n	8013588 <_strtod_l+0x89c>
 801333e:	2600      	movs	r6, #0
 8013340:	2b34      	cmp	r3, #52	; 0x34
 8013342:	dc00      	bgt.n	8013346 <_strtod_l+0x65a>
 8013344:	e119      	b.n	801357a <_strtod_l+0x88e>
 8013346:	27dc      	movs	r7, #220	; 0xdc
 8013348:	04bf      	lsls	r7, r7, #18
 801334a:	2200      	movs	r2, #0
 801334c:	2300      	movs	r3, #0
 801334e:	0030      	movs	r0, r6
 8013350:	0039      	movs	r1, r7
 8013352:	f7ed f87b 	bl	800044c <__aeabi_dcmpeq>
 8013356:	2800      	cmp	r0, #0
 8013358:	d1a0      	bne.n	801329c <_strtod_l+0x5b0>
 801335a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801335c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801335e:	9300      	str	r3, [sp, #0]
 8013360:	9910      	ldr	r1, [sp, #64]	; 0x40
 8013362:	9b06      	ldr	r3, [sp, #24]
 8013364:	9805      	ldr	r0, [sp, #20]
 8013366:	f002 f84d 	bl	8015404 <__s2b>
 801336a:	900b      	str	r0, [sp, #44]	; 0x2c
 801336c:	2800      	cmp	r0, #0
 801336e:	d100      	bne.n	8013372 <_strtod_l+0x686>
 8013370:	e721      	b.n	80131b6 <_strtod_l+0x4ca>
 8013372:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013374:	9907      	ldr	r1, [sp, #28]
 8013376:	17da      	asrs	r2, r3, #31
 8013378:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801337a:	1a5b      	subs	r3, r3, r1
 801337c:	401a      	ands	r2, r3
 801337e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013380:	9215      	str	r2, [sp, #84]	; 0x54
 8013382:	43db      	mvns	r3, r3
 8013384:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013386:	17db      	asrs	r3, r3, #31
 8013388:	401a      	ands	r2, r3
 801338a:	2300      	movs	r3, #0
 801338c:	921a      	str	r2, [sp, #104]	; 0x68
 801338e:	9306      	str	r3, [sp, #24]
 8013390:	9307      	str	r3, [sp, #28]
 8013392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013394:	9805      	ldr	r0, [sp, #20]
 8013396:	6859      	ldr	r1, [r3, #4]
 8013398:	f001 ff88 	bl	80152ac <_Balloc>
 801339c:	9009      	str	r0, [sp, #36]	; 0x24
 801339e:	2800      	cmp	r0, #0
 80133a0:	d100      	bne.n	80133a4 <_strtod_l+0x6b8>
 80133a2:	e70d      	b.n	80131c0 <_strtod_l+0x4d4>
 80133a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80133a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80133a8:	691b      	ldr	r3, [r3, #16]
 80133aa:	310c      	adds	r1, #12
 80133ac:	1c9a      	adds	r2, r3, #2
 80133ae:	0092      	lsls	r2, r2, #2
 80133b0:	300c      	adds	r0, #12
 80133b2:	930c      	str	r3, [sp, #48]	; 0x30
 80133b4:	f7fe fe19 	bl	8011fea <memcpy>
 80133b8:	ab22      	add	r3, sp, #136	; 0x88
 80133ba:	9301      	str	r3, [sp, #4]
 80133bc:	ab21      	add	r3, sp, #132	; 0x84
 80133be:	9300      	str	r3, [sp, #0]
 80133c0:	0032      	movs	r2, r6
 80133c2:	003b      	movs	r3, r7
 80133c4:	9805      	ldr	r0, [sp, #20]
 80133c6:	9612      	str	r6, [sp, #72]	; 0x48
 80133c8:	9713      	str	r7, [sp, #76]	; 0x4c
 80133ca:	f002 fb67 	bl	8015a9c <__d2b>
 80133ce:	9020      	str	r0, [sp, #128]	; 0x80
 80133d0:	2800      	cmp	r0, #0
 80133d2:	d100      	bne.n	80133d6 <_strtod_l+0x6ea>
 80133d4:	e6f4      	b.n	80131c0 <_strtod_l+0x4d4>
 80133d6:	2101      	movs	r1, #1
 80133d8:	9805      	ldr	r0, [sp, #20]
 80133da:	f002 f8a7 	bl	801552c <__i2b>
 80133de:	9007      	str	r0, [sp, #28]
 80133e0:	2800      	cmp	r0, #0
 80133e2:	d100      	bne.n	80133e6 <_strtod_l+0x6fa>
 80133e4:	e6ec      	b.n	80131c0 <_strtod_l+0x4d4>
 80133e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80133e8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80133ea:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80133ec:	1ad4      	subs	r4, r2, r3
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	db01      	blt.n	80133f6 <_strtod_l+0x70a>
 80133f2:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80133f4:	195d      	adds	r5, r3, r5
 80133f6:	9908      	ldr	r1, [sp, #32]
 80133f8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80133fa:	1a5b      	subs	r3, r3, r1
 80133fc:	2136      	movs	r1, #54	; 0x36
 80133fe:	189b      	adds	r3, r3, r2
 8013400:	1a8a      	subs	r2, r1, r2
 8013402:	4986      	ldr	r1, [pc, #536]	; (801361c <_strtod_l+0x930>)
 8013404:	2001      	movs	r0, #1
 8013406:	468c      	mov	ip, r1
 8013408:	2100      	movs	r1, #0
 801340a:	3b01      	subs	r3, #1
 801340c:	9110      	str	r1, [sp, #64]	; 0x40
 801340e:	9014      	str	r0, [sp, #80]	; 0x50
 8013410:	4563      	cmp	r3, ip
 8013412:	da07      	bge.n	8013424 <_strtod_l+0x738>
 8013414:	4661      	mov	r1, ip
 8013416:	1ac9      	subs	r1, r1, r3
 8013418:	1a52      	subs	r2, r2, r1
 801341a:	291f      	cmp	r1, #31
 801341c:	dd00      	ble.n	8013420 <_strtod_l+0x734>
 801341e:	e0b8      	b.n	8013592 <_strtod_l+0x8a6>
 8013420:	4088      	lsls	r0, r1
 8013422:	9014      	str	r0, [sp, #80]	; 0x50
 8013424:	18ab      	adds	r3, r5, r2
 8013426:	930c      	str	r3, [sp, #48]	; 0x30
 8013428:	18a4      	adds	r4, r4, r2
 801342a:	9b08      	ldr	r3, [sp, #32]
 801342c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801342e:	191c      	adds	r4, r3, r4
 8013430:	002b      	movs	r3, r5
 8013432:	4295      	cmp	r5, r2
 8013434:	dd00      	ble.n	8013438 <_strtod_l+0x74c>
 8013436:	0013      	movs	r3, r2
 8013438:	42a3      	cmp	r3, r4
 801343a:	dd00      	ble.n	801343e <_strtod_l+0x752>
 801343c:	0023      	movs	r3, r4
 801343e:	2b00      	cmp	r3, #0
 8013440:	dd04      	ble.n	801344c <_strtod_l+0x760>
 8013442:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013444:	1ae4      	subs	r4, r4, r3
 8013446:	1ad2      	subs	r2, r2, r3
 8013448:	920c      	str	r2, [sp, #48]	; 0x30
 801344a:	1aed      	subs	r5, r5, r3
 801344c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801344e:	2b00      	cmp	r3, #0
 8013450:	dd17      	ble.n	8013482 <_strtod_l+0x796>
 8013452:	001a      	movs	r2, r3
 8013454:	9907      	ldr	r1, [sp, #28]
 8013456:	9805      	ldr	r0, [sp, #20]
 8013458:	f002 f92e 	bl	80156b8 <__pow5mult>
 801345c:	9007      	str	r0, [sp, #28]
 801345e:	2800      	cmp	r0, #0
 8013460:	d100      	bne.n	8013464 <_strtod_l+0x778>
 8013462:	e6ad      	b.n	80131c0 <_strtod_l+0x4d4>
 8013464:	0001      	movs	r1, r0
 8013466:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013468:	9805      	ldr	r0, [sp, #20]
 801346a:	f002 f875 	bl	8015558 <__multiply>
 801346e:	900f      	str	r0, [sp, #60]	; 0x3c
 8013470:	2800      	cmp	r0, #0
 8013472:	d100      	bne.n	8013476 <_strtod_l+0x78a>
 8013474:	e6a4      	b.n	80131c0 <_strtod_l+0x4d4>
 8013476:	9920      	ldr	r1, [sp, #128]	; 0x80
 8013478:	9805      	ldr	r0, [sp, #20]
 801347a:	f001 ff5b 	bl	8015334 <_Bfree>
 801347e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013480:	9320      	str	r3, [sp, #128]	; 0x80
 8013482:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013484:	2b00      	cmp	r3, #0
 8013486:	dd00      	ble.n	801348a <_strtod_l+0x79e>
 8013488:	e089      	b.n	801359e <_strtod_l+0x8b2>
 801348a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801348c:	2b00      	cmp	r3, #0
 801348e:	dd08      	ble.n	80134a2 <_strtod_l+0x7b6>
 8013490:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013492:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013494:	9805      	ldr	r0, [sp, #20]
 8013496:	f002 f90f 	bl	80156b8 <__pow5mult>
 801349a:	9009      	str	r0, [sp, #36]	; 0x24
 801349c:	2800      	cmp	r0, #0
 801349e:	d100      	bne.n	80134a2 <_strtod_l+0x7b6>
 80134a0:	e68e      	b.n	80131c0 <_strtod_l+0x4d4>
 80134a2:	2c00      	cmp	r4, #0
 80134a4:	dd08      	ble.n	80134b8 <_strtod_l+0x7cc>
 80134a6:	0022      	movs	r2, r4
 80134a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80134aa:	9805      	ldr	r0, [sp, #20]
 80134ac:	f002 f960 	bl	8015770 <__lshift>
 80134b0:	9009      	str	r0, [sp, #36]	; 0x24
 80134b2:	2800      	cmp	r0, #0
 80134b4:	d100      	bne.n	80134b8 <_strtod_l+0x7cc>
 80134b6:	e683      	b.n	80131c0 <_strtod_l+0x4d4>
 80134b8:	2d00      	cmp	r5, #0
 80134ba:	dd08      	ble.n	80134ce <_strtod_l+0x7e2>
 80134bc:	002a      	movs	r2, r5
 80134be:	9907      	ldr	r1, [sp, #28]
 80134c0:	9805      	ldr	r0, [sp, #20]
 80134c2:	f002 f955 	bl	8015770 <__lshift>
 80134c6:	9007      	str	r0, [sp, #28]
 80134c8:	2800      	cmp	r0, #0
 80134ca:	d100      	bne.n	80134ce <_strtod_l+0x7e2>
 80134cc:	e678      	b.n	80131c0 <_strtod_l+0x4d4>
 80134ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80134d0:	9920      	ldr	r1, [sp, #128]	; 0x80
 80134d2:	9805      	ldr	r0, [sp, #20]
 80134d4:	f002 f9d6 	bl	8015884 <__mdiff>
 80134d8:	9006      	str	r0, [sp, #24]
 80134da:	2800      	cmp	r0, #0
 80134dc:	d100      	bne.n	80134e0 <_strtod_l+0x7f4>
 80134de:	e66f      	b.n	80131c0 <_strtod_l+0x4d4>
 80134e0:	2200      	movs	r2, #0
 80134e2:	68c3      	ldr	r3, [r0, #12]
 80134e4:	9907      	ldr	r1, [sp, #28]
 80134e6:	60c2      	str	r2, [r0, #12]
 80134e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80134ea:	f002 f9af 	bl	801584c <__mcmp>
 80134ee:	2800      	cmp	r0, #0
 80134f0:	da5f      	bge.n	80135b2 <_strtod_l+0x8c6>
 80134f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80134f4:	4333      	orrs	r3, r6
 80134f6:	d000      	beq.n	80134fa <_strtod_l+0x80e>
 80134f8:	e08a      	b.n	8013610 <_strtod_l+0x924>
 80134fa:	033b      	lsls	r3, r7, #12
 80134fc:	d000      	beq.n	8013500 <_strtod_l+0x814>
 80134fe:	e087      	b.n	8013610 <_strtod_l+0x924>
 8013500:	22d6      	movs	r2, #214	; 0xd6
 8013502:	4b47      	ldr	r3, [pc, #284]	; (8013620 <_strtod_l+0x934>)
 8013504:	04d2      	lsls	r2, r2, #19
 8013506:	403b      	ands	r3, r7
 8013508:	4293      	cmp	r3, r2
 801350a:	d800      	bhi.n	801350e <_strtod_l+0x822>
 801350c:	e080      	b.n	8013610 <_strtod_l+0x924>
 801350e:	9b06      	ldr	r3, [sp, #24]
 8013510:	695b      	ldr	r3, [r3, #20]
 8013512:	930a      	str	r3, [sp, #40]	; 0x28
 8013514:	2b00      	cmp	r3, #0
 8013516:	d104      	bne.n	8013522 <_strtod_l+0x836>
 8013518:	9b06      	ldr	r3, [sp, #24]
 801351a:	691b      	ldr	r3, [r3, #16]
 801351c:	930a      	str	r3, [sp, #40]	; 0x28
 801351e:	2b01      	cmp	r3, #1
 8013520:	dd76      	ble.n	8013610 <_strtod_l+0x924>
 8013522:	9906      	ldr	r1, [sp, #24]
 8013524:	2201      	movs	r2, #1
 8013526:	9805      	ldr	r0, [sp, #20]
 8013528:	f002 f922 	bl	8015770 <__lshift>
 801352c:	9907      	ldr	r1, [sp, #28]
 801352e:	9006      	str	r0, [sp, #24]
 8013530:	f002 f98c 	bl	801584c <__mcmp>
 8013534:	2800      	cmp	r0, #0
 8013536:	dd6b      	ble.n	8013610 <_strtod_l+0x924>
 8013538:	9908      	ldr	r1, [sp, #32]
 801353a:	003b      	movs	r3, r7
 801353c:	4a38      	ldr	r2, [pc, #224]	; (8013620 <_strtod_l+0x934>)
 801353e:	2900      	cmp	r1, #0
 8013540:	d100      	bne.n	8013544 <_strtod_l+0x858>
 8013542:	e092      	b.n	801366a <_strtod_l+0x97e>
 8013544:	0011      	movs	r1, r2
 8013546:	20d6      	movs	r0, #214	; 0xd6
 8013548:	4039      	ands	r1, r7
 801354a:	04c0      	lsls	r0, r0, #19
 801354c:	4281      	cmp	r1, r0
 801354e:	dd00      	ble.n	8013552 <_strtod_l+0x866>
 8013550:	e08b      	b.n	801366a <_strtod_l+0x97e>
 8013552:	23dc      	movs	r3, #220	; 0xdc
 8013554:	049b      	lsls	r3, r3, #18
 8013556:	4299      	cmp	r1, r3
 8013558:	dc00      	bgt.n	801355c <_strtod_l+0x870>
 801355a:	e6a4      	b.n	80132a6 <_strtod_l+0x5ba>
 801355c:	0030      	movs	r0, r6
 801355e:	0039      	movs	r1, r7
 8013560:	2200      	movs	r2, #0
 8013562:	4b30      	ldr	r3, [pc, #192]	; (8013624 <_strtod_l+0x938>)
 8013564:	f7ee f8c8 	bl	80016f8 <__aeabi_dmul>
 8013568:	0006      	movs	r6, r0
 801356a:	000f      	movs	r7, r1
 801356c:	4308      	orrs	r0, r1
 801356e:	d000      	beq.n	8013572 <_strtod_l+0x886>
 8013570:	e62f      	b.n	80131d2 <_strtod_l+0x4e6>
 8013572:	2322      	movs	r3, #34	; 0x22
 8013574:	9a05      	ldr	r2, [sp, #20]
 8013576:	6013      	str	r3, [r2, #0]
 8013578:	e62b      	b.n	80131d2 <_strtod_l+0x4e6>
 801357a:	234b      	movs	r3, #75	; 0x4b
 801357c:	1a9a      	subs	r2, r3, r2
 801357e:	3b4c      	subs	r3, #76	; 0x4c
 8013580:	4093      	lsls	r3, r2
 8013582:	4019      	ands	r1, r3
 8013584:	000f      	movs	r7, r1
 8013586:	e6e0      	b.n	801334a <_strtod_l+0x65e>
 8013588:	2201      	movs	r2, #1
 801358a:	4252      	negs	r2, r2
 801358c:	409a      	lsls	r2, r3
 801358e:	4016      	ands	r6, r2
 8013590:	e6db      	b.n	801334a <_strtod_l+0x65e>
 8013592:	4925      	ldr	r1, [pc, #148]	; (8013628 <_strtod_l+0x93c>)
 8013594:	1acb      	subs	r3, r1, r3
 8013596:	0001      	movs	r1, r0
 8013598:	4099      	lsls	r1, r3
 801359a:	9110      	str	r1, [sp, #64]	; 0x40
 801359c:	e741      	b.n	8013422 <_strtod_l+0x736>
 801359e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80135a0:	9920      	ldr	r1, [sp, #128]	; 0x80
 80135a2:	9805      	ldr	r0, [sp, #20]
 80135a4:	f002 f8e4 	bl	8015770 <__lshift>
 80135a8:	9020      	str	r0, [sp, #128]	; 0x80
 80135aa:	2800      	cmp	r0, #0
 80135ac:	d000      	beq.n	80135b0 <_strtod_l+0x8c4>
 80135ae:	e76c      	b.n	801348a <_strtod_l+0x79e>
 80135b0:	e606      	b.n	80131c0 <_strtod_l+0x4d4>
 80135b2:	970c      	str	r7, [sp, #48]	; 0x30
 80135b4:	2800      	cmp	r0, #0
 80135b6:	d176      	bne.n	80136a6 <_strtod_l+0x9ba>
 80135b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80135ba:	033b      	lsls	r3, r7, #12
 80135bc:	0b1b      	lsrs	r3, r3, #12
 80135be:	2a00      	cmp	r2, #0
 80135c0:	d038      	beq.n	8013634 <_strtod_l+0x948>
 80135c2:	4a1a      	ldr	r2, [pc, #104]	; (801362c <_strtod_l+0x940>)
 80135c4:	4293      	cmp	r3, r2
 80135c6:	d138      	bne.n	801363a <_strtod_l+0x94e>
 80135c8:	2201      	movs	r2, #1
 80135ca:	9b08      	ldr	r3, [sp, #32]
 80135cc:	4252      	negs	r2, r2
 80135ce:	0031      	movs	r1, r6
 80135d0:	0010      	movs	r0, r2
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d00b      	beq.n	80135ee <_strtod_l+0x902>
 80135d6:	24d4      	movs	r4, #212	; 0xd4
 80135d8:	4b11      	ldr	r3, [pc, #68]	; (8013620 <_strtod_l+0x934>)
 80135da:	0010      	movs	r0, r2
 80135dc:	403b      	ands	r3, r7
 80135de:	04e4      	lsls	r4, r4, #19
 80135e0:	42a3      	cmp	r3, r4
 80135e2:	d804      	bhi.n	80135ee <_strtod_l+0x902>
 80135e4:	306c      	adds	r0, #108	; 0x6c
 80135e6:	0d1b      	lsrs	r3, r3, #20
 80135e8:	1ac3      	subs	r3, r0, r3
 80135ea:	409a      	lsls	r2, r3
 80135ec:	0010      	movs	r0, r2
 80135ee:	4281      	cmp	r1, r0
 80135f0:	d123      	bne.n	801363a <_strtod_l+0x94e>
 80135f2:	4b0f      	ldr	r3, [pc, #60]	; (8013630 <_strtod_l+0x944>)
 80135f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80135f6:	429a      	cmp	r2, r3
 80135f8:	d102      	bne.n	8013600 <_strtod_l+0x914>
 80135fa:	1c4b      	adds	r3, r1, #1
 80135fc:	d100      	bne.n	8013600 <_strtod_l+0x914>
 80135fe:	e5df      	b.n	80131c0 <_strtod_l+0x4d4>
 8013600:	4b07      	ldr	r3, [pc, #28]	; (8013620 <_strtod_l+0x934>)
 8013602:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013604:	2600      	movs	r6, #0
 8013606:	401a      	ands	r2, r3
 8013608:	0013      	movs	r3, r2
 801360a:	2280      	movs	r2, #128	; 0x80
 801360c:	0352      	lsls	r2, r2, #13
 801360e:	189f      	adds	r7, r3, r2
 8013610:	9b08      	ldr	r3, [sp, #32]
 8013612:	2b00      	cmp	r3, #0
 8013614:	d1a2      	bne.n	801355c <_strtod_l+0x870>
 8013616:	e5dc      	b.n	80131d2 <_strtod_l+0x4e6>
 8013618:	08017220 	.word	0x08017220
 801361c:	fffffc02 	.word	0xfffffc02
 8013620:	7ff00000 	.word	0x7ff00000
 8013624:	39500000 	.word	0x39500000
 8013628:	fffffbe2 	.word	0xfffffbe2
 801362c:	000fffff 	.word	0x000fffff
 8013630:	7fefffff 	.word	0x7fefffff
 8013634:	4333      	orrs	r3, r6
 8013636:	d100      	bne.n	801363a <_strtod_l+0x94e>
 8013638:	e77e      	b.n	8013538 <_strtod_l+0x84c>
 801363a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801363c:	2b00      	cmp	r3, #0
 801363e:	d01d      	beq.n	801367c <_strtod_l+0x990>
 8013640:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013642:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013644:	4213      	tst	r3, r2
 8013646:	d0e3      	beq.n	8013610 <_strtod_l+0x924>
 8013648:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801364a:	0030      	movs	r0, r6
 801364c:	0039      	movs	r1, r7
 801364e:	9a08      	ldr	r2, [sp, #32]
 8013650:	2b00      	cmp	r3, #0
 8013652:	d017      	beq.n	8013684 <_strtod_l+0x998>
 8013654:	f7ff fb32 	bl	8012cbc <sulp>
 8013658:	0002      	movs	r2, r0
 801365a:	000b      	movs	r3, r1
 801365c:	9812      	ldr	r0, [sp, #72]	; 0x48
 801365e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8013660:	f7ed f90c 	bl	800087c <__aeabi_dadd>
 8013664:	0006      	movs	r6, r0
 8013666:	000f      	movs	r7, r1
 8013668:	e7d2      	b.n	8013610 <_strtod_l+0x924>
 801366a:	2601      	movs	r6, #1
 801366c:	4013      	ands	r3, r2
 801366e:	4a99      	ldr	r2, [pc, #612]	; (80138d4 <_strtod_l+0xbe8>)
 8013670:	4276      	negs	r6, r6
 8013672:	189b      	adds	r3, r3, r2
 8013674:	4a98      	ldr	r2, [pc, #608]	; (80138d8 <_strtod_l+0xbec>)
 8013676:	431a      	orrs	r2, r3
 8013678:	0017      	movs	r7, r2
 801367a:	e7c9      	b.n	8013610 <_strtod_l+0x924>
 801367c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801367e:	4233      	tst	r3, r6
 8013680:	d0c6      	beq.n	8013610 <_strtod_l+0x924>
 8013682:	e7e1      	b.n	8013648 <_strtod_l+0x95c>
 8013684:	f7ff fb1a 	bl	8012cbc <sulp>
 8013688:	0002      	movs	r2, r0
 801368a:	000b      	movs	r3, r1
 801368c:	9812      	ldr	r0, [sp, #72]	; 0x48
 801368e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8013690:	f7ee fa9e 	bl	8001bd0 <__aeabi_dsub>
 8013694:	2200      	movs	r2, #0
 8013696:	2300      	movs	r3, #0
 8013698:	0006      	movs	r6, r0
 801369a:	000f      	movs	r7, r1
 801369c:	f7ec fed6 	bl	800044c <__aeabi_dcmpeq>
 80136a0:	2800      	cmp	r0, #0
 80136a2:	d0b5      	beq.n	8013610 <_strtod_l+0x924>
 80136a4:	e5ff      	b.n	80132a6 <_strtod_l+0x5ba>
 80136a6:	9907      	ldr	r1, [sp, #28]
 80136a8:	9806      	ldr	r0, [sp, #24]
 80136aa:	f002 fa5b 	bl	8015b64 <__ratio>
 80136ae:	2380      	movs	r3, #128	; 0x80
 80136b0:	2200      	movs	r2, #0
 80136b2:	05db      	lsls	r3, r3, #23
 80136b4:	0004      	movs	r4, r0
 80136b6:	000d      	movs	r5, r1
 80136b8:	f7ec fed8 	bl	800046c <__aeabi_dcmple>
 80136bc:	2800      	cmp	r0, #0
 80136be:	d075      	beq.n	80137ac <_strtod_l+0xac0>
 80136c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d047      	beq.n	8013756 <_strtod_l+0xa6a>
 80136c6:	2300      	movs	r3, #0
 80136c8:	4c84      	ldr	r4, [pc, #528]	; (80138dc <_strtod_l+0xbf0>)
 80136ca:	2500      	movs	r5, #0
 80136cc:	9310      	str	r3, [sp, #64]	; 0x40
 80136ce:	9411      	str	r4, [sp, #68]	; 0x44
 80136d0:	4c82      	ldr	r4, [pc, #520]	; (80138dc <_strtod_l+0xbf0>)
 80136d2:	4a83      	ldr	r2, [pc, #524]	; (80138e0 <_strtod_l+0xbf4>)
 80136d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80136d6:	4013      	ands	r3, r2
 80136d8:	9314      	str	r3, [sp, #80]	; 0x50
 80136da:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80136dc:	4b81      	ldr	r3, [pc, #516]	; (80138e4 <_strtod_l+0xbf8>)
 80136de:	429a      	cmp	r2, r3
 80136e0:	d000      	beq.n	80136e4 <_strtod_l+0x9f8>
 80136e2:	e0ac      	b.n	801383e <_strtod_l+0xb52>
 80136e4:	4a80      	ldr	r2, [pc, #512]	; (80138e8 <_strtod_l+0xbfc>)
 80136e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80136e8:	4694      	mov	ip, r2
 80136ea:	4463      	add	r3, ip
 80136ec:	001f      	movs	r7, r3
 80136ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80136f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80136f2:	0030      	movs	r0, r6
 80136f4:	0039      	movs	r1, r7
 80136f6:	920c      	str	r2, [sp, #48]	; 0x30
 80136f8:	930d      	str	r3, [sp, #52]	; 0x34
 80136fa:	f002 f95b 	bl	80159b4 <__ulp>
 80136fe:	0002      	movs	r2, r0
 8013700:	000b      	movs	r3, r1
 8013702:	980c      	ldr	r0, [sp, #48]	; 0x30
 8013704:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013706:	f7ed fff7 	bl	80016f8 <__aeabi_dmul>
 801370a:	0032      	movs	r2, r6
 801370c:	003b      	movs	r3, r7
 801370e:	f7ed f8b5 	bl	800087c <__aeabi_dadd>
 8013712:	4a73      	ldr	r2, [pc, #460]	; (80138e0 <_strtod_l+0xbf4>)
 8013714:	4b75      	ldr	r3, [pc, #468]	; (80138ec <_strtod_l+0xc00>)
 8013716:	0006      	movs	r6, r0
 8013718:	400a      	ands	r2, r1
 801371a:	429a      	cmp	r2, r3
 801371c:	d95e      	bls.n	80137dc <_strtod_l+0xaf0>
 801371e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013720:	4b73      	ldr	r3, [pc, #460]	; (80138f0 <_strtod_l+0xc04>)
 8013722:	429a      	cmp	r2, r3
 8013724:	d103      	bne.n	801372e <_strtod_l+0xa42>
 8013726:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013728:	3301      	adds	r3, #1
 801372a:	d100      	bne.n	801372e <_strtod_l+0xa42>
 801372c:	e548      	b.n	80131c0 <_strtod_l+0x4d4>
 801372e:	2601      	movs	r6, #1
 8013730:	4f6f      	ldr	r7, [pc, #444]	; (80138f0 <_strtod_l+0xc04>)
 8013732:	4276      	negs	r6, r6
 8013734:	9920      	ldr	r1, [sp, #128]	; 0x80
 8013736:	9805      	ldr	r0, [sp, #20]
 8013738:	f001 fdfc 	bl	8015334 <_Bfree>
 801373c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801373e:	9805      	ldr	r0, [sp, #20]
 8013740:	f001 fdf8 	bl	8015334 <_Bfree>
 8013744:	9907      	ldr	r1, [sp, #28]
 8013746:	9805      	ldr	r0, [sp, #20]
 8013748:	f001 fdf4 	bl	8015334 <_Bfree>
 801374c:	9906      	ldr	r1, [sp, #24]
 801374e:	9805      	ldr	r0, [sp, #20]
 8013750:	f001 fdf0 	bl	8015334 <_Bfree>
 8013754:	e61d      	b.n	8013392 <_strtod_l+0x6a6>
 8013756:	2e00      	cmp	r6, #0
 8013758:	d11c      	bne.n	8013794 <_strtod_l+0xaa8>
 801375a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801375c:	031b      	lsls	r3, r3, #12
 801375e:	d11f      	bne.n	80137a0 <_strtod_l+0xab4>
 8013760:	2200      	movs	r2, #0
 8013762:	0020      	movs	r0, r4
 8013764:	0029      	movs	r1, r5
 8013766:	4b5d      	ldr	r3, [pc, #372]	; (80138dc <_strtod_l+0xbf0>)
 8013768:	f7ec fe76 	bl	8000458 <__aeabi_dcmplt>
 801376c:	2800      	cmp	r0, #0
 801376e:	d11a      	bne.n	80137a6 <_strtod_l+0xaba>
 8013770:	0020      	movs	r0, r4
 8013772:	0029      	movs	r1, r5
 8013774:	2200      	movs	r2, #0
 8013776:	4b5f      	ldr	r3, [pc, #380]	; (80138f4 <_strtod_l+0xc08>)
 8013778:	f7ed ffbe 	bl	80016f8 <__aeabi_dmul>
 801377c:	0005      	movs	r5, r0
 801377e:	000c      	movs	r4, r1
 8013780:	2380      	movs	r3, #128	; 0x80
 8013782:	061b      	lsls	r3, r3, #24
 8013784:	18e3      	adds	r3, r4, r3
 8013786:	951c      	str	r5, [sp, #112]	; 0x70
 8013788:	931d      	str	r3, [sp, #116]	; 0x74
 801378a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801378c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801378e:	9210      	str	r2, [sp, #64]	; 0x40
 8013790:	9311      	str	r3, [sp, #68]	; 0x44
 8013792:	e79e      	b.n	80136d2 <_strtod_l+0x9e6>
 8013794:	2e01      	cmp	r6, #1
 8013796:	d103      	bne.n	80137a0 <_strtod_l+0xab4>
 8013798:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801379a:	2b00      	cmp	r3, #0
 801379c:	d100      	bne.n	80137a0 <_strtod_l+0xab4>
 801379e:	e582      	b.n	80132a6 <_strtod_l+0x5ba>
 80137a0:	2300      	movs	r3, #0
 80137a2:	4c55      	ldr	r4, [pc, #340]	; (80138f8 <_strtod_l+0xc0c>)
 80137a4:	e791      	b.n	80136ca <_strtod_l+0x9de>
 80137a6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80137a8:	4c52      	ldr	r4, [pc, #328]	; (80138f4 <_strtod_l+0xc08>)
 80137aa:	e7e9      	b.n	8013780 <_strtod_l+0xa94>
 80137ac:	2200      	movs	r2, #0
 80137ae:	0020      	movs	r0, r4
 80137b0:	0029      	movs	r1, r5
 80137b2:	4b50      	ldr	r3, [pc, #320]	; (80138f4 <_strtod_l+0xc08>)
 80137b4:	f7ed ffa0 	bl	80016f8 <__aeabi_dmul>
 80137b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80137ba:	0005      	movs	r5, r0
 80137bc:	000b      	movs	r3, r1
 80137be:	000c      	movs	r4, r1
 80137c0:	2a00      	cmp	r2, #0
 80137c2:	d107      	bne.n	80137d4 <_strtod_l+0xae8>
 80137c4:	2280      	movs	r2, #128	; 0x80
 80137c6:	0612      	lsls	r2, r2, #24
 80137c8:	188b      	adds	r3, r1, r2
 80137ca:	9016      	str	r0, [sp, #88]	; 0x58
 80137cc:	9317      	str	r3, [sp, #92]	; 0x5c
 80137ce:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80137d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80137d2:	e7dc      	b.n	801378e <_strtod_l+0xaa2>
 80137d4:	0002      	movs	r2, r0
 80137d6:	9216      	str	r2, [sp, #88]	; 0x58
 80137d8:	9317      	str	r3, [sp, #92]	; 0x5c
 80137da:	e7f8      	b.n	80137ce <_strtod_l+0xae2>
 80137dc:	23d4      	movs	r3, #212	; 0xd4
 80137de:	049b      	lsls	r3, r3, #18
 80137e0:	18cf      	adds	r7, r1, r3
 80137e2:	9b08      	ldr	r3, [sp, #32]
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d1a5      	bne.n	8013734 <_strtod_l+0xa48>
 80137e8:	4b3d      	ldr	r3, [pc, #244]	; (80138e0 <_strtod_l+0xbf4>)
 80137ea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80137ec:	403b      	ands	r3, r7
 80137ee:	429a      	cmp	r2, r3
 80137f0:	d1a0      	bne.n	8013734 <_strtod_l+0xa48>
 80137f2:	0028      	movs	r0, r5
 80137f4:	0021      	movs	r1, r4
 80137f6:	f7ec feaf 	bl	8000558 <__aeabi_d2lz>
 80137fa:	f7ec fee9 	bl	80005d0 <__aeabi_l2d>
 80137fe:	0002      	movs	r2, r0
 8013800:	000b      	movs	r3, r1
 8013802:	0028      	movs	r0, r5
 8013804:	0021      	movs	r1, r4
 8013806:	f7ee f9e3 	bl	8001bd0 <__aeabi_dsub>
 801380a:	033b      	lsls	r3, r7, #12
 801380c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801380e:	0b1b      	lsrs	r3, r3, #12
 8013810:	4333      	orrs	r3, r6
 8013812:	4313      	orrs	r3, r2
 8013814:	0004      	movs	r4, r0
 8013816:	000d      	movs	r5, r1
 8013818:	4a38      	ldr	r2, [pc, #224]	; (80138fc <_strtod_l+0xc10>)
 801381a:	2b00      	cmp	r3, #0
 801381c:	d055      	beq.n	80138ca <_strtod_l+0xbde>
 801381e:	4b38      	ldr	r3, [pc, #224]	; (8013900 <_strtod_l+0xc14>)
 8013820:	f7ec fe1a 	bl	8000458 <__aeabi_dcmplt>
 8013824:	2800      	cmp	r0, #0
 8013826:	d000      	beq.n	801382a <_strtod_l+0xb3e>
 8013828:	e4d3      	b.n	80131d2 <_strtod_l+0x4e6>
 801382a:	0020      	movs	r0, r4
 801382c:	0029      	movs	r1, r5
 801382e:	4a35      	ldr	r2, [pc, #212]	; (8013904 <_strtod_l+0xc18>)
 8013830:	4b30      	ldr	r3, [pc, #192]	; (80138f4 <_strtod_l+0xc08>)
 8013832:	f7ec fe25 	bl	8000480 <__aeabi_dcmpgt>
 8013836:	2800      	cmp	r0, #0
 8013838:	d100      	bne.n	801383c <_strtod_l+0xb50>
 801383a:	e77b      	b.n	8013734 <_strtod_l+0xa48>
 801383c:	e4c9      	b.n	80131d2 <_strtod_l+0x4e6>
 801383e:	9b08      	ldr	r3, [sp, #32]
 8013840:	2b00      	cmp	r3, #0
 8013842:	d02b      	beq.n	801389c <_strtod_l+0xbb0>
 8013844:	23d4      	movs	r3, #212	; 0xd4
 8013846:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013848:	04db      	lsls	r3, r3, #19
 801384a:	429a      	cmp	r2, r3
 801384c:	d826      	bhi.n	801389c <_strtod_l+0xbb0>
 801384e:	0028      	movs	r0, r5
 8013850:	0021      	movs	r1, r4
 8013852:	4a2d      	ldr	r2, [pc, #180]	; (8013908 <_strtod_l+0xc1c>)
 8013854:	4b2d      	ldr	r3, [pc, #180]	; (801390c <_strtod_l+0xc20>)
 8013856:	f7ec fe09 	bl	800046c <__aeabi_dcmple>
 801385a:	2800      	cmp	r0, #0
 801385c:	d017      	beq.n	801388e <_strtod_l+0xba2>
 801385e:	0028      	movs	r0, r5
 8013860:	0021      	movs	r1, r4
 8013862:	f7ec fe5b 	bl	800051c <__aeabi_d2uiz>
 8013866:	2800      	cmp	r0, #0
 8013868:	d100      	bne.n	801386c <_strtod_l+0xb80>
 801386a:	3001      	adds	r0, #1
 801386c:	f7ee fdc6 	bl	80023fc <__aeabi_ui2d>
 8013870:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013872:	0005      	movs	r5, r0
 8013874:	000b      	movs	r3, r1
 8013876:	000c      	movs	r4, r1
 8013878:	2a00      	cmp	r2, #0
 801387a:	d122      	bne.n	80138c2 <_strtod_l+0xbd6>
 801387c:	2280      	movs	r2, #128	; 0x80
 801387e:	0612      	lsls	r2, r2, #24
 8013880:	188b      	adds	r3, r1, r2
 8013882:	9018      	str	r0, [sp, #96]	; 0x60
 8013884:	9319      	str	r3, [sp, #100]	; 0x64
 8013886:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013888:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801388a:	9210      	str	r2, [sp, #64]	; 0x40
 801388c:	9311      	str	r3, [sp, #68]	; 0x44
 801388e:	22d6      	movs	r2, #214	; 0xd6
 8013890:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013892:	04d2      	lsls	r2, r2, #19
 8013894:	189b      	adds	r3, r3, r2
 8013896:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013898:	1a9b      	subs	r3, r3, r2
 801389a:	9311      	str	r3, [sp, #68]	; 0x44
 801389c:	9812      	ldr	r0, [sp, #72]	; 0x48
 801389e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80138a0:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80138a2:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80138a4:	f002 f886 	bl	80159b4 <__ulp>
 80138a8:	0002      	movs	r2, r0
 80138aa:	000b      	movs	r3, r1
 80138ac:	0030      	movs	r0, r6
 80138ae:	0039      	movs	r1, r7
 80138b0:	f7ed ff22 	bl	80016f8 <__aeabi_dmul>
 80138b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80138b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80138b8:	f7ec ffe0 	bl	800087c <__aeabi_dadd>
 80138bc:	0006      	movs	r6, r0
 80138be:	000f      	movs	r7, r1
 80138c0:	e78f      	b.n	80137e2 <_strtod_l+0xaf6>
 80138c2:	0002      	movs	r2, r0
 80138c4:	9218      	str	r2, [sp, #96]	; 0x60
 80138c6:	9319      	str	r3, [sp, #100]	; 0x64
 80138c8:	e7dd      	b.n	8013886 <_strtod_l+0xb9a>
 80138ca:	4b11      	ldr	r3, [pc, #68]	; (8013910 <_strtod_l+0xc24>)
 80138cc:	f7ec fdc4 	bl	8000458 <__aeabi_dcmplt>
 80138d0:	e7b1      	b.n	8013836 <_strtod_l+0xb4a>
 80138d2:	46c0      	nop			; (mov r8, r8)
 80138d4:	fff00000 	.word	0xfff00000
 80138d8:	000fffff 	.word	0x000fffff
 80138dc:	3ff00000 	.word	0x3ff00000
 80138e0:	7ff00000 	.word	0x7ff00000
 80138e4:	7fe00000 	.word	0x7fe00000
 80138e8:	fcb00000 	.word	0xfcb00000
 80138ec:	7c9fffff 	.word	0x7c9fffff
 80138f0:	7fefffff 	.word	0x7fefffff
 80138f4:	3fe00000 	.word	0x3fe00000
 80138f8:	bff00000 	.word	0xbff00000
 80138fc:	94a03595 	.word	0x94a03595
 8013900:	3fdfffff 	.word	0x3fdfffff
 8013904:	35afe535 	.word	0x35afe535
 8013908:	ffc00000 	.word	0xffc00000
 801390c:	41dfffff 	.word	0x41dfffff
 8013910:	3fcfffff 	.word	0x3fcfffff

08013914 <strtod>:
 8013914:	b510      	push	{r4, lr}
 8013916:	000a      	movs	r2, r1
 8013918:	0001      	movs	r1, r0
 801391a:	4803      	ldr	r0, [pc, #12]	; (8013928 <strtod+0x14>)
 801391c:	4b03      	ldr	r3, [pc, #12]	; (801392c <strtod+0x18>)
 801391e:	6800      	ldr	r0, [r0, #0]
 8013920:	f7ff f9e4 	bl	8012cec <_strtod_l>
 8013924:	bd10      	pop	{r4, pc}
 8013926:	46c0      	nop			; (mov r8, r8)
 8013928:	20000014 	.word	0x20000014
 801392c:	2000007c 	.word	0x2000007c

08013930 <strtok>:
 8013930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013932:	4b16      	ldr	r3, [pc, #88]	; (801398c <strtok+0x5c>)
 8013934:	0005      	movs	r5, r0
 8013936:	681f      	ldr	r7, [r3, #0]
 8013938:	000e      	movs	r6, r1
 801393a:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 801393c:	2c00      	cmp	r4, #0
 801393e:	d11d      	bne.n	801397c <strtok+0x4c>
 8013940:	2050      	movs	r0, #80	; 0x50
 8013942:	f001 fc7b 	bl	801523c <malloc>
 8013946:	1e02      	subs	r2, r0, #0
 8013948:	65b8      	str	r0, [r7, #88]	; 0x58
 801394a:	d104      	bne.n	8013956 <strtok+0x26>
 801394c:	2157      	movs	r1, #87	; 0x57
 801394e:	4b10      	ldr	r3, [pc, #64]	; (8013990 <strtok+0x60>)
 8013950:	4810      	ldr	r0, [pc, #64]	; (8013994 <strtok+0x64>)
 8013952:	f000 f935 	bl	8013bc0 <__assert_func>
 8013956:	6004      	str	r4, [r0, #0]
 8013958:	6044      	str	r4, [r0, #4]
 801395a:	6084      	str	r4, [r0, #8]
 801395c:	60c4      	str	r4, [r0, #12]
 801395e:	6104      	str	r4, [r0, #16]
 8013960:	6144      	str	r4, [r0, #20]
 8013962:	6184      	str	r4, [r0, #24]
 8013964:	6284      	str	r4, [r0, #40]	; 0x28
 8013966:	62c4      	str	r4, [r0, #44]	; 0x2c
 8013968:	6304      	str	r4, [r0, #48]	; 0x30
 801396a:	6344      	str	r4, [r0, #52]	; 0x34
 801396c:	6384      	str	r4, [r0, #56]	; 0x38
 801396e:	63c4      	str	r4, [r0, #60]	; 0x3c
 8013970:	6404      	str	r4, [r0, #64]	; 0x40
 8013972:	6444      	str	r4, [r0, #68]	; 0x44
 8013974:	6484      	str	r4, [r0, #72]	; 0x48
 8013976:	64c4      	str	r4, [r0, #76]	; 0x4c
 8013978:	7704      	strb	r4, [r0, #28]
 801397a:	6244      	str	r4, [r0, #36]	; 0x24
 801397c:	0031      	movs	r1, r6
 801397e:	0028      	movs	r0, r5
 8013980:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013982:	2301      	movs	r3, #1
 8013984:	f000 f808 	bl	8013998 <__strtok_r>
 8013988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801398a:	46c0      	nop			; (mov r8, r8)
 801398c:	20000014 	.word	0x20000014
 8013990:	08017248 	.word	0x08017248
 8013994:	0801725f 	.word	0x0801725f

08013998 <__strtok_r>:
 8013998:	b5f0      	push	{r4, r5, r6, r7, lr}
 801399a:	2800      	cmp	r0, #0
 801399c:	d102      	bne.n	80139a4 <__strtok_r+0xc>
 801399e:	6810      	ldr	r0, [r2, #0]
 80139a0:	2800      	cmp	r0, #0
 80139a2:	d013      	beq.n	80139cc <__strtok_r+0x34>
 80139a4:	0004      	movs	r4, r0
 80139a6:	0020      	movs	r0, r4
 80139a8:	000e      	movs	r6, r1
 80139aa:	7805      	ldrb	r5, [r0, #0]
 80139ac:	3401      	adds	r4, #1
 80139ae:	7837      	ldrb	r7, [r6, #0]
 80139b0:	2f00      	cmp	r7, #0
 80139b2:	d104      	bne.n	80139be <__strtok_r+0x26>
 80139b4:	2d00      	cmp	r5, #0
 80139b6:	d10f      	bne.n	80139d8 <__strtok_r+0x40>
 80139b8:	0028      	movs	r0, r5
 80139ba:	6015      	str	r5, [r2, #0]
 80139bc:	e006      	b.n	80139cc <__strtok_r+0x34>
 80139be:	3601      	adds	r6, #1
 80139c0:	42bd      	cmp	r5, r7
 80139c2:	d1f4      	bne.n	80139ae <__strtok_r+0x16>
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d1ee      	bne.n	80139a6 <__strtok_r+0xe>
 80139c8:	6014      	str	r4, [r2, #0]
 80139ca:	7003      	strb	r3, [r0, #0]
 80139cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80139ce:	002f      	movs	r7, r5
 80139d0:	e00f      	b.n	80139f2 <__strtok_r+0x5a>
 80139d2:	3301      	adds	r3, #1
 80139d4:	2e00      	cmp	r6, #0
 80139d6:	d104      	bne.n	80139e2 <__strtok_r+0x4a>
 80139d8:	0023      	movs	r3, r4
 80139da:	3401      	adds	r4, #1
 80139dc:	781d      	ldrb	r5, [r3, #0]
 80139de:	0027      	movs	r7, r4
 80139e0:	000b      	movs	r3, r1
 80139e2:	781e      	ldrb	r6, [r3, #0]
 80139e4:	42b5      	cmp	r5, r6
 80139e6:	d1f4      	bne.n	80139d2 <__strtok_r+0x3a>
 80139e8:	2d00      	cmp	r5, #0
 80139ea:	d0f0      	beq.n	80139ce <__strtok_r+0x36>
 80139ec:	2300      	movs	r3, #0
 80139ee:	3c01      	subs	r4, #1
 80139f0:	7023      	strb	r3, [r4, #0]
 80139f2:	6017      	str	r7, [r2, #0]
 80139f4:	e7ea      	b.n	80139cc <__strtok_r+0x34>
	...

080139f8 <_strtol_l.constprop.0>:
 80139f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80139fa:	b087      	sub	sp, #28
 80139fc:	001e      	movs	r6, r3
 80139fe:	9005      	str	r0, [sp, #20]
 8013a00:	9101      	str	r1, [sp, #4]
 8013a02:	9202      	str	r2, [sp, #8]
 8013a04:	2b01      	cmp	r3, #1
 8013a06:	d045      	beq.n	8013a94 <_strtol_l.constprop.0+0x9c>
 8013a08:	000b      	movs	r3, r1
 8013a0a:	2e24      	cmp	r6, #36	; 0x24
 8013a0c:	d842      	bhi.n	8013a94 <_strtol_l.constprop.0+0x9c>
 8013a0e:	4a3f      	ldr	r2, [pc, #252]	; (8013b0c <_strtol_l.constprop.0+0x114>)
 8013a10:	2108      	movs	r1, #8
 8013a12:	4694      	mov	ip, r2
 8013a14:	001a      	movs	r2, r3
 8013a16:	4660      	mov	r0, ip
 8013a18:	7814      	ldrb	r4, [r2, #0]
 8013a1a:	3301      	adds	r3, #1
 8013a1c:	5d00      	ldrb	r0, [r0, r4]
 8013a1e:	001d      	movs	r5, r3
 8013a20:	0007      	movs	r7, r0
 8013a22:	400f      	ands	r7, r1
 8013a24:	4208      	tst	r0, r1
 8013a26:	d1f5      	bne.n	8013a14 <_strtol_l.constprop.0+0x1c>
 8013a28:	2c2d      	cmp	r4, #45	; 0x2d
 8013a2a:	d13a      	bne.n	8013aa2 <_strtol_l.constprop.0+0xaa>
 8013a2c:	2701      	movs	r7, #1
 8013a2e:	781c      	ldrb	r4, [r3, #0]
 8013a30:	1c95      	adds	r5, r2, #2
 8013a32:	2e00      	cmp	r6, #0
 8013a34:	d065      	beq.n	8013b02 <_strtol_l.constprop.0+0x10a>
 8013a36:	2e10      	cmp	r6, #16
 8013a38:	d109      	bne.n	8013a4e <_strtol_l.constprop.0+0x56>
 8013a3a:	2c30      	cmp	r4, #48	; 0x30
 8013a3c:	d107      	bne.n	8013a4e <_strtol_l.constprop.0+0x56>
 8013a3e:	2220      	movs	r2, #32
 8013a40:	782b      	ldrb	r3, [r5, #0]
 8013a42:	4393      	bics	r3, r2
 8013a44:	2b58      	cmp	r3, #88	; 0x58
 8013a46:	d157      	bne.n	8013af8 <_strtol_l.constprop.0+0x100>
 8013a48:	2610      	movs	r6, #16
 8013a4a:	786c      	ldrb	r4, [r5, #1]
 8013a4c:	3502      	adds	r5, #2
 8013a4e:	4b30      	ldr	r3, [pc, #192]	; (8013b10 <_strtol_l.constprop.0+0x118>)
 8013a50:	0031      	movs	r1, r6
 8013a52:	18fb      	adds	r3, r7, r3
 8013a54:	0018      	movs	r0, r3
 8013a56:	9303      	str	r3, [sp, #12]
 8013a58:	f7ec fbf8 	bl	800024c <__aeabi_uidivmod>
 8013a5c:	2300      	movs	r3, #0
 8013a5e:	2201      	movs	r2, #1
 8013a60:	4684      	mov	ip, r0
 8013a62:	0018      	movs	r0, r3
 8013a64:	9104      	str	r1, [sp, #16]
 8013a66:	4252      	negs	r2, r2
 8013a68:	0021      	movs	r1, r4
 8013a6a:	3930      	subs	r1, #48	; 0x30
 8013a6c:	2909      	cmp	r1, #9
 8013a6e:	d81d      	bhi.n	8013aac <_strtol_l.constprop.0+0xb4>
 8013a70:	000c      	movs	r4, r1
 8013a72:	42a6      	cmp	r6, r4
 8013a74:	dd28      	ble.n	8013ac8 <_strtol_l.constprop.0+0xd0>
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	db24      	blt.n	8013ac4 <_strtol_l.constprop.0+0xcc>
 8013a7a:	0013      	movs	r3, r2
 8013a7c:	4584      	cmp	ip, r0
 8013a7e:	d306      	bcc.n	8013a8e <_strtol_l.constprop.0+0x96>
 8013a80:	d102      	bne.n	8013a88 <_strtol_l.constprop.0+0x90>
 8013a82:	9904      	ldr	r1, [sp, #16]
 8013a84:	42a1      	cmp	r1, r4
 8013a86:	db02      	blt.n	8013a8e <_strtol_l.constprop.0+0x96>
 8013a88:	2301      	movs	r3, #1
 8013a8a:	4370      	muls	r0, r6
 8013a8c:	1820      	adds	r0, r4, r0
 8013a8e:	782c      	ldrb	r4, [r5, #0]
 8013a90:	3501      	adds	r5, #1
 8013a92:	e7e9      	b.n	8013a68 <_strtol_l.constprop.0+0x70>
 8013a94:	f7fe f95e 	bl	8011d54 <__errno>
 8013a98:	2316      	movs	r3, #22
 8013a9a:	6003      	str	r3, [r0, #0]
 8013a9c:	2000      	movs	r0, #0
 8013a9e:	b007      	add	sp, #28
 8013aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013aa2:	2c2b      	cmp	r4, #43	; 0x2b
 8013aa4:	d1c5      	bne.n	8013a32 <_strtol_l.constprop.0+0x3a>
 8013aa6:	781c      	ldrb	r4, [r3, #0]
 8013aa8:	1c95      	adds	r5, r2, #2
 8013aaa:	e7c2      	b.n	8013a32 <_strtol_l.constprop.0+0x3a>
 8013aac:	0021      	movs	r1, r4
 8013aae:	3941      	subs	r1, #65	; 0x41
 8013ab0:	2919      	cmp	r1, #25
 8013ab2:	d801      	bhi.n	8013ab8 <_strtol_l.constprop.0+0xc0>
 8013ab4:	3c37      	subs	r4, #55	; 0x37
 8013ab6:	e7dc      	b.n	8013a72 <_strtol_l.constprop.0+0x7a>
 8013ab8:	0021      	movs	r1, r4
 8013aba:	3961      	subs	r1, #97	; 0x61
 8013abc:	2919      	cmp	r1, #25
 8013abe:	d803      	bhi.n	8013ac8 <_strtol_l.constprop.0+0xd0>
 8013ac0:	3c57      	subs	r4, #87	; 0x57
 8013ac2:	e7d6      	b.n	8013a72 <_strtol_l.constprop.0+0x7a>
 8013ac4:	0013      	movs	r3, r2
 8013ac6:	e7e2      	b.n	8013a8e <_strtol_l.constprop.0+0x96>
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	da09      	bge.n	8013ae0 <_strtol_l.constprop.0+0xe8>
 8013acc:	2322      	movs	r3, #34	; 0x22
 8013ace:	9a05      	ldr	r2, [sp, #20]
 8013ad0:	9803      	ldr	r0, [sp, #12]
 8013ad2:	6013      	str	r3, [r2, #0]
 8013ad4:	9b02      	ldr	r3, [sp, #8]
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d0e1      	beq.n	8013a9e <_strtol_l.constprop.0+0xa6>
 8013ada:	1e6b      	subs	r3, r5, #1
 8013adc:	9301      	str	r3, [sp, #4]
 8013ade:	e007      	b.n	8013af0 <_strtol_l.constprop.0+0xf8>
 8013ae0:	2f00      	cmp	r7, #0
 8013ae2:	d000      	beq.n	8013ae6 <_strtol_l.constprop.0+0xee>
 8013ae4:	4240      	negs	r0, r0
 8013ae6:	9a02      	ldr	r2, [sp, #8]
 8013ae8:	2a00      	cmp	r2, #0
 8013aea:	d0d8      	beq.n	8013a9e <_strtol_l.constprop.0+0xa6>
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d1f4      	bne.n	8013ada <_strtol_l.constprop.0+0xe2>
 8013af0:	9b02      	ldr	r3, [sp, #8]
 8013af2:	9a01      	ldr	r2, [sp, #4]
 8013af4:	601a      	str	r2, [r3, #0]
 8013af6:	e7d2      	b.n	8013a9e <_strtol_l.constprop.0+0xa6>
 8013af8:	2430      	movs	r4, #48	; 0x30
 8013afa:	2e00      	cmp	r6, #0
 8013afc:	d1a7      	bne.n	8013a4e <_strtol_l.constprop.0+0x56>
 8013afe:	3608      	adds	r6, #8
 8013b00:	e7a5      	b.n	8013a4e <_strtol_l.constprop.0+0x56>
 8013b02:	2c30      	cmp	r4, #48	; 0x30
 8013b04:	d09b      	beq.n	8013a3e <_strtol_l.constprop.0+0x46>
 8013b06:	260a      	movs	r6, #10
 8013b08:	e7a1      	b.n	8013a4e <_strtol_l.constprop.0+0x56>
 8013b0a:	46c0      	nop			; (mov r8, r8)
 8013b0c:	0801731e 	.word	0x0801731e
 8013b10:	7fffffff 	.word	0x7fffffff

08013b14 <strtol>:
 8013b14:	b510      	push	{r4, lr}
 8013b16:	0013      	movs	r3, r2
 8013b18:	000a      	movs	r2, r1
 8013b1a:	0001      	movs	r1, r0
 8013b1c:	4802      	ldr	r0, [pc, #8]	; (8013b28 <strtol+0x14>)
 8013b1e:	6800      	ldr	r0, [r0, #0]
 8013b20:	f7ff ff6a 	bl	80139f8 <_strtol_l.constprop.0>
 8013b24:	bd10      	pop	{r4, pc}
 8013b26:	46c0      	nop			; (mov r8, r8)
 8013b28:	20000014 	.word	0x20000014

08013b2c <__utoa>:
 8013b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b2e:	000c      	movs	r4, r1
 8013b30:	0016      	movs	r6, r2
 8013b32:	b08d      	sub	sp, #52	; 0x34
 8013b34:	2225      	movs	r2, #37	; 0x25
 8013b36:	0007      	movs	r7, r0
 8013b38:	4916      	ldr	r1, [pc, #88]	; (8013b94 <__utoa+0x68>)
 8013b3a:	a802      	add	r0, sp, #8
 8013b3c:	f7fe fa55 	bl	8011fea <memcpy>
 8013b40:	1e62      	subs	r2, r4, #1
 8013b42:	9200      	str	r2, [sp, #0]
 8013b44:	1eb3      	subs	r3, r6, #2
 8013b46:	aa02      	add	r2, sp, #8
 8013b48:	2500      	movs	r5, #0
 8013b4a:	9201      	str	r2, [sp, #4]
 8013b4c:	2b22      	cmp	r3, #34	; 0x22
 8013b4e:	d904      	bls.n	8013b5a <__utoa+0x2e>
 8013b50:	7025      	strb	r5, [r4, #0]
 8013b52:	002c      	movs	r4, r5
 8013b54:	0020      	movs	r0, r4
 8013b56:	b00d      	add	sp, #52	; 0x34
 8013b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b5a:	0038      	movs	r0, r7
 8013b5c:	0031      	movs	r1, r6
 8013b5e:	f7ec fb75 	bl	800024c <__aeabi_uidivmod>
 8013b62:	000b      	movs	r3, r1
 8013b64:	9a01      	ldr	r2, [sp, #4]
 8013b66:	0029      	movs	r1, r5
 8013b68:	5cd3      	ldrb	r3, [r2, r3]
 8013b6a:	9a00      	ldr	r2, [sp, #0]
 8013b6c:	3501      	adds	r5, #1
 8013b6e:	5553      	strb	r3, [r2, r5]
 8013b70:	003b      	movs	r3, r7
 8013b72:	0007      	movs	r7, r0
 8013b74:	429e      	cmp	r6, r3
 8013b76:	d9f0      	bls.n	8013b5a <__utoa+0x2e>
 8013b78:	2300      	movs	r3, #0
 8013b7a:	0022      	movs	r2, r4
 8013b7c:	5563      	strb	r3, [r4, r5]
 8013b7e:	000b      	movs	r3, r1
 8013b80:	1ac8      	subs	r0, r1, r3
 8013b82:	4283      	cmp	r3, r0
 8013b84:	dde6      	ble.n	8013b54 <__utoa+0x28>
 8013b86:	7810      	ldrb	r0, [r2, #0]
 8013b88:	5ce5      	ldrb	r5, [r4, r3]
 8013b8a:	7015      	strb	r5, [r2, #0]
 8013b8c:	54e0      	strb	r0, [r4, r3]
 8013b8e:	3201      	adds	r2, #1
 8013b90:	3b01      	subs	r3, #1
 8013b92:	e7f5      	b.n	8013b80 <__utoa+0x54>
 8013b94:	080172bc 	.word	0x080172bc

08013b98 <_write_r>:
 8013b98:	b570      	push	{r4, r5, r6, lr}
 8013b9a:	0004      	movs	r4, r0
 8013b9c:	0008      	movs	r0, r1
 8013b9e:	0011      	movs	r1, r2
 8013ba0:	001a      	movs	r2, r3
 8013ba2:	2300      	movs	r3, #0
 8013ba4:	4d05      	ldr	r5, [pc, #20]	; (8013bbc <_write_r+0x24>)
 8013ba6:	602b      	str	r3, [r5, #0]
 8013ba8:	f7ef fff1 	bl	8003b8e <_write>
 8013bac:	1c43      	adds	r3, r0, #1
 8013bae:	d103      	bne.n	8013bb8 <_write_r+0x20>
 8013bb0:	682b      	ldr	r3, [r5, #0]
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d000      	beq.n	8013bb8 <_write_r+0x20>
 8013bb6:	6023      	str	r3, [r4, #0]
 8013bb8:	bd70      	pop	{r4, r5, r6, pc}
 8013bba:	46c0      	nop			; (mov r8, r8)
 8013bbc:	20002d98 	.word	0x20002d98

08013bc0 <__assert_func>:
 8013bc0:	b530      	push	{r4, r5, lr}
 8013bc2:	0014      	movs	r4, r2
 8013bc4:	001a      	movs	r2, r3
 8013bc6:	4b09      	ldr	r3, [pc, #36]	; (8013bec <__assert_func+0x2c>)
 8013bc8:	0005      	movs	r5, r0
 8013bca:	681b      	ldr	r3, [r3, #0]
 8013bcc:	b085      	sub	sp, #20
 8013bce:	68d8      	ldr	r0, [r3, #12]
 8013bd0:	4b07      	ldr	r3, [pc, #28]	; (8013bf0 <__assert_func+0x30>)
 8013bd2:	2c00      	cmp	r4, #0
 8013bd4:	d101      	bne.n	8013bda <__assert_func+0x1a>
 8013bd6:	4b07      	ldr	r3, [pc, #28]	; (8013bf4 <__assert_func+0x34>)
 8013bd8:	001c      	movs	r4, r3
 8013bda:	9301      	str	r3, [sp, #4]
 8013bdc:	9100      	str	r1, [sp, #0]
 8013bde:	002b      	movs	r3, r5
 8013be0:	4905      	ldr	r1, [pc, #20]	; (8013bf8 <__assert_func+0x38>)
 8013be2:	9402      	str	r4, [sp, #8]
 8013be4:	f000 ff8e 	bl	8014b04 <fiprintf>
 8013be8:	f002 fc5a 	bl	80164a0 <abort>
 8013bec:	20000014 	.word	0x20000014
 8013bf0:	080172e1 	.word	0x080172e1
 8013bf4:	0801731c 	.word	0x0801731c
 8013bf8:	080172ee 	.word	0x080172ee

08013bfc <_close_r>:
 8013bfc:	2300      	movs	r3, #0
 8013bfe:	b570      	push	{r4, r5, r6, lr}
 8013c00:	4d06      	ldr	r5, [pc, #24]	; (8013c1c <_close_r+0x20>)
 8013c02:	0004      	movs	r4, r0
 8013c04:	0008      	movs	r0, r1
 8013c06:	602b      	str	r3, [r5, #0]
 8013c08:	f7ef ffdd 	bl	8003bc6 <_close>
 8013c0c:	1c43      	adds	r3, r0, #1
 8013c0e:	d103      	bne.n	8013c18 <_close_r+0x1c>
 8013c10:	682b      	ldr	r3, [r5, #0]
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d000      	beq.n	8013c18 <_close_r+0x1c>
 8013c16:	6023      	str	r3, [r4, #0]
 8013c18:	bd70      	pop	{r4, r5, r6, pc}
 8013c1a:	46c0      	nop			; (mov r8, r8)
 8013c1c:	20002d98 	.word	0x20002d98

08013c20 <quorem>:
 8013c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013c22:	0006      	movs	r6, r0
 8013c24:	690b      	ldr	r3, [r1, #16]
 8013c26:	6932      	ldr	r2, [r6, #16]
 8013c28:	b087      	sub	sp, #28
 8013c2a:	2000      	movs	r0, #0
 8013c2c:	9103      	str	r1, [sp, #12]
 8013c2e:	429a      	cmp	r2, r3
 8013c30:	db65      	blt.n	8013cfe <quorem+0xde>
 8013c32:	3b01      	subs	r3, #1
 8013c34:	009c      	lsls	r4, r3, #2
 8013c36:	9300      	str	r3, [sp, #0]
 8013c38:	000b      	movs	r3, r1
 8013c3a:	3314      	adds	r3, #20
 8013c3c:	9305      	str	r3, [sp, #20]
 8013c3e:	191b      	adds	r3, r3, r4
 8013c40:	9304      	str	r3, [sp, #16]
 8013c42:	0033      	movs	r3, r6
 8013c44:	3314      	adds	r3, #20
 8013c46:	9302      	str	r3, [sp, #8]
 8013c48:	191c      	adds	r4, r3, r4
 8013c4a:	9b04      	ldr	r3, [sp, #16]
 8013c4c:	6827      	ldr	r7, [r4, #0]
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	0038      	movs	r0, r7
 8013c52:	1c5d      	adds	r5, r3, #1
 8013c54:	0029      	movs	r1, r5
 8013c56:	9301      	str	r3, [sp, #4]
 8013c58:	f7ec fa72 	bl	8000140 <__udivsi3>
 8013c5c:	9001      	str	r0, [sp, #4]
 8013c5e:	42af      	cmp	r7, r5
 8013c60:	d324      	bcc.n	8013cac <quorem+0x8c>
 8013c62:	2500      	movs	r5, #0
 8013c64:	46ac      	mov	ip, r5
 8013c66:	9802      	ldr	r0, [sp, #8]
 8013c68:	9f05      	ldr	r7, [sp, #20]
 8013c6a:	cf08      	ldmia	r7!, {r3}
 8013c6c:	9a01      	ldr	r2, [sp, #4]
 8013c6e:	b299      	uxth	r1, r3
 8013c70:	4351      	muls	r1, r2
 8013c72:	0c1b      	lsrs	r3, r3, #16
 8013c74:	4353      	muls	r3, r2
 8013c76:	1949      	adds	r1, r1, r5
 8013c78:	0c0a      	lsrs	r2, r1, #16
 8013c7a:	189b      	adds	r3, r3, r2
 8013c7c:	6802      	ldr	r2, [r0, #0]
 8013c7e:	b289      	uxth	r1, r1
 8013c80:	b292      	uxth	r2, r2
 8013c82:	4462      	add	r2, ip
 8013c84:	1a52      	subs	r2, r2, r1
 8013c86:	6801      	ldr	r1, [r0, #0]
 8013c88:	0c1d      	lsrs	r5, r3, #16
 8013c8a:	0c09      	lsrs	r1, r1, #16
 8013c8c:	b29b      	uxth	r3, r3
 8013c8e:	1acb      	subs	r3, r1, r3
 8013c90:	1411      	asrs	r1, r2, #16
 8013c92:	185b      	adds	r3, r3, r1
 8013c94:	1419      	asrs	r1, r3, #16
 8013c96:	b292      	uxth	r2, r2
 8013c98:	041b      	lsls	r3, r3, #16
 8013c9a:	431a      	orrs	r2, r3
 8013c9c:	9b04      	ldr	r3, [sp, #16]
 8013c9e:	468c      	mov	ip, r1
 8013ca0:	c004      	stmia	r0!, {r2}
 8013ca2:	42bb      	cmp	r3, r7
 8013ca4:	d2e1      	bcs.n	8013c6a <quorem+0x4a>
 8013ca6:	6823      	ldr	r3, [r4, #0]
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d030      	beq.n	8013d0e <quorem+0xee>
 8013cac:	0030      	movs	r0, r6
 8013cae:	9903      	ldr	r1, [sp, #12]
 8013cb0:	f001 fdcc 	bl	801584c <__mcmp>
 8013cb4:	2800      	cmp	r0, #0
 8013cb6:	db21      	blt.n	8013cfc <quorem+0xdc>
 8013cb8:	0030      	movs	r0, r6
 8013cba:	2400      	movs	r4, #0
 8013cbc:	9b01      	ldr	r3, [sp, #4]
 8013cbe:	9903      	ldr	r1, [sp, #12]
 8013cc0:	3301      	adds	r3, #1
 8013cc2:	9301      	str	r3, [sp, #4]
 8013cc4:	3014      	adds	r0, #20
 8013cc6:	3114      	adds	r1, #20
 8013cc8:	6803      	ldr	r3, [r0, #0]
 8013cca:	c920      	ldmia	r1!, {r5}
 8013ccc:	b29a      	uxth	r2, r3
 8013cce:	1914      	adds	r4, r2, r4
 8013cd0:	b2aa      	uxth	r2, r5
 8013cd2:	1aa2      	subs	r2, r4, r2
 8013cd4:	0c1b      	lsrs	r3, r3, #16
 8013cd6:	0c2d      	lsrs	r5, r5, #16
 8013cd8:	1414      	asrs	r4, r2, #16
 8013cda:	1b5b      	subs	r3, r3, r5
 8013cdc:	191b      	adds	r3, r3, r4
 8013cde:	141c      	asrs	r4, r3, #16
 8013ce0:	b292      	uxth	r2, r2
 8013ce2:	041b      	lsls	r3, r3, #16
 8013ce4:	4313      	orrs	r3, r2
 8013ce6:	c008      	stmia	r0!, {r3}
 8013ce8:	9b04      	ldr	r3, [sp, #16]
 8013cea:	428b      	cmp	r3, r1
 8013cec:	d2ec      	bcs.n	8013cc8 <quorem+0xa8>
 8013cee:	9b00      	ldr	r3, [sp, #0]
 8013cf0:	9a02      	ldr	r2, [sp, #8]
 8013cf2:	009b      	lsls	r3, r3, #2
 8013cf4:	18d3      	adds	r3, r2, r3
 8013cf6:	681a      	ldr	r2, [r3, #0]
 8013cf8:	2a00      	cmp	r2, #0
 8013cfa:	d015      	beq.n	8013d28 <quorem+0x108>
 8013cfc:	9801      	ldr	r0, [sp, #4]
 8013cfe:	b007      	add	sp, #28
 8013d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d02:	6823      	ldr	r3, [r4, #0]
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d106      	bne.n	8013d16 <quorem+0xf6>
 8013d08:	9b00      	ldr	r3, [sp, #0]
 8013d0a:	3b01      	subs	r3, #1
 8013d0c:	9300      	str	r3, [sp, #0]
 8013d0e:	9b02      	ldr	r3, [sp, #8]
 8013d10:	3c04      	subs	r4, #4
 8013d12:	42a3      	cmp	r3, r4
 8013d14:	d3f5      	bcc.n	8013d02 <quorem+0xe2>
 8013d16:	9b00      	ldr	r3, [sp, #0]
 8013d18:	6133      	str	r3, [r6, #16]
 8013d1a:	e7c7      	b.n	8013cac <quorem+0x8c>
 8013d1c:	681a      	ldr	r2, [r3, #0]
 8013d1e:	2a00      	cmp	r2, #0
 8013d20:	d106      	bne.n	8013d30 <quorem+0x110>
 8013d22:	9a00      	ldr	r2, [sp, #0]
 8013d24:	3a01      	subs	r2, #1
 8013d26:	9200      	str	r2, [sp, #0]
 8013d28:	9a02      	ldr	r2, [sp, #8]
 8013d2a:	3b04      	subs	r3, #4
 8013d2c:	429a      	cmp	r2, r3
 8013d2e:	d3f5      	bcc.n	8013d1c <quorem+0xfc>
 8013d30:	9b00      	ldr	r3, [sp, #0]
 8013d32:	6133      	str	r3, [r6, #16]
 8013d34:	e7e2      	b.n	8013cfc <quorem+0xdc>
	...

08013d38 <_dtoa_r>:
 8013d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013d3a:	b09d      	sub	sp, #116	; 0x74
 8013d3c:	9202      	str	r2, [sp, #8]
 8013d3e:	9303      	str	r3, [sp, #12]
 8013d40:	9b02      	ldr	r3, [sp, #8]
 8013d42:	9c03      	ldr	r4, [sp, #12]
 8013d44:	9308      	str	r3, [sp, #32]
 8013d46:	9409      	str	r4, [sp, #36]	; 0x24
 8013d48:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8013d4a:	0007      	movs	r7, r0
 8013d4c:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8013d4e:	2c00      	cmp	r4, #0
 8013d50:	d10e      	bne.n	8013d70 <_dtoa_r+0x38>
 8013d52:	2010      	movs	r0, #16
 8013d54:	f001 fa72 	bl	801523c <malloc>
 8013d58:	1e02      	subs	r2, r0, #0
 8013d5a:	6278      	str	r0, [r7, #36]	; 0x24
 8013d5c:	d104      	bne.n	8013d68 <_dtoa_r+0x30>
 8013d5e:	21ea      	movs	r1, #234	; 0xea
 8013d60:	4bc7      	ldr	r3, [pc, #796]	; (8014080 <_dtoa_r+0x348>)
 8013d62:	48c8      	ldr	r0, [pc, #800]	; (8014084 <_dtoa_r+0x34c>)
 8013d64:	f7ff ff2c 	bl	8013bc0 <__assert_func>
 8013d68:	6044      	str	r4, [r0, #4]
 8013d6a:	6084      	str	r4, [r0, #8]
 8013d6c:	6004      	str	r4, [r0, #0]
 8013d6e:	60c4      	str	r4, [r0, #12]
 8013d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d72:	6819      	ldr	r1, [r3, #0]
 8013d74:	2900      	cmp	r1, #0
 8013d76:	d00a      	beq.n	8013d8e <_dtoa_r+0x56>
 8013d78:	685a      	ldr	r2, [r3, #4]
 8013d7a:	2301      	movs	r3, #1
 8013d7c:	4093      	lsls	r3, r2
 8013d7e:	604a      	str	r2, [r1, #4]
 8013d80:	608b      	str	r3, [r1, #8]
 8013d82:	0038      	movs	r0, r7
 8013d84:	f001 fad6 	bl	8015334 <_Bfree>
 8013d88:	2200      	movs	r2, #0
 8013d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d8c:	601a      	str	r2, [r3, #0]
 8013d8e:	9b03      	ldr	r3, [sp, #12]
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	da20      	bge.n	8013dd6 <_dtoa_r+0x9e>
 8013d94:	2301      	movs	r3, #1
 8013d96:	602b      	str	r3, [r5, #0]
 8013d98:	9b03      	ldr	r3, [sp, #12]
 8013d9a:	005b      	lsls	r3, r3, #1
 8013d9c:	085b      	lsrs	r3, r3, #1
 8013d9e:	9309      	str	r3, [sp, #36]	; 0x24
 8013da0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8013da2:	4bb9      	ldr	r3, [pc, #740]	; (8014088 <_dtoa_r+0x350>)
 8013da4:	4ab8      	ldr	r2, [pc, #736]	; (8014088 <_dtoa_r+0x350>)
 8013da6:	402b      	ands	r3, r5
 8013da8:	4293      	cmp	r3, r2
 8013daa:	d117      	bne.n	8013ddc <_dtoa_r+0xa4>
 8013dac:	4bb7      	ldr	r3, [pc, #732]	; (801408c <_dtoa_r+0x354>)
 8013dae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8013db0:	0328      	lsls	r0, r5, #12
 8013db2:	6013      	str	r3, [r2, #0]
 8013db4:	9b02      	ldr	r3, [sp, #8]
 8013db6:	0b00      	lsrs	r0, r0, #12
 8013db8:	4318      	orrs	r0, r3
 8013dba:	d101      	bne.n	8013dc0 <_dtoa_r+0x88>
 8013dbc:	f000 fdbf 	bl	801493e <_dtoa_r+0xc06>
 8013dc0:	48b3      	ldr	r0, [pc, #716]	; (8014090 <_dtoa_r+0x358>)
 8013dc2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013dc4:	9006      	str	r0, [sp, #24]
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d002      	beq.n	8013dd0 <_dtoa_r+0x98>
 8013dca:	4bb2      	ldr	r3, [pc, #712]	; (8014094 <_dtoa_r+0x35c>)
 8013dcc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8013dce:	6013      	str	r3, [r2, #0]
 8013dd0:	9806      	ldr	r0, [sp, #24]
 8013dd2:	b01d      	add	sp, #116	; 0x74
 8013dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013dd6:	2300      	movs	r3, #0
 8013dd8:	602b      	str	r3, [r5, #0]
 8013dda:	e7e1      	b.n	8013da0 <_dtoa_r+0x68>
 8013ddc:	9b08      	ldr	r3, [sp, #32]
 8013dde:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8013de0:	9312      	str	r3, [sp, #72]	; 0x48
 8013de2:	9413      	str	r4, [sp, #76]	; 0x4c
 8013de4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8013de6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8013de8:	2200      	movs	r2, #0
 8013dea:	2300      	movs	r3, #0
 8013dec:	f7ec fb2e 	bl	800044c <__aeabi_dcmpeq>
 8013df0:	1e04      	subs	r4, r0, #0
 8013df2:	d009      	beq.n	8013e08 <_dtoa_r+0xd0>
 8013df4:	2301      	movs	r3, #1
 8013df6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8013df8:	6013      	str	r3, [r2, #0]
 8013dfa:	4ba7      	ldr	r3, [pc, #668]	; (8014098 <_dtoa_r+0x360>)
 8013dfc:	9306      	str	r3, [sp, #24]
 8013dfe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d0e5      	beq.n	8013dd0 <_dtoa_r+0x98>
 8013e04:	4ba5      	ldr	r3, [pc, #660]	; (801409c <_dtoa_r+0x364>)
 8013e06:	e7e1      	b.n	8013dcc <_dtoa_r+0x94>
 8013e08:	ab1a      	add	r3, sp, #104	; 0x68
 8013e0a:	9301      	str	r3, [sp, #4]
 8013e0c:	ab1b      	add	r3, sp, #108	; 0x6c
 8013e0e:	9300      	str	r3, [sp, #0]
 8013e10:	0038      	movs	r0, r7
 8013e12:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013e14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013e16:	f001 fe41 	bl	8015a9c <__d2b>
 8013e1a:	006e      	lsls	r6, r5, #1
 8013e1c:	9005      	str	r0, [sp, #20]
 8013e1e:	0d76      	lsrs	r6, r6, #21
 8013e20:	d100      	bne.n	8013e24 <_dtoa_r+0xec>
 8013e22:	e07c      	b.n	8013f1e <_dtoa_r+0x1e6>
 8013e24:	9812      	ldr	r0, [sp, #72]	; 0x48
 8013e26:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8013e28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013e2a:	4a9d      	ldr	r2, [pc, #628]	; (80140a0 <_dtoa_r+0x368>)
 8013e2c:	031b      	lsls	r3, r3, #12
 8013e2e:	0b1b      	lsrs	r3, r3, #12
 8013e30:	431a      	orrs	r2, r3
 8013e32:	0011      	movs	r1, r2
 8013e34:	4b9b      	ldr	r3, [pc, #620]	; (80140a4 <_dtoa_r+0x36c>)
 8013e36:	9418      	str	r4, [sp, #96]	; 0x60
 8013e38:	18f6      	adds	r6, r6, r3
 8013e3a:	2200      	movs	r2, #0
 8013e3c:	4b9a      	ldr	r3, [pc, #616]	; (80140a8 <_dtoa_r+0x370>)
 8013e3e:	f7ed fec7 	bl	8001bd0 <__aeabi_dsub>
 8013e42:	4a9a      	ldr	r2, [pc, #616]	; (80140ac <_dtoa_r+0x374>)
 8013e44:	4b9a      	ldr	r3, [pc, #616]	; (80140b0 <_dtoa_r+0x378>)
 8013e46:	f7ed fc57 	bl	80016f8 <__aeabi_dmul>
 8013e4a:	4a9a      	ldr	r2, [pc, #616]	; (80140b4 <_dtoa_r+0x37c>)
 8013e4c:	4b9a      	ldr	r3, [pc, #616]	; (80140b8 <_dtoa_r+0x380>)
 8013e4e:	f7ec fd15 	bl	800087c <__aeabi_dadd>
 8013e52:	0004      	movs	r4, r0
 8013e54:	0030      	movs	r0, r6
 8013e56:	000d      	movs	r5, r1
 8013e58:	f7ee faa0 	bl	800239c <__aeabi_i2d>
 8013e5c:	4a97      	ldr	r2, [pc, #604]	; (80140bc <_dtoa_r+0x384>)
 8013e5e:	4b98      	ldr	r3, [pc, #608]	; (80140c0 <_dtoa_r+0x388>)
 8013e60:	f7ed fc4a 	bl	80016f8 <__aeabi_dmul>
 8013e64:	0002      	movs	r2, r0
 8013e66:	000b      	movs	r3, r1
 8013e68:	0020      	movs	r0, r4
 8013e6a:	0029      	movs	r1, r5
 8013e6c:	f7ec fd06 	bl	800087c <__aeabi_dadd>
 8013e70:	0004      	movs	r4, r0
 8013e72:	000d      	movs	r5, r1
 8013e74:	f7ee fa5c 	bl	8002330 <__aeabi_d2iz>
 8013e78:	2200      	movs	r2, #0
 8013e7a:	9002      	str	r0, [sp, #8]
 8013e7c:	2300      	movs	r3, #0
 8013e7e:	0020      	movs	r0, r4
 8013e80:	0029      	movs	r1, r5
 8013e82:	f7ec fae9 	bl	8000458 <__aeabi_dcmplt>
 8013e86:	2800      	cmp	r0, #0
 8013e88:	d00b      	beq.n	8013ea2 <_dtoa_r+0x16a>
 8013e8a:	9802      	ldr	r0, [sp, #8]
 8013e8c:	f7ee fa86 	bl	800239c <__aeabi_i2d>
 8013e90:	002b      	movs	r3, r5
 8013e92:	0022      	movs	r2, r4
 8013e94:	f7ec fada 	bl	800044c <__aeabi_dcmpeq>
 8013e98:	4243      	negs	r3, r0
 8013e9a:	4158      	adcs	r0, r3
 8013e9c:	9b02      	ldr	r3, [sp, #8]
 8013e9e:	1a1b      	subs	r3, r3, r0
 8013ea0:	9302      	str	r3, [sp, #8]
 8013ea2:	2301      	movs	r3, #1
 8013ea4:	9316      	str	r3, [sp, #88]	; 0x58
 8013ea6:	9b02      	ldr	r3, [sp, #8]
 8013ea8:	2b16      	cmp	r3, #22
 8013eaa:	d80f      	bhi.n	8013ecc <_dtoa_r+0x194>
 8013eac:	9812      	ldr	r0, [sp, #72]	; 0x48
 8013eae:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8013eb0:	00da      	lsls	r2, r3, #3
 8013eb2:	4b84      	ldr	r3, [pc, #528]	; (80140c4 <_dtoa_r+0x38c>)
 8013eb4:	189b      	adds	r3, r3, r2
 8013eb6:	681a      	ldr	r2, [r3, #0]
 8013eb8:	685b      	ldr	r3, [r3, #4]
 8013eba:	f7ec facd 	bl	8000458 <__aeabi_dcmplt>
 8013ebe:	2800      	cmp	r0, #0
 8013ec0:	d049      	beq.n	8013f56 <_dtoa_r+0x21e>
 8013ec2:	9b02      	ldr	r3, [sp, #8]
 8013ec4:	3b01      	subs	r3, #1
 8013ec6:	9302      	str	r3, [sp, #8]
 8013ec8:	2300      	movs	r3, #0
 8013eca:	9316      	str	r3, [sp, #88]	; 0x58
 8013ecc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8013ece:	1b9e      	subs	r6, r3, r6
 8013ed0:	2300      	movs	r3, #0
 8013ed2:	930a      	str	r3, [sp, #40]	; 0x28
 8013ed4:	0033      	movs	r3, r6
 8013ed6:	3b01      	subs	r3, #1
 8013ed8:	930d      	str	r3, [sp, #52]	; 0x34
 8013eda:	d504      	bpl.n	8013ee6 <_dtoa_r+0x1ae>
 8013edc:	2301      	movs	r3, #1
 8013ede:	1b9b      	subs	r3, r3, r6
 8013ee0:	930a      	str	r3, [sp, #40]	; 0x28
 8013ee2:	2300      	movs	r3, #0
 8013ee4:	930d      	str	r3, [sp, #52]	; 0x34
 8013ee6:	9b02      	ldr	r3, [sp, #8]
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	db36      	blt.n	8013f5a <_dtoa_r+0x222>
 8013eec:	9a02      	ldr	r2, [sp, #8]
 8013eee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013ef0:	4694      	mov	ip, r2
 8013ef2:	4463      	add	r3, ip
 8013ef4:	930d      	str	r3, [sp, #52]	; 0x34
 8013ef6:	2300      	movs	r3, #0
 8013ef8:	9215      	str	r2, [sp, #84]	; 0x54
 8013efa:	930e      	str	r3, [sp, #56]	; 0x38
 8013efc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013efe:	2401      	movs	r4, #1
 8013f00:	2b09      	cmp	r3, #9
 8013f02:	d864      	bhi.n	8013fce <_dtoa_r+0x296>
 8013f04:	2b05      	cmp	r3, #5
 8013f06:	dd02      	ble.n	8013f0e <_dtoa_r+0x1d6>
 8013f08:	2400      	movs	r4, #0
 8013f0a:	3b04      	subs	r3, #4
 8013f0c:	9322      	str	r3, [sp, #136]	; 0x88
 8013f0e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013f10:	1e98      	subs	r0, r3, #2
 8013f12:	2803      	cmp	r0, #3
 8013f14:	d864      	bhi.n	8013fe0 <_dtoa_r+0x2a8>
 8013f16:	f7ec f8ff 	bl	8000118 <__gnu_thumb1_case_uqi>
 8013f1a:	3829      	.short	0x3829
 8013f1c:	5836      	.short	0x5836
 8013f1e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8013f20:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8013f22:	189e      	adds	r6, r3, r2
 8013f24:	4b68      	ldr	r3, [pc, #416]	; (80140c8 <_dtoa_r+0x390>)
 8013f26:	18f2      	adds	r2, r6, r3
 8013f28:	2a20      	cmp	r2, #32
 8013f2a:	dd0f      	ble.n	8013f4c <_dtoa_r+0x214>
 8013f2c:	2340      	movs	r3, #64	; 0x40
 8013f2e:	1a9b      	subs	r3, r3, r2
 8013f30:	409d      	lsls	r5, r3
 8013f32:	4b66      	ldr	r3, [pc, #408]	; (80140cc <_dtoa_r+0x394>)
 8013f34:	9802      	ldr	r0, [sp, #8]
 8013f36:	18f3      	adds	r3, r6, r3
 8013f38:	40d8      	lsrs	r0, r3
 8013f3a:	4328      	orrs	r0, r5
 8013f3c:	f7ee fa5e 	bl	80023fc <__aeabi_ui2d>
 8013f40:	2301      	movs	r3, #1
 8013f42:	4c63      	ldr	r4, [pc, #396]	; (80140d0 <_dtoa_r+0x398>)
 8013f44:	3e01      	subs	r6, #1
 8013f46:	1909      	adds	r1, r1, r4
 8013f48:	9318      	str	r3, [sp, #96]	; 0x60
 8013f4a:	e776      	b.n	8013e3a <_dtoa_r+0x102>
 8013f4c:	2320      	movs	r3, #32
 8013f4e:	9802      	ldr	r0, [sp, #8]
 8013f50:	1a9b      	subs	r3, r3, r2
 8013f52:	4098      	lsls	r0, r3
 8013f54:	e7f2      	b.n	8013f3c <_dtoa_r+0x204>
 8013f56:	9016      	str	r0, [sp, #88]	; 0x58
 8013f58:	e7b8      	b.n	8013ecc <_dtoa_r+0x194>
 8013f5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013f5c:	9a02      	ldr	r2, [sp, #8]
 8013f5e:	1a9b      	subs	r3, r3, r2
 8013f60:	930a      	str	r3, [sp, #40]	; 0x28
 8013f62:	4253      	negs	r3, r2
 8013f64:	930e      	str	r3, [sp, #56]	; 0x38
 8013f66:	2300      	movs	r3, #0
 8013f68:	9315      	str	r3, [sp, #84]	; 0x54
 8013f6a:	e7c7      	b.n	8013efc <_dtoa_r+0x1c4>
 8013f6c:	2300      	movs	r3, #0
 8013f6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8013f70:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013f72:	930c      	str	r3, [sp, #48]	; 0x30
 8013f74:	9307      	str	r3, [sp, #28]
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	dc13      	bgt.n	8013fa2 <_dtoa_r+0x26a>
 8013f7a:	2301      	movs	r3, #1
 8013f7c:	001a      	movs	r2, r3
 8013f7e:	930c      	str	r3, [sp, #48]	; 0x30
 8013f80:	9307      	str	r3, [sp, #28]
 8013f82:	9223      	str	r2, [sp, #140]	; 0x8c
 8013f84:	e00d      	b.n	8013fa2 <_dtoa_r+0x26a>
 8013f86:	2301      	movs	r3, #1
 8013f88:	e7f1      	b.n	8013f6e <_dtoa_r+0x236>
 8013f8a:	2300      	movs	r3, #0
 8013f8c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8013f8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8013f90:	4694      	mov	ip, r2
 8013f92:	9b02      	ldr	r3, [sp, #8]
 8013f94:	4463      	add	r3, ip
 8013f96:	930c      	str	r3, [sp, #48]	; 0x30
 8013f98:	3301      	adds	r3, #1
 8013f9a:	9307      	str	r3, [sp, #28]
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	dc00      	bgt.n	8013fa2 <_dtoa_r+0x26a>
 8013fa0:	2301      	movs	r3, #1
 8013fa2:	2200      	movs	r2, #0
 8013fa4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013fa6:	6042      	str	r2, [r0, #4]
 8013fa8:	3204      	adds	r2, #4
 8013faa:	0015      	movs	r5, r2
 8013fac:	3514      	adds	r5, #20
 8013fae:	6841      	ldr	r1, [r0, #4]
 8013fb0:	429d      	cmp	r5, r3
 8013fb2:	d919      	bls.n	8013fe8 <_dtoa_r+0x2b0>
 8013fb4:	0038      	movs	r0, r7
 8013fb6:	f001 f979 	bl	80152ac <_Balloc>
 8013fba:	9006      	str	r0, [sp, #24]
 8013fbc:	2800      	cmp	r0, #0
 8013fbe:	d117      	bne.n	8013ff0 <_dtoa_r+0x2b8>
 8013fc0:	21d5      	movs	r1, #213	; 0xd5
 8013fc2:	0002      	movs	r2, r0
 8013fc4:	4b43      	ldr	r3, [pc, #268]	; (80140d4 <_dtoa_r+0x39c>)
 8013fc6:	0049      	lsls	r1, r1, #1
 8013fc8:	e6cb      	b.n	8013d62 <_dtoa_r+0x2a>
 8013fca:	2301      	movs	r3, #1
 8013fcc:	e7de      	b.n	8013f8c <_dtoa_r+0x254>
 8013fce:	2300      	movs	r3, #0
 8013fd0:	940f      	str	r4, [sp, #60]	; 0x3c
 8013fd2:	9322      	str	r3, [sp, #136]	; 0x88
 8013fd4:	3b01      	subs	r3, #1
 8013fd6:	930c      	str	r3, [sp, #48]	; 0x30
 8013fd8:	9307      	str	r3, [sp, #28]
 8013fda:	2200      	movs	r2, #0
 8013fdc:	3313      	adds	r3, #19
 8013fde:	e7d0      	b.n	8013f82 <_dtoa_r+0x24a>
 8013fe0:	2301      	movs	r3, #1
 8013fe2:	930f      	str	r3, [sp, #60]	; 0x3c
 8013fe4:	3b02      	subs	r3, #2
 8013fe6:	e7f6      	b.n	8013fd6 <_dtoa_r+0x29e>
 8013fe8:	3101      	adds	r1, #1
 8013fea:	6041      	str	r1, [r0, #4]
 8013fec:	0052      	lsls	r2, r2, #1
 8013fee:	e7dc      	b.n	8013faa <_dtoa_r+0x272>
 8013ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ff2:	9a06      	ldr	r2, [sp, #24]
 8013ff4:	601a      	str	r2, [r3, #0]
 8013ff6:	9b07      	ldr	r3, [sp, #28]
 8013ff8:	2b0e      	cmp	r3, #14
 8013ffa:	d900      	bls.n	8013ffe <_dtoa_r+0x2c6>
 8013ffc:	e0eb      	b.n	80141d6 <_dtoa_r+0x49e>
 8013ffe:	2c00      	cmp	r4, #0
 8014000:	d100      	bne.n	8014004 <_dtoa_r+0x2cc>
 8014002:	e0e8      	b.n	80141d6 <_dtoa_r+0x49e>
 8014004:	9b02      	ldr	r3, [sp, #8]
 8014006:	2b00      	cmp	r3, #0
 8014008:	dd68      	ble.n	80140dc <_dtoa_r+0x3a4>
 801400a:	001a      	movs	r2, r3
 801400c:	210f      	movs	r1, #15
 801400e:	4b2d      	ldr	r3, [pc, #180]	; (80140c4 <_dtoa_r+0x38c>)
 8014010:	400a      	ands	r2, r1
 8014012:	00d2      	lsls	r2, r2, #3
 8014014:	189b      	adds	r3, r3, r2
 8014016:	681d      	ldr	r5, [r3, #0]
 8014018:	685e      	ldr	r6, [r3, #4]
 801401a:	9b02      	ldr	r3, [sp, #8]
 801401c:	111c      	asrs	r4, r3, #4
 801401e:	2302      	movs	r3, #2
 8014020:	9310      	str	r3, [sp, #64]	; 0x40
 8014022:	9b02      	ldr	r3, [sp, #8]
 8014024:	05db      	lsls	r3, r3, #23
 8014026:	d50b      	bpl.n	8014040 <_dtoa_r+0x308>
 8014028:	4b2b      	ldr	r3, [pc, #172]	; (80140d8 <_dtoa_r+0x3a0>)
 801402a:	400c      	ands	r4, r1
 801402c:	6a1a      	ldr	r2, [r3, #32]
 801402e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014030:	9812      	ldr	r0, [sp, #72]	; 0x48
 8014032:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8014034:	f7ec ff5e 	bl	8000ef4 <__aeabi_ddiv>
 8014038:	2303      	movs	r3, #3
 801403a:	9008      	str	r0, [sp, #32]
 801403c:	9109      	str	r1, [sp, #36]	; 0x24
 801403e:	9310      	str	r3, [sp, #64]	; 0x40
 8014040:	4b25      	ldr	r3, [pc, #148]	; (80140d8 <_dtoa_r+0x3a0>)
 8014042:	9314      	str	r3, [sp, #80]	; 0x50
 8014044:	2c00      	cmp	r4, #0
 8014046:	d108      	bne.n	801405a <_dtoa_r+0x322>
 8014048:	9808      	ldr	r0, [sp, #32]
 801404a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801404c:	002a      	movs	r2, r5
 801404e:	0033      	movs	r3, r6
 8014050:	f7ec ff50 	bl	8000ef4 <__aeabi_ddiv>
 8014054:	9008      	str	r0, [sp, #32]
 8014056:	9109      	str	r1, [sp, #36]	; 0x24
 8014058:	e05c      	b.n	8014114 <_dtoa_r+0x3dc>
 801405a:	2301      	movs	r3, #1
 801405c:	421c      	tst	r4, r3
 801405e:	d00b      	beq.n	8014078 <_dtoa_r+0x340>
 8014060:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014062:	0028      	movs	r0, r5
 8014064:	3301      	adds	r3, #1
 8014066:	9310      	str	r3, [sp, #64]	; 0x40
 8014068:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801406a:	0031      	movs	r1, r6
 801406c:	681a      	ldr	r2, [r3, #0]
 801406e:	685b      	ldr	r3, [r3, #4]
 8014070:	f7ed fb42 	bl	80016f8 <__aeabi_dmul>
 8014074:	0005      	movs	r5, r0
 8014076:	000e      	movs	r6, r1
 8014078:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801407a:	1064      	asrs	r4, r4, #1
 801407c:	3308      	adds	r3, #8
 801407e:	e7e0      	b.n	8014042 <_dtoa_r+0x30a>
 8014080:	08017248 	.word	0x08017248
 8014084:	0801742b 	.word	0x0801742b
 8014088:	7ff00000 	.word	0x7ff00000
 801408c:	0000270f 	.word	0x0000270f
 8014090:	08017427 	.word	0x08017427
 8014094:	0801742a 	.word	0x0801742a
 8014098:	080171d4 	.word	0x080171d4
 801409c:	080171d5 	.word	0x080171d5
 80140a0:	3ff00000 	.word	0x3ff00000
 80140a4:	fffffc01 	.word	0xfffffc01
 80140a8:	3ff80000 	.word	0x3ff80000
 80140ac:	636f4361 	.word	0x636f4361
 80140b0:	3fd287a7 	.word	0x3fd287a7
 80140b4:	8b60c8b3 	.word	0x8b60c8b3
 80140b8:	3fc68a28 	.word	0x3fc68a28
 80140bc:	509f79fb 	.word	0x509f79fb
 80140c0:	3fd34413 	.word	0x3fd34413
 80140c4:	08017598 	.word	0x08017598
 80140c8:	00000432 	.word	0x00000432
 80140cc:	00000412 	.word	0x00000412
 80140d0:	fe100000 	.word	0xfe100000
 80140d4:	08017486 	.word	0x08017486
 80140d8:	08017570 	.word	0x08017570
 80140dc:	2302      	movs	r3, #2
 80140de:	9310      	str	r3, [sp, #64]	; 0x40
 80140e0:	9b02      	ldr	r3, [sp, #8]
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d016      	beq.n	8014114 <_dtoa_r+0x3dc>
 80140e6:	9812      	ldr	r0, [sp, #72]	; 0x48
 80140e8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80140ea:	425c      	negs	r4, r3
 80140ec:	230f      	movs	r3, #15
 80140ee:	4ab6      	ldr	r2, [pc, #728]	; (80143c8 <_dtoa_r+0x690>)
 80140f0:	4023      	ands	r3, r4
 80140f2:	00db      	lsls	r3, r3, #3
 80140f4:	18d3      	adds	r3, r2, r3
 80140f6:	681a      	ldr	r2, [r3, #0]
 80140f8:	685b      	ldr	r3, [r3, #4]
 80140fa:	f7ed fafd 	bl	80016f8 <__aeabi_dmul>
 80140fe:	2601      	movs	r6, #1
 8014100:	2300      	movs	r3, #0
 8014102:	9008      	str	r0, [sp, #32]
 8014104:	9109      	str	r1, [sp, #36]	; 0x24
 8014106:	4db1      	ldr	r5, [pc, #708]	; (80143cc <_dtoa_r+0x694>)
 8014108:	1124      	asrs	r4, r4, #4
 801410a:	2c00      	cmp	r4, #0
 801410c:	d000      	beq.n	8014110 <_dtoa_r+0x3d8>
 801410e:	e094      	b.n	801423a <_dtoa_r+0x502>
 8014110:	2b00      	cmp	r3, #0
 8014112:	d19f      	bne.n	8014054 <_dtoa_r+0x31c>
 8014114:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014116:	2b00      	cmp	r3, #0
 8014118:	d100      	bne.n	801411c <_dtoa_r+0x3e4>
 801411a:	e09b      	b.n	8014254 <_dtoa_r+0x51c>
 801411c:	9c08      	ldr	r4, [sp, #32]
 801411e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8014120:	2200      	movs	r2, #0
 8014122:	0020      	movs	r0, r4
 8014124:	0029      	movs	r1, r5
 8014126:	4baa      	ldr	r3, [pc, #680]	; (80143d0 <_dtoa_r+0x698>)
 8014128:	f7ec f996 	bl	8000458 <__aeabi_dcmplt>
 801412c:	2800      	cmp	r0, #0
 801412e:	d100      	bne.n	8014132 <_dtoa_r+0x3fa>
 8014130:	e090      	b.n	8014254 <_dtoa_r+0x51c>
 8014132:	9b07      	ldr	r3, [sp, #28]
 8014134:	2b00      	cmp	r3, #0
 8014136:	d100      	bne.n	801413a <_dtoa_r+0x402>
 8014138:	e08c      	b.n	8014254 <_dtoa_r+0x51c>
 801413a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801413c:	2b00      	cmp	r3, #0
 801413e:	dd46      	ble.n	80141ce <_dtoa_r+0x496>
 8014140:	9b02      	ldr	r3, [sp, #8]
 8014142:	2200      	movs	r2, #0
 8014144:	0020      	movs	r0, r4
 8014146:	0029      	movs	r1, r5
 8014148:	1e5e      	subs	r6, r3, #1
 801414a:	4ba2      	ldr	r3, [pc, #648]	; (80143d4 <_dtoa_r+0x69c>)
 801414c:	f7ed fad4 	bl	80016f8 <__aeabi_dmul>
 8014150:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014152:	9008      	str	r0, [sp, #32]
 8014154:	9109      	str	r1, [sp, #36]	; 0x24
 8014156:	3301      	adds	r3, #1
 8014158:	9310      	str	r3, [sp, #64]	; 0x40
 801415a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801415c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801415e:	9c08      	ldr	r4, [sp, #32]
 8014160:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8014162:	9314      	str	r3, [sp, #80]	; 0x50
 8014164:	f7ee f91a 	bl	800239c <__aeabi_i2d>
 8014168:	0022      	movs	r2, r4
 801416a:	002b      	movs	r3, r5
 801416c:	f7ed fac4 	bl	80016f8 <__aeabi_dmul>
 8014170:	2200      	movs	r2, #0
 8014172:	4b99      	ldr	r3, [pc, #612]	; (80143d8 <_dtoa_r+0x6a0>)
 8014174:	f7ec fb82 	bl	800087c <__aeabi_dadd>
 8014178:	9010      	str	r0, [sp, #64]	; 0x40
 801417a:	9111      	str	r1, [sp, #68]	; 0x44
 801417c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801417e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014180:	9208      	str	r2, [sp, #32]
 8014182:	9309      	str	r3, [sp, #36]	; 0x24
 8014184:	4a95      	ldr	r2, [pc, #596]	; (80143dc <_dtoa_r+0x6a4>)
 8014186:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014188:	4694      	mov	ip, r2
 801418a:	4463      	add	r3, ip
 801418c:	9317      	str	r3, [sp, #92]	; 0x5c
 801418e:	9309      	str	r3, [sp, #36]	; 0x24
 8014190:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014192:	2b00      	cmp	r3, #0
 8014194:	d161      	bne.n	801425a <_dtoa_r+0x522>
 8014196:	2200      	movs	r2, #0
 8014198:	0020      	movs	r0, r4
 801419a:	0029      	movs	r1, r5
 801419c:	4b90      	ldr	r3, [pc, #576]	; (80143e0 <_dtoa_r+0x6a8>)
 801419e:	f7ed fd17 	bl	8001bd0 <__aeabi_dsub>
 80141a2:	9a08      	ldr	r2, [sp, #32]
 80141a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80141a6:	0004      	movs	r4, r0
 80141a8:	000d      	movs	r5, r1
 80141aa:	f7ec f969 	bl	8000480 <__aeabi_dcmpgt>
 80141ae:	2800      	cmp	r0, #0
 80141b0:	d000      	beq.n	80141b4 <_dtoa_r+0x47c>
 80141b2:	e2af      	b.n	8014714 <_dtoa_r+0x9dc>
 80141b4:	488b      	ldr	r0, [pc, #556]	; (80143e4 <_dtoa_r+0x6ac>)
 80141b6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80141b8:	4684      	mov	ip, r0
 80141ba:	4461      	add	r1, ip
 80141bc:	000b      	movs	r3, r1
 80141be:	0020      	movs	r0, r4
 80141c0:	0029      	movs	r1, r5
 80141c2:	9a08      	ldr	r2, [sp, #32]
 80141c4:	f7ec f948 	bl	8000458 <__aeabi_dcmplt>
 80141c8:	2800      	cmp	r0, #0
 80141ca:	d000      	beq.n	80141ce <_dtoa_r+0x496>
 80141cc:	e29f      	b.n	801470e <_dtoa_r+0x9d6>
 80141ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80141d0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80141d2:	9308      	str	r3, [sp, #32]
 80141d4:	9409      	str	r4, [sp, #36]	; 0x24
 80141d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80141d8:	2b00      	cmp	r3, #0
 80141da:	da00      	bge.n	80141de <_dtoa_r+0x4a6>
 80141dc:	e172      	b.n	80144c4 <_dtoa_r+0x78c>
 80141de:	9a02      	ldr	r2, [sp, #8]
 80141e0:	2a0e      	cmp	r2, #14
 80141e2:	dd00      	ble.n	80141e6 <_dtoa_r+0x4ae>
 80141e4:	e16e      	b.n	80144c4 <_dtoa_r+0x78c>
 80141e6:	4b78      	ldr	r3, [pc, #480]	; (80143c8 <_dtoa_r+0x690>)
 80141e8:	00d2      	lsls	r2, r2, #3
 80141ea:	189b      	adds	r3, r3, r2
 80141ec:	685c      	ldr	r4, [r3, #4]
 80141ee:	681b      	ldr	r3, [r3, #0]
 80141f0:	930a      	str	r3, [sp, #40]	; 0x28
 80141f2:	940b      	str	r4, [sp, #44]	; 0x2c
 80141f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	db00      	blt.n	80141fc <_dtoa_r+0x4c4>
 80141fa:	e0f7      	b.n	80143ec <_dtoa_r+0x6b4>
 80141fc:	9b07      	ldr	r3, [sp, #28]
 80141fe:	2b00      	cmp	r3, #0
 8014200:	dd00      	ble.n	8014204 <_dtoa_r+0x4cc>
 8014202:	e0f3      	b.n	80143ec <_dtoa_r+0x6b4>
 8014204:	d000      	beq.n	8014208 <_dtoa_r+0x4d0>
 8014206:	e282      	b.n	801470e <_dtoa_r+0x9d6>
 8014208:	980a      	ldr	r0, [sp, #40]	; 0x28
 801420a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801420c:	2200      	movs	r2, #0
 801420e:	4b74      	ldr	r3, [pc, #464]	; (80143e0 <_dtoa_r+0x6a8>)
 8014210:	f7ed fa72 	bl	80016f8 <__aeabi_dmul>
 8014214:	9a08      	ldr	r2, [sp, #32]
 8014216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014218:	f7ec f93c 	bl	8000494 <__aeabi_dcmpge>
 801421c:	9e07      	ldr	r6, [sp, #28]
 801421e:	0035      	movs	r5, r6
 8014220:	2800      	cmp	r0, #0
 8014222:	d000      	beq.n	8014226 <_dtoa_r+0x4ee>
 8014224:	e259      	b.n	80146da <_dtoa_r+0x9a2>
 8014226:	9b06      	ldr	r3, [sp, #24]
 8014228:	9a06      	ldr	r2, [sp, #24]
 801422a:	3301      	adds	r3, #1
 801422c:	9308      	str	r3, [sp, #32]
 801422e:	2331      	movs	r3, #49	; 0x31
 8014230:	7013      	strb	r3, [r2, #0]
 8014232:	9b02      	ldr	r3, [sp, #8]
 8014234:	3301      	adds	r3, #1
 8014236:	9302      	str	r3, [sp, #8]
 8014238:	e254      	b.n	80146e4 <_dtoa_r+0x9ac>
 801423a:	4234      	tst	r4, r6
 801423c:	d007      	beq.n	801424e <_dtoa_r+0x516>
 801423e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014240:	3301      	adds	r3, #1
 8014242:	9310      	str	r3, [sp, #64]	; 0x40
 8014244:	682a      	ldr	r2, [r5, #0]
 8014246:	686b      	ldr	r3, [r5, #4]
 8014248:	f7ed fa56 	bl	80016f8 <__aeabi_dmul>
 801424c:	0033      	movs	r3, r6
 801424e:	1064      	asrs	r4, r4, #1
 8014250:	3508      	adds	r5, #8
 8014252:	e75a      	b.n	801410a <_dtoa_r+0x3d2>
 8014254:	9e02      	ldr	r6, [sp, #8]
 8014256:	9b07      	ldr	r3, [sp, #28]
 8014258:	e780      	b.n	801415c <_dtoa_r+0x424>
 801425a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801425c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801425e:	1e5a      	subs	r2, r3, #1
 8014260:	4b59      	ldr	r3, [pc, #356]	; (80143c8 <_dtoa_r+0x690>)
 8014262:	00d2      	lsls	r2, r2, #3
 8014264:	189b      	adds	r3, r3, r2
 8014266:	681a      	ldr	r2, [r3, #0]
 8014268:	685b      	ldr	r3, [r3, #4]
 801426a:	2900      	cmp	r1, #0
 801426c:	d051      	beq.n	8014312 <_dtoa_r+0x5da>
 801426e:	2000      	movs	r0, #0
 8014270:	495d      	ldr	r1, [pc, #372]	; (80143e8 <_dtoa_r+0x6b0>)
 8014272:	f7ec fe3f 	bl	8000ef4 <__aeabi_ddiv>
 8014276:	9a08      	ldr	r2, [sp, #32]
 8014278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801427a:	f7ed fca9 	bl	8001bd0 <__aeabi_dsub>
 801427e:	9a06      	ldr	r2, [sp, #24]
 8014280:	9b06      	ldr	r3, [sp, #24]
 8014282:	4694      	mov	ip, r2
 8014284:	9317      	str	r3, [sp, #92]	; 0x5c
 8014286:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014288:	9010      	str	r0, [sp, #64]	; 0x40
 801428a:	9111      	str	r1, [sp, #68]	; 0x44
 801428c:	4463      	add	r3, ip
 801428e:	9319      	str	r3, [sp, #100]	; 0x64
 8014290:	0029      	movs	r1, r5
 8014292:	0020      	movs	r0, r4
 8014294:	f7ee f84c 	bl	8002330 <__aeabi_d2iz>
 8014298:	9014      	str	r0, [sp, #80]	; 0x50
 801429a:	f7ee f87f 	bl	800239c <__aeabi_i2d>
 801429e:	0002      	movs	r2, r0
 80142a0:	000b      	movs	r3, r1
 80142a2:	0020      	movs	r0, r4
 80142a4:	0029      	movs	r1, r5
 80142a6:	f7ed fc93 	bl	8001bd0 <__aeabi_dsub>
 80142aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80142ac:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80142ae:	3301      	adds	r3, #1
 80142b0:	9308      	str	r3, [sp, #32]
 80142b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80142b4:	0004      	movs	r4, r0
 80142b6:	3330      	adds	r3, #48	; 0x30
 80142b8:	7013      	strb	r3, [r2, #0]
 80142ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80142bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80142be:	000d      	movs	r5, r1
 80142c0:	f7ec f8ca 	bl	8000458 <__aeabi_dcmplt>
 80142c4:	2800      	cmp	r0, #0
 80142c6:	d175      	bne.n	80143b4 <_dtoa_r+0x67c>
 80142c8:	0022      	movs	r2, r4
 80142ca:	002b      	movs	r3, r5
 80142cc:	2000      	movs	r0, #0
 80142ce:	4940      	ldr	r1, [pc, #256]	; (80143d0 <_dtoa_r+0x698>)
 80142d0:	f7ed fc7e 	bl	8001bd0 <__aeabi_dsub>
 80142d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80142d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80142d8:	f7ec f8be 	bl	8000458 <__aeabi_dcmplt>
 80142dc:	2800      	cmp	r0, #0
 80142de:	d000      	beq.n	80142e2 <_dtoa_r+0x5aa>
 80142e0:	e0d2      	b.n	8014488 <_dtoa_r+0x750>
 80142e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80142e4:	9a08      	ldr	r2, [sp, #32]
 80142e6:	4293      	cmp	r3, r2
 80142e8:	d100      	bne.n	80142ec <_dtoa_r+0x5b4>
 80142ea:	e770      	b.n	80141ce <_dtoa_r+0x496>
 80142ec:	9810      	ldr	r0, [sp, #64]	; 0x40
 80142ee:	9911      	ldr	r1, [sp, #68]	; 0x44
 80142f0:	2200      	movs	r2, #0
 80142f2:	4b38      	ldr	r3, [pc, #224]	; (80143d4 <_dtoa_r+0x69c>)
 80142f4:	f7ed fa00 	bl	80016f8 <__aeabi_dmul>
 80142f8:	4b36      	ldr	r3, [pc, #216]	; (80143d4 <_dtoa_r+0x69c>)
 80142fa:	9010      	str	r0, [sp, #64]	; 0x40
 80142fc:	9111      	str	r1, [sp, #68]	; 0x44
 80142fe:	2200      	movs	r2, #0
 8014300:	0020      	movs	r0, r4
 8014302:	0029      	movs	r1, r5
 8014304:	f7ed f9f8 	bl	80016f8 <__aeabi_dmul>
 8014308:	9b08      	ldr	r3, [sp, #32]
 801430a:	0004      	movs	r4, r0
 801430c:	000d      	movs	r5, r1
 801430e:	9317      	str	r3, [sp, #92]	; 0x5c
 8014310:	e7be      	b.n	8014290 <_dtoa_r+0x558>
 8014312:	9808      	ldr	r0, [sp, #32]
 8014314:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014316:	f7ed f9ef 	bl	80016f8 <__aeabi_dmul>
 801431a:	9a06      	ldr	r2, [sp, #24]
 801431c:	9b06      	ldr	r3, [sp, #24]
 801431e:	4694      	mov	ip, r2
 8014320:	9308      	str	r3, [sp, #32]
 8014322:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014324:	9010      	str	r0, [sp, #64]	; 0x40
 8014326:	9111      	str	r1, [sp, #68]	; 0x44
 8014328:	4463      	add	r3, ip
 801432a:	9319      	str	r3, [sp, #100]	; 0x64
 801432c:	0029      	movs	r1, r5
 801432e:	0020      	movs	r0, r4
 8014330:	f7ed fffe 	bl	8002330 <__aeabi_d2iz>
 8014334:	9017      	str	r0, [sp, #92]	; 0x5c
 8014336:	f7ee f831 	bl	800239c <__aeabi_i2d>
 801433a:	0002      	movs	r2, r0
 801433c:	000b      	movs	r3, r1
 801433e:	0020      	movs	r0, r4
 8014340:	0029      	movs	r1, r5
 8014342:	f7ed fc45 	bl	8001bd0 <__aeabi_dsub>
 8014346:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014348:	9a08      	ldr	r2, [sp, #32]
 801434a:	3330      	adds	r3, #48	; 0x30
 801434c:	7013      	strb	r3, [r2, #0]
 801434e:	0013      	movs	r3, r2
 8014350:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014352:	3301      	adds	r3, #1
 8014354:	0004      	movs	r4, r0
 8014356:	000d      	movs	r5, r1
 8014358:	9308      	str	r3, [sp, #32]
 801435a:	4293      	cmp	r3, r2
 801435c:	d12c      	bne.n	80143b8 <_dtoa_r+0x680>
 801435e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8014360:	9911      	ldr	r1, [sp, #68]	; 0x44
 8014362:	9a06      	ldr	r2, [sp, #24]
 8014364:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014366:	4694      	mov	ip, r2
 8014368:	4463      	add	r3, ip
 801436a:	2200      	movs	r2, #0
 801436c:	9308      	str	r3, [sp, #32]
 801436e:	4b1e      	ldr	r3, [pc, #120]	; (80143e8 <_dtoa_r+0x6b0>)
 8014370:	f7ec fa84 	bl	800087c <__aeabi_dadd>
 8014374:	0002      	movs	r2, r0
 8014376:	000b      	movs	r3, r1
 8014378:	0020      	movs	r0, r4
 801437a:	0029      	movs	r1, r5
 801437c:	f7ec f880 	bl	8000480 <__aeabi_dcmpgt>
 8014380:	2800      	cmp	r0, #0
 8014382:	d000      	beq.n	8014386 <_dtoa_r+0x64e>
 8014384:	e080      	b.n	8014488 <_dtoa_r+0x750>
 8014386:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014388:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801438a:	2000      	movs	r0, #0
 801438c:	4916      	ldr	r1, [pc, #88]	; (80143e8 <_dtoa_r+0x6b0>)
 801438e:	f7ed fc1f 	bl	8001bd0 <__aeabi_dsub>
 8014392:	0002      	movs	r2, r0
 8014394:	000b      	movs	r3, r1
 8014396:	0020      	movs	r0, r4
 8014398:	0029      	movs	r1, r5
 801439a:	f7ec f85d 	bl	8000458 <__aeabi_dcmplt>
 801439e:	2800      	cmp	r0, #0
 80143a0:	d100      	bne.n	80143a4 <_dtoa_r+0x66c>
 80143a2:	e714      	b.n	80141ce <_dtoa_r+0x496>
 80143a4:	9b08      	ldr	r3, [sp, #32]
 80143a6:	001a      	movs	r2, r3
 80143a8:	3a01      	subs	r2, #1
 80143aa:	9208      	str	r2, [sp, #32]
 80143ac:	7812      	ldrb	r2, [r2, #0]
 80143ae:	2a30      	cmp	r2, #48	; 0x30
 80143b0:	d0f8      	beq.n	80143a4 <_dtoa_r+0x66c>
 80143b2:	9308      	str	r3, [sp, #32]
 80143b4:	9602      	str	r6, [sp, #8]
 80143b6:	e055      	b.n	8014464 <_dtoa_r+0x72c>
 80143b8:	2200      	movs	r2, #0
 80143ba:	4b06      	ldr	r3, [pc, #24]	; (80143d4 <_dtoa_r+0x69c>)
 80143bc:	f7ed f99c 	bl	80016f8 <__aeabi_dmul>
 80143c0:	0004      	movs	r4, r0
 80143c2:	000d      	movs	r5, r1
 80143c4:	e7b2      	b.n	801432c <_dtoa_r+0x5f4>
 80143c6:	46c0      	nop			; (mov r8, r8)
 80143c8:	08017598 	.word	0x08017598
 80143cc:	08017570 	.word	0x08017570
 80143d0:	3ff00000 	.word	0x3ff00000
 80143d4:	40240000 	.word	0x40240000
 80143d8:	401c0000 	.word	0x401c0000
 80143dc:	fcc00000 	.word	0xfcc00000
 80143e0:	40140000 	.word	0x40140000
 80143e4:	7cc00000 	.word	0x7cc00000
 80143e8:	3fe00000 	.word	0x3fe00000
 80143ec:	9b07      	ldr	r3, [sp, #28]
 80143ee:	9e06      	ldr	r6, [sp, #24]
 80143f0:	3b01      	subs	r3, #1
 80143f2:	199b      	adds	r3, r3, r6
 80143f4:	930c      	str	r3, [sp, #48]	; 0x30
 80143f6:	9c08      	ldr	r4, [sp, #32]
 80143f8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80143fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80143fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80143fe:	0020      	movs	r0, r4
 8014400:	0029      	movs	r1, r5
 8014402:	f7ec fd77 	bl	8000ef4 <__aeabi_ddiv>
 8014406:	f7ed ff93 	bl	8002330 <__aeabi_d2iz>
 801440a:	9007      	str	r0, [sp, #28]
 801440c:	f7ed ffc6 	bl	800239c <__aeabi_i2d>
 8014410:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014412:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014414:	f7ed f970 	bl	80016f8 <__aeabi_dmul>
 8014418:	0002      	movs	r2, r0
 801441a:	000b      	movs	r3, r1
 801441c:	0020      	movs	r0, r4
 801441e:	0029      	movs	r1, r5
 8014420:	f7ed fbd6 	bl	8001bd0 <__aeabi_dsub>
 8014424:	0033      	movs	r3, r6
 8014426:	9a07      	ldr	r2, [sp, #28]
 8014428:	3601      	adds	r6, #1
 801442a:	3230      	adds	r2, #48	; 0x30
 801442c:	701a      	strb	r2, [r3, #0]
 801442e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014430:	9608      	str	r6, [sp, #32]
 8014432:	429a      	cmp	r2, r3
 8014434:	d139      	bne.n	80144aa <_dtoa_r+0x772>
 8014436:	0002      	movs	r2, r0
 8014438:	000b      	movs	r3, r1
 801443a:	f7ec fa1f 	bl	800087c <__aeabi_dadd>
 801443e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014440:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014442:	0004      	movs	r4, r0
 8014444:	000d      	movs	r5, r1
 8014446:	f7ec f81b 	bl	8000480 <__aeabi_dcmpgt>
 801444a:	2800      	cmp	r0, #0
 801444c:	d11b      	bne.n	8014486 <_dtoa_r+0x74e>
 801444e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014450:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014452:	0020      	movs	r0, r4
 8014454:	0029      	movs	r1, r5
 8014456:	f7eb fff9 	bl	800044c <__aeabi_dcmpeq>
 801445a:	2800      	cmp	r0, #0
 801445c:	d002      	beq.n	8014464 <_dtoa_r+0x72c>
 801445e:	9b07      	ldr	r3, [sp, #28]
 8014460:	07db      	lsls	r3, r3, #31
 8014462:	d410      	bmi.n	8014486 <_dtoa_r+0x74e>
 8014464:	0038      	movs	r0, r7
 8014466:	9905      	ldr	r1, [sp, #20]
 8014468:	f000 ff64 	bl	8015334 <_Bfree>
 801446c:	2300      	movs	r3, #0
 801446e:	9a08      	ldr	r2, [sp, #32]
 8014470:	9802      	ldr	r0, [sp, #8]
 8014472:	7013      	strb	r3, [r2, #0]
 8014474:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014476:	3001      	adds	r0, #1
 8014478:	6018      	str	r0, [r3, #0]
 801447a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801447c:	2b00      	cmp	r3, #0
 801447e:	d100      	bne.n	8014482 <_dtoa_r+0x74a>
 8014480:	e4a6      	b.n	8013dd0 <_dtoa_r+0x98>
 8014482:	601a      	str	r2, [r3, #0]
 8014484:	e4a4      	b.n	8013dd0 <_dtoa_r+0x98>
 8014486:	9e02      	ldr	r6, [sp, #8]
 8014488:	9b08      	ldr	r3, [sp, #32]
 801448a:	9308      	str	r3, [sp, #32]
 801448c:	3b01      	subs	r3, #1
 801448e:	781a      	ldrb	r2, [r3, #0]
 8014490:	2a39      	cmp	r2, #57	; 0x39
 8014492:	d106      	bne.n	80144a2 <_dtoa_r+0x76a>
 8014494:	9a06      	ldr	r2, [sp, #24]
 8014496:	429a      	cmp	r2, r3
 8014498:	d1f7      	bne.n	801448a <_dtoa_r+0x752>
 801449a:	2230      	movs	r2, #48	; 0x30
 801449c:	9906      	ldr	r1, [sp, #24]
 801449e:	3601      	adds	r6, #1
 80144a0:	700a      	strb	r2, [r1, #0]
 80144a2:	781a      	ldrb	r2, [r3, #0]
 80144a4:	3201      	adds	r2, #1
 80144a6:	701a      	strb	r2, [r3, #0]
 80144a8:	e784      	b.n	80143b4 <_dtoa_r+0x67c>
 80144aa:	2200      	movs	r2, #0
 80144ac:	4baa      	ldr	r3, [pc, #680]	; (8014758 <_dtoa_r+0xa20>)
 80144ae:	f7ed f923 	bl	80016f8 <__aeabi_dmul>
 80144b2:	2200      	movs	r2, #0
 80144b4:	2300      	movs	r3, #0
 80144b6:	0004      	movs	r4, r0
 80144b8:	000d      	movs	r5, r1
 80144ba:	f7eb ffc7 	bl	800044c <__aeabi_dcmpeq>
 80144be:	2800      	cmp	r0, #0
 80144c0:	d09b      	beq.n	80143fa <_dtoa_r+0x6c2>
 80144c2:	e7cf      	b.n	8014464 <_dtoa_r+0x72c>
 80144c4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80144c6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80144c8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80144ca:	2d00      	cmp	r5, #0
 80144cc:	d012      	beq.n	80144f4 <_dtoa_r+0x7bc>
 80144ce:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80144d0:	2a01      	cmp	r2, #1
 80144d2:	dc66      	bgt.n	80145a2 <_dtoa_r+0x86a>
 80144d4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80144d6:	2a00      	cmp	r2, #0
 80144d8:	d05d      	beq.n	8014596 <_dtoa_r+0x85e>
 80144da:	4aa0      	ldr	r2, [pc, #640]	; (801475c <_dtoa_r+0xa24>)
 80144dc:	189b      	adds	r3, r3, r2
 80144de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80144e0:	2101      	movs	r1, #1
 80144e2:	18d2      	adds	r2, r2, r3
 80144e4:	920a      	str	r2, [sp, #40]	; 0x28
 80144e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80144e8:	0038      	movs	r0, r7
 80144ea:	18d3      	adds	r3, r2, r3
 80144ec:	930d      	str	r3, [sp, #52]	; 0x34
 80144ee:	f001 f81d 	bl	801552c <__i2b>
 80144f2:	0005      	movs	r5, r0
 80144f4:	2c00      	cmp	r4, #0
 80144f6:	dd0e      	ble.n	8014516 <_dtoa_r+0x7de>
 80144f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	dd0b      	ble.n	8014516 <_dtoa_r+0x7de>
 80144fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014500:	0023      	movs	r3, r4
 8014502:	4294      	cmp	r4, r2
 8014504:	dd00      	ble.n	8014508 <_dtoa_r+0x7d0>
 8014506:	0013      	movs	r3, r2
 8014508:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801450a:	1ae4      	subs	r4, r4, r3
 801450c:	1ad2      	subs	r2, r2, r3
 801450e:	920a      	str	r2, [sp, #40]	; 0x28
 8014510:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014512:	1ad3      	subs	r3, r2, r3
 8014514:	930d      	str	r3, [sp, #52]	; 0x34
 8014516:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014518:	2b00      	cmp	r3, #0
 801451a:	d01f      	beq.n	801455c <_dtoa_r+0x824>
 801451c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801451e:	2b00      	cmp	r3, #0
 8014520:	d054      	beq.n	80145cc <_dtoa_r+0x894>
 8014522:	2e00      	cmp	r6, #0
 8014524:	dd11      	ble.n	801454a <_dtoa_r+0x812>
 8014526:	0029      	movs	r1, r5
 8014528:	0032      	movs	r2, r6
 801452a:	0038      	movs	r0, r7
 801452c:	f001 f8c4 	bl	80156b8 <__pow5mult>
 8014530:	9a05      	ldr	r2, [sp, #20]
 8014532:	0001      	movs	r1, r0
 8014534:	0005      	movs	r5, r0
 8014536:	0038      	movs	r0, r7
 8014538:	f001 f80e 	bl	8015558 <__multiply>
 801453c:	9905      	ldr	r1, [sp, #20]
 801453e:	9014      	str	r0, [sp, #80]	; 0x50
 8014540:	0038      	movs	r0, r7
 8014542:	f000 fef7 	bl	8015334 <_Bfree>
 8014546:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014548:	9305      	str	r3, [sp, #20]
 801454a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801454c:	1b9a      	subs	r2, r3, r6
 801454e:	42b3      	cmp	r3, r6
 8014550:	d004      	beq.n	801455c <_dtoa_r+0x824>
 8014552:	0038      	movs	r0, r7
 8014554:	9905      	ldr	r1, [sp, #20]
 8014556:	f001 f8af 	bl	80156b8 <__pow5mult>
 801455a:	9005      	str	r0, [sp, #20]
 801455c:	2101      	movs	r1, #1
 801455e:	0038      	movs	r0, r7
 8014560:	f000 ffe4 	bl	801552c <__i2b>
 8014564:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014566:	0006      	movs	r6, r0
 8014568:	2b00      	cmp	r3, #0
 801456a:	dd31      	ble.n	80145d0 <_dtoa_r+0x898>
 801456c:	001a      	movs	r2, r3
 801456e:	0001      	movs	r1, r0
 8014570:	0038      	movs	r0, r7
 8014572:	f001 f8a1 	bl	80156b8 <__pow5mult>
 8014576:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014578:	0006      	movs	r6, r0
 801457a:	2b01      	cmp	r3, #1
 801457c:	dd2d      	ble.n	80145da <_dtoa_r+0x8a2>
 801457e:	2300      	movs	r3, #0
 8014580:	930e      	str	r3, [sp, #56]	; 0x38
 8014582:	6933      	ldr	r3, [r6, #16]
 8014584:	3303      	adds	r3, #3
 8014586:	009b      	lsls	r3, r3, #2
 8014588:	18f3      	adds	r3, r6, r3
 801458a:	6858      	ldr	r0, [r3, #4]
 801458c:	f000 ff86 	bl	801549c <__hi0bits>
 8014590:	2320      	movs	r3, #32
 8014592:	1a18      	subs	r0, r3, r0
 8014594:	e039      	b.n	801460a <_dtoa_r+0x8d2>
 8014596:	2336      	movs	r3, #54	; 0x36
 8014598:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801459a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801459c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801459e:	1a9b      	subs	r3, r3, r2
 80145a0:	e79d      	b.n	80144de <_dtoa_r+0x7a6>
 80145a2:	9b07      	ldr	r3, [sp, #28]
 80145a4:	1e5e      	subs	r6, r3, #1
 80145a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80145a8:	42b3      	cmp	r3, r6
 80145aa:	db07      	blt.n	80145bc <_dtoa_r+0x884>
 80145ac:	1b9e      	subs	r6, r3, r6
 80145ae:	9b07      	ldr	r3, [sp, #28]
 80145b0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	da93      	bge.n	80144de <_dtoa_r+0x7a6>
 80145b6:	1ae4      	subs	r4, r4, r3
 80145b8:	2300      	movs	r3, #0
 80145ba:	e790      	b.n	80144de <_dtoa_r+0x7a6>
 80145bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80145be:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80145c0:	1af3      	subs	r3, r6, r3
 80145c2:	18d3      	adds	r3, r2, r3
 80145c4:	960e      	str	r6, [sp, #56]	; 0x38
 80145c6:	9315      	str	r3, [sp, #84]	; 0x54
 80145c8:	2600      	movs	r6, #0
 80145ca:	e7f0      	b.n	80145ae <_dtoa_r+0x876>
 80145cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80145ce:	e7c0      	b.n	8014552 <_dtoa_r+0x81a>
 80145d0:	2300      	movs	r3, #0
 80145d2:	930e      	str	r3, [sp, #56]	; 0x38
 80145d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80145d6:	2b01      	cmp	r3, #1
 80145d8:	dc13      	bgt.n	8014602 <_dtoa_r+0x8ca>
 80145da:	2300      	movs	r3, #0
 80145dc:	930e      	str	r3, [sp, #56]	; 0x38
 80145de:	9b08      	ldr	r3, [sp, #32]
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	d10e      	bne.n	8014602 <_dtoa_r+0x8ca>
 80145e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145e6:	031b      	lsls	r3, r3, #12
 80145e8:	d10b      	bne.n	8014602 <_dtoa_r+0x8ca>
 80145ea:	4b5d      	ldr	r3, [pc, #372]	; (8014760 <_dtoa_r+0xa28>)
 80145ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80145ee:	4213      	tst	r3, r2
 80145f0:	d007      	beq.n	8014602 <_dtoa_r+0x8ca>
 80145f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80145f4:	3301      	adds	r3, #1
 80145f6:	930a      	str	r3, [sp, #40]	; 0x28
 80145f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80145fa:	3301      	adds	r3, #1
 80145fc:	930d      	str	r3, [sp, #52]	; 0x34
 80145fe:	2301      	movs	r3, #1
 8014600:	930e      	str	r3, [sp, #56]	; 0x38
 8014602:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014604:	2001      	movs	r0, #1
 8014606:	2b00      	cmp	r3, #0
 8014608:	d1bb      	bne.n	8014582 <_dtoa_r+0x84a>
 801460a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801460c:	221f      	movs	r2, #31
 801460e:	1818      	adds	r0, r3, r0
 8014610:	0003      	movs	r3, r0
 8014612:	4013      	ands	r3, r2
 8014614:	4210      	tst	r0, r2
 8014616:	d046      	beq.n	80146a6 <_dtoa_r+0x96e>
 8014618:	3201      	adds	r2, #1
 801461a:	1ad2      	subs	r2, r2, r3
 801461c:	2a04      	cmp	r2, #4
 801461e:	dd3f      	ble.n	80146a0 <_dtoa_r+0x968>
 8014620:	221c      	movs	r2, #28
 8014622:	1ad3      	subs	r3, r2, r3
 8014624:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014626:	18e4      	adds	r4, r4, r3
 8014628:	18d2      	adds	r2, r2, r3
 801462a:	920a      	str	r2, [sp, #40]	; 0x28
 801462c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801462e:	18d3      	adds	r3, r2, r3
 8014630:	930d      	str	r3, [sp, #52]	; 0x34
 8014632:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014634:	2b00      	cmp	r3, #0
 8014636:	dd05      	ble.n	8014644 <_dtoa_r+0x90c>
 8014638:	001a      	movs	r2, r3
 801463a:	0038      	movs	r0, r7
 801463c:	9905      	ldr	r1, [sp, #20]
 801463e:	f001 f897 	bl	8015770 <__lshift>
 8014642:	9005      	str	r0, [sp, #20]
 8014644:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014646:	2b00      	cmp	r3, #0
 8014648:	dd05      	ble.n	8014656 <_dtoa_r+0x91e>
 801464a:	0031      	movs	r1, r6
 801464c:	001a      	movs	r2, r3
 801464e:	0038      	movs	r0, r7
 8014650:	f001 f88e 	bl	8015770 <__lshift>
 8014654:	0006      	movs	r6, r0
 8014656:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014658:	2b00      	cmp	r3, #0
 801465a:	d026      	beq.n	80146aa <_dtoa_r+0x972>
 801465c:	0031      	movs	r1, r6
 801465e:	9805      	ldr	r0, [sp, #20]
 8014660:	f001 f8f4 	bl	801584c <__mcmp>
 8014664:	2800      	cmp	r0, #0
 8014666:	da20      	bge.n	80146aa <_dtoa_r+0x972>
 8014668:	9b02      	ldr	r3, [sp, #8]
 801466a:	220a      	movs	r2, #10
 801466c:	3b01      	subs	r3, #1
 801466e:	9302      	str	r3, [sp, #8]
 8014670:	0038      	movs	r0, r7
 8014672:	2300      	movs	r3, #0
 8014674:	9905      	ldr	r1, [sp, #20]
 8014676:	f000 fe81 	bl	801537c <__multadd>
 801467a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801467c:	9005      	str	r0, [sp, #20]
 801467e:	2b00      	cmp	r3, #0
 8014680:	d100      	bne.n	8014684 <_dtoa_r+0x94c>
 8014682:	e166      	b.n	8014952 <_dtoa_r+0xc1a>
 8014684:	2300      	movs	r3, #0
 8014686:	0029      	movs	r1, r5
 8014688:	220a      	movs	r2, #10
 801468a:	0038      	movs	r0, r7
 801468c:	f000 fe76 	bl	801537c <__multadd>
 8014690:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014692:	0005      	movs	r5, r0
 8014694:	2b00      	cmp	r3, #0
 8014696:	dc47      	bgt.n	8014728 <_dtoa_r+0x9f0>
 8014698:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801469a:	2b02      	cmp	r3, #2
 801469c:	dc0d      	bgt.n	80146ba <_dtoa_r+0x982>
 801469e:	e043      	b.n	8014728 <_dtoa_r+0x9f0>
 80146a0:	2a04      	cmp	r2, #4
 80146a2:	d0c6      	beq.n	8014632 <_dtoa_r+0x8fa>
 80146a4:	0013      	movs	r3, r2
 80146a6:	331c      	adds	r3, #28
 80146a8:	e7bc      	b.n	8014624 <_dtoa_r+0x8ec>
 80146aa:	9b07      	ldr	r3, [sp, #28]
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	dc35      	bgt.n	801471c <_dtoa_r+0x9e4>
 80146b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80146b2:	2b02      	cmp	r3, #2
 80146b4:	dd32      	ble.n	801471c <_dtoa_r+0x9e4>
 80146b6:	9b07      	ldr	r3, [sp, #28]
 80146b8:	930c      	str	r3, [sp, #48]	; 0x30
 80146ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d10c      	bne.n	80146da <_dtoa_r+0x9a2>
 80146c0:	0031      	movs	r1, r6
 80146c2:	2205      	movs	r2, #5
 80146c4:	0038      	movs	r0, r7
 80146c6:	f000 fe59 	bl	801537c <__multadd>
 80146ca:	0006      	movs	r6, r0
 80146cc:	0001      	movs	r1, r0
 80146ce:	9805      	ldr	r0, [sp, #20]
 80146d0:	f001 f8bc 	bl	801584c <__mcmp>
 80146d4:	2800      	cmp	r0, #0
 80146d6:	dd00      	ble.n	80146da <_dtoa_r+0x9a2>
 80146d8:	e5a5      	b.n	8014226 <_dtoa_r+0x4ee>
 80146da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80146dc:	43db      	mvns	r3, r3
 80146de:	9302      	str	r3, [sp, #8]
 80146e0:	9b06      	ldr	r3, [sp, #24]
 80146e2:	9308      	str	r3, [sp, #32]
 80146e4:	2400      	movs	r4, #0
 80146e6:	0031      	movs	r1, r6
 80146e8:	0038      	movs	r0, r7
 80146ea:	f000 fe23 	bl	8015334 <_Bfree>
 80146ee:	2d00      	cmp	r5, #0
 80146f0:	d100      	bne.n	80146f4 <_dtoa_r+0x9bc>
 80146f2:	e6b7      	b.n	8014464 <_dtoa_r+0x72c>
 80146f4:	2c00      	cmp	r4, #0
 80146f6:	d005      	beq.n	8014704 <_dtoa_r+0x9cc>
 80146f8:	42ac      	cmp	r4, r5
 80146fa:	d003      	beq.n	8014704 <_dtoa_r+0x9cc>
 80146fc:	0021      	movs	r1, r4
 80146fe:	0038      	movs	r0, r7
 8014700:	f000 fe18 	bl	8015334 <_Bfree>
 8014704:	0029      	movs	r1, r5
 8014706:	0038      	movs	r0, r7
 8014708:	f000 fe14 	bl	8015334 <_Bfree>
 801470c:	e6aa      	b.n	8014464 <_dtoa_r+0x72c>
 801470e:	2600      	movs	r6, #0
 8014710:	0035      	movs	r5, r6
 8014712:	e7e2      	b.n	80146da <_dtoa_r+0x9a2>
 8014714:	9602      	str	r6, [sp, #8]
 8014716:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8014718:	0035      	movs	r5, r6
 801471a:	e584      	b.n	8014226 <_dtoa_r+0x4ee>
 801471c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801471e:	2b00      	cmp	r3, #0
 8014720:	d100      	bne.n	8014724 <_dtoa_r+0x9ec>
 8014722:	e0ce      	b.n	80148c2 <_dtoa_r+0xb8a>
 8014724:	9b07      	ldr	r3, [sp, #28]
 8014726:	930c      	str	r3, [sp, #48]	; 0x30
 8014728:	2c00      	cmp	r4, #0
 801472a:	dd05      	ble.n	8014738 <_dtoa_r+0xa00>
 801472c:	0029      	movs	r1, r5
 801472e:	0022      	movs	r2, r4
 8014730:	0038      	movs	r0, r7
 8014732:	f001 f81d 	bl	8015770 <__lshift>
 8014736:	0005      	movs	r5, r0
 8014738:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801473a:	0028      	movs	r0, r5
 801473c:	2b00      	cmp	r3, #0
 801473e:	d022      	beq.n	8014786 <_dtoa_r+0xa4e>
 8014740:	0038      	movs	r0, r7
 8014742:	6869      	ldr	r1, [r5, #4]
 8014744:	f000 fdb2 	bl	80152ac <_Balloc>
 8014748:	1e04      	subs	r4, r0, #0
 801474a:	d10f      	bne.n	801476c <_dtoa_r+0xa34>
 801474c:	0002      	movs	r2, r0
 801474e:	4b05      	ldr	r3, [pc, #20]	; (8014764 <_dtoa_r+0xa2c>)
 8014750:	4905      	ldr	r1, [pc, #20]	; (8014768 <_dtoa_r+0xa30>)
 8014752:	f7ff fb06 	bl	8013d62 <_dtoa_r+0x2a>
 8014756:	46c0      	nop			; (mov r8, r8)
 8014758:	40240000 	.word	0x40240000
 801475c:	00000433 	.word	0x00000433
 8014760:	7ff00000 	.word	0x7ff00000
 8014764:	08017486 	.word	0x08017486
 8014768:	000002ea 	.word	0x000002ea
 801476c:	0029      	movs	r1, r5
 801476e:	692b      	ldr	r3, [r5, #16]
 8014770:	310c      	adds	r1, #12
 8014772:	1c9a      	adds	r2, r3, #2
 8014774:	0092      	lsls	r2, r2, #2
 8014776:	300c      	adds	r0, #12
 8014778:	f7fd fc37 	bl	8011fea <memcpy>
 801477c:	2201      	movs	r2, #1
 801477e:	0021      	movs	r1, r4
 8014780:	0038      	movs	r0, r7
 8014782:	f000 fff5 	bl	8015770 <__lshift>
 8014786:	9b06      	ldr	r3, [sp, #24]
 8014788:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801478a:	930a      	str	r3, [sp, #40]	; 0x28
 801478c:	3b01      	subs	r3, #1
 801478e:	189b      	adds	r3, r3, r2
 8014790:	2201      	movs	r2, #1
 8014792:	002c      	movs	r4, r5
 8014794:	0005      	movs	r5, r0
 8014796:	9314      	str	r3, [sp, #80]	; 0x50
 8014798:	9b08      	ldr	r3, [sp, #32]
 801479a:	4013      	ands	r3, r2
 801479c:	930f      	str	r3, [sp, #60]	; 0x3c
 801479e:	0031      	movs	r1, r6
 80147a0:	9805      	ldr	r0, [sp, #20]
 80147a2:	f7ff fa3d 	bl	8013c20 <quorem>
 80147a6:	0003      	movs	r3, r0
 80147a8:	0021      	movs	r1, r4
 80147aa:	3330      	adds	r3, #48	; 0x30
 80147ac:	900d      	str	r0, [sp, #52]	; 0x34
 80147ae:	9805      	ldr	r0, [sp, #20]
 80147b0:	9307      	str	r3, [sp, #28]
 80147b2:	f001 f84b 	bl	801584c <__mcmp>
 80147b6:	002a      	movs	r2, r5
 80147b8:	900e      	str	r0, [sp, #56]	; 0x38
 80147ba:	0031      	movs	r1, r6
 80147bc:	0038      	movs	r0, r7
 80147be:	f001 f861 	bl	8015884 <__mdiff>
 80147c2:	68c3      	ldr	r3, [r0, #12]
 80147c4:	9008      	str	r0, [sp, #32]
 80147c6:	9310      	str	r3, [sp, #64]	; 0x40
 80147c8:	2301      	movs	r3, #1
 80147ca:	930c      	str	r3, [sp, #48]	; 0x30
 80147cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d104      	bne.n	80147dc <_dtoa_r+0xaa4>
 80147d2:	0001      	movs	r1, r0
 80147d4:	9805      	ldr	r0, [sp, #20]
 80147d6:	f001 f839 	bl	801584c <__mcmp>
 80147da:	900c      	str	r0, [sp, #48]	; 0x30
 80147dc:	0038      	movs	r0, r7
 80147de:	9908      	ldr	r1, [sp, #32]
 80147e0:	f000 fda8 	bl	8015334 <_Bfree>
 80147e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80147e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80147e8:	3301      	adds	r3, #1
 80147ea:	9308      	str	r3, [sp, #32]
 80147ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80147ee:	4313      	orrs	r3, r2
 80147f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80147f2:	4313      	orrs	r3, r2
 80147f4:	d10c      	bne.n	8014810 <_dtoa_r+0xad8>
 80147f6:	9b07      	ldr	r3, [sp, #28]
 80147f8:	2b39      	cmp	r3, #57	; 0x39
 80147fa:	d026      	beq.n	801484a <_dtoa_r+0xb12>
 80147fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80147fe:	2b00      	cmp	r3, #0
 8014800:	dd02      	ble.n	8014808 <_dtoa_r+0xad0>
 8014802:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014804:	3331      	adds	r3, #49	; 0x31
 8014806:	9307      	str	r3, [sp, #28]
 8014808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801480a:	9a07      	ldr	r2, [sp, #28]
 801480c:	701a      	strb	r2, [r3, #0]
 801480e:	e76a      	b.n	80146e6 <_dtoa_r+0x9ae>
 8014810:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014812:	2b00      	cmp	r3, #0
 8014814:	db04      	blt.n	8014820 <_dtoa_r+0xae8>
 8014816:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8014818:	4313      	orrs	r3, r2
 801481a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801481c:	4313      	orrs	r3, r2
 801481e:	d11f      	bne.n	8014860 <_dtoa_r+0xb28>
 8014820:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014822:	2b00      	cmp	r3, #0
 8014824:	ddf0      	ble.n	8014808 <_dtoa_r+0xad0>
 8014826:	9905      	ldr	r1, [sp, #20]
 8014828:	2201      	movs	r2, #1
 801482a:	0038      	movs	r0, r7
 801482c:	f000 ffa0 	bl	8015770 <__lshift>
 8014830:	0031      	movs	r1, r6
 8014832:	9005      	str	r0, [sp, #20]
 8014834:	f001 f80a 	bl	801584c <__mcmp>
 8014838:	2800      	cmp	r0, #0
 801483a:	dc03      	bgt.n	8014844 <_dtoa_r+0xb0c>
 801483c:	d1e4      	bne.n	8014808 <_dtoa_r+0xad0>
 801483e:	9b07      	ldr	r3, [sp, #28]
 8014840:	07db      	lsls	r3, r3, #31
 8014842:	d5e1      	bpl.n	8014808 <_dtoa_r+0xad0>
 8014844:	9b07      	ldr	r3, [sp, #28]
 8014846:	2b39      	cmp	r3, #57	; 0x39
 8014848:	d1db      	bne.n	8014802 <_dtoa_r+0xaca>
 801484a:	2339      	movs	r3, #57	; 0x39
 801484c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801484e:	7013      	strb	r3, [r2, #0]
 8014850:	9b08      	ldr	r3, [sp, #32]
 8014852:	9308      	str	r3, [sp, #32]
 8014854:	3b01      	subs	r3, #1
 8014856:	781a      	ldrb	r2, [r3, #0]
 8014858:	2a39      	cmp	r2, #57	; 0x39
 801485a:	d068      	beq.n	801492e <_dtoa_r+0xbf6>
 801485c:	3201      	adds	r2, #1
 801485e:	e7d5      	b.n	801480c <_dtoa_r+0xad4>
 8014860:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014862:	2b00      	cmp	r3, #0
 8014864:	dd07      	ble.n	8014876 <_dtoa_r+0xb3e>
 8014866:	9b07      	ldr	r3, [sp, #28]
 8014868:	2b39      	cmp	r3, #57	; 0x39
 801486a:	d0ee      	beq.n	801484a <_dtoa_r+0xb12>
 801486c:	9b07      	ldr	r3, [sp, #28]
 801486e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014870:	3301      	adds	r3, #1
 8014872:	7013      	strb	r3, [r2, #0]
 8014874:	e737      	b.n	80146e6 <_dtoa_r+0x9ae>
 8014876:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014878:	9a07      	ldr	r2, [sp, #28]
 801487a:	701a      	strb	r2, [r3, #0]
 801487c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801487e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014880:	4293      	cmp	r3, r2
 8014882:	d03e      	beq.n	8014902 <_dtoa_r+0xbca>
 8014884:	2300      	movs	r3, #0
 8014886:	220a      	movs	r2, #10
 8014888:	9905      	ldr	r1, [sp, #20]
 801488a:	0038      	movs	r0, r7
 801488c:	f000 fd76 	bl	801537c <__multadd>
 8014890:	2300      	movs	r3, #0
 8014892:	9005      	str	r0, [sp, #20]
 8014894:	220a      	movs	r2, #10
 8014896:	0021      	movs	r1, r4
 8014898:	0038      	movs	r0, r7
 801489a:	42ac      	cmp	r4, r5
 801489c:	d106      	bne.n	80148ac <_dtoa_r+0xb74>
 801489e:	f000 fd6d 	bl	801537c <__multadd>
 80148a2:	0004      	movs	r4, r0
 80148a4:	0005      	movs	r5, r0
 80148a6:	9b08      	ldr	r3, [sp, #32]
 80148a8:	930a      	str	r3, [sp, #40]	; 0x28
 80148aa:	e778      	b.n	801479e <_dtoa_r+0xa66>
 80148ac:	f000 fd66 	bl	801537c <__multadd>
 80148b0:	0029      	movs	r1, r5
 80148b2:	0004      	movs	r4, r0
 80148b4:	2300      	movs	r3, #0
 80148b6:	220a      	movs	r2, #10
 80148b8:	0038      	movs	r0, r7
 80148ba:	f000 fd5f 	bl	801537c <__multadd>
 80148be:	0005      	movs	r5, r0
 80148c0:	e7f1      	b.n	80148a6 <_dtoa_r+0xb6e>
 80148c2:	9b07      	ldr	r3, [sp, #28]
 80148c4:	930c      	str	r3, [sp, #48]	; 0x30
 80148c6:	2400      	movs	r4, #0
 80148c8:	0031      	movs	r1, r6
 80148ca:	9805      	ldr	r0, [sp, #20]
 80148cc:	f7ff f9a8 	bl	8013c20 <quorem>
 80148d0:	9b06      	ldr	r3, [sp, #24]
 80148d2:	3030      	adds	r0, #48	; 0x30
 80148d4:	5518      	strb	r0, [r3, r4]
 80148d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80148d8:	3401      	adds	r4, #1
 80148da:	9007      	str	r0, [sp, #28]
 80148dc:	42a3      	cmp	r3, r4
 80148de:	dd07      	ble.n	80148f0 <_dtoa_r+0xbb8>
 80148e0:	2300      	movs	r3, #0
 80148e2:	220a      	movs	r2, #10
 80148e4:	0038      	movs	r0, r7
 80148e6:	9905      	ldr	r1, [sp, #20]
 80148e8:	f000 fd48 	bl	801537c <__multadd>
 80148ec:	9005      	str	r0, [sp, #20]
 80148ee:	e7eb      	b.n	80148c8 <_dtoa_r+0xb90>
 80148f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80148f2:	2001      	movs	r0, #1
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	dd00      	ble.n	80148fa <_dtoa_r+0xbc2>
 80148f8:	0018      	movs	r0, r3
 80148fa:	2400      	movs	r4, #0
 80148fc:	9b06      	ldr	r3, [sp, #24]
 80148fe:	181b      	adds	r3, r3, r0
 8014900:	9308      	str	r3, [sp, #32]
 8014902:	9905      	ldr	r1, [sp, #20]
 8014904:	2201      	movs	r2, #1
 8014906:	0038      	movs	r0, r7
 8014908:	f000 ff32 	bl	8015770 <__lshift>
 801490c:	0031      	movs	r1, r6
 801490e:	9005      	str	r0, [sp, #20]
 8014910:	f000 ff9c 	bl	801584c <__mcmp>
 8014914:	2800      	cmp	r0, #0
 8014916:	dc9b      	bgt.n	8014850 <_dtoa_r+0xb18>
 8014918:	d102      	bne.n	8014920 <_dtoa_r+0xbe8>
 801491a:	9b07      	ldr	r3, [sp, #28]
 801491c:	07db      	lsls	r3, r3, #31
 801491e:	d497      	bmi.n	8014850 <_dtoa_r+0xb18>
 8014920:	9b08      	ldr	r3, [sp, #32]
 8014922:	9308      	str	r3, [sp, #32]
 8014924:	3b01      	subs	r3, #1
 8014926:	781a      	ldrb	r2, [r3, #0]
 8014928:	2a30      	cmp	r2, #48	; 0x30
 801492a:	d0fa      	beq.n	8014922 <_dtoa_r+0xbea>
 801492c:	e6db      	b.n	80146e6 <_dtoa_r+0x9ae>
 801492e:	9a06      	ldr	r2, [sp, #24]
 8014930:	429a      	cmp	r2, r3
 8014932:	d18e      	bne.n	8014852 <_dtoa_r+0xb1a>
 8014934:	9b02      	ldr	r3, [sp, #8]
 8014936:	3301      	adds	r3, #1
 8014938:	9302      	str	r3, [sp, #8]
 801493a:	2331      	movs	r3, #49	; 0x31
 801493c:	e799      	b.n	8014872 <_dtoa_r+0xb3a>
 801493e:	4b09      	ldr	r3, [pc, #36]	; (8014964 <_dtoa_r+0xc2c>)
 8014940:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8014942:	9306      	str	r3, [sp, #24]
 8014944:	4b08      	ldr	r3, [pc, #32]	; (8014968 <_dtoa_r+0xc30>)
 8014946:	2a00      	cmp	r2, #0
 8014948:	d001      	beq.n	801494e <_dtoa_r+0xc16>
 801494a:	f7ff fa3f 	bl	8013dcc <_dtoa_r+0x94>
 801494e:	f7ff fa3f 	bl	8013dd0 <_dtoa_r+0x98>
 8014952:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014954:	2b00      	cmp	r3, #0
 8014956:	dcb6      	bgt.n	80148c6 <_dtoa_r+0xb8e>
 8014958:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801495a:	2b02      	cmp	r3, #2
 801495c:	dd00      	ble.n	8014960 <_dtoa_r+0xc28>
 801495e:	e6ac      	b.n	80146ba <_dtoa_r+0x982>
 8014960:	e7b1      	b.n	80148c6 <_dtoa_r+0xb8e>
 8014962:	46c0      	nop			; (mov r8, r8)
 8014964:	0801741e 	.word	0x0801741e
 8014968:	08017426 	.word	0x08017426

0801496c <__sflush_r>:
 801496c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801496e:	898b      	ldrh	r3, [r1, #12]
 8014970:	0005      	movs	r5, r0
 8014972:	000c      	movs	r4, r1
 8014974:	071a      	lsls	r2, r3, #28
 8014976:	d45f      	bmi.n	8014a38 <__sflush_r+0xcc>
 8014978:	684a      	ldr	r2, [r1, #4]
 801497a:	2a00      	cmp	r2, #0
 801497c:	dc04      	bgt.n	8014988 <__sflush_r+0x1c>
 801497e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8014980:	2a00      	cmp	r2, #0
 8014982:	dc01      	bgt.n	8014988 <__sflush_r+0x1c>
 8014984:	2000      	movs	r0, #0
 8014986:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8014988:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 801498a:	2f00      	cmp	r7, #0
 801498c:	d0fa      	beq.n	8014984 <__sflush_r+0x18>
 801498e:	2200      	movs	r2, #0
 8014990:	2180      	movs	r1, #128	; 0x80
 8014992:	682e      	ldr	r6, [r5, #0]
 8014994:	602a      	str	r2, [r5, #0]
 8014996:	001a      	movs	r2, r3
 8014998:	0149      	lsls	r1, r1, #5
 801499a:	400a      	ands	r2, r1
 801499c:	420b      	tst	r3, r1
 801499e:	d034      	beq.n	8014a0a <__sflush_r+0x9e>
 80149a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80149a2:	89a3      	ldrh	r3, [r4, #12]
 80149a4:	075b      	lsls	r3, r3, #29
 80149a6:	d506      	bpl.n	80149b6 <__sflush_r+0x4a>
 80149a8:	6863      	ldr	r3, [r4, #4]
 80149aa:	1ac0      	subs	r0, r0, r3
 80149ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d001      	beq.n	80149b6 <__sflush_r+0x4a>
 80149b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80149b4:	1ac0      	subs	r0, r0, r3
 80149b6:	0002      	movs	r2, r0
 80149b8:	6a21      	ldr	r1, [r4, #32]
 80149ba:	2300      	movs	r3, #0
 80149bc:	0028      	movs	r0, r5
 80149be:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80149c0:	47b8      	blx	r7
 80149c2:	89a1      	ldrh	r1, [r4, #12]
 80149c4:	1c43      	adds	r3, r0, #1
 80149c6:	d106      	bne.n	80149d6 <__sflush_r+0x6a>
 80149c8:	682b      	ldr	r3, [r5, #0]
 80149ca:	2b1d      	cmp	r3, #29
 80149cc:	d831      	bhi.n	8014a32 <__sflush_r+0xc6>
 80149ce:	4a2c      	ldr	r2, [pc, #176]	; (8014a80 <__sflush_r+0x114>)
 80149d0:	40da      	lsrs	r2, r3
 80149d2:	07d3      	lsls	r3, r2, #31
 80149d4:	d52d      	bpl.n	8014a32 <__sflush_r+0xc6>
 80149d6:	2300      	movs	r3, #0
 80149d8:	6063      	str	r3, [r4, #4]
 80149da:	6923      	ldr	r3, [r4, #16]
 80149dc:	6023      	str	r3, [r4, #0]
 80149de:	04cb      	lsls	r3, r1, #19
 80149e0:	d505      	bpl.n	80149ee <__sflush_r+0x82>
 80149e2:	1c43      	adds	r3, r0, #1
 80149e4:	d102      	bne.n	80149ec <__sflush_r+0x80>
 80149e6:	682b      	ldr	r3, [r5, #0]
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d100      	bne.n	80149ee <__sflush_r+0x82>
 80149ec:	6560      	str	r0, [r4, #84]	; 0x54
 80149ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80149f0:	602e      	str	r6, [r5, #0]
 80149f2:	2900      	cmp	r1, #0
 80149f4:	d0c6      	beq.n	8014984 <__sflush_r+0x18>
 80149f6:	0023      	movs	r3, r4
 80149f8:	3344      	adds	r3, #68	; 0x44
 80149fa:	4299      	cmp	r1, r3
 80149fc:	d002      	beq.n	8014a04 <__sflush_r+0x98>
 80149fe:	0028      	movs	r0, r5
 8014a00:	f001 f94a 	bl	8015c98 <_free_r>
 8014a04:	2000      	movs	r0, #0
 8014a06:	6360      	str	r0, [r4, #52]	; 0x34
 8014a08:	e7bd      	b.n	8014986 <__sflush_r+0x1a>
 8014a0a:	2301      	movs	r3, #1
 8014a0c:	0028      	movs	r0, r5
 8014a0e:	6a21      	ldr	r1, [r4, #32]
 8014a10:	47b8      	blx	r7
 8014a12:	1c43      	adds	r3, r0, #1
 8014a14:	d1c5      	bne.n	80149a2 <__sflush_r+0x36>
 8014a16:	682b      	ldr	r3, [r5, #0]
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d0c2      	beq.n	80149a2 <__sflush_r+0x36>
 8014a1c:	2b1d      	cmp	r3, #29
 8014a1e:	d001      	beq.n	8014a24 <__sflush_r+0xb8>
 8014a20:	2b16      	cmp	r3, #22
 8014a22:	d101      	bne.n	8014a28 <__sflush_r+0xbc>
 8014a24:	602e      	str	r6, [r5, #0]
 8014a26:	e7ad      	b.n	8014984 <__sflush_r+0x18>
 8014a28:	2340      	movs	r3, #64	; 0x40
 8014a2a:	89a2      	ldrh	r2, [r4, #12]
 8014a2c:	4313      	orrs	r3, r2
 8014a2e:	81a3      	strh	r3, [r4, #12]
 8014a30:	e7a9      	b.n	8014986 <__sflush_r+0x1a>
 8014a32:	2340      	movs	r3, #64	; 0x40
 8014a34:	430b      	orrs	r3, r1
 8014a36:	e7fa      	b.n	8014a2e <__sflush_r+0xc2>
 8014a38:	690f      	ldr	r7, [r1, #16]
 8014a3a:	2f00      	cmp	r7, #0
 8014a3c:	d0a2      	beq.n	8014984 <__sflush_r+0x18>
 8014a3e:	680a      	ldr	r2, [r1, #0]
 8014a40:	600f      	str	r7, [r1, #0]
 8014a42:	1bd2      	subs	r2, r2, r7
 8014a44:	9201      	str	r2, [sp, #4]
 8014a46:	2200      	movs	r2, #0
 8014a48:	079b      	lsls	r3, r3, #30
 8014a4a:	d100      	bne.n	8014a4e <__sflush_r+0xe2>
 8014a4c:	694a      	ldr	r2, [r1, #20]
 8014a4e:	60a2      	str	r2, [r4, #8]
 8014a50:	9b01      	ldr	r3, [sp, #4]
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	dc00      	bgt.n	8014a58 <__sflush_r+0xec>
 8014a56:	e795      	b.n	8014984 <__sflush_r+0x18>
 8014a58:	003a      	movs	r2, r7
 8014a5a:	0028      	movs	r0, r5
 8014a5c:	9b01      	ldr	r3, [sp, #4]
 8014a5e:	6a21      	ldr	r1, [r4, #32]
 8014a60:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014a62:	47b0      	blx	r6
 8014a64:	2800      	cmp	r0, #0
 8014a66:	dc06      	bgt.n	8014a76 <__sflush_r+0x10a>
 8014a68:	2340      	movs	r3, #64	; 0x40
 8014a6a:	2001      	movs	r0, #1
 8014a6c:	89a2      	ldrh	r2, [r4, #12]
 8014a6e:	4240      	negs	r0, r0
 8014a70:	4313      	orrs	r3, r2
 8014a72:	81a3      	strh	r3, [r4, #12]
 8014a74:	e787      	b.n	8014986 <__sflush_r+0x1a>
 8014a76:	9b01      	ldr	r3, [sp, #4]
 8014a78:	183f      	adds	r7, r7, r0
 8014a7a:	1a1b      	subs	r3, r3, r0
 8014a7c:	9301      	str	r3, [sp, #4]
 8014a7e:	e7e7      	b.n	8014a50 <__sflush_r+0xe4>
 8014a80:	20400001 	.word	0x20400001

08014a84 <_fflush_r>:
 8014a84:	690b      	ldr	r3, [r1, #16]
 8014a86:	b570      	push	{r4, r5, r6, lr}
 8014a88:	0005      	movs	r5, r0
 8014a8a:	000c      	movs	r4, r1
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d102      	bne.n	8014a96 <_fflush_r+0x12>
 8014a90:	2500      	movs	r5, #0
 8014a92:	0028      	movs	r0, r5
 8014a94:	bd70      	pop	{r4, r5, r6, pc}
 8014a96:	2800      	cmp	r0, #0
 8014a98:	d004      	beq.n	8014aa4 <_fflush_r+0x20>
 8014a9a:	6983      	ldr	r3, [r0, #24]
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d101      	bne.n	8014aa4 <_fflush_r+0x20>
 8014aa0:	f7fd f9c0 	bl	8011e24 <__sinit>
 8014aa4:	4b14      	ldr	r3, [pc, #80]	; (8014af8 <_fflush_r+0x74>)
 8014aa6:	429c      	cmp	r4, r3
 8014aa8:	d11b      	bne.n	8014ae2 <_fflush_r+0x5e>
 8014aaa:	686c      	ldr	r4, [r5, #4]
 8014aac:	220c      	movs	r2, #12
 8014aae:	5ea3      	ldrsh	r3, [r4, r2]
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d0ed      	beq.n	8014a90 <_fflush_r+0xc>
 8014ab4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014ab6:	07d2      	lsls	r2, r2, #31
 8014ab8:	d404      	bmi.n	8014ac4 <_fflush_r+0x40>
 8014aba:	059b      	lsls	r3, r3, #22
 8014abc:	d402      	bmi.n	8014ac4 <_fflush_r+0x40>
 8014abe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014ac0:	f7fd fa91 	bl	8011fe6 <__retarget_lock_acquire_recursive>
 8014ac4:	0028      	movs	r0, r5
 8014ac6:	0021      	movs	r1, r4
 8014ac8:	f7ff ff50 	bl	801496c <__sflush_r>
 8014acc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014ace:	0005      	movs	r5, r0
 8014ad0:	07db      	lsls	r3, r3, #31
 8014ad2:	d4de      	bmi.n	8014a92 <_fflush_r+0xe>
 8014ad4:	89a3      	ldrh	r3, [r4, #12]
 8014ad6:	059b      	lsls	r3, r3, #22
 8014ad8:	d4db      	bmi.n	8014a92 <_fflush_r+0xe>
 8014ada:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014adc:	f7fd fa84 	bl	8011fe8 <__retarget_lock_release_recursive>
 8014ae0:	e7d7      	b.n	8014a92 <_fflush_r+0xe>
 8014ae2:	4b06      	ldr	r3, [pc, #24]	; (8014afc <_fflush_r+0x78>)
 8014ae4:	429c      	cmp	r4, r3
 8014ae6:	d101      	bne.n	8014aec <_fflush_r+0x68>
 8014ae8:	68ac      	ldr	r4, [r5, #8]
 8014aea:	e7df      	b.n	8014aac <_fflush_r+0x28>
 8014aec:	4b04      	ldr	r3, [pc, #16]	; (8014b00 <_fflush_r+0x7c>)
 8014aee:	429c      	cmp	r4, r3
 8014af0:	d1dc      	bne.n	8014aac <_fflush_r+0x28>
 8014af2:	68ec      	ldr	r4, [r5, #12]
 8014af4:	e7da      	b.n	8014aac <_fflush_r+0x28>
 8014af6:	46c0      	nop			; (mov r8, r8)
 8014af8:	08017180 	.word	0x08017180
 8014afc:	080171a0 	.word	0x080171a0
 8014b00:	08017160 	.word	0x08017160

08014b04 <fiprintf>:
 8014b04:	b40e      	push	{r1, r2, r3}
 8014b06:	b503      	push	{r0, r1, lr}
 8014b08:	0001      	movs	r1, r0
 8014b0a:	ab03      	add	r3, sp, #12
 8014b0c:	4804      	ldr	r0, [pc, #16]	; (8014b20 <fiprintf+0x1c>)
 8014b0e:	cb04      	ldmia	r3!, {r2}
 8014b10:	6800      	ldr	r0, [r0, #0]
 8014b12:	9301      	str	r3, [sp, #4]
 8014b14:	f001 fa94 	bl	8016040 <_vfiprintf_r>
 8014b18:	b002      	add	sp, #8
 8014b1a:	bc08      	pop	{r3}
 8014b1c:	b003      	add	sp, #12
 8014b1e:	4718      	bx	r3
 8014b20:	20000014 	.word	0x20000014

08014b24 <rshift>:
 8014b24:	0002      	movs	r2, r0
 8014b26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b28:	6904      	ldr	r4, [r0, #16]
 8014b2a:	3214      	adds	r2, #20
 8014b2c:	0013      	movs	r3, r2
 8014b2e:	b085      	sub	sp, #20
 8014b30:	114f      	asrs	r7, r1, #5
 8014b32:	42bc      	cmp	r4, r7
 8014b34:	dd31      	ble.n	8014b9a <rshift+0x76>
 8014b36:	00bb      	lsls	r3, r7, #2
 8014b38:	18d3      	adds	r3, r2, r3
 8014b3a:	261f      	movs	r6, #31
 8014b3c:	9301      	str	r3, [sp, #4]
 8014b3e:	000b      	movs	r3, r1
 8014b40:	00a5      	lsls	r5, r4, #2
 8014b42:	4033      	ands	r3, r6
 8014b44:	1955      	adds	r5, r2, r5
 8014b46:	9302      	str	r3, [sp, #8]
 8014b48:	4231      	tst	r1, r6
 8014b4a:	d10c      	bne.n	8014b66 <rshift+0x42>
 8014b4c:	0016      	movs	r6, r2
 8014b4e:	9901      	ldr	r1, [sp, #4]
 8014b50:	428d      	cmp	r5, r1
 8014b52:	d838      	bhi.n	8014bc6 <rshift+0xa2>
 8014b54:	9901      	ldr	r1, [sp, #4]
 8014b56:	2300      	movs	r3, #0
 8014b58:	3903      	subs	r1, #3
 8014b5a:	428d      	cmp	r5, r1
 8014b5c:	d301      	bcc.n	8014b62 <rshift+0x3e>
 8014b5e:	1be3      	subs	r3, r4, r7
 8014b60:	009b      	lsls	r3, r3, #2
 8014b62:	18d3      	adds	r3, r2, r3
 8014b64:	e019      	b.n	8014b9a <rshift+0x76>
 8014b66:	2120      	movs	r1, #32
 8014b68:	9b02      	ldr	r3, [sp, #8]
 8014b6a:	9e01      	ldr	r6, [sp, #4]
 8014b6c:	1acb      	subs	r3, r1, r3
 8014b6e:	9303      	str	r3, [sp, #12]
 8014b70:	ce02      	ldmia	r6!, {r1}
 8014b72:	9b02      	ldr	r3, [sp, #8]
 8014b74:	4694      	mov	ip, r2
 8014b76:	40d9      	lsrs	r1, r3
 8014b78:	9100      	str	r1, [sp, #0]
 8014b7a:	42b5      	cmp	r5, r6
 8014b7c:	d816      	bhi.n	8014bac <rshift+0x88>
 8014b7e:	9e01      	ldr	r6, [sp, #4]
 8014b80:	2300      	movs	r3, #0
 8014b82:	3601      	adds	r6, #1
 8014b84:	42b5      	cmp	r5, r6
 8014b86:	d302      	bcc.n	8014b8e <rshift+0x6a>
 8014b88:	1be3      	subs	r3, r4, r7
 8014b8a:	009b      	lsls	r3, r3, #2
 8014b8c:	3b04      	subs	r3, #4
 8014b8e:	9900      	ldr	r1, [sp, #0]
 8014b90:	18d3      	adds	r3, r2, r3
 8014b92:	6019      	str	r1, [r3, #0]
 8014b94:	2900      	cmp	r1, #0
 8014b96:	d000      	beq.n	8014b9a <rshift+0x76>
 8014b98:	3304      	adds	r3, #4
 8014b9a:	1a99      	subs	r1, r3, r2
 8014b9c:	1089      	asrs	r1, r1, #2
 8014b9e:	6101      	str	r1, [r0, #16]
 8014ba0:	4293      	cmp	r3, r2
 8014ba2:	d101      	bne.n	8014ba8 <rshift+0x84>
 8014ba4:	2300      	movs	r3, #0
 8014ba6:	6143      	str	r3, [r0, #20]
 8014ba8:	b005      	add	sp, #20
 8014baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014bac:	6833      	ldr	r3, [r6, #0]
 8014bae:	9903      	ldr	r1, [sp, #12]
 8014bb0:	408b      	lsls	r3, r1
 8014bb2:	9900      	ldr	r1, [sp, #0]
 8014bb4:	4319      	orrs	r1, r3
 8014bb6:	4663      	mov	r3, ip
 8014bb8:	c302      	stmia	r3!, {r1}
 8014bba:	469c      	mov	ip, r3
 8014bbc:	ce02      	ldmia	r6!, {r1}
 8014bbe:	9b02      	ldr	r3, [sp, #8]
 8014bc0:	40d9      	lsrs	r1, r3
 8014bc2:	9100      	str	r1, [sp, #0]
 8014bc4:	e7d9      	b.n	8014b7a <rshift+0x56>
 8014bc6:	c908      	ldmia	r1!, {r3}
 8014bc8:	c608      	stmia	r6!, {r3}
 8014bca:	e7c1      	b.n	8014b50 <rshift+0x2c>

08014bcc <__hexdig_fun>:
 8014bcc:	0002      	movs	r2, r0
 8014bce:	3a30      	subs	r2, #48	; 0x30
 8014bd0:	0003      	movs	r3, r0
 8014bd2:	2a09      	cmp	r2, #9
 8014bd4:	d802      	bhi.n	8014bdc <__hexdig_fun+0x10>
 8014bd6:	3b20      	subs	r3, #32
 8014bd8:	b2d8      	uxtb	r0, r3
 8014bda:	4770      	bx	lr
 8014bdc:	0002      	movs	r2, r0
 8014bde:	3a61      	subs	r2, #97	; 0x61
 8014be0:	2a05      	cmp	r2, #5
 8014be2:	d801      	bhi.n	8014be8 <__hexdig_fun+0x1c>
 8014be4:	3b47      	subs	r3, #71	; 0x47
 8014be6:	e7f7      	b.n	8014bd8 <__hexdig_fun+0xc>
 8014be8:	001a      	movs	r2, r3
 8014bea:	3a41      	subs	r2, #65	; 0x41
 8014bec:	2000      	movs	r0, #0
 8014bee:	2a05      	cmp	r2, #5
 8014bf0:	d8f3      	bhi.n	8014bda <__hexdig_fun+0xe>
 8014bf2:	3b27      	subs	r3, #39	; 0x27
 8014bf4:	e7f0      	b.n	8014bd8 <__hexdig_fun+0xc>
	...

08014bf8 <__gethex>:
 8014bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014bfa:	b08d      	sub	sp, #52	; 0x34
 8014bfc:	930a      	str	r3, [sp, #40]	; 0x28
 8014bfe:	4bbf      	ldr	r3, [pc, #764]	; (8014efc <__gethex+0x304>)
 8014c00:	9005      	str	r0, [sp, #20]
 8014c02:	681b      	ldr	r3, [r3, #0]
 8014c04:	9109      	str	r1, [sp, #36]	; 0x24
 8014c06:	0018      	movs	r0, r3
 8014c08:	9202      	str	r2, [sp, #8]
 8014c0a:	9307      	str	r3, [sp, #28]
 8014c0c:	f7eb fa7c 	bl	8000108 <strlen>
 8014c10:	2202      	movs	r2, #2
 8014c12:	9b07      	ldr	r3, [sp, #28]
 8014c14:	4252      	negs	r2, r2
 8014c16:	181b      	adds	r3, r3, r0
 8014c18:	3b01      	subs	r3, #1
 8014c1a:	781b      	ldrb	r3, [r3, #0]
 8014c1c:	9003      	str	r0, [sp, #12]
 8014c1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8014c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c22:	6819      	ldr	r1, [r3, #0]
 8014c24:	1c8b      	adds	r3, r1, #2
 8014c26:	1a52      	subs	r2, r2, r1
 8014c28:	18d1      	adds	r1, r2, r3
 8014c2a:	9301      	str	r3, [sp, #4]
 8014c2c:	9108      	str	r1, [sp, #32]
 8014c2e:	9901      	ldr	r1, [sp, #4]
 8014c30:	3301      	adds	r3, #1
 8014c32:	7808      	ldrb	r0, [r1, #0]
 8014c34:	2830      	cmp	r0, #48	; 0x30
 8014c36:	d0f7      	beq.n	8014c28 <__gethex+0x30>
 8014c38:	f7ff ffc8 	bl	8014bcc <__hexdig_fun>
 8014c3c:	2300      	movs	r3, #0
 8014c3e:	001c      	movs	r4, r3
 8014c40:	9304      	str	r3, [sp, #16]
 8014c42:	4298      	cmp	r0, r3
 8014c44:	d11f      	bne.n	8014c86 <__gethex+0x8e>
 8014c46:	9a03      	ldr	r2, [sp, #12]
 8014c48:	9907      	ldr	r1, [sp, #28]
 8014c4a:	9801      	ldr	r0, [sp, #4]
 8014c4c:	f7fd fff9 	bl	8012c42 <strncmp>
 8014c50:	0007      	movs	r7, r0
 8014c52:	42a0      	cmp	r0, r4
 8014c54:	d000      	beq.n	8014c58 <__gethex+0x60>
 8014c56:	e06b      	b.n	8014d30 <__gethex+0x138>
 8014c58:	9b01      	ldr	r3, [sp, #4]
 8014c5a:	9a03      	ldr	r2, [sp, #12]
 8014c5c:	5c98      	ldrb	r0, [r3, r2]
 8014c5e:	189d      	adds	r5, r3, r2
 8014c60:	f7ff ffb4 	bl	8014bcc <__hexdig_fun>
 8014c64:	2301      	movs	r3, #1
 8014c66:	9304      	str	r3, [sp, #16]
 8014c68:	42a0      	cmp	r0, r4
 8014c6a:	d030      	beq.n	8014cce <__gethex+0xd6>
 8014c6c:	9501      	str	r5, [sp, #4]
 8014c6e:	9b01      	ldr	r3, [sp, #4]
 8014c70:	7818      	ldrb	r0, [r3, #0]
 8014c72:	2830      	cmp	r0, #48	; 0x30
 8014c74:	d009      	beq.n	8014c8a <__gethex+0x92>
 8014c76:	f7ff ffa9 	bl	8014bcc <__hexdig_fun>
 8014c7a:	4242      	negs	r2, r0
 8014c7c:	4142      	adcs	r2, r0
 8014c7e:	2301      	movs	r3, #1
 8014c80:	002c      	movs	r4, r5
 8014c82:	9204      	str	r2, [sp, #16]
 8014c84:	9308      	str	r3, [sp, #32]
 8014c86:	9d01      	ldr	r5, [sp, #4]
 8014c88:	e004      	b.n	8014c94 <__gethex+0x9c>
 8014c8a:	9b01      	ldr	r3, [sp, #4]
 8014c8c:	3301      	adds	r3, #1
 8014c8e:	9301      	str	r3, [sp, #4]
 8014c90:	e7ed      	b.n	8014c6e <__gethex+0x76>
 8014c92:	3501      	adds	r5, #1
 8014c94:	7828      	ldrb	r0, [r5, #0]
 8014c96:	f7ff ff99 	bl	8014bcc <__hexdig_fun>
 8014c9a:	1e07      	subs	r7, r0, #0
 8014c9c:	d1f9      	bne.n	8014c92 <__gethex+0x9a>
 8014c9e:	0028      	movs	r0, r5
 8014ca0:	9a03      	ldr	r2, [sp, #12]
 8014ca2:	9907      	ldr	r1, [sp, #28]
 8014ca4:	f7fd ffcd 	bl	8012c42 <strncmp>
 8014ca8:	2800      	cmp	r0, #0
 8014caa:	d10e      	bne.n	8014cca <__gethex+0xd2>
 8014cac:	2c00      	cmp	r4, #0
 8014cae:	d107      	bne.n	8014cc0 <__gethex+0xc8>
 8014cb0:	9b03      	ldr	r3, [sp, #12]
 8014cb2:	18ed      	adds	r5, r5, r3
 8014cb4:	002c      	movs	r4, r5
 8014cb6:	7828      	ldrb	r0, [r5, #0]
 8014cb8:	f7ff ff88 	bl	8014bcc <__hexdig_fun>
 8014cbc:	2800      	cmp	r0, #0
 8014cbe:	d102      	bne.n	8014cc6 <__gethex+0xce>
 8014cc0:	1b64      	subs	r4, r4, r5
 8014cc2:	00a7      	lsls	r7, r4, #2
 8014cc4:	e003      	b.n	8014cce <__gethex+0xd6>
 8014cc6:	3501      	adds	r5, #1
 8014cc8:	e7f5      	b.n	8014cb6 <__gethex+0xbe>
 8014cca:	2c00      	cmp	r4, #0
 8014ccc:	d1f8      	bne.n	8014cc0 <__gethex+0xc8>
 8014cce:	2220      	movs	r2, #32
 8014cd0:	782b      	ldrb	r3, [r5, #0]
 8014cd2:	002e      	movs	r6, r5
 8014cd4:	4393      	bics	r3, r2
 8014cd6:	2b50      	cmp	r3, #80	; 0x50
 8014cd8:	d11d      	bne.n	8014d16 <__gethex+0x11e>
 8014cda:	786b      	ldrb	r3, [r5, #1]
 8014cdc:	2b2b      	cmp	r3, #43	; 0x2b
 8014cde:	d02c      	beq.n	8014d3a <__gethex+0x142>
 8014ce0:	2b2d      	cmp	r3, #45	; 0x2d
 8014ce2:	d02e      	beq.n	8014d42 <__gethex+0x14a>
 8014ce4:	2300      	movs	r3, #0
 8014ce6:	1c6e      	adds	r6, r5, #1
 8014ce8:	9306      	str	r3, [sp, #24]
 8014cea:	7830      	ldrb	r0, [r6, #0]
 8014cec:	f7ff ff6e 	bl	8014bcc <__hexdig_fun>
 8014cf0:	1e43      	subs	r3, r0, #1
 8014cf2:	b2db      	uxtb	r3, r3
 8014cf4:	2b18      	cmp	r3, #24
 8014cf6:	d82b      	bhi.n	8014d50 <__gethex+0x158>
 8014cf8:	3810      	subs	r0, #16
 8014cfa:	0004      	movs	r4, r0
 8014cfc:	7870      	ldrb	r0, [r6, #1]
 8014cfe:	f7ff ff65 	bl	8014bcc <__hexdig_fun>
 8014d02:	1e43      	subs	r3, r0, #1
 8014d04:	b2db      	uxtb	r3, r3
 8014d06:	3601      	adds	r6, #1
 8014d08:	2b18      	cmp	r3, #24
 8014d0a:	d91c      	bls.n	8014d46 <__gethex+0x14e>
 8014d0c:	9b06      	ldr	r3, [sp, #24]
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d000      	beq.n	8014d14 <__gethex+0x11c>
 8014d12:	4264      	negs	r4, r4
 8014d14:	193f      	adds	r7, r7, r4
 8014d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d18:	601e      	str	r6, [r3, #0]
 8014d1a:	9b04      	ldr	r3, [sp, #16]
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d019      	beq.n	8014d54 <__gethex+0x15c>
 8014d20:	2600      	movs	r6, #0
 8014d22:	9b08      	ldr	r3, [sp, #32]
 8014d24:	42b3      	cmp	r3, r6
 8014d26:	d100      	bne.n	8014d2a <__gethex+0x132>
 8014d28:	3606      	adds	r6, #6
 8014d2a:	0030      	movs	r0, r6
 8014d2c:	b00d      	add	sp, #52	; 0x34
 8014d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d30:	2301      	movs	r3, #1
 8014d32:	2700      	movs	r7, #0
 8014d34:	9d01      	ldr	r5, [sp, #4]
 8014d36:	9304      	str	r3, [sp, #16]
 8014d38:	e7c9      	b.n	8014cce <__gethex+0xd6>
 8014d3a:	2300      	movs	r3, #0
 8014d3c:	9306      	str	r3, [sp, #24]
 8014d3e:	1cae      	adds	r6, r5, #2
 8014d40:	e7d3      	b.n	8014cea <__gethex+0xf2>
 8014d42:	2301      	movs	r3, #1
 8014d44:	e7fa      	b.n	8014d3c <__gethex+0x144>
 8014d46:	230a      	movs	r3, #10
 8014d48:	435c      	muls	r4, r3
 8014d4a:	1824      	adds	r4, r4, r0
 8014d4c:	3c10      	subs	r4, #16
 8014d4e:	e7d5      	b.n	8014cfc <__gethex+0x104>
 8014d50:	002e      	movs	r6, r5
 8014d52:	e7e0      	b.n	8014d16 <__gethex+0x11e>
 8014d54:	9b01      	ldr	r3, [sp, #4]
 8014d56:	9904      	ldr	r1, [sp, #16]
 8014d58:	1aeb      	subs	r3, r5, r3
 8014d5a:	3b01      	subs	r3, #1
 8014d5c:	2b07      	cmp	r3, #7
 8014d5e:	dc0a      	bgt.n	8014d76 <__gethex+0x17e>
 8014d60:	9805      	ldr	r0, [sp, #20]
 8014d62:	f000 faa3 	bl	80152ac <_Balloc>
 8014d66:	1e04      	subs	r4, r0, #0
 8014d68:	d108      	bne.n	8014d7c <__gethex+0x184>
 8014d6a:	0002      	movs	r2, r0
 8014d6c:	21de      	movs	r1, #222	; 0xde
 8014d6e:	4b64      	ldr	r3, [pc, #400]	; (8014f00 <__gethex+0x308>)
 8014d70:	4864      	ldr	r0, [pc, #400]	; (8014f04 <__gethex+0x30c>)
 8014d72:	f7fe ff25 	bl	8013bc0 <__assert_func>
 8014d76:	3101      	adds	r1, #1
 8014d78:	105b      	asrs	r3, r3, #1
 8014d7a:	e7ef      	b.n	8014d5c <__gethex+0x164>
 8014d7c:	0003      	movs	r3, r0
 8014d7e:	3314      	adds	r3, #20
 8014d80:	9304      	str	r3, [sp, #16]
 8014d82:	9309      	str	r3, [sp, #36]	; 0x24
 8014d84:	2300      	movs	r3, #0
 8014d86:	001e      	movs	r6, r3
 8014d88:	9306      	str	r3, [sp, #24]
 8014d8a:	9b01      	ldr	r3, [sp, #4]
 8014d8c:	42ab      	cmp	r3, r5
 8014d8e:	d340      	bcc.n	8014e12 <__gethex+0x21a>
 8014d90:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8014d92:	9b04      	ldr	r3, [sp, #16]
 8014d94:	c540      	stmia	r5!, {r6}
 8014d96:	1aed      	subs	r5, r5, r3
 8014d98:	10ad      	asrs	r5, r5, #2
 8014d9a:	0030      	movs	r0, r6
 8014d9c:	6125      	str	r5, [r4, #16]
 8014d9e:	f000 fb7d 	bl	801549c <__hi0bits>
 8014da2:	9b02      	ldr	r3, [sp, #8]
 8014da4:	016d      	lsls	r5, r5, #5
 8014da6:	681b      	ldr	r3, [r3, #0]
 8014da8:	1a2e      	subs	r6, r5, r0
 8014daa:	9301      	str	r3, [sp, #4]
 8014dac:	429e      	cmp	r6, r3
 8014dae:	dd5a      	ble.n	8014e66 <__gethex+0x26e>
 8014db0:	1af6      	subs	r6, r6, r3
 8014db2:	0031      	movs	r1, r6
 8014db4:	0020      	movs	r0, r4
 8014db6:	f000 ff1f 	bl	8015bf8 <__any_on>
 8014dba:	1e05      	subs	r5, r0, #0
 8014dbc:	d016      	beq.n	8014dec <__gethex+0x1f4>
 8014dbe:	2501      	movs	r5, #1
 8014dc0:	211f      	movs	r1, #31
 8014dc2:	0028      	movs	r0, r5
 8014dc4:	1e73      	subs	r3, r6, #1
 8014dc6:	4019      	ands	r1, r3
 8014dc8:	4088      	lsls	r0, r1
 8014dca:	0001      	movs	r1, r0
 8014dcc:	115a      	asrs	r2, r3, #5
 8014dce:	9804      	ldr	r0, [sp, #16]
 8014dd0:	0092      	lsls	r2, r2, #2
 8014dd2:	5812      	ldr	r2, [r2, r0]
 8014dd4:	420a      	tst	r2, r1
 8014dd6:	d009      	beq.n	8014dec <__gethex+0x1f4>
 8014dd8:	42ab      	cmp	r3, r5
 8014dda:	dd06      	ble.n	8014dea <__gethex+0x1f2>
 8014ddc:	0020      	movs	r0, r4
 8014dde:	1eb1      	subs	r1, r6, #2
 8014de0:	f000 ff0a 	bl	8015bf8 <__any_on>
 8014de4:	3502      	adds	r5, #2
 8014de6:	2800      	cmp	r0, #0
 8014de8:	d100      	bne.n	8014dec <__gethex+0x1f4>
 8014dea:	2502      	movs	r5, #2
 8014dec:	0031      	movs	r1, r6
 8014dee:	0020      	movs	r0, r4
 8014df0:	f7ff fe98 	bl	8014b24 <rshift>
 8014df4:	19bf      	adds	r7, r7, r6
 8014df6:	9b02      	ldr	r3, [sp, #8]
 8014df8:	689b      	ldr	r3, [r3, #8]
 8014dfa:	9303      	str	r3, [sp, #12]
 8014dfc:	42bb      	cmp	r3, r7
 8014dfe:	da42      	bge.n	8014e86 <__gethex+0x28e>
 8014e00:	0021      	movs	r1, r4
 8014e02:	9805      	ldr	r0, [sp, #20]
 8014e04:	f000 fa96 	bl	8015334 <_Bfree>
 8014e08:	2300      	movs	r3, #0
 8014e0a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014e0c:	26a3      	movs	r6, #163	; 0xa3
 8014e0e:	6013      	str	r3, [r2, #0]
 8014e10:	e78b      	b.n	8014d2a <__gethex+0x132>
 8014e12:	1e6b      	subs	r3, r5, #1
 8014e14:	9308      	str	r3, [sp, #32]
 8014e16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014e18:	781b      	ldrb	r3, [r3, #0]
 8014e1a:	4293      	cmp	r3, r2
 8014e1c:	d014      	beq.n	8014e48 <__gethex+0x250>
 8014e1e:	9b06      	ldr	r3, [sp, #24]
 8014e20:	2b20      	cmp	r3, #32
 8014e22:	d104      	bne.n	8014e2e <__gethex+0x236>
 8014e24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e26:	c340      	stmia	r3!, {r6}
 8014e28:	2600      	movs	r6, #0
 8014e2a:	9309      	str	r3, [sp, #36]	; 0x24
 8014e2c:	9606      	str	r6, [sp, #24]
 8014e2e:	9b08      	ldr	r3, [sp, #32]
 8014e30:	7818      	ldrb	r0, [r3, #0]
 8014e32:	f7ff fecb 	bl	8014bcc <__hexdig_fun>
 8014e36:	230f      	movs	r3, #15
 8014e38:	4018      	ands	r0, r3
 8014e3a:	9b06      	ldr	r3, [sp, #24]
 8014e3c:	9d08      	ldr	r5, [sp, #32]
 8014e3e:	4098      	lsls	r0, r3
 8014e40:	3304      	adds	r3, #4
 8014e42:	4306      	orrs	r6, r0
 8014e44:	9306      	str	r3, [sp, #24]
 8014e46:	e7a0      	b.n	8014d8a <__gethex+0x192>
 8014e48:	2301      	movs	r3, #1
 8014e4a:	9a03      	ldr	r2, [sp, #12]
 8014e4c:	1a9d      	subs	r5, r3, r2
 8014e4e:	9b08      	ldr	r3, [sp, #32]
 8014e50:	195d      	adds	r5, r3, r5
 8014e52:	9b01      	ldr	r3, [sp, #4]
 8014e54:	429d      	cmp	r5, r3
 8014e56:	d3e2      	bcc.n	8014e1e <__gethex+0x226>
 8014e58:	0028      	movs	r0, r5
 8014e5a:	9907      	ldr	r1, [sp, #28]
 8014e5c:	f7fd fef1 	bl	8012c42 <strncmp>
 8014e60:	2800      	cmp	r0, #0
 8014e62:	d1dc      	bne.n	8014e1e <__gethex+0x226>
 8014e64:	e791      	b.n	8014d8a <__gethex+0x192>
 8014e66:	9b01      	ldr	r3, [sp, #4]
 8014e68:	2500      	movs	r5, #0
 8014e6a:	429e      	cmp	r6, r3
 8014e6c:	dac3      	bge.n	8014df6 <__gethex+0x1fe>
 8014e6e:	1b9e      	subs	r6, r3, r6
 8014e70:	0021      	movs	r1, r4
 8014e72:	0032      	movs	r2, r6
 8014e74:	9805      	ldr	r0, [sp, #20]
 8014e76:	f000 fc7b 	bl	8015770 <__lshift>
 8014e7a:	0003      	movs	r3, r0
 8014e7c:	3314      	adds	r3, #20
 8014e7e:	0004      	movs	r4, r0
 8014e80:	1bbf      	subs	r7, r7, r6
 8014e82:	9304      	str	r3, [sp, #16]
 8014e84:	e7b7      	b.n	8014df6 <__gethex+0x1fe>
 8014e86:	9b02      	ldr	r3, [sp, #8]
 8014e88:	685e      	ldr	r6, [r3, #4]
 8014e8a:	42be      	cmp	r6, r7
 8014e8c:	dd71      	ble.n	8014f72 <__gethex+0x37a>
 8014e8e:	9b01      	ldr	r3, [sp, #4]
 8014e90:	1bf6      	subs	r6, r6, r7
 8014e92:	42b3      	cmp	r3, r6
 8014e94:	dc38      	bgt.n	8014f08 <__gethex+0x310>
 8014e96:	9b02      	ldr	r3, [sp, #8]
 8014e98:	68db      	ldr	r3, [r3, #12]
 8014e9a:	2b02      	cmp	r3, #2
 8014e9c:	d026      	beq.n	8014eec <__gethex+0x2f4>
 8014e9e:	2b03      	cmp	r3, #3
 8014ea0:	d028      	beq.n	8014ef4 <__gethex+0x2fc>
 8014ea2:	2b01      	cmp	r3, #1
 8014ea4:	d119      	bne.n	8014eda <__gethex+0x2e2>
 8014ea6:	9b01      	ldr	r3, [sp, #4]
 8014ea8:	42b3      	cmp	r3, r6
 8014eaa:	d116      	bne.n	8014eda <__gethex+0x2e2>
 8014eac:	2b01      	cmp	r3, #1
 8014eae:	d10d      	bne.n	8014ecc <__gethex+0x2d4>
 8014eb0:	9b02      	ldr	r3, [sp, #8]
 8014eb2:	2662      	movs	r6, #98	; 0x62
 8014eb4:	685b      	ldr	r3, [r3, #4]
 8014eb6:	9301      	str	r3, [sp, #4]
 8014eb8:	9a01      	ldr	r2, [sp, #4]
 8014eba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014ebc:	601a      	str	r2, [r3, #0]
 8014ebe:	2301      	movs	r3, #1
 8014ec0:	9a04      	ldr	r2, [sp, #16]
 8014ec2:	6123      	str	r3, [r4, #16]
 8014ec4:	6013      	str	r3, [r2, #0]
 8014ec6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014ec8:	601c      	str	r4, [r3, #0]
 8014eca:	e72e      	b.n	8014d2a <__gethex+0x132>
 8014ecc:	9901      	ldr	r1, [sp, #4]
 8014ece:	0020      	movs	r0, r4
 8014ed0:	3901      	subs	r1, #1
 8014ed2:	f000 fe91 	bl	8015bf8 <__any_on>
 8014ed6:	2800      	cmp	r0, #0
 8014ed8:	d1ea      	bne.n	8014eb0 <__gethex+0x2b8>
 8014eda:	0021      	movs	r1, r4
 8014edc:	9805      	ldr	r0, [sp, #20]
 8014ede:	f000 fa29 	bl	8015334 <_Bfree>
 8014ee2:	2300      	movs	r3, #0
 8014ee4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014ee6:	2650      	movs	r6, #80	; 0x50
 8014ee8:	6013      	str	r3, [r2, #0]
 8014eea:	e71e      	b.n	8014d2a <__gethex+0x132>
 8014eec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d1f3      	bne.n	8014eda <__gethex+0x2e2>
 8014ef2:	e7dd      	b.n	8014eb0 <__gethex+0x2b8>
 8014ef4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d1da      	bne.n	8014eb0 <__gethex+0x2b8>
 8014efa:	e7ee      	b.n	8014eda <__gethex+0x2e2>
 8014efc:	080174fc 	.word	0x080174fc
 8014f00:	08017486 	.word	0x08017486
 8014f04:	08017497 	.word	0x08017497
 8014f08:	1e77      	subs	r7, r6, #1
 8014f0a:	2d00      	cmp	r5, #0
 8014f0c:	d12f      	bne.n	8014f6e <__gethex+0x376>
 8014f0e:	2f00      	cmp	r7, #0
 8014f10:	d004      	beq.n	8014f1c <__gethex+0x324>
 8014f12:	0039      	movs	r1, r7
 8014f14:	0020      	movs	r0, r4
 8014f16:	f000 fe6f 	bl	8015bf8 <__any_on>
 8014f1a:	0005      	movs	r5, r0
 8014f1c:	231f      	movs	r3, #31
 8014f1e:	117a      	asrs	r2, r7, #5
 8014f20:	401f      	ands	r7, r3
 8014f22:	3b1e      	subs	r3, #30
 8014f24:	40bb      	lsls	r3, r7
 8014f26:	9904      	ldr	r1, [sp, #16]
 8014f28:	0092      	lsls	r2, r2, #2
 8014f2a:	5852      	ldr	r2, [r2, r1]
 8014f2c:	421a      	tst	r2, r3
 8014f2e:	d001      	beq.n	8014f34 <__gethex+0x33c>
 8014f30:	2302      	movs	r3, #2
 8014f32:	431d      	orrs	r5, r3
 8014f34:	9b01      	ldr	r3, [sp, #4]
 8014f36:	0031      	movs	r1, r6
 8014f38:	1b9b      	subs	r3, r3, r6
 8014f3a:	2602      	movs	r6, #2
 8014f3c:	0020      	movs	r0, r4
 8014f3e:	9301      	str	r3, [sp, #4]
 8014f40:	f7ff fdf0 	bl	8014b24 <rshift>
 8014f44:	9b02      	ldr	r3, [sp, #8]
 8014f46:	685f      	ldr	r7, [r3, #4]
 8014f48:	2d00      	cmp	r5, #0
 8014f4a:	d041      	beq.n	8014fd0 <__gethex+0x3d8>
 8014f4c:	9b02      	ldr	r3, [sp, #8]
 8014f4e:	68db      	ldr	r3, [r3, #12]
 8014f50:	2b02      	cmp	r3, #2
 8014f52:	d010      	beq.n	8014f76 <__gethex+0x37e>
 8014f54:	2b03      	cmp	r3, #3
 8014f56:	d012      	beq.n	8014f7e <__gethex+0x386>
 8014f58:	2b01      	cmp	r3, #1
 8014f5a:	d106      	bne.n	8014f6a <__gethex+0x372>
 8014f5c:	07aa      	lsls	r2, r5, #30
 8014f5e:	d504      	bpl.n	8014f6a <__gethex+0x372>
 8014f60:	9a04      	ldr	r2, [sp, #16]
 8014f62:	6810      	ldr	r0, [r2, #0]
 8014f64:	4305      	orrs	r5, r0
 8014f66:	421d      	tst	r5, r3
 8014f68:	d10c      	bne.n	8014f84 <__gethex+0x38c>
 8014f6a:	2310      	movs	r3, #16
 8014f6c:	e02f      	b.n	8014fce <__gethex+0x3d6>
 8014f6e:	2501      	movs	r5, #1
 8014f70:	e7d4      	b.n	8014f1c <__gethex+0x324>
 8014f72:	2601      	movs	r6, #1
 8014f74:	e7e8      	b.n	8014f48 <__gethex+0x350>
 8014f76:	2301      	movs	r3, #1
 8014f78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014f7a:	1a9b      	subs	r3, r3, r2
 8014f7c:	9313      	str	r3, [sp, #76]	; 0x4c
 8014f7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d0f2      	beq.n	8014f6a <__gethex+0x372>
 8014f84:	6923      	ldr	r3, [r4, #16]
 8014f86:	2000      	movs	r0, #0
 8014f88:	9303      	str	r3, [sp, #12]
 8014f8a:	009b      	lsls	r3, r3, #2
 8014f8c:	9304      	str	r3, [sp, #16]
 8014f8e:	0023      	movs	r3, r4
 8014f90:	9a04      	ldr	r2, [sp, #16]
 8014f92:	3314      	adds	r3, #20
 8014f94:	1899      	adds	r1, r3, r2
 8014f96:	681a      	ldr	r2, [r3, #0]
 8014f98:	1c55      	adds	r5, r2, #1
 8014f9a:	d01e      	beq.n	8014fda <__gethex+0x3e2>
 8014f9c:	3201      	adds	r2, #1
 8014f9e:	601a      	str	r2, [r3, #0]
 8014fa0:	0023      	movs	r3, r4
 8014fa2:	3314      	adds	r3, #20
 8014fa4:	2e02      	cmp	r6, #2
 8014fa6:	d140      	bne.n	801502a <__gethex+0x432>
 8014fa8:	9a02      	ldr	r2, [sp, #8]
 8014faa:	9901      	ldr	r1, [sp, #4]
 8014fac:	6812      	ldr	r2, [r2, #0]
 8014fae:	3a01      	subs	r2, #1
 8014fb0:	428a      	cmp	r2, r1
 8014fb2:	d10b      	bne.n	8014fcc <__gethex+0x3d4>
 8014fb4:	114a      	asrs	r2, r1, #5
 8014fb6:	211f      	movs	r1, #31
 8014fb8:	9801      	ldr	r0, [sp, #4]
 8014fba:	0092      	lsls	r2, r2, #2
 8014fbc:	4001      	ands	r1, r0
 8014fbe:	2001      	movs	r0, #1
 8014fc0:	0005      	movs	r5, r0
 8014fc2:	408d      	lsls	r5, r1
 8014fc4:	58d3      	ldr	r3, [r2, r3]
 8014fc6:	422b      	tst	r3, r5
 8014fc8:	d000      	beq.n	8014fcc <__gethex+0x3d4>
 8014fca:	2601      	movs	r6, #1
 8014fcc:	2320      	movs	r3, #32
 8014fce:	431e      	orrs	r6, r3
 8014fd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014fd2:	601c      	str	r4, [r3, #0]
 8014fd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014fd6:	601f      	str	r7, [r3, #0]
 8014fd8:	e6a7      	b.n	8014d2a <__gethex+0x132>
 8014fda:	c301      	stmia	r3!, {r0}
 8014fdc:	4299      	cmp	r1, r3
 8014fde:	d8da      	bhi.n	8014f96 <__gethex+0x39e>
 8014fe0:	9b03      	ldr	r3, [sp, #12]
 8014fe2:	68a2      	ldr	r2, [r4, #8]
 8014fe4:	4293      	cmp	r3, r2
 8014fe6:	db17      	blt.n	8015018 <__gethex+0x420>
 8014fe8:	6863      	ldr	r3, [r4, #4]
 8014fea:	9805      	ldr	r0, [sp, #20]
 8014fec:	1c59      	adds	r1, r3, #1
 8014fee:	f000 f95d 	bl	80152ac <_Balloc>
 8014ff2:	1e05      	subs	r5, r0, #0
 8014ff4:	d103      	bne.n	8014ffe <__gethex+0x406>
 8014ff6:	0002      	movs	r2, r0
 8014ff8:	2184      	movs	r1, #132	; 0x84
 8014ffa:	4b1c      	ldr	r3, [pc, #112]	; (801506c <__gethex+0x474>)
 8014ffc:	e6b8      	b.n	8014d70 <__gethex+0x178>
 8014ffe:	0021      	movs	r1, r4
 8015000:	6923      	ldr	r3, [r4, #16]
 8015002:	310c      	adds	r1, #12
 8015004:	1c9a      	adds	r2, r3, #2
 8015006:	0092      	lsls	r2, r2, #2
 8015008:	300c      	adds	r0, #12
 801500a:	f7fc ffee 	bl	8011fea <memcpy>
 801500e:	0021      	movs	r1, r4
 8015010:	9805      	ldr	r0, [sp, #20]
 8015012:	f000 f98f 	bl	8015334 <_Bfree>
 8015016:	002c      	movs	r4, r5
 8015018:	6923      	ldr	r3, [r4, #16]
 801501a:	1c5a      	adds	r2, r3, #1
 801501c:	6122      	str	r2, [r4, #16]
 801501e:	2201      	movs	r2, #1
 8015020:	3304      	adds	r3, #4
 8015022:	009b      	lsls	r3, r3, #2
 8015024:	18e3      	adds	r3, r4, r3
 8015026:	605a      	str	r2, [r3, #4]
 8015028:	e7ba      	b.n	8014fa0 <__gethex+0x3a8>
 801502a:	6922      	ldr	r2, [r4, #16]
 801502c:	9903      	ldr	r1, [sp, #12]
 801502e:	428a      	cmp	r2, r1
 8015030:	dd09      	ble.n	8015046 <__gethex+0x44e>
 8015032:	2101      	movs	r1, #1
 8015034:	0020      	movs	r0, r4
 8015036:	f7ff fd75 	bl	8014b24 <rshift>
 801503a:	9b02      	ldr	r3, [sp, #8]
 801503c:	3701      	adds	r7, #1
 801503e:	689b      	ldr	r3, [r3, #8]
 8015040:	42bb      	cmp	r3, r7
 8015042:	dac2      	bge.n	8014fca <__gethex+0x3d2>
 8015044:	e6dc      	b.n	8014e00 <__gethex+0x208>
 8015046:	221f      	movs	r2, #31
 8015048:	9d01      	ldr	r5, [sp, #4]
 801504a:	9901      	ldr	r1, [sp, #4]
 801504c:	2601      	movs	r6, #1
 801504e:	4015      	ands	r5, r2
 8015050:	4211      	tst	r1, r2
 8015052:	d0bb      	beq.n	8014fcc <__gethex+0x3d4>
 8015054:	9a04      	ldr	r2, [sp, #16]
 8015056:	189b      	adds	r3, r3, r2
 8015058:	3b04      	subs	r3, #4
 801505a:	6818      	ldr	r0, [r3, #0]
 801505c:	f000 fa1e 	bl	801549c <__hi0bits>
 8015060:	2320      	movs	r3, #32
 8015062:	1b5d      	subs	r5, r3, r5
 8015064:	42a8      	cmp	r0, r5
 8015066:	dbe4      	blt.n	8015032 <__gethex+0x43a>
 8015068:	e7b0      	b.n	8014fcc <__gethex+0x3d4>
 801506a:	46c0      	nop			; (mov r8, r8)
 801506c:	08017486 	.word	0x08017486

08015070 <L_shift>:
 8015070:	2308      	movs	r3, #8
 8015072:	b570      	push	{r4, r5, r6, lr}
 8015074:	2520      	movs	r5, #32
 8015076:	1a9a      	subs	r2, r3, r2
 8015078:	0092      	lsls	r2, r2, #2
 801507a:	1aad      	subs	r5, r5, r2
 801507c:	6843      	ldr	r3, [r0, #4]
 801507e:	6806      	ldr	r6, [r0, #0]
 8015080:	001c      	movs	r4, r3
 8015082:	40ac      	lsls	r4, r5
 8015084:	40d3      	lsrs	r3, r2
 8015086:	4334      	orrs	r4, r6
 8015088:	6004      	str	r4, [r0, #0]
 801508a:	6043      	str	r3, [r0, #4]
 801508c:	3004      	adds	r0, #4
 801508e:	4288      	cmp	r0, r1
 8015090:	d3f4      	bcc.n	801507c <L_shift+0xc>
 8015092:	bd70      	pop	{r4, r5, r6, pc}

08015094 <__match>:
 8015094:	b530      	push	{r4, r5, lr}
 8015096:	6803      	ldr	r3, [r0, #0]
 8015098:	780c      	ldrb	r4, [r1, #0]
 801509a:	3301      	adds	r3, #1
 801509c:	2c00      	cmp	r4, #0
 801509e:	d102      	bne.n	80150a6 <__match+0x12>
 80150a0:	6003      	str	r3, [r0, #0]
 80150a2:	2001      	movs	r0, #1
 80150a4:	bd30      	pop	{r4, r5, pc}
 80150a6:	781a      	ldrb	r2, [r3, #0]
 80150a8:	0015      	movs	r5, r2
 80150aa:	3d41      	subs	r5, #65	; 0x41
 80150ac:	2d19      	cmp	r5, #25
 80150ae:	d800      	bhi.n	80150b2 <__match+0x1e>
 80150b0:	3220      	adds	r2, #32
 80150b2:	3101      	adds	r1, #1
 80150b4:	42a2      	cmp	r2, r4
 80150b6:	d0ef      	beq.n	8015098 <__match+0x4>
 80150b8:	2000      	movs	r0, #0
 80150ba:	e7f3      	b.n	80150a4 <__match+0x10>

080150bc <__hexnan>:
 80150bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80150be:	680b      	ldr	r3, [r1, #0]
 80150c0:	b08b      	sub	sp, #44	; 0x2c
 80150c2:	9201      	str	r2, [sp, #4]
 80150c4:	9901      	ldr	r1, [sp, #4]
 80150c6:	115a      	asrs	r2, r3, #5
 80150c8:	0092      	lsls	r2, r2, #2
 80150ca:	188a      	adds	r2, r1, r2
 80150cc:	9202      	str	r2, [sp, #8]
 80150ce:	0019      	movs	r1, r3
 80150d0:	221f      	movs	r2, #31
 80150d2:	4011      	ands	r1, r2
 80150d4:	9008      	str	r0, [sp, #32]
 80150d6:	9106      	str	r1, [sp, #24]
 80150d8:	4213      	tst	r3, r2
 80150da:	d002      	beq.n	80150e2 <__hexnan+0x26>
 80150dc:	9b02      	ldr	r3, [sp, #8]
 80150de:	3304      	adds	r3, #4
 80150e0:	9302      	str	r3, [sp, #8]
 80150e2:	9b02      	ldr	r3, [sp, #8]
 80150e4:	2500      	movs	r5, #0
 80150e6:	1f1e      	subs	r6, r3, #4
 80150e8:	0037      	movs	r7, r6
 80150ea:	0034      	movs	r4, r6
 80150ec:	9b08      	ldr	r3, [sp, #32]
 80150ee:	6035      	str	r5, [r6, #0]
 80150f0:	681b      	ldr	r3, [r3, #0]
 80150f2:	9507      	str	r5, [sp, #28]
 80150f4:	9305      	str	r3, [sp, #20]
 80150f6:	9503      	str	r5, [sp, #12]
 80150f8:	9b05      	ldr	r3, [sp, #20]
 80150fa:	3301      	adds	r3, #1
 80150fc:	9309      	str	r3, [sp, #36]	; 0x24
 80150fe:	9b05      	ldr	r3, [sp, #20]
 8015100:	785b      	ldrb	r3, [r3, #1]
 8015102:	9304      	str	r3, [sp, #16]
 8015104:	2b00      	cmp	r3, #0
 8015106:	d028      	beq.n	801515a <__hexnan+0x9e>
 8015108:	9804      	ldr	r0, [sp, #16]
 801510a:	f7ff fd5f 	bl	8014bcc <__hexdig_fun>
 801510e:	2800      	cmp	r0, #0
 8015110:	d154      	bne.n	80151bc <__hexnan+0x100>
 8015112:	9b04      	ldr	r3, [sp, #16]
 8015114:	2b20      	cmp	r3, #32
 8015116:	d819      	bhi.n	801514c <__hexnan+0x90>
 8015118:	9b03      	ldr	r3, [sp, #12]
 801511a:	9a07      	ldr	r2, [sp, #28]
 801511c:	4293      	cmp	r3, r2
 801511e:	dd12      	ble.n	8015146 <__hexnan+0x8a>
 8015120:	42bc      	cmp	r4, r7
 8015122:	d206      	bcs.n	8015132 <__hexnan+0x76>
 8015124:	2d07      	cmp	r5, #7
 8015126:	dc04      	bgt.n	8015132 <__hexnan+0x76>
 8015128:	002a      	movs	r2, r5
 801512a:	0039      	movs	r1, r7
 801512c:	0020      	movs	r0, r4
 801512e:	f7ff ff9f 	bl	8015070 <L_shift>
 8015132:	9b01      	ldr	r3, [sp, #4]
 8015134:	2508      	movs	r5, #8
 8015136:	429c      	cmp	r4, r3
 8015138:	d905      	bls.n	8015146 <__hexnan+0x8a>
 801513a:	1f27      	subs	r7, r4, #4
 801513c:	2500      	movs	r5, #0
 801513e:	003c      	movs	r4, r7
 8015140:	9b03      	ldr	r3, [sp, #12]
 8015142:	603d      	str	r5, [r7, #0]
 8015144:	9307      	str	r3, [sp, #28]
 8015146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015148:	9305      	str	r3, [sp, #20]
 801514a:	e7d5      	b.n	80150f8 <__hexnan+0x3c>
 801514c:	9b04      	ldr	r3, [sp, #16]
 801514e:	2b29      	cmp	r3, #41	; 0x29
 8015150:	d159      	bne.n	8015206 <__hexnan+0x14a>
 8015152:	9b05      	ldr	r3, [sp, #20]
 8015154:	9a08      	ldr	r2, [sp, #32]
 8015156:	3302      	adds	r3, #2
 8015158:	6013      	str	r3, [r2, #0]
 801515a:	9b03      	ldr	r3, [sp, #12]
 801515c:	2b00      	cmp	r3, #0
 801515e:	d052      	beq.n	8015206 <__hexnan+0x14a>
 8015160:	42bc      	cmp	r4, r7
 8015162:	d206      	bcs.n	8015172 <__hexnan+0xb6>
 8015164:	2d07      	cmp	r5, #7
 8015166:	dc04      	bgt.n	8015172 <__hexnan+0xb6>
 8015168:	002a      	movs	r2, r5
 801516a:	0039      	movs	r1, r7
 801516c:	0020      	movs	r0, r4
 801516e:	f7ff ff7f 	bl	8015070 <L_shift>
 8015172:	9b01      	ldr	r3, [sp, #4]
 8015174:	429c      	cmp	r4, r3
 8015176:	d935      	bls.n	80151e4 <__hexnan+0x128>
 8015178:	001a      	movs	r2, r3
 801517a:	0023      	movs	r3, r4
 801517c:	cb02      	ldmia	r3!, {r1}
 801517e:	c202      	stmia	r2!, {r1}
 8015180:	429e      	cmp	r6, r3
 8015182:	d2fb      	bcs.n	801517c <__hexnan+0xc0>
 8015184:	9b02      	ldr	r3, [sp, #8]
 8015186:	1c61      	adds	r1, r4, #1
 8015188:	1eda      	subs	r2, r3, #3
 801518a:	2304      	movs	r3, #4
 801518c:	4291      	cmp	r1, r2
 801518e:	d805      	bhi.n	801519c <__hexnan+0xe0>
 8015190:	9b02      	ldr	r3, [sp, #8]
 8015192:	3b04      	subs	r3, #4
 8015194:	1b1b      	subs	r3, r3, r4
 8015196:	089b      	lsrs	r3, r3, #2
 8015198:	3301      	adds	r3, #1
 801519a:	009b      	lsls	r3, r3, #2
 801519c:	9a01      	ldr	r2, [sp, #4]
 801519e:	18d3      	adds	r3, r2, r3
 80151a0:	2200      	movs	r2, #0
 80151a2:	c304      	stmia	r3!, {r2}
 80151a4:	429e      	cmp	r6, r3
 80151a6:	d2fc      	bcs.n	80151a2 <__hexnan+0xe6>
 80151a8:	6833      	ldr	r3, [r6, #0]
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d104      	bne.n	80151b8 <__hexnan+0xfc>
 80151ae:	9b01      	ldr	r3, [sp, #4]
 80151b0:	429e      	cmp	r6, r3
 80151b2:	d126      	bne.n	8015202 <__hexnan+0x146>
 80151b4:	2301      	movs	r3, #1
 80151b6:	6033      	str	r3, [r6, #0]
 80151b8:	2005      	movs	r0, #5
 80151ba:	e025      	b.n	8015208 <__hexnan+0x14c>
 80151bc:	9b03      	ldr	r3, [sp, #12]
 80151be:	3501      	adds	r5, #1
 80151c0:	3301      	adds	r3, #1
 80151c2:	9303      	str	r3, [sp, #12]
 80151c4:	2d08      	cmp	r5, #8
 80151c6:	dd06      	ble.n	80151d6 <__hexnan+0x11a>
 80151c8:	9b01      	ldr	r3, [sp, #4]
 80151ca:	429c      	cmp	r4, r3
 80151cc:	d9bb      	bls.n	8015146 <__hexnan+0x8a>
 80151ce:	2300      	movs	r3, #0
 80151d0:	2501      	movs	r5, #1
 80151d2:	3c04      	subs	r4, #4
 80151d4:	6023      	str	r3, [r4, #0]
 80151d6:	220f      	movs	r2, #15
 80151d8:	6823      	ldr	r3, [r4, #0]
 80151da:	4010      	ands	r0, r2
 80151dc:	011b      	lsls	r3, r3, #4
 80151de:	4318      	orrs	r0, r3
 80151e0:	6020      	str	r0, [r4, #0]
 80151e2:	e7b0      	b.n	8015146 <__hexnan+0x8a>
 80151e4:	9b06      	ldr	r3, [sp, #24]
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	d0de      	beq.n	80151a8 <__hexnan+0xec>
 80151ea:	2120      	movs	r1, #32
 80151ec:	9a06      	ldr	r2, [sp, #24]
 80151ee:	9b02      	ldr	r3, [sp, #8]
 80151f0:	1a89      	subs	r1, r1, r2
 80151f2:	2201      	movs	r2, #1
 80151f4:	4252      	negs	r2, r2
 80151f6:	40ca      	lsrs	r2, r1
 80151f8:	3b04      	subs	r3, #4
 80151fa:	6819      	ldr	r1, [r3, #0]
 80151fc:	400a      	ands	r2, r1
 80151fe:	601a      	str	r2, [r3, #0]
 8015200:	e7d2      	b.n	80151a8 <__hexnan+0xec>
 8015202:	3e04      	subs	r6, #4
 8015204:	e7d0      	b.n	80151a8 <__hexnan+0xec>
 8015206:	2004      	movs	r0, #4
 8015208:	b00b      	add	sp, #44	; 0x2c
 801520a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801520c <_localeconv_r>:
 801520c:	4800      	ldr	r0, [pc, #0]	; (8015210 <_localeconv_r+0x4>)
 801520e:	4770      	bx	lr
 8015210:	2000016c 	.word	0x2000016c

08015214 <_lseek_r>:
 8015214:	b570      	push	{r4, r5, r6, lr}
 8015216:	0004      	movs	r4, r0
 8015218:	0008      	movs	r0, r1
 801521a:	0011      	movs	r1, r2
 801521c:	001a      	movs	r2, r3
 801521e:	2300      	movs	r3, #0
 8015220:	4d05      	ldr	r5, [pc, #20]	; (8015238 <_lseek_r+0x24>)
 8015222:	602b      	str	r3, [r5, #0]
 8015224:	f7ee fcf0 	bl	8003c08 <_lseek>
 8015228:	1c43      	adds	r3, r0, #1
 801522a:	d103      	bne.n	8015234 <_lseek_r+0x20>
 801522c:	682b      	ldr	r3, [r5, #0]
 801522e:	2b00      	cmp	r3, #0
 8015230:	d000      	beq.n	8015234 <_lseek_r+0x20>
 8015232:	6023      	str	r3, [r4, #0]
 8015234:	bd70      	pop	{r4, r5, r6, pc}
 8015236:	46c0      	nop			; (mov r8, r8)
 8015238:	20002d98 	.word	0x20002d98

0801523c <malloc>:
 801523c:	b510      	push	{r4, lr}
 801523e:	4b03      	ldr	r3, [pc, #12]	; (801524c <malloc+0x10>)
 8015240:	0001      	movs	r1, r0
 8015242:	6818      	ldr	r0, [r3, #0]
 8015244:	f7fc ff04 	bl	8012050 <_malloc_r>
 8015248:	bd10      	pop	{r4, pc}
 801524a:	46c0      	nop			; (mov r8, r8)
 801524c:	20000014 	.word	0x20000014

08015250 <__ascii_mbtowc>:
 8015250:	b082      	sub	sp, #8
 8015252:	2900      	cmp	r1, #0
 8015254:	d100      	bne.n	8015258 <__ascii_mbtowc+0x8>
 8015256:	a901      	add	r1, sp, #4
 8015258:	1e10      	subs	r0, r2, #0
 801525a:	d006      	beq.n	801526a <__ascii_mbtowc+0x1a>
 801525c:	2b00      	cmp	r3, #0
 801525e:	d006      	beq.n	801526e <__ascii_mbtowc+0x1e>
 8015260:	7813      	ldrb	r3, [r2, #0]
 8015262:	600b      	str	r3, [r1, #0]
 8015264:	7810      	ldrb	r0, [r2, #0]
 8015266:	1e43      	subs	r3, r0, #1
 8015268:	4198      	sbcs	r0, r3
 801526a:	b002      	add	sp, #8
 801526c:	4770      	bx	lr
 801526e:	2002      	movs	r0, #2
 8015270:	4240      	negs	r0, r0
 8015272:	e7fa      	b.n	801526a <__ascii_mbtowc+0x1a>

08015274 <memchr>:
 8015274:	b2c9      	uxtb	r1, r1
 8015276:	1882      	adds	r2, r0, r2
 8015278:	4290      	cmp	r0, r2
 801527a:	d101      	bne.n	8015280 <memchr+0xc>
 801527c:	2000      	movs	r0, #0
 801527e:	4770      	bx	lr
 8015280:	7803      	ldrb	r3, [r0, #0]
 8015282:	428b      	cmp	r3, r1
 8015284:	d0fb      	beq.n	801527e <memchr+0xa>
 8015286:	3001      	adds	r0, #1
 8015288:	e7f6      	b.n	8015278 <memchr+0x4>
	...

0801528c <__malloc_lock>:
 801528c:	b510      	push	{r4, lr}
 801528e:	4802      	ldr	r0, [pc, #8]	; (8015298 <__malloc_lock+0xc>)
 8015290:	f7fc fea9 	bl	8011fe6 <__retarget_lock_acquire_recursive>
 8015294:	bd10      	pop	{r4, pc}
 8015296:	46c0      	nop			; (mov r8, r8)
 8015298:	20002d8c 	.word	0x20002d8c

0801529c <__malloc_unlock>:
 801529c:	b510      	push	{r4, lr}
 801529e:	4802      	ldr	r0, [pc, #8]	; (80152a8 <__malloc_unlock+0xc>)
 80152a0:	f7fc fea2 	bl	8011fe8 <__retarget_lock_release_recursive>
 80152a4:	bd10      	pop	{r4, pc}
 80152a6:	46c0      	nop			; (mov r8, r8)
 80152a8:	20002d8c 	.word	0x20002d8c

080152ac <_Balloc>:
 80152ac:	b570      	push	{r4, r5, r6, lr}
 80152ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80152b0:	0006      	movs	r6, r0
 80152b2:	000c      	movs	r4, r1
 80152b4:	2d00      	cmp	r5, #0
 80152b6:	d10e      	bne.n	80152d6 <_Balloc+0x2a>
 80152b8:	2010      	movs	r0, #16
 80152ba:	f7ff ffbf 	bl	801523c <malloc>
 80152be:	1e02      	subs	r2, r0, #0
 80152c0:	6270      	str	r0, [r6, #36]	; 0x24
 80152c2:	d104      	bne.n	80152ce <_Balloc+0x22>
 80152c4:	2166      	movs	r1, #102	; 0x66
 80152c6:	4b19      	ldr	r3, [pc, #100]	; (801532c <_Balloc+0x80>)
 80152c8:	4819      	ldr	r0, [pc, #100]	; (8015330 <_Balloc+0x84>)
 80152ca:	f7fe fc79 	bl	8013bc0 <__assert_func>
 80152ce:	6045      	str	r5, [r0, #4]
 80152d0:	6085      	str	r5, [r0, #8]
 80152d2:	6005      	str	r5, [r0, #0]
 80152d4:	60c5      	str	r5, [r0, #12]
 80152d6:	6a75      	ldr	r5, [r6, #36]	; 0x24
 80152d8:	68eb      	ldr	r3, [r5, #12]
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d013      	beq.n	8015306 <_Balloc+0x5a>
 80152de:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80152e0:	00a2      	lsls	r2, r4, #2
 80152e2:	68db      	ldr	r3, [r3, #12]
 80152e4:	189b      	adds	r3, r3, r2
 80152e6:	6818      	ldr	r0, [r3, #0]
 80152e8:	2800      	cmp	r0, #0
 80152ea:	d118      	bne.n	801531e <_Balloc+0x72>
 80152ec:	2101      	movs	r1, #1
 80152ee:	000d      	movs	r5, r1
 80152f0:	40a5      	lsls	r5, r4
 80152f2:	1d6a      	adds	r2, r5, #5
 80152f4:	0030      	movs	r0, r6
 80152f6:	0092      	lsls	r2, r2, #2
 80152f8:	f000 fca1 	bl	8015c3e <_calloc_r>
 80152fc:	2800      	cmp	r0, #0
 80152fe:	d00c      	beq.n	801531a <_Balloc+0x6e>
 8015300:	6044      	str	r4, [r0, #4]
 8015302:	6085      	str	r5, [r0, #8]
 8015304:	e00d      	b.n	8015322 <_Balloc+0x76>
 8015306:	2221      	movs	r2, #33	; 0x21
 8015308:	2104      	movs	r1, #4
 801530a:	0030      	movs	r0, r6
 801530c:	f000 fc97 	bl	8015c3e <_calloc_r>
 8015310:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8015312:	60e8      	str	r0, [r5, #12]
 8015314:	68db      	ldr	r3, [r3, #12]
 8015316:	2b00      	cmp	r3, #0
 8015318:	d1e1      	bne.n	80152de <_Balloc+0x32>
 801531a:	2000      	movs	r0, #0
 801531c:	bd70      	pop	{r4, r5, r6, pc}
 801531e:	6802      	ldr	r2, [r0, #0]
 8015320:	601a      	str	r2, [r3, #0]
 8015322:	2300      	movs	r3, #0
 8015324:	6103      	str	r3, [r0, #16]
 8015326:	60c3      	str	r3, [r0, #12]
 8015328:	e7f8      	b.n	801531c <_Balloc+0x70>
 801532a:	46c0      	nop			; (mov r8, r8)
 801532c:	08017248 	.word	0x08017248
 8015330:	08017510 	.word	0x08017510

08015334 <_Bfree>:
 8015334:	b570      	push	{r4, r5, r6, lr}
 8015336:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015338:	0005      	movs	r5, r0
 801533a:	000c      	movs	r4, r1
 801533c:	2e00      	cmp	r6, #0
 801533e:	d10e      	bne.n	801535e <_Bfree+0x2a>
 8015340:	2010      	movs	r0, #16
 8015342:	f7ff ff7b 	bl	801523c <malloc>
 8015346:	1e02      	subs	r2, r0, #0
 8015348:	6268      	str	r0, [r5, #36]	; 0x24
 801534a:	d104      	bne.n	8015356 <_Bfree+0x22>
 801534c:	218a      	movs	r1, #138	; 0x8a
 801534e:	4b09      	ldr	r3, [pc, #36]	; (8015374 <_Bfree+0x40>)
 8015350:	4809      	ldr	r0, [pc, #36]	; (8015378 <_Bfree+0x44>)
 8015352:	f7fe fc35 	bl	8013bc0 <__assert_func>
 8015356:	6046      	str	r6, [r0, #4]
 8015358:	6086      	str	r6, [r0, #8]
 801535a:	6006      	str	r6, [r0, #0]
 801535c:	60c6      	str	r6, [r0, #12]
 801535e:	2c00      	cmp	r4, #0
 8015360:	d007      	beq.n	8015372 <_Bfree+0x3e>
 8015362:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015364:	6862      	ldr	r2, [r4, #4]
 8015366:	68db      	ldr	r3, [r3, #12]
 8015368:	0092      	lsls	r2, r2, #2
 801536a:	189b      	adds	r3, r3, r2
 801536c:	681a      	ldr	r2, [r3, #0]
 801536e:	6022      	str	r2, [r4, #0]
 8015370:	601c      	str	r4, [r3, #0]
 8015372:	bd70      	pop	{r4, r5, r6, pc}
 8015374:	08017248 	.word	0x08017248
 8015378:	08017510 	.word	0x08017510

0801537c <__multadd>:
 801537c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801537e:	000e      	movs	r6, r1
 8015380:	9001      	str	r0, [sp, #4]
 8015382:	000c      	movs	r4, r1
 8015384:	001d      	movs	r5, r3
 8015386:	2000      	movs	r0, #0
 8015388:	690f      	ldr	r7, [r1, #16]
 801538a:	3614      	adds	r6, #20
 801538c:	6833      	ldr	r3, [r6, #0]
 801538e:	3001      	adds	r0, #1
 8015390:	b299      	uxth	r1, r3
 8015392:	4351      	muls	r1, r2
 8015394:	0c1b      	lsrs	r3, r3, #16
 8015396:	4353      	muls	r3, r2
 8015398:	1949      	adds	r1, r1, r5
 801539a:	0c0d      	lsrs	r5, r1, #16
 801539c:	195b      	adds	r3, r3, r5
 801539e:	0c1d      	lsrs	r5, r3, #16
 80153a0:	b289      	uxth	r1, r1
 80153a2:	041b      	lsls	r3, r3, #16
 80153a4:	185b      	adds	r3, r3, r1
 80153a6:	c608      	stmia	r6!, {r3}
 80153a8:	4287      	cmp	r7, r0
 80153aa:	dcef      	bgt.n	801538c <__multadd+0x10>
 80153ac:	2d00      	cmp	r5, #0
 80153ae:	d022      	beq.n	80153f6 <__multadd+0x7a>
 80153b0:	68a3      	ldr	r3, [r4, #8]
 80153b2:	42bb      	cmp	r3, r7
 80153b4:	dc19      	bgt.n	80153ea <__multadd+0x6e>
 80153b6:	6863      	ldr	r3, [r4, #4]
 80153b8:	9801      	ldr	r0, [sp, #4]
 80153ba:	1c59      	adds	r1, r3, #1
 80153bc:	f7ff ff76 	bl	80152ac <_Balloc>
 80153c0:	1e06      	subs	r6, r0, #0
 80153c2:	d105      	bne.n	80153d0 <__multadd+0x54>
 80153c4:	0002      	movs	r2, r0
 80153c6:	21b5      	movs	r1, #181	; 0xb5
 80153c8:	4b0c      	ldr	r3, [pc, #48]	; (80153fc <__multadd+0x80>)
 80153ca:	480d      	ldr	r0, [pc, #52]	; (8015400 <__multadd+0x84>)
 80153cc:	f7fe fbf8 	bl	8013bc0 <__assert_func>
 80153d0:	0021      	movs	r1, r4
 80153d2:	6923      	ldr	r3, [r4, #16]
 80153d4:	310c      	adds	r1, #12
 80153d6:	1c9a      	adds	r2, r3, #2
 80153d8:	0092      	lsls	r2, r2, #2
 80153da:	300c      	adds	r0, #12
 80153dc:	f7fc fe05 	bl	8011fea <memcpy>
 80153e0:	0021      	movs	r1, r4
 80153e2:	9801      	ldr	r0, [sp, #4]
 80153e4:	f7ff ffa6 	bl	8015334 <_Bfree>
 80153e8:	0034      	movs	r4, r6
 80153ea:	1d3b      	adds	r3, r7, #4
 80153ec:	009b      	lsls	r3, r3, #2
 80153ee:	18e3      	adds	r3, r4, r3
 80153f0:	605d      	str	r5, [r3, #4]
 80153f2:	1c7b      	adds	r3, r7, #1
 80153f4:	6123      	str	r3, [r4, #16]
 80153f6:	0020      	movs	r0, r4
 80153f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80153fa:	46c0      	nop			; (mov r8, r8)
 80153fc:	08017486 	.word	0x08017486
 8015400:	08017510 	.word	0x08017510

08015404 <__s2b>:
 8015404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015406:	0006      	movs	r6, r0
 8015408:	0018      	movs	r0, r3
 801540a:	000c      	movs	r4, r1
 801540c:	3008      	adds	r0, #8
 801540e:	2109      	movs	r1, #9
 8015410:	9301      	str	r3, [sp, #4]
 8015412:	0015      	movs	r5, r2
 8015414:	f7ea ff1e 	bl	8000254 <__divsi3>
 8015418:	2301      	movs	r3, #1
 801541a:	2100      	movs	r1, #0
 801541c:	4283      	cmp	r3, r0
 801541e:	db0a      	blt.n	8015436 <__s2b+0x32>
 8015420:	0030      	movs	r0, r6
 8015422:	f7ff ff43 	bl	80152ac <_Balloc>
 8015426:	1e01      	subs	r1, r0, #0
 8015428:	d108      	bne.n	801543c <__s2b+0x38>
 801542a:	0002      	movs	r2, r0
 801542c:	4b19      	ldr	r3, [pc, #100]	; (8015494 <__s2b+0x90>)
 801542e:	481a      	ldr	r0, [pc, #104]	; (8015498 <__s2b+0x94>)
 8015430:	31ce      	adds	r1, #206	; 0xce
 8015432:	f7fe fbc5 	bl	8013bc0 <__assert_func>
 8015436:	005b      	lsls	r3, r3, #1
 8015438:	3101      	adds	r1, #1
 801543a:	e7ef      	b.n	801541c <__s2b+0x18>
 801543c:	9b08      	ldr	r3, [sp, #32]
 801543e:	6143      	str	r3, [r0, #20]
 8015440:	2301      	movs	r3, #1
 8015442:	6103      	str	r3, [r0, #16]
 8015444:	2d09      	cmp	r5, #9
 8015446:	dd18      	ble.n	801547a <__s2b+0x76>
 8015448:	0023      	movs	r3, r4
 801544a:	3309      	adds	r3, #9
 801544c:	001f      	movs	r7, r3
 801544e:	9300      	str	r3, [sp, #0]
 8015450:	1964      	adds	r4, r4, r5
 8015452:	783b      	ldrb	r3, [r7, #0]
 8015454:	220a      	movs	r2, #10
 8015456:	0030      	movs	r0, r6
 8015458:	3b30      	subs	r3, #48	; 0x30
 801545a:	f7ff ff8f 	bl	801537c <__multadd>
 801545e:	3701      	adds	r7, #1
 8015460:	0001      	movs	r1, r0
 8015462:	42a7      	cmp	r7, r4
 8015464:	d1f5      	bne.n	8015452 <__s2b+0x4e>
 8015466:	002c      	movs	r4, r5
 8015468:	9b00      	ldr	r3, [sp, #0]
 801546a:	3c08      	subs	r4, #8
 801546c:	191c      	adds	r4, r3, r4
 801546e:	002f      	movs	r7, r5
 8015470:	9b01      	ldr	r3, [sp, #4]
 8015472:	429f      	cmp	r7, r3
 8015474:	db04      	blt.n	8015480 <__s2b+0x7c>
 8015476:	0008      	movs	r0, r1
 8015478:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801547a:	2509      	movs	r5, #9
 801547c:	340a      	adds	r4, #10
 801547e:	e7f6      	b.n	801546e <__s2b+0x6a>
 8015480:	1b63      	subs	r3, r4, r5
 8015482:	5ddb      	ldrb	r3, [r3, r7]
 8015484:	220a      	movs	r2, #10
 8015486:	0030      	movs	r0, r6
 8015488:	3b30      	subs	r3, #48	; 0x30
 801548a:	f7ff ff77 	bl	801537c <__multadd>
 801548e:	3701      	adds	r7, #1
 8015490:	0001      	movs	r1, r0
 8015492:	e7ed      	b.n	8015470 <__s2b+0x6c>
 8015494:	08017486 	.word	0x08017486
 8015498:	08017510 	.word	0x08017510

0801549c <__hi0bits>:
 801549c:	0003      	movs	r3, r0
 801549e:	0c02      	lsrs	r2, r0, #16
 80154a0:	2000      	movs	r0, #0
 80154a2:	4282      	cmp	r2, r0
 80154a4:	d101      	bne.n	80154aa <__hi0bits+0xe>
 80154a6:	041b      	lsls	r3, r3, #16
 80154a8:	3010      	adds	r0, #16
 80154aa:	0e1a      	lsrs	r2, r3, #24
 80154ac:	d101      	bne.n	80154b2 <__hi0bits+0x16>
 80154ae:	3008      	adds	r0, #8
 80154b0:	021b      	lsls	r3, r3, #8
 80154b2:	0f1a      	lsrs	r2, r3, #28
 80154b4:	d101      	bne.n	80154ba <__hi0bits+0x1e>
 80154b6:	3004      	adds	r0, #4
 80154b8:	011b      	lsls	r3, r3, #4
 80154ba:	0f9a      	lsrs	r2, r3, #30
 80154bc:	d101      	bne.n	80154c2 <__hi0bits+0x26>
 80154be:	3002      	adds	r0, #2
 80154c0:	009b      	lsls	r3, r3, #2
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	db03      	blt.n	80154ce <__hi0bits+0x32>
 80154c6:	3001      	adds	r0, #1
 80154c8:	005b      	lsls	r3, r3, #1
 80154ca:	d400      	bmi.n	80154ce <__hi0bits+0x32>
 80154cc:	2020      	movs	r0, #32
 80154ce:	4770      	bx	lr

080154d0 <__lo0bits>:
 80154d0:	6803      	ldr	r3, [r0, #0]
 80154d2:	0002      	movs	r2, r0
 80154d4:	2107      	movs	r1, #7
 80154d6:	0018      	movs	r0, r3
 80154d8:	4008      	ands	r0, r1
 80154da:	420b      	tst	r3, r1
 80154dc:	d00d      	beq.n	80154fa <__lo0bits+0x2a>
 80154de:	3906      	subs	r1, #6
 80154e0:	2000      	movs	r0, #0
 80154e2:	420b      	tst	r3, r1
 80154e4:	d105      	bne.n	80154f2 <__lo0bits+0x22>
 80154e6:	3002      	adds	r0, #2
 80154e8:	4203      	tst	r3, r0
 80154ea:	d003      	beq.n	80154f4 <__lo0bits+0x24>
 80154ec:	40cb      	lsrs	r3, r1
 80154ee:	0008      	movs	r0, r1
 80154f0:	6013      	str	r3, [r2, #0]
 80154f2:	4770      	bx	lr
 80154f4:	089b      	lsrs	r3, r3, #2
 80154f6:	6013      	str	r3, [r2, #0]
 80154f8:	e7fb      	b.n	80154f2 <__lo0bits+0x22>
 80154fa:	b299      	uxth	r1, r3
 80154fc:	2900      	cmp	r1, #0
 80154fe:	d101      	bne.n	8015504 <__lo0bits+0x34>
 8015500:	2010      	movs	r0, #16
 8015502:	0c1b      	lsrs	r3, r3, #16
 8015504:	b2d9      	uxtb	r1, r3
 8015506:	2900      	cmp	r1, #0
 8015508:	d101      	bne.n	801550e <__lo0bits+0x3e>
 801550a:	3008      	adds	r0, #8
 801550c:	0a1b      	lsrs	r3, r3, #8
 801550e:	0719      	lsls	r1, r3, #28
 8015510:	d101      	bne.n	8015516 <__lo0bits+0x46>
 8015512:	3004      	adds	r0, #4
 8015514:	091b      	lsrs	r3, r3, #4
 8015516:	0799      	lsls	r1, r3, #30
 8015518:	d101      	bne.n	801551e <__lo0bits+0x4e>
 801551a:	3002      	adds	r0, #2
 801551c:	089b      	lsrs	r3, r3, #2
 801551e:	07d9      	lsls	r1, r3, #31
 8015520:	d4e9      	bmi.n	80154f6 <__lo0bits+0x26>
 8015522:	3001      	adds	r0, #1
 8015524:	085b      	lsrs	r3, r3, #1
 8015526:	d1e6      	bne.n	80154f6 <__lo0bits+0x26>
 8015528:	2020      	movs	r0, #32
 801552a:	e7e2      	b.n	80154f2 <__lo0bits+0x22>

0801552c <__i2b>:
 801552c:	b510      	push	{r4, lr}
 801552e:	000c      	movs	r4, r1
 8015530:	2101      	movs	r1, #1
 8015532:	f7ff febb 	bl	80152ac <_Balloc>
 8015536:	2800      	cmp	r0, #0
 8015538:	d106      	bne.n	8015548 <__i2b+0x1c>
 801553a:	21a0      	movs	r1, #160	; 0xa0
 801553c:	0002      	movs	r2, r0
 801553e:	4b04      	ldr	r3, [pc, #16]	; (8015550 <__i2b+0x24>)
 8015540:	4804      	ldr	r0, [pc, #16]	; (8015554 <__i2b+0x28>)
 8015542:	0049      	lsls	r1, r1, #1
 8015544:	f7fe fb3c 	bl	8013bc0 <__assert_func>
 8015548:	2301      	movs	r3, #1
 801554a:	6144      	str	r4, [r0, #20]
 801554c:	6103      	str	r3, [r0, #16]
 801554e:	bd10      	pop	{r4, pc}
 8015550:	08017486 	.word	0x08017486
 8015554:	08017510 	.word	0x08017510

08015558 <__multiply>:
 8015558:	b5f0      	push	{r4, r5, r6, r7, lr}
 801555a:	690b      	ldr	r3, [r1, #16]
 801555c:	0014      	movs	r4, r2
 801555e:	6912      	ldr	r2, [r2, #16]
 8015560:	000d      	movs	r5, r1
 8015562:	b089      	sub	sp, #36	; 0x24
 8015564:	4293      	cmp	r3, r2
 8015566:	da01      	bge.n	801556c <__multiply+0x14>
 8015568:	0025      	movs	r5, r4
 801556a:	000c      	movs	r4, r1
 801556c:	692f      	ldr	r7, [r5, #16]
 801556e:	6926      	ldr	r6, [r4, #16]
 8015570:	6869      	ldr	r1, [r5, #4]
 8015572:	19bb      	adds	r3, r7, r6
 8015574:	9302      	str	r3, [sp, #8]
 8015576:	68ab      	ldr	r3, [r5, #8]
 8015578:	19ba      	adds	r2, r7, r6
 801557a:	4293      	cmp	r3, r2
 801557c:	da00      	bge.n	8015580 <__multiply+0x28>
 801557e:	3101      	adds	r1, #1
 8015580:	f7ff fe94 	bl	80152ac <_Balloc>
 8015584:	9001      	str	r0, [sp, #4]
 8015586:	2800      	cmp	r0, #0
 8015588:	d106      	bne.n	8015598 <__multiply+0x40>
 801558a:	215e      	movs	r1, #94	; 0x5e
 801558c:	0002      	movs	r2, r0
 801558e:	4b48      	ldr	r3, [pc, #288]	; (80156b0 <__multiply+0x158>)
 8015590:	4848      	ldr	r0, [pc, #288]	; (80156b4 <__multiply+0x15c>)
 8015592:	31ff      	adds	r1, #255	; 0xff
 8015594:	f7fe fb14 	bl	8013bc0 <__assert_func>
 8015598:	9b01      	ldr	r3, [sp, #4]
 801559a:	2200      	movs	r2, #0
 801559c:	3314      	adds	r3, #20
 801559e:	469c      	mov	ip, r3
 80155a0:	19bb      	adds	r3, r7, r6
 80155a2:	009b      	lsls	r3, r3, #2
 80155a4:	4463      	add	r3, ip
 80155a6:	9303      	str	r3, [sp, #12]
 80155a8:	4663      	mov	r3, ip
 80155aa:	9903      	ldr	r1, [sp, #12]
 80155ac:	428b      	cmp	r3, r1
 80155ae:	d32c      	bcc.n	801560a <__multiply+0xb2>
 80155b0:	002b      	movs	r3, r5
 80155b2:	0022      	movs	r2, r4
 80155b4:	3314      	adds	r3, #20
 80155b6:	00bf      	lsls	r7, r7, #2
 80155b8:	3214      	adds	r2, #20
 80155ba:	9306      	str	r3, [sp, #24]
 80155bc:	00b6      	lsls	r6, r6, #2
 80155be:	19db      	adds	r3, r3, r7
 80155c0:	9304      	str	r3, [sp, #16]
 80155c2:	1993      	adds	r3, r2, r6
 80155c4:	9307      	str	r3, [sp, #28]
 80155c6:	2304      	movs	r3, #4
 80155c8:	9305      	str	r3, [sp, #20]
 80155ca:	002b      	movs	r3, r5
 80155cc:	9904      	ldr	r1, [sp, #16]
 80155ce:	3315      	adds	r3, #21
 80155d0:	9200      	str	r2, [sp, #0]
 80155d2:	4299      	cmp	r1, r3
 80155d4:	d305      	bcc.n	80155e2 <__multiply+0x8a>
 80155d6:	1b4b      	subs	r3, r1, r5
 80155d8:	3b15      	subs	r3, #21
 80155da:	089b      	lsrs	r3, r3, #2
 80155dc:	3301      	adds	r3, #1
 80155de:	009b      	lsls	r3, r3, #2
 80155e0:	9305      	str	r3, [sp, #20]
 80155e2:	9b07      	ldr	r3, [sp, #28]
 80155e4:	9a00      	ldr	r2, [sp, #0]
 80155e6:	429a      	cmp	r2, r3
 80155e8:	d311      	bcc.n	801560e <__multiply+0xb6>
 80155ea:	9b02      	ldr	r3, [sp, #8]
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	dd06      	ble.n	80155fe <__multiply+0xa6>
 80155f0:	9b03      	ldr	r3, [sp, #12]
 80155f2:	3b04      	subs	r3, #4
 80155f4:	9303      	str	r3, [sp, #12]
 80155f6:	681b      	ldr	r3, [r3, #0]
 80155f8:	9300      	str	r3, [sp, #0]
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d053      	beq.n	80156a6 <__multiply+0x14e>
 80155fe:	9b01      	ldr	r3, [sp, #4]
 8015600:	9a02      	ldr	r2, [sp, #8]
 8015602:	0018      	movs	r0, r3
 8015604:	611a      	str	r2, [r3, #16]
 8015606:	b009      	add	sp, #36	; 0x24
 8015608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801560a:	c304      	stmia	r3!, {r2}
 801560c:	e7cd      	b.n	80155aa <__multiply+0x52>
 801560e:	9b00      	ldr	r3, [sp, #0]
 8015610:	681b      	ldr	r3, [r3, #0]
 8015612:	b298      	uxth	r0, r3
 8015614:	2800      	cmp	r0, #0
 8015616:	d01b      	beq.n	8015650 <__multiply+0xf8>
 8015618:	4667      	mov	r7, ip
 801561a:	2400      	movs	r4, #0
 801561c:	9e06      	ldr	r6, [sp, #24]
 801561e:	ce02      	ldmia	r6!, {r1}
 8015620:	683a      	ldr	r2, [r7, #0]
 8015622:	b28b      	uxth	r3, r1
 8015624:	4343      	muls	r3, r0
 8015626:	b292      	uxth	r2, r2
 8015628:	189b      	adds	r3, r3, r2
 801562a:	191b      	adds	r3, r3, r4
 801562c:	0c0c      	lsrs	r4, r1, #16
 801562e:	4344      	muls	r4, r0
 8015630:	683a      	ldr	r2, [r7, #0]
 8015632:	0c11      	lsrs	r1, r2, #16
 8015634:	1861      	adds	r1, r4, r1
 8015636:	0c1c      	lsrs	r4, r3, #16
 8015638:	1909      	adds	r1, r1, r4
 801563a:	0c0c      	lsrs	r4, r1, #16
 801563c:	b29b      	uxth	r3, r3
 801563e:	0409      	lsls	r1, r1, #16
 8015640:	430b      	orrs	r3, r1
 8015642:	c708      	stmia	r7!, {r3}
 8015644:	9b04      	ldr	r3, [sp, #16]
 8015646:	42b3      	cmp	r3, r6
 8015648:	d8e9      	bhi.n	801561e <__multiply+0xc6>
 801564a:	4663      	mov	r3, ip
 801564c:	9a05      	ldr	r2, [sp, #20]
 801564e:	509c      	str	r4, [r3, r2]
 8015650:	9b00      	ldr	r3, [sp, #0]
 8015652:	681b      	ldr	r3, [r3, #0]
 8015654:	0c1e      	lsrs	r6, r3, #16
 8015656:	d020      	beq.n	801569a <__multiply+0x142>
 8015658:	4663      	mov	r3, ip
 801565a:	002c      	movs	r4, r5
 801565c:	4660      	mov	r0, ip
 801565e:	2700      	movs	r7, #0
 8015660:	681b      	ldr	r3, [r3, #0]
 8015662:	3414      	adds	r4, #20
 8015664:	6822      	ldr	r2, [r4, #0]
 8015666:	b29b      	uxth	r3, r3
 8015668:	b291      	uxth	r1, r2
 801566a:	4371      	muls	r1, r6
 801566c:	6802      	ldr	r2, [r0, #0]
 801566e:	0c12      	lsrs	r2, r2, #16
 8015670:	1889      	adds	r1, r1, r2
 8015672:	19cf      	adds	r7, r1, r7
 8015674:	0439      	lsls	r1, r7, #16
 8015676:	430b      	orrs	r3, r1
 8015678:	6003      	str	r3, [r0, #0]
 801567a:	cc02      	ldmia	r4!, {r1}
 801567c:	6843      	ldr	r3, [r0, #4]
 801567e:	0c09      	lsrs	r1, r1, #16
 8015680:	4371      	muls	r1, r6
 8015682:	b29b      	uxth	r3, r3
 8015684:	0c3f      	lsrs	r7, r7, #16
 8015686:	18cb      	adds	r3, r1, r3
 8015688:	9a04      	ldr	r2, [sp, #16]
 801568a:	19db      	adds	r3, r3, r7
 801568c:	0c1f      	lsrs	r7, r3, #16
 801568e:	3004      	adds	r0, #4
 8015690:	42a2      	cmp	r2, r4
 8015692:	d8e7      	bhi.n	8015664 <__multiply+0x10c>
 8015694:	4662      	mov	r2, ip
 8015696:	9905      	ldr	r1, [sp, #20]
 8015698:	5053      	str	r3, [r2, r1]
 801569a:	9b00      	ldr	r3, [sp, #0]
 801569c:	3304      	adds	r3, #4
 801569e:	9300      	str	r3, [sp, #0]
 80156a0:	2304      	movs	r3, #4
 80156a2:	449c      	add	ip, r3
 80156a4:	e79d      	b.n	80155e2 <__multiply+0x8a>
 80156a6:	9b02      	ldr	r3, [sp, #8]
 80156a8:	3b01      	subs	r3, #1
 80156aa:	9302      	str	r3, [sp, #8]
 80156ac:	e79d      	b.n	80155ea <__multiply+0x92>
 80156ae:	46c0      	nop			; (mov r8, r8)
 80156b0:	08017486 	.word	0x08017486
 80156b4:	08017510 	.word	0x08017510

080156b8 <__pow5mult>:
 80156b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80156ba:	2303      	movs	r3, #3
 80156bc:	0015      	movs	r5, r2
 80156be:	0007      	movs	r7, r0
 80156c0:	000e      	movs	r6, r1
 80156c2:	401a      	ands	r2, r3
 80156c4:	421d      	tst	r5, r3
 80156c6:	d008      	beq.n	80156da <__pow5mult+0x22>
 80156c8:	4925      	ldr	r1, [pc, #148]	; (8015760 <__pow5mult+0xa8>)
 80156ca:	3a01      	subs	r2, #1
 80156cc:	0092      	lsls	r2, r2, #2
 80156ce:	5852      	ldr	r2, [r2, r1]
 80156d0:	2300      	movs	r3, #0
 80156d2:	0031      	movs	r1, r6
 80156d4:	f7ff fe52 	bl	801537c <__multadd>
 80156d8:	0006      	movs	r6, r0
 80156da:	10ad      	asrs	r5, r5, #2
 80156dc:	d03d      	beq.n	801575a <__pow5mult+0xa2>
 80156de:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80156e0:	2c00      	cmp	r4, #0
 80156e2:	d10f      	bne.n	8015704 <__pow5mult+0x4c>
 80156e4:	2010      	movs	r0, #16
 80156e6:	f7ff fda9 	bl	801523c <malloc>
 80156ea:	1e02      	subs	r2, r0, #0
 80156ec:	6278      	str	r0, [r7, #36]	; 0x24
 80156ee:	d105      	bne.n	80156fc <__pow5mult+0x44>
 80156f0:	21d7      	movs	r1, #215	; 0xd7
 80156f2:	4b1c      	ldr	r3, [pc, #112]	; (8015764 <__pow5mult+0xac>)
 80156f4:	481c      	ldr	r0, [pc, #112]	; (8015768 <__pow5mult+0xb0>)
 80156f6:	0049      	lsls	r1, r1, #1
 80156f8:	f7fe fa62 	bl	8013bc0 <__assert_func>
 80156fc:	6044      	str	r4, [r0, #4]
 80156fe:	6084      	str	r4, [r0, #8]
 8015700:	6004      	str	r4, [r0, #0]
 8015702:	60c4      	str	r4, [r0, #12]
 8015704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015706:	689c      	ldr	r4, [r3, #8]
 8015708:	9301      	str	r3, [sp, #4]
 801570a:	2c00      	cmp	r4, #0
 801570c:	d108      	bne.n	8015720 <__pow5mult+0x68>
 801570e:	0038      	movs	r0, r7
 8015710:	4916      	ldr	r1, [pc, #88]	; (801576c <__pow5mult+0xb4>)
 8015712:	f7ff ff0b 	bl	801552c <__i2b>
 8015716:	9b01      	ldr	r3, [sp, #4]
 8015718:	0004      	movs	r4, r0
 801571a:	6098      	str	r0, [r3, #8]
 801571c:	2300      	movs	r3, #0
 801571e:	6003      	str	r3, [r0, #0]
 8015720:	2301      	movs	r3, #1
 8015722:	421d      	tst	r5, r3
 8015724:	d00a      	beq.n	801573c <__pow5mult+0x84>
 8015726:	0031      	movs	r1, r6
 8015728:	0022      	movs	r2, r4
 801572a:	0038      	movs	r0, r7
 801572c:	f7ff ff14 	bl	8015558 <__multiply>
 8015730:	0031      	movs	r1, r6
 8015732:	9001      	str	r0, [sp, #4]
 8015734:	0038      	movs	r0, r7
 8015736:	f7ff fdfd 	bl	8015334 <_Bfree>
 801573a:	9e01      	ldr	r6, [sp, #4]
 801573c:	106d      	asrs	r5, r5, #1
 801573e:	d00c      	beq.n	801575a <__pow5mult+0xa2>
 8015740:	6820      	ldr	r0, [r4, #0]
 8015742:	2800      	cmp	r0, #0
 8015744:	d107      	bne.n	8015756 <__pow5mult+0x9e>
 8015746:	0022      	movs	r2, r4
 8015748:	0021      	movs	r1, r4
 801574a:	0038      	movs	r0, r7
 801574c:	f7ff ff04 	bl	8015558 <__multiply>
 8015750:	2300      	movs	r3, #0
 8015752:	6020      	str	r0, [r4, #0]
 8015754:	6003      	str	r3, [r0, #0]
 8015756:	0004      	movs	r4, r0
 8015758:	e7e2      	b.n	8015720 <__pow5mult+0x68>
 801575a:	0030      	movs	r0, r6
 801575c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801575e:	46c0      	nop			; (mov r8, r8)
 8015760:	08017660 	.word	0x08017660
 8015764:	08017248 	.word	0x08017248
 8015768:	08017510 	.word	0x08017510
 801576c:	00000271 	.word	0x00000271

08015770 <__lshift>:
 8015770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015772:	000c      	movs	r4, r1
 8015774:	0017      	movs	r7, r2
 8015776:	6923      	ldr	r3, [r4, #16]
 8015778:	1155      	asrs	r5, r2, #5
 801577a:	b087      	sub	sp, #28
 801577c:	18eb      	adds	r3, r5, r3
 801577e:	9302      	str	r3, [sp, #8]
 8015780:	3301      	adds	r3, #1
 8015782:	9301      	str	r3, [sp, #4]
 8015784:	6849      	ldr	r1, [r1, #4]
 8015786:	68a3      	ldr	r3, [r4, #8]
 8015788:	9004      	str	r0, [sp, #16]
 801578a:	9a01      	ldr	r2, [sp, #4]
 801578c:	4293      	cmp	r3, r2
 801578e:	db10      	blt.n	80157b2 <__lshift+0x42>
 8015790:	9804      	ldr	r0, [sp, #16]
 8015792:	f7ff fd8b 	bl	80152ac <_Balloc>
 8015796:	2300      	movs	r3, #0
 8015798:	0002      	movs	r2, r0
 801579a:	0006      	movs	r6, r0
 801579c:	0019      	movs	r1, r3
 801579e:	3214      	adds	r2, #20
 80157a0:	4298      	cmp	r0, r3
 80157a2:	d10c      	bne.n	80157be <__lshift+0x4e>
 80157a4:	21da      	movs	r1, #218	; 0xda
 80157a6:	0002      	movs	r2, r0
 80157a8:	4b26      	ldr	r3, [pc, #152]	; (8015844 <__lshift+0xd4>)
 80157aa:	4827      	ldr	r0, [pc, #156]	; (8015848 <__lshift+0xd8>)
 80157ac:	31ff      	adds	r1, #255	; 0xff
 80157ae:	f7fe fa07 	bl	8013bc0 <__assert_func>
 80157b2:	3101      	adds	r1, #1
 80157b4:	005b      	lsls	r3, r3, #1
 80157b6:	e7e8      	b.n	801578a <__lshift+0x1a>
 80157b8:	0098      	lsls	r0, r3, #2
 80157ba:	5011      	str	r1, [r2, r0]
 80157bc:	3301      	adds	r3, #1
 80157be:	42ab      	cmp	r3, r5
 80157c0:	dbfa      	blt.n	80157b8 <__lshift+0x48>
 80157c2:	43eb      	mvns	r3, r5
 80157c4:	17db      	asrs	r3, r3, #31
 80157c6:	401d      	ands	r5, r3
 80157c8:	211f      	movs	r1, #31
 80157ca:	0023      	movs	r3, r4
 80157cc:	0038      	movs	r0, r7
 80157ce:	00ad      	lsls	r5, r5, #2
 80157d0:	1955      	adds	r5, r2, r5
 80157d2:	6922      	ldr	r2, [r4, #16]
 80157d4:	3314      	adds	r3, #20
 80157d6:	0092      	lsls	r2, r2, #2
 80157d8:	4008      	ands	r0, r1
 80157da:	4684      	mov	ip, r0
 80157dc:	189a      	adds	r2, r3, r2
 80157de:	420f      	tst	r7, r1
 80157e0:	d02a      	beq.n	8015838 <__lshift+0xc8>
 80157e2:	3101      	adds	r1, #1
 80157e4:	1a09      	subs	r1, r1, r0
 80157e6:	9105      	str	r1, [sp, #20]
 80157e8:	2100      	movs	r1, #0
 80157ea:	9503      	str	r5, [sp, #12]
 80157ec:	4667      	mov	r7, ip
 80157ee:	6818      	ldr	r0, [r3, #0]
 80157f0:	40b8      	lsls	r0, r7
 80157f2:	4301      	orrs	r1, r0
 80157f4:	9803      	ldr	r0, [sp, #12]
 80157f6:	c002      	stmia	r0!, {r1}
 80157f8:	cb02      	ldmia	r3!, {r1}
 80157fa:	9003      	str	r0, [sp, #12]
 80157fc:	9805      	ldr	r0, [sp, #20]
 80157fe:	40c1      	lsrs	r1, r0
 8015800:	429a      	cmp	r2, r3
 8015802:	d8f3      	bhi.n	80157ec <__lshift+0x7c>
 8015804:	0020      	movs	r0, r4
 8015806:	3015      	adds	r0, #21
 8015808:	2304      	movs	r3, #4
 801580a:	4282      	cmp	r2, r0
 801580c:	d304      	bcc.n	8015818 <__lshift+0xa8>
 801580e:	1b13      	subs	r3, r2, r4
 8015810:	3b15      	subs	r3, #21
 8015812:	089b      	lsrs	r3, r3, #2
 8015814:	3301      	adds	r3, #1
 8015816:	009b      	lsls	r3, r3, #2
 8015818:	50e9      	str	r1, [r5, r3]
 801581a:	2900      	cmp	r1, #0
 801581c:	d002      	beq.n	8015824 <__lshift+0xb4>
 801581e:	9b02      	ldr	r3, [sp, #8]
 8015820:	3302      	adds	r3, #2
 8015822:	9301      	str	r3, [sp, #4]
 8015824:	9b01      	ldr	r3, [sp, #4]
 8015826:	9804      	ldr	r0, [sp, #16]
 8015828:	3b01      	subs	r3, #1
 801582a:	0021      	movs	r1, r4
 801582c:	6133      	str	r3, [r6, #16]
 801582e:	f7ff fd81 	bl	8015334 <_Bfree>
 8015832:	0030      	movs	r0, r6
 8015834:	b007      	add	sp, #28
 8015836:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015838:	cb02      	ldmia	r3!, {r1}
 801583a:	c502      	stmia	r5!, {r1}
 801583c:	429a      	cmp	r2, r3
 801583e:	d8fb      	bhi.n	8015838 <__lshift+0xc8>
 8015840:	e7f0      	b.n	8015824 <__lshift+0xb4>
 8015842:	46c0      	nop			; (mov r8, r8)
 8015844:	08017486 	.word	0x08017486
 8015848:	08017510 	.word	0x08017510

0801584c <__mcmp>:
 801584c:	6902      	ldr	r2, [r0, #16]
 801584e:	690b      	ldr	r3, [r1, #16]
 8015850:	b530      	push	{r4, r5, lr}
 8015852:	0004      	movs	r4, r0
 8015854:	1ad0      	subs	r0, r2, r3
 8015856:	429a      	cmp	r2, r3
 8015858:	d10d      	bne.n	8015876 <__mcmp+0x2a>
 801585a:	009b      	lsls	r3, r3, #2
 801585c:	3414      	adds	r4, #20
 801585e:	3114      	adds	r1, #20
 8015860:	18e2      	adds	r2, r4, r3
 8015862:	18c9      	adds	r1, r1, r3
 8015864:	3a04      	subs	r2, #4
 8015866:	3904      	subs	r1, #4
 8015868:	6815      	ldr	r5, [r2, #0]
 801586a:	680b      	ldr	r3, [r1, #0]
 801586c:	429d      	cmp	r5, r3
 801586e:	d003      	beq.n	8015878 <__mcmp+0x2c>
 8015870:	2001      	movs	r0, #1
 8015872:	429d      	cmp	r5, r3
 8015874:	d303      	bcc.n	801587e <__mcmp+0x32>
 8015876:	bd30      	pop	{r4, r5, pc}
 8015878:	4294      	cmp	r4, r2
 801587a:	d3f3      	bcc.n	8015864 <__mcmp+0x18>
 801587c:	e7fb      	b.n	8015876 <__mcmp+0x2a>
 801587e:	4240      	negs	r0, r0
 8015880:	e7f9      	b.n	8015876 <__mcmp+0x2a>
	...

08015884 <__mdiff>:
 8015884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015886:	000e      	movs	r6, r1
 8015888:	0007      	movs	r7, r0
 801588a:	0011      	movs	r1, r2
 801588c:	0030      	movs	r0, r6
 801588e:	b087      	sub	sp, #28
 8015890:	0014      	movs	r4, r2
 8015892:	f7ff ffdb 	bl	801584c <__mcmp>
 8015896:	1e05      	subs	r5, r0, #0
 8015898:	d110      	bne.n	80158bc <__mdiff+0x38>
 801589a:	0001      	movs	r1, r0
 801589c:	0038      	movs	r0, r7
 801589e:	f7ff fd05 	bl	80152ac <_Balloc>
 80158a2:	1e02      	subs	r2, r0, #0
 80158a4:	d104      	bne.n	80158b0 <__mdiff+0x2c>
 80158a6:	4b40      	ldr	r3, [pc, #256]	; (80159a8 <__mdiff+0x124>)
 80158a8:	4940      	ldr	r1, [pc, #256]	; (80159ac <__mdiff+0x128>)
 80158aa:	4841      	ldr	r0, [pc, #260]	; (80159b0 <__mdiff+0x12c>)
 80158ac:	f7fe f988 	bl	8013bc0 <__assert_func>
 80158b0:	2301      	movs	r3, #1
 80158b2:	6145      	str	r5, [r0, #20]
 80158b4:	6103      	str	r3, [r0, #16]
 80158b6:	0010      	movs	r0, r2
 80158b8:	b007      	add	sp, #28
 80158ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80158bc:	2301      	movs	r3, #1
 80158be:	9301      	str	r3, [sp, #4]
 80158c0:	2800      	cmp	r0, #0
 80158c2:	db04      	blt.n	80158ce <__mdiff+0x4a>
 80158c4:	0023      	movs	r3, r4
 80158c6:	0034      	movs	r4, r6
 80158c8:	001e      	movs	r6, r3
 80158ca:	2300      	movs	r3, #0
 80158cc:	9301      	str	r3, [sp, #4]
 80158ce:	0038      	movs	r0, r7
 80158d0:	6861      	ldr	r1, [r4, #4]
 80158d2:	f7ff fceb 	bl	80152ac <_Balloc>
 80158d6:	1e02      	subs	r2, r0, #0
 80158d8:	d103      	bne.n	80158e2 <__mdiff+0x5e>
 80158da:	2190      	movs	r1, #144	; 0x90
 80158dc:	4b32      	ldr	r3, [pc, #200]	; (80159a8 <__mdiff+0x124>)
 80158de:	0089      	lsls	r1, r1, #2
 80158e0:	e7e3      	b.n	80158aa <__mdiff+0x26>
 80158e2:	9b01      	ldr	r3, [sp, #4]
 80158e4:	2700      	movs	r7, #0
 80158e6:	60c3      	str	r3, [r0, #12]
 80158e8:	6920      	ldr	r0, [r4, #16]
 80158ea:	3414      	adds	r4, #20
 80158ec:	9401      	str	r4, [sp, #4]
 80158ee:	9b01      	ldr	r3, [sp, #4]
 80158f0:	0084      	lsls	r4, r0, #2
 80158f2:	191b      	adds	r3, r3, r4
 80158f4:	0034      	movs	r4, r6
 80158f6:	9302      	str	r3, [sp, #8]
 80158f8:	6933      	ldr	r3, [r6, #16]
 80158fa:	3414      	adds	r4, #20
 80158fc:	0099      	lsls	r1, r3, #2
 80158fe:	1863      	adds	r3, r4, r1
 8015900:	9303      	str	r3, [sp, #12]
 8015902:	0013      	movs	r3, r2
 8015904:	3314      	adds	r3, #20
 8015906:	469c      	mov	ip, r3
 8015908:	9305      	str	r3, [sp, #20]
 801590a:	9b01      	ldr	r3, [sp, #4]
 801590c:	9304      	str	r3, [sp, #16]
 801590e:	9b04      	ldr	r3, [sp, #16]
 8015910:	cc02      	ldmia	r4!, {r1}
 8015912:	cb20      	ldmia	r3!, {r5}
 8015914:	9304      	str	r3, [sp, #16]
 8015916:	b2ab      	uxth	r3, r5
 8015918:	19df      	adds	r7, r3, r7
 801591a:	b28b      	uxth	r3, r1
 801591c:	1afb      	subs	r3, r7, r3
 801591e:	0c09      	lsrs	r1, r1, #16
 8015920:	0c2d      	lsrs	r5, r5, #16
 8015922:	1a6d      	subs	r5, r5, r1
 8015924:	1419      	asrs	r1, r3, #16
 8015926:	186d      	adds	r5, r5, r1
 8015928:	4661      	mov	r1, ip
 801592a:	142f      	asrs	r7, r5, #16
 801592c:	b29b      	uxth	r3, r3
 801592e:	042d      	lsls	r5, r5, #16
 8015930:	432b      	orrs	r3, r5
 8015932:	c108      	stmia	r1!, {r3}
 8015934:	9b03      	ldr	r3, [sp, #12]
 8015936:	468c      	mov	ip, r1
 8015938:	42a3      	cmp	r3, r4
 801593a:	d8e8      	bhi.n	801590e <__mdiff+0x8a>
 801593c:	0031      	movs	r1, r6
 801593e:	9c03      	ldr	r4, [sp, #12]
 8015940:	3115      	adds	r1, #21
 8015942:	2304      	movs	r3, #4
 8015944:	428c      	cmp	r4, r1
 8015946:	d304      	bcc.n	8015952 <__mdiff+0xce>
 8015948:	1ba3      	subs	r3, r4, r6
 801594a:	3b15      	subs	r3, #21
 801594c:	089b      	lsrs	r3, r3, #2
 801594e:	3301      	adds	r3, #1
 8015950:	009b      	lsls	r3, r3, #2
 8015952:	9901      	ldr	r1, [sp, #4]
 8015954:	18cc      	adds	r4, r1, r3
 8015956:	9905      	ldr	r1, [sp, #20]
 8015958:	0026      	movs	r6, r4
 801595a:	18cb      	adds	r3, r1, r3
 801595c:	469c      	mov	ip, r3
 801595e:	9902      	ldr	r1, [sp, #8]
 8015960:	428e      	cmp	r6, r1
 8015962:	d310      	bcc.n	8015986 <__mdiff+0x102>
 8015964:	9e02      	ldr	r6, [sp, #8]
 8015966:	1ee1      	subs	r1, r4, #3
 8015968:	2500      	movs	r5, #0
 801596a:	428e      	cmp	r6, r1
 801596c:	d304      	bcc.n	8015978 <__mdiff+0xf4>
 801596e:	0031      	movs	r1, r6
 8015970:	3103      	adds	r1, #3
 8015972:	1b0c      	subs	r4, r1, r4
 8015974:	08a4      	lsrs	r4, r4, #2
 8015976:	00a5      	lsls	r5, r4, #2
 8015978:	195b      	adds	r3, r3, r5
 801597a:	3b04      	subs	r3, #4
 801597c:	6819      	ldr	r1, [r3, #0]
 801597e:	2900      	cmp	r1, #0
 8015980:	d00f      	beq.n	80159a2 <__mdiff+0x11e>
 8015982:	6110      	str	r0, [r2, #16]
 8015984:	e797      	b.n	80158b6 <__mdiff+0x32>
 8015986:	ce02      	ldmia	r6!, {r1}
 8015988:	b28d      	uxth	r5, r1
 801598a:	19ed      	adds	r5, r5, r7
 801598c:	0c0f      	lsrs	r7, r1, #16
 801598e:	1429      	asrs	r1, r5, #16
 8015990:	1879      	adds	r1, r7, r1
 8015992:	140f      	asrs	r7, r1, #16
 8015994:	b2ad      	uxth	r5, r5
 8015996:	0409      	lsls	r1, r1, #16
 8015998:	430d      	orrs	r5, r1
 801599a:	4661      	mov	r1, ip
 801599c:	c120      	stmia	r1!, {r5}
 801599e:	468c      	mov	ip, r1
 80159a0:	e7dd      	b.n	801595e <__mdiff+0xda>
 80159a2:	3801      	subs	r0, #1
 80159a4:	e7e9      	b.n	801597a <__mdiff+0xf6>
 80159a6:	46c0      	nop			; (mov r8, r8)
 80159a8:	08017486 	.word	0x08017486
 80159ac:	00000232 	.word	0x00000232
 80159b0:	08017510 	.word	0x08017510

080159b4 <__ulp>:
 80159b4:	4b0f      	ldr	r3, [pc, #60]	; (80159f4 <__ulp+0x40>)
 80159b6:	4019      	ands	r1, r3
 80159b8:	4b0f      	ldr	r3, [pc, #60]	; (80159f8 <__ulp+0x44>)
 80159ba:	18c9      	adds	r1, r1, r3
 80159bc:	2900      	cmp	r1, #0
 80159be:	dd04      	ble.n	80159ca <__ulp+0x16>
 80159c0:	2200      	movs	r2, #0
 80159c2:	000b      	movs	r3, r1
 80159c4:	0010      	movs	r0, r2
 80159c6:	0019      	movs	r1, r3
 80159c8:	4770      	bx	lr
 80159ca:	4249      	negs	r1, r1
 80159cc:	2200      	movs	r2, #0
 80159ce:	2300      	movs	r3, #0
 80159d0:	1509      	asrs	r1, r1, #20
 80159d2:	2913      	cmp	r1, #19
 80159d4:	dc04      	bgt.n	80159e0 <__ulp+0x2c>
 80159d6:	2080      	movs	r0, #128	; 0x80
 80159d8:	0300      	lsls	r0, r0, #12
 80159da:	4108      	asrs	r0, r1
 80159dc:	0003      	movs	r3, r0
 80159de:	e7f1      	b.n	80159c4 <__ulp+0x10>
 80159e0:	3914      	subs	r1, #20
 80159e2:	2001      	movs	r0, #1
 80159e4:	291e      	cmp	r1, #30
 80159e6:	dc02      	bgt.n	80159ee <__ulp+0x3a>
 80159e8:	2080      	movs	r0, #128	; 0x80
 80159ea:	0600      	lsls	r0, r0, #24
 80159ec:	40c8      	lsrs	r0, r1
 80159ee:	0002      	movs	r2, r0
 80159f0:	e7e8      	b.n	80159c4 <__ulp+0x10>
 80159f2:	46c0      	nop			; (mov r8, r8)
 80159f4:	7ff00000 	.word	0x7ff00000
 80159f8:	fcc00000 	.word	0xfcc00000

080159fc <__b2d>:
 80159fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80159fe:	0006      	movs	r6, r0
 8015a00:	6903      	ldr	r3, [r0, #16]
 8015a02:	3614      	adds	r6, #20
 8015a04:	009b      	lsls	r3, r3, #2
 8015a06:	18f3      	adds	r3, r6, r3
 8015a08:	1f1d      	subs	r5, r3, #4
 8015a0a:	682c      	ldr	r4, [r5, #0]
 8015a0c:	000f      	movs	r7, r1
 8015a0e:	0020      	movs	r0, r4
 8015a10:	9301      	str	r3, [sp, #4]
 8015a12:	f7ff fd43 	bl	801549c <__hi0bits>
 8015a16:	2320      	movs	r3, #32
 8015a18:	1a1b      	subs	r3, r3, r0
 8015a1a:	491f      	ldr	r1, [pc, #124]	; (8015a98 <__b2d+0x9c>)
 8015a1c:	603b      	str	r3, [r7, #0]
 8015a1e:	280a      	cmp	r0, #10
 8015a20:	dc16      	bgt.n	8015a50 <__b2d+0x54>
 8015a22:	230b      	movs	r3, #11
 8015a24:	0027      	movs	r7, r4
 8015a26:	1a1b      	subs	r3, r3, r0
 8015a28:	40df      	lsrs	r7, r3
 8015a2a:	4339      	orrs	r1, r7
 8015a2c:	469c      	mov	ip, r3
 8015a2e:	000b      	movs	r3, r1
 8015a30:	2100      	movs	r1, #0
 8015a32:	42ae      	cmp	r6, r5
 8015a34:	d202      	bcs.n	8015a3c <__b2d+0x40>
 8015a36:	9901      	ldr	r1, [sp, #4]
 8015a38:	3908      	subs	r1, #8
 8015a3a:	6809      	ldr	r1, [r1, #0]
 8015a3c:	3015      	adds	r0, #21
 8015a3e:	4084      	lsls	r4, r0
 8015a40:	4660      	mov	r0, ip
 8015a42:	40c1      	lsrs	r1, r0
 8015a44:	430c      	orrs	r4, r1
 8015a46:	0022      	movs	r2, r4
 8015a48:	0010      	movs	r0, r2
 8015a4a:	0019      	movs	r1, r3
 8015a4c:	b003      	add	sp, #12
 8015a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a50:	2700      	movs	r7, #0
 8015a52:	42ae      	cmp	r6, r5
 8015a54:	d202      	bcs.n	8015a5c <__b2d+0x60>
 8015a56:	9d01      	ldr	r5, [sp, #4]
 8015a58:	3d08      	subs	r5, #8
 8015a5a:	682f      	ldr	r7, [r5, #0]
 8015a5c:	230b      	movs	r3, #11
 8015a5e:	425b      	negs	r3, r3
 8015a60:	469c      	mov	ip, r3
 8015a62:	4484      	add	ip, r0
 8015a64:	280b      	cmp	r0, #11
 8015a66:	d013      	beq.n	8015a90 <__b2d+0x94>
 8015a68:	4663      	mov	r3, ip
 8015a6a:	2020      	movs	r0, #32
 8015a6c:	409c      	lsls	r4, r3
 8015a6e:	1ac0      	subs	r0, r0, r3
 8015a70:	003b      	movs	r3, r7
 8015a72:	40c3      	lsrs	r3, r0
 8015a74:	431c      	orrs	r4, r3
 8015a76:	4321      	orrs	r1, r4
 8015a78:	000b      	movs	r3, r1
 8015a7a:	2100      	movs	r1, #0
 8015a7c:	42b5      	cmp	r5, r6
 8015a7e:	d901      	bls.n	8015a84 <__b2d+0x88>
 8015a80:	3d04      	subs	r5, #4
 8015a82:	6829      	ldr	r1, [r5, #0]
 8015a84:	4664      	mov	r4, ip
 8015a86:	40c1      	lsrs	r1, r0
 8015a88:	40a7      	lsls	r7, r4
 8015a8a:	430f      	orrs	r7, r1
 8015a8c:	003a      	movs	r2, r7
 8015a8e:	e7db      	b.n	8015a48 <__b2d+0x4c>
 8015a90:	4321      	orrs	r1, r4
 8015a92:	000b      	movs	r3, r1
 8015a94:	e7fa      	b.n	8015a8c <__b2d+0x90>
 8015a96:	46c0      	nop			; (mov r8, r8)
 8015a98:	3ff00000 	.word	0x3ff00000

08015a9c <__d2b>:
 8015a9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015a9e:	2101      	movs	r1, #1
 8015aa0:	0014      	movs	r4, r2
 8015aa2:	001e      	movs	r6, r3
 8015aa4:	9f08      	ldr	r7, [sp, #32]
 8015aa6:	f7ff fc01 	bl	80152ac <_Balloc>
 8015aaa:	1e05      	subs	r5, r0, #0
 8015aac:	d105      	bne.n	8015aba <__d2b+0x1e>
 8015aae:	0002      	movs	r2, r0
 8015ab0:	4b26      	ldr	r3, [pc, #152]	; (8015b4c <__d2b+0xb0>)
 8015ab2:	4927      	ldr	r1, [pc, #156]	; (8015b50 <__d2b+0xb4>)
 8015ab4:	4827      	ldr	r0, [pc, #156]	; (8015b54 <__d2b+0xb8>)
 8015ab6:	f7fe f883 	bl	8013bc0 <__assert_func>
 8015aba:	0333      	lsls	r3, r6, #12
 8015abc:	0076      	lsls	r6, r6, #1
 8015abe:	0b1b      	lsrs	r3, r3, #12
 8015ac0:	0d76      	lsrs	r6, r6, #21
 8015ac2:	d124      	bne.n	8015b0e <__d2b+0x72>
 8015ac4:	9301      	str	r3, [sp, #4]
 8015ac6:	2c00      	cmp	r4, #0
 8015ac8:	d027      	beq.n	8015b1a <__d2b+0x7e>
 8015aca:	4668      	mov	r0, sp
 8015acc:	9400      	str	r4, [sp, #0]
 8015ace:	f7ff fcff 	bl	80154d0 <__lo0bits>
 8015ad2:	9c00      	ldr	r4, [sp, #0]
 8015ad4:	2800      	cmp	r0, #0
 8015ad6:	d01e      	beq.n	8015b16 <__d2b+0x7a>
 8015ad8:	9b01      	ldr	r3, [sp, #4]
 8015ada:	2120      	movs	r1, #32
 8015adc:	001a      	movs	r2, r3
 8015ade:	1a09      	subs	r1, r1, r0
 8015ae0:	408a      	lsls	r2, r1
 8015ae2:	40c3      	lsrs	r3, r0
 8015ae4:	4322      	orrs	r2, r4
 8015ae6:	616a      	str	r2, [r5, #20]
 8015ae8:	9301      	str	r3, [sp, #4]
 8015aea:	9c01      	ldr	r4, [sp, #4]
 8015aec:	61ac      	str	r4, [r5, #24]
 8015aee:	1e63      	subs	r3, r4, #1
 8015af0:	419c      	sbcs	r4, r3
 8015af2:	3401      	adds	r4, #1
 8015af4:	612c      	str	r4, [r5, #16]
 8015af6:	2e00      	cmp	r6, #0
 8015af8:	d018      	beq.n	8015b2c <__d2b+0x90>
 8015afa:	4b17      	ldr	r3, [pc, #92]	; (8015b58 <__d2b+0xbc>)
 8015afc:	18f6      	adds	r6, r6, r3
 8015afe:	2335      	movs	r3, #53	; 0x35
 8015b00:	1836      	adds	r6, r6, r0
 8015b02:	1a18      	subs	r0, r3, r0
 8015b04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b06:	603e      	str	r6, [r7, #0]
 8015b08:	6018      	str	r0, [r3, #0]
 8015b0a:	0028      	movs	r0, r5
 8015b0c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8015b0e:	2280      	movs	r2, #128	; 0x80
 8015b10:	0352      	lsls	r2, r2, #13
 8015b12:	4313      	orrs	r3, r2
 8015b14:	e7d6      	b.n	8015ac4 <__d2b+0x28>
 8015b16:	616c      	str	r4, [r5, #20]
 8015b18:	e7e7      	b.n	8015aea <__d2b+0x4e>
 8015b1a:	a801      	add	r0, sp, #4
 8015b1c:	f7ff fcd8 	bl	80154d0 <__lo0bits>
 8015b20:	2401      	movs	r4, #1
 8015b22:	9b01      	ldr	r3, [sp, #4]
 8015b24:	612c      	str	r4, [r5, #16]
 8015b26:	616b      	str	r3, [r5, #20]
 8015b28:	3020      	adds	r0, #32
 8015b2a:	e7e4      	b.n	8015af6 <__d2b+0x5a>
 8015b2c:	4b0b      	ldr	r3, [pc, #44]	; (8015b5c <__d2b+0xc0>)
 8015b2e:	18c0      	adds	r0, r0, r3
 8015b30:	4b0b      	ldr	r3, [pc, #44]	; (8015b60 <__d2b+0xc4>)
 8015b32:	6038      	str	r0, [r7, #0]
 8015b34:	18e3      	adds	r3, r4, r3
 8015b36:	009b      	lsls	r3, r3, #2
 8015b38:	18eb      	adds	r3, r5, r3
 8015b3a:	6958      	ldr	r0, [r3, #20]
 8015b3c:	f7ff fcae 	bl	801549c <__hi0bits>
 8015b40:	0164      	lsls	r4, r4, #5
 8015b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b44:	1a24      	subs	r4, r4, r0
 8015b46:	601c      	str	r4, [r3, #0]
 8015b48:	e7df      	b.n	8015b0a <__d2b+0x6e>
 8015b4a:	46c0      	nop			; (mov r8, r8)
 8015b4c:	08017486 	.word	0x08017486
 8015b50:	0000030a 	.word	0x0000030a
 8015b54:	08017510 	.word	0x08017510
 8015b58:	fffffbcd 	.word	0xfffffbcd
 8015b5c:	fffffbce 	.word	0xfffffbce
 8015b60:	3fffffff 	.word	0x3fffffff

08015b64 <__ratio>:
 8015b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015b66:	b087      	sub	sp, #28
 8015b68:	000f      	movs	r7, r1
 8015b6a:	a904      	add	r1, sp, #16
 8015b6c:	0006      	movs	r6, r0
 8015b6e:	f7ff ff45 	bl	80159fc <__b2d>
 8015b72:	9000      	str	r0, [sp, #0]
 8015b74:	9101      	str	r1, [sp, #4]
 8015b76:	9c00      	ldr	r4, [sp, #0]
 8015b78:	9d01      	ldr	r5, [sp, #4]
 8015b7a:	0038      	movs	r0, r7
 8015b7c:	a905      	add	r1, sp, #20
 8015b7e:	f7ff ff3d 	bl	80159fc <__b2d>
 8015b82:	9002      	str	r0, [sp, #8]
 8015b84:	9103      	str	r1, [sp, #12]
 8015b86:	9a02      	ldr	r2, [sp, #8]
 8015b88:	9b03      	ldr	r3, [sp, #12]
 8015b8a:	6931      	ldr	r1, [r6, #16]
 8015b8c:	6938      	ldr	r0, [r7, #16]
 8015b8e:	9e05      	ldr	r6, [sp, #20]
 8015b90:	1a08      	subs	r0, r1, r0
 8015b92:	9904      	ldr	r1, [sp, #16]
 8015b94:	0140      	lsls	r0, r0, #5
 8015b96:	1b89      	subs	r1, r1, r6
 8015b98:	1841      	adds	r1, r0, r1
 8015b9a:	0508      	lsls	r0, r1, #20
 8015b9c:	2900      	cmp	r1, #0
 8015b9e:	dd07      	ble.n	8015bb0 <__ratio+0x4c>
 8015ba0:	9901      	ldr	r1, [sp, #4]
 8015ba2:	1845      	adds	r5, r0, r1
 8015ba4:	0020      	movs	r0, r4
 8015ba6:	0029      	movs	r1, r5
 8015ba8:	f7eb f9a4 	bl	8000ef4 <__aeabi_ddiv>
 8015bac:	b007      	add	sp, #28
 8015bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015bb0:	9903      	ldr	r1, [sp, #12]
 8015bb2:	1a0b      	subs	r3, r1, r0
 8015bb4:	e7f6      	b.n	8015ba4 <__ratio+0x40>

08015bb6 <__copybits>:
 8015bb6:	b570      	push	{r4, r5, r6, lr}
 8015bb8:	0014      	movs	r4, r2
 8015bba:	0005      	movs	r5, r0
 8015bbc:	3901      	subs	r1, #1
 8015bbe:	6913      	ldr	r3, [r2, #16]
 8015bc0:	1149      	asrs	r1, r1, #5
 8015bc2:	3101      	adds	r1, #1
 8015bc4:	0089      	lsls	r1, r1, #2
 8015bc6:	3414      	adds	r4, #20
 8015bc8:	009b      	lsls	r3, r3, #2
 8015bca:	1841      	adds	r1, r0, r1
 8015bcc:	18e3      	adds	r3, r4, r3
 8015bce:	42a3      	cmp	r3, r4
 8015bd0:	d80d      	bhi.n	8015bee <__copybits+0x38>
 8015bd2:	0014      	movs	r4, r2
 8015bd4:	3411      	adds	r4, #17
 8015bd6:	2500      	movs	r5, #0
 8015bd8:	429c      	cmp	r4, r3
 8015bda:	d803      	bhi.n	8015be4 <__copybits+0x2e>
 8015bdc:	1a9b      	subs	r3, r3, r2
 8015bde:	3b11      	subs	r3, #17
 8015be0:	089b      	lsrs	r3, r3, #2
 8015be2:	009d      	lsls	r5, r3, #2
 8015be4:	2300      	movs	r3, #0
 8015be6:	1940      	adds	r0, r0, r5
 8015be8:	4281      	cmp	r1, r0
 8015bea:	d803      	bhi.n	8015bf4 <__copybits+0x3e>
 8015bec:	bd70      	pop	{r4, r5, r6, pc}
 8015bee:	cc40      	ldmia	r4!, {r6}
 8015bf0:	c540      	stmia	r5!, {r6}
 8015bf2:	e7ec      	b.n	8015bce <__copybits+0x18>
 8015bf4:	c008      	stmia	r0!, {r3}
 8015bf6:	e7f7      	b.n	8015be8 <__copybits+0x32>

08015bf8 <__any_on>:
 8015bf8:	0002      	movs	r2, r0
 8015bfa:	6900      	ldr	r0, [r0, #16]
 8015bfc:	b510      	push	{r4, lr}
 8015bfe:	3214      	adds	r2, #20
 8015c00:	114b      	asrs	r3, r1, #5
 8015c02:	4298      	cmp	r0, r3
 8015c04:	db13      	blt.n	8015c2e <__any_on+0x36>
 8015c06:	dd0c      	ble.n	8015c22 <__any_on+0x2a>
 8015c08:	241f      	movs	r4, #31
 8015c0a:	0008      	movs	r0, r1
 8015c0c:	4020      	ands	r0, r4
 8015c0e:	4221      	tst	r1, r4
 8015c10:	d007      	beq.n	8015c22 <__any_on+0x2a>
 8015c12:	0099      	lsls	r1, r3, #2
 8015c14:	588c      	ldr	r4, [r1, r2]
 8015c16:	0021      	movs	r1, r4
 8015c18:	40c1      	lsrs	r1, r0
 8015c1a:	4081      	lsls	r1, r0
 8015c1c:	2001      	movs	r0, #1
 8015c1e:	428c      	cmp	r4, r1
 8015c20:	d104      	bne.n	8015c2c <__any_on+0x34>
 8015c22:	009b      	lsls	r3, r3, #2
 8015c24:	18d3      	adds	r3, r2, r3
 8015c26:	4293      	cmp	r3, r2
 8015c28:	d803      	bhi.n	8015c32 <__any_on+0x3a>
 8015c2a:	2000      	movs	r0, #0
 8015c2c:	bd10      	pop	{r4, pc}
 8015c2e:	0003      	movs	r3, r0
 8015c30:	e7f7      	b.n	8015c22 <__any_on+0x2a>
 8015c32:	3b04      	subs	r3, #4
 8015c34:	6819      	ldr	r1, [r3, #0]
 8015c36:	2900      	cmp	r1, #0
 8015c38:	d0f5      	beq.n	8015c26 <__any_on+0x2e>
 8015c3a:	2001      	movs	r0, #1
 8015c3c:	e7f6      	b.n	8015c2c <__any_on+0x34>

08015c3e <_calloc_r>:
 8015c3e:	b570      	push	{r4, r5, r6, lr}
 8015c40:	0c13      	lsrs	r3, r2, #16
 8015c42:	0c0d      	lsrs	r5, r1, #16
 8015c44:	d11e      	bne.n	8015c84 <_calloc_r+0x46>
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d10c      	bne.n	8015c64 <_calloc_r+0x26>
 8015c4a:	b289      	uxth	r1, r1
 8015c4c:	b294      	uxth	r4, r2
 8015c4e:	434c      	muls	r4, r1
 8015c50:	0021      	movs	r1, r4
 8015c52:	f7fc f9fd 	bl	8012050 <_malloc_r>
 8015c56:	1e05      	subs	r5, r0, #0
 8015c58:	d01b      	beq.n	8015c92 <_calloc_r+0x54>
 8015c5a:	0022      	movs	r2, r4
 8015c5c:	2100      	movs	r1, #0
 8015c5e:	f7fc f9cd 	bl	8011ffc <memset>
 8015c62:	e016      	b.n	8015c92 <_calloc_r+0x54>
 8015c64:	1c1d      	adds	r5, r3, #0
 8015c66:	1c0b      	adds	r3, r1, #0
 8015c68:	b292      	uxth	r2, r2
 8015c6a:	b289      	uxth	r1, r1
 8015c6c:	b29c      	uxth	r4, r3
 8015c6e:	4351      	muls	r1, r2
 8015c70:	b2ab      	uxth	r3, r5
 8015c72:	4363      	muls	r3, r4
 8015c74:	0c0c      	lsrs	r4, r1, #16
 8015c76:	191c      	adds	r4, r3, r4
 8015c78:	0c22      	lsrs	r2, r4, #16
 8015c7a:	d107      	bne.n	8015c8c <_calloc_r+0x4e>
 8015c7c:	0424      	lsls	r4, r4, #16
 8015c7e:	b289      	uxth	r1, r1
 8015c80:	430c      	orrs	r4, r1
 8015c82:	e7e5      	b.n	8015c50 <_calloc_r+0x12>
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d101      	bne.n	8015c8c <_calloc_r+0x4e>
 8015c88:	1c13      	adds	r3, r2, #0
 8015c8a:	e7ed      	b.n	8015c68 <_calloc_r+0x2a>
 8015c8c:	230c      	movs	r3, #12
 8015c8e:	2500      	movs	r5, #0
 8015c90:	6003      	str	r3, [r0, #0]
 8015c92:	0028      	movs	r0, r5
 8015c94:	bd70      	pop	{r4, r5, r6, pc}
	...

08015c98 <_free_r>:
 8015c98:	b570      	push	{r4, r5, r6, lr}
 8015c9a:	0005      	movs	r5, r0
 8015c9c:	2900      	cmp	r1, #0
 8015c9e:	d010      	beq.n	8015cc2 <_free_r+0x2a>
 8015ca0:	1f0c      	subs	r4, r1, #4
 8015ca2:	6823      	ldr	r3, [r4, #0]
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	da00      	bge.n	8015caa <_free_r+0x12>
 8015ca8:	18e4      	adds	r4, r4, r3
 8015caa:	0028      	movs	r0, r5
 8015cac:	f7ff faee 	bl	801528c <__malloc_lock>
 8015cb0:	4a1d      	ldr	r2, [pc, #116]	; (8015d28 <_free_r+0x90>)
 8015cb2:	6813      	ldr	r3, [r2, #0]
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	d105      	bne.n	8015cc4 <_free_r+0x2c>
 8015cb8:	6063      	str	r3, [r4, #4]
 8015cba:	6014      	str	r4, [r2, #0]
 8015cbc:	0028      	movs	r0, r5
 8015cbe:	f7ff faed 	bl	801529c <__malloc_unlock>
 8015cc2:	bd70      	pop	{r4, r5, r6, pc}
 8015cc4:	42a3      	cmp	r3, r4
 8015cc6:	d908      	bls.n	8015cda <_free_r+0x42>
 8015cc8:	6821      	ldr	r1, [r4, #0]
 8015cca:	1860      	adds	r0, r4, r1
 8015ccc:	4283      	cmp	r3, r0
 8015cce:	d1f3      	bne.n	8015cb8 <_free_r+0x20>
 8015cd0:	6818      	ldr	r0, [r3, #0]
 8015cd2:	685b      	ldr	r3, [r3, #4]
 8015cd4:	1841      	adds	r1, r0, r1
 8015cd6:	6021      	str	r1, [r4, #0]
 8015cd8:	e7ee      	b.n	8015cb8 <_free_r+0x20>
 8015cda:	001a      	movs	r2, r3
 8015cdc:	685b      	ldr	r3, [r3, #4]
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d001      	beq.n	8015ce6 <_free_r+0x4e>
 8015ce2:	42a3      	cmp	r3, r4
 8015ce4:	d9f9      	bls.n	8015cda <_free_r+0x42>
 8015ce6:	6811      	ldr	r1, [r2, #0]
 8015ce8:	1850      	adds	r0, r2, r1
 8015cea:	42a0      	cmp	r0, r4
 8015cec:	d10b      	bne.n	8015d06 <_free_r+0x6e>
 8015cee:	6820      	ldr	r0, [r4, #0]
 8015cf0:	1809      	adds	r1, r1, r0
 8015cf2:	1850      	adds	r0, r2, r1
 8015cf4:	6011      	str	r1, [r2, #0]
 8015cf6:	4283      	cmp	r3, r0
 8015cf8:	d1e0      	bne.n	8015cbc <_free_r+0x24>
 8015cfa:	6818      	ldr	r0, [r3, #0]
 8015cfc:	685b      	ldr	r3, [r3, #4]
 8015cfe:	1841      	adds	r1, r0, r1
 8015d00:	6011      	str	r1, [r2, #0]
 8015d02:	6053      	str	r3, [r2, #4]
 8015d04:	e7da      	b.n	8015cbc <_free_r+0x24>
 8015d06:	42a0      	cmp	r0, r4
 8015d08:	d902      	bls.n	8015d10 <_free_r+0x78>
 8015d0a:	230c      	movs	r3, #12
 8015d0c:	602b      	str	r3, [r5, #0]
 8015d0e:	e7d5      	b.n	8015cbc <_free_r+0x24>
 8015d10:	6821      	ldr	r1, [r4, #0]
 8015d12:	1860      	adds	r0, r4, r1
 8015d14:	4283      	cmp	r3, r0
 8015d16:	d103      	bne.n	8015d20 <_free_r+0x88>
 8015d18:	6818      	ldr	r0, [r3, #0]
 8015d1a:	685b      	ldr	r3, [r3, #4]
 8015d1c:	1841      	adds	r1, r0, r1
 8015d1e:	6021      	str	r1, [r4, #0]
 8015d20:	6063      	str	r3, [r4, #4]
 8015d22:	6054      	str	r4, [r2, #4]
 8015d24:	e7ca      	b.n	8015cbc <_free_r+0x24>
 8015d26:	46c0      	nop			; (mov r8, r8)
 8015d28:	20002d90 	.word	0x20002d90

08015d2c <__ssputs_r>:
 8015d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d2e:	688e      	ldr	r6, [r1, #8]
 8015d30:	b085      	sub	sp, #20
 8015d32:	0007      	movs	r7, r0
 8015d34:	000c      	movs	r4, r1
 8015d36:	9203      	str	r2, [sp, #12]
 8015d38:	9301      	str	r3, [sp, #4]
 8015d3a:	429e      	cmp	r6, r3
 8015d3c:	d83c      	bhi.n	8015db8 <__ssputs_r+0x8c>
 8015d3e:	2390      	movs	r3, #144	; 0x90
 8015d40:	898a      	ldrh	r2, [r1, #12]
 8015d42:	00db      	lsls	r3, r3, #3
 8015d44:	421a      	tst	r2, r3
 8015d46:	d034      	beq.n	8015db2 <__ssputs_r+0x86>
 8015d48:	6909      	ldr	r1, [r1, #16]
 8015d4a:	6823      	ldr	r3, [r4, #0]
 8015d4c:	6960      	ldr	r0, [r4, #20]
 8015d4e:	1a5b      	subs	r3, r3, r1
 8015d50:	9302      	str	r3, [sp, #8]
 8015d52:	2303      	movs	r3, #3
 8015d54:	4343      	muls	r3, r0
 8015d56:	0fdd      	lsrs	r5, r3, #31
 8015d58:	18ed      	adds	r5, r5, r3
 8015d5a:	9b01      	ldr	r3, [sp, #4]
 8015d5c:	9802      	ldr	r0, [sp, #8]
 8015d5e:	3301      	adds	r3, #1
 8015d60:	181b      	adds	r3, r3, r0
 8015d62:	106d      	asrs	r5, r5, #1
 8015d64:	42ab      	cmp	r3, r5
 8015d66:	d900      	bls.n	8015d6a <__ssputs_r+0x3e>
 8015d68:	001d      	movs	r5, r3
 8015d6a:	0553      	lsls	r3, r2, #21
 8015d6c:	d532      	bpl.n	8015dd4 <__ssputs_r+0xa8>
 8015d6e:	0029      	movs	r1, r5
 8015d70:	0038      	movs	r0, r7
 8015d72:	f7fc f96d 	bl	8012050 <_malloc_r>
 8015d76:	1e06      	subs	r6, r0, #0
 8015d78:	d109      	bne.n	8015d8e <__ssputs_r+0x62>
 8015d7a:	230c      	movs	r3, #12
 8015d7c:	603b      	str	r3, [r7, #0]
 8015d7e:	2340      	movs	r3, #64	; 0x40
 8015d80:	2001      	movs	r0, #1
 8015d82:	89a2      	ldrh	r2, [r4, #12]
 8015d84:	4240      	negs	r0, r0
 8015d86:	4313      	orrs	r3, r2
 8015d88:	81a3      	strh	r3, [r4, #12]
 8015d8a:	b005      	add	sp, #20
 8015d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d8e:	9a02      	ldr	r2, [sp, #8]
 8015d90:	6921      	ldr	r1, [r4, #16]
 8015d92:	f7fc f92a 	bl	8011fea <memcpy>
 8015d96:	89a3      	ldrh	r3, [r4, #12]
 8015d98:	4a14      	ldr	r2, [pc, #80]	; (8015dec <__ssputs_r+0xc0>)
 8015d9a:	401a      	ands	r2, r3
 8015d9c:	2380      	movs	r3, #128	; 0x80
 8015d9e:	4313      	orrs	r3, r2
 8015da0:	81a3      	strh	r3, [r4, #12]
 8015da2:	9b02      	ldr	r3, [sp, #8]
 8015da4:	6126      	str	r6, [r4, #16]
 8015da6:	18f6      	adds	r6, r6, r3
 8015da8:	6026      	str	r6, [r4, #0]
 8015daa:	6165      	str	r5, [r4, #20]
 8015dac:	9e01      	ldr	r6, [sp, #4]
 8015dae:	1aed      	subs	r5, r5, r3
 8015db0:	60a5      	str	r5, [r4, #8]
 8015db2:	9b01      	ldr	r3, [sp, #4]
 8015db4:	429e      	cmp	r6, r3
 8015db6:	d900      	bls.n	8015dba <__ssputs_r+0x8e>
 8015db8:	9e01      	ldr	r6, [sp, #4]
 8015dba:	0032      	movs	r2, r6
 8015dbc:	9903      	ldr	r1, [sp, #12]
 8015dbe:	6820      	ldr	r0, [r4, #0]
 8015dc0:	f000 fbe2 	bl	8016588 <memmove>
 8015dc4:	68a3      	ldr	r3, [r4, #8]
 8015dc6:	2000      	movs	r0, #0
 8015dc8:	1b9b      	subs	r3, r3, r6
 8015dca:	60a3      	str	r3, [r4, #8]
 8015dcc:	6823      	ldr	r3, [r4, #0]
 8015dce:	199e      	adds	r6, r3, r6
 8015dd0:	6026      	str	r6, [r4, #0]
 8015dd2:	e7da      	b.n	8015d8a <__ssputs_r+0x5e>
 8015dd4:	002a      	movs	r2, r5
 8015dd6:	0038      	movs	r0, r7
 8015dd8:	f000 fbe9 	bl	80165ae <_realloc_r>
 8015ddc:	1e06      	subs	r6, r0, #0
 8015dde:	d1e0      	bne.n	8015da2 <__ssputs_r+0x76>
 8015de0:	0038      	movs	r0, r7
 8015de2:	6921      	ldr	r1, [r4, #16]
 8015de4:	f7ff ff58 	bl	8015c98 <_free_r>
 8015de8:	e7c7      	b.n	8015d7a <__ssputs_r+0x4e>
 8015dea:	46c0      	nop			; (mov r8, r8)
 8015dec:	fffffb7f 	.word	0xfffffb7f

08015df0 <_svfiprintf_r>:
 8015df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015df2:	b0a1      	sub	sp, #132	; 0x84
 8015df4:	9003      	str	r0, [sp, #12]
 8015df6:	001d      	movs	r5, r3
 8015df8:	898b      	ldrh	r3, [r1, #12]
 8015dfa:	000f      	movs	r7, r1
 8015dfc:	0016      	movs	r6, r2
 8015dfe:	061b      	lsls	r3, r3, #24
 8015e00:	d511      	bpl.n	8015e26 <_svfiprintf_r+0x36>
 8015e02:	690b      	ldr	r3, [r1, #16]
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d10e      	bne.n	8015e26 <_svfiprintf_r+0x36>
 8015e08:	2140      	movs	r1, #64	; 0x40
 8015e0a:	f7fc f921 	bl	8012050 <_malloc_r>
 8015e0e:	6038      	str	r0, [r7, #0]
 8015e10:	6138      	str	r0, [r7, #16]
 8015e12:	2800      	cmp	r0, #0
 8015e14:	d105      	bne.n	8015e22 <_svfiprintf_r+0x32>
 8015e16:	230c      	movs	r3, #12
 8015e18:	9a03      	ldr	r2, [sp, #12]
 8015e1a:	3801      	subs	r0, #1
 8015e1c:	6013      	str	r3, [r2, #0]
 8015e1e:	b021      	add	sp, #132	; 0x84
 8015e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e22:	2340      	movs	r3, #64	; 0x40
 8015e24:	617b      	str	r3, [r7, #20]
 8015e26:	2300      	movs	r3, #0
 8015e28:	ac08      	add	r4, sp, #32
 8015e2a:	6163      	str	r3, [r4, #20]
 8015e2c:	3320      	adds	r3, #32
 8015e2e:	7663      	strb	r3, [r4, #25]
 8015e30:	3310      	adds	r3, #16
 8015e32:	76a3      	strb	r3, [r4, #26]
 8015e34:	9507      	str	r5, [sp, #28]
 8015e36:	0035      	movs	r5, r6
 8015e38:	782b      	ldrb	r3, [r5, #0]
 8015e3a:	2b00      	cmp	r3, #0
 8015e3c:	d001      	beq.n	8015e42 <_svfiprintf_r+0x52>
 8015e3e:	2b25      	cmp	r3, #37	; 0x25
 8015e40:	d147      	bne.n	8015ed2 <_svfiprintf_r+0xe2>
 8015e42:	1bab      	subs	r3, r5, r6
 8015e44:	9305      	str	r3, [sp, #20]
 8015e46:	42b5      	cmp	r5, r6
 8015e48:	d00c      	beq.n	8015e64 <_svfiprintf_r+0x74>
 8015e4a:	0032      	movs	r2, r6
 8015e4c:	0039      	movs	r1, r7
 8015e4e:	9803      	ldr	r0, [sp, #12]
 8015e50:	f7ff ff6c 	bl	8015d2c <__ssputs_r>
 8015e54:	1c43      	adds	r3, r0, #1
 8015e56:	d100      	bne.n	8015e5a <_svfiprintf_r+0x6a>
 8015e58:	e0ae      	b.n	8015fb8 <_svfiprintf_r+0x1c8>
 8015e5a:	6962      	ldr	r2, [r4, #20]
 8015e5c:	9b05      	ldr	r3, [sp, #20]
 8015e5e:	4694      	mov	ip, r2
 8015e60:	4463      	add	r3, ip
 8015e62:	6163      	str	r3, [r4, #20]
 8015e64:	782b      	ldrb	r3, [r5, #0]
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d100      	bne.n	8015e6c <_svfiprintf_r+0x7c>
 8015e6a:	e0a5      	b.n	8015fb8 <_svfiprintf_r+0x1c8>
 8015e6c:	2201      	movs	r2, #1
 8015e6e:	2300      	movs	r3, #0
 8015e70:	4252      	negs	r2, r2
 8015e72:	6062      	str	r2, [r4, #4]
 8015e74:	a904      	add	r1, sp, #16
 8015e76:	3254      	adds	r2, #84	; 0x54
 8015e78:	1852      	adds	r2, r2, r1
 8015e7a:	1c6e      	adds	r6, r5, #1
 8015e7c:	6023      	str	r3, [r4, #0]
 8015e7e:	60e3      	str	r3, [r4, #12]
 8015e80:	60a3      	str	r3, [r4, #8]
 8015e82:	7013      	strb	r3, [r2, #0]
 8015e84:	65a3      	str	r3, [r4, #88]	; 0x58
 8015e86:	2205      	movs	r2, #5
 8015e88:	7831      	ldrb	r1, [r6, #0]
 8015e8a:	4854      	ldr	r0, [pc, #336]	; (8015fdc <_svfiprintf_r+0x1ec>)
 8015e8c:	f7ff f9f2 	bl	8015274 <memchr>
 8015e90:	1c75      	adds	r5, r6, #1
 8015e92:	2800      	cmp	r0, #0
 8015e94:	d11f      	bne.n	8015ed6 <_svfiprintf_r+0xe6>
 8015e96:	6822      	ldr	r2, [r4, #0]
 8015e98:	06d3      	lsls	r3, r2, #27
 8015e9a:	d504      	bpl.n	8015ea6 <_svfiprintf_r+0xb6>
 8015e9c:	2353      	movs	r3, #83	; 0x53
 8015e9e:	a904      	add	r1, sp, #16
 8015ea0:	185b      	adds	r3, r3, r1
 8015ea2:	2120      	movs	r1, #32
 8015ea4:	7019      	strb	r1, [r3, #0]
 8015ea6:	0713      	lsls	r3, r2, #28
 8015ea8:	d504      	bpl.n	8015eb4 <_svfiprintf_r+0xc4>
 8015eaa:	2353      	movs	r3, #83	; 0x53
 8015eac:	a904      	add	r1, sp, #16
 8015eae:	185b      	adds	r3, r3, r1
 8015eb0:	212b      	movs	r1, #43	; 0x2b
 8015eb2:	7019      	strb	r1, [r3, #0]
 8015eb4:	7833      	ldrb	r3, [r6, #0]
 8015eb6:	2b2a      	cmp	r3, #42	; 0x2a
 8015eb8:	d016      	beq.n	8015ee8 <_svfiprintf_r+0xf8>
 8015eba:	0035      	movs	r5, r6
 8015ebc:	2100      	movs	r1, #0
 8015ebe:	200a      	movs	r0, #10
 8015ec0:	68e3      	ldr	r3, [r4, #12]
 8015ec2:	782a      	ldrb	r2, [r5, #0]
 8015ec4:	1c6e      	adds	r6, r5, #1
 8015ec6:	3a30      	subs	r2, #48	; 0x30
 8015ec8:	2a09      	cmp	r2, #9
 8015eca:	d94e      	bls.n	8015f6a <_svfiprintf_r+0x17a>
 8015ecc:	2900      	cmp	r1, #0
 8015ece:	d111      	bne.n	8015ef4 <_svfiprintf_r+0x104>
 8015ed0:	e017      	b.n	8015f02 <_svfiprintf_r+0x112>
 8015ed2:	3501      	adds	r5, #1
 8015ed4:	e7b0      	b.n	8015e38 <_svfiprintf_r+0x48>
 8015ed6:	4b41      	ldr	r3, [pc, #260]	; (8015fdc <_svfiprintf_r+0x1ec>)
 8015ed8:	6822      	ldr	r2, [r4, #0]
 8015eda:	1ac0      	subs	r0, r0, r3
 8015edc:	2301      	movs	r3, #1
 8015ede:	4083      	lsls	r3, r0
 8015ee0:	4313      	orrs	r3, r2
 8015ee2:	002e      	movs	r6, r5
 8015ee4:	6023      	str	r3, [r4, #0]
 8015ee6:	e7ce      	b.n	8015e86 <_svfiprintf_r+0x96>
 8015ee8:	9b07      	ldr	r3, [sp, #28]
 8015eea:	1d19      	adds	r1, r3, #4
 8015eec:	681b      	ldr	r3, [r3, #0]
 8015eee:	9107      	str	r1, [sp, #28]
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	db01      	blt.n	8015ef8 <_svfiprintf_r+0x108>
 8015ef4:	930b      	str	r3, [sp, #44]	; 0x2c
 8015ef6:	e004      	b.n	8015f02 <_svfiprintf_r+0x112>
 8015ef8:	425b      	negs	r3, r3
 8015efa:	60e3      	str	r3, [r4, #12]
 8015efc:	2302      	movs	r3, #2
 8015efe:	4313      	orrs	r3, r2
 8015f00:	6023      	str	r3, [r4, #0]
 8015f02:	782b      	ldrb	r3, [r5, #0]
 8015f04:	2b2e      	cmp	r3, #46	; 0x2e
 8015f06:	d10a      	bne.n	8015f1e <_svfiprintf_r+0x12e>
 8015f08:	786b      	ldrb	r3, [r5, #1]
 8015f0a:	2b2a      	cmp	r3, #42	; 0x2a
 8015f0c:	d135      	bne.n	8015f7a <_svfiprintf_r+0x18a>
 8015f0e:	9b07      	ldr	r3, [sp, #28]
 8015f10:	3502      	adds	r5, #2
 8015f12:	1d1a      	adds	r2, r3, #4
 8015f14:	681b      	ldr	r3, [r3, #0]
 8015f16:	9207      	str	r2, [sp, #28]
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	db2b      	blt.n	8015f74 <_svfiprintf_r+0x184>
 8015f1c:	9309      	str	r3, [sp, #36]	; 0x24
 8015f1e:	4e30      	ldr	r6, [pc, #192]	; (8015fe0 <_svfiprintf_r+0x1f0>)
 8015f20:	2203      	movs	r2, #3
 8015f22:	0030      	movs	r0, r6
 8015f24:	7829      	ldrb	r1, [r5, #0]
 8015f26:	f7ff f9a5 	bl	8015274 <memchr>
 8015f2a:	2800      	cmp	r0, #0
 8015f2c:	d006      	beq.n	8015f3c <_svfiprintf_r+0x14c>
 8015f2e:	2340      	movs	r3, #64	; 0x40
 8015f30:	1b80      	subs	r0, r0, r6
 8015f32:	4083      	lsls	r3, r0
 8015f34:	6822      	ldr	r2, [r4, #0]
 8015f36:	3501      	adds	r5, #1
 8015f38:	4313      	orrs	r3, r2
 8015f3a:	6023      	str	r3, [r4, #0]
 8015f3c:	7829      	ldrb	r1, [r5, #0]
 8015f3e:	2206      	movs	r2, #6
 8015f40:	4828      	ldr	r0, [pc, #160]	; (8015fe4 <_svfiprintf_r+0x1f4>)
 8015f42:	1c6e      	adds	r6, r5, #1
 8015f44:	7621      	strb	r1, [r4, #24]
 8015f46:	f7ff f995 	bl	8015274 <memchr>
 8015f4a:	2800      	cmp	r0, #0
 8015f4c:	d03c      	beq.n	8015fc8 <_svfiprintf_r+0x1d8>
 8015f4e:	4b26      	ldr	r3, [pc, #152]	; (8015fe8 <_svfiprintf_r+0x1f8>)
 8015f50:	2b00      	cmp	r3, #0
 8015f52:	d125      	bne.n	8015fa0 <_svfiprintf_r+0x1b0>
 8015f54:	2207      	movs	r2, #7
 8015f56:	9b07      	ldr	r3, [sp, #28]
 8015f58:	3307      	adds	r3, #7
 8015f5a:	4393      	bics	r3, r2
 8015f5c:	3308      	adds	r3, #8
 8015f5e:	9307      	str	r3, [sp, #28]
 8015f60:	6963      	ldr	r3, [r4, #20]
 8015f62:	9a04      	ldr	r2, [sp, #16]
 8015f64:	189b      	adds	r3, r3, r2
 8015f66:	6163      	str	r3, [r4, #20]
 8015f68:	e765      	b.n	8015e36 <_svfiprintf_r+0x46>
 8015f6a:	4343      	muls	r3, r0
 8015f6c:	0035      	movs	r5, r6
 8015f6e:	2101      	movs	r1, #1
 8015f70:	189b      	adds	r3, r3, r2
 8015f72:	e7a6      	b.n	8015ec2 <_svfiprintf_r+0xd2>
 8015f74:	2301      	movs	r3, #1
 8015f76:	425b      	negs	r3, r3
 8015f78:	e7d0      	b.n	8015f1c <_svfiprintf_r+0x12c>
 8015f7a:	2300      	movs	r3, #0
 8015f7c:	200a      	movs	r0, #10
 8015f7e:	001a      	movs	r2, r3
 8015f80:	3501      	adds	r5, #1
 8015f82:	6063      	str	r3, [r4, #4]
 8015f84:	7829      	ldrb	r1, [r5, #0]
 8015f86:	1c6e      	adds	r6, r5, #1
 8015f88:	3930      	subs	r1, #48	; 0x30
 8015f8a:	2909      	cmp	r1, #9
 8015f8c:	d903      	bls.n	8015f96 <_svfiprintf_r+0x1a6>
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	d0c5      	beq.n	8015f1e <_svfiprintf_r+0x12e>
 8015f92:	9209      	str	r2, [sp, #36]	; 0x24
 8015f94:	e7c3      	b.n	8015f1e <_svfiprintf_r+0x12e>
 8015f96:	4342      	muls	r2, r0
 8015f98:	0035      	movs	r5, r6
 8015f9a:	2301      	movs	r3, #1
 8015f9c:	1852      	adds	r2, r2, r1
 8015f9e:	e7f1      	b.n	8015f84 <_svfiprintf_r+0x194>
 8015fa0:	ab07      	add	r3, sp, #28
 8015fa2:	9300      	str	r3, [sp, #0]
 8015fa4:	003a      	movs	r2, r7
 8015fa6:	0021      	movs	r1, r4
 8015fa8:	4b10      	ldr	r3, [pc, #64]	; (8015fec <_svfiprintf_r+0x1fc>)
 8015faa:	9803      	ldr	r0, [sp, #12]
 8015fac:	f7fc f970 	bl	8012290 <_printf_float>
 8015fb0:	9004      	str	r0, [sp, #16]
 8015fb2:	9b04      	ldr	r3, [sp, #16]
 8015fb4:	3301      	adds	r3, #1
 8015fb6:	d1d3      	bne.n	8015f60 <_svfiprintf_r+0x170>
 8015fb8:	89bb      	ldrh	r3, [r7, #12]
 8015fba:	980d      	ldr	r0, [sp, #52]	; 0x34
 8015fbc:	065b      	lsls	r3, r3, #25
 8015fbe:	d400      	bmi.n	8015fc2 <_svfiprintf_r+0x1d2>
 8015fc0:	e72d      	b.n	8015e1e <_svfiprintf_r+0x2e>
 8015fc2:	2001      	movs	r0, #1
 8015fc4:	4240      	negs	r0, r0
 8015fc6:	e72a      	b.n	8015e1e <_svfiprintf_r+0x2e>
 8015fc8:	ab07      	add	r3, sp, #28
 8015fca:	9300      	str	r3, [sp, #0]
 8015fcc:	003a      	movs	r2, r7
 8015fce:	0021      	movs	r1, r4
 8015fd0:	4b06      	ldr	r3, [pc, #24]	; (8015fec <_svfiprintf_r+0x1fc>)
 8015fd2:	9803      	ldr	r0, [sp, #12]
 8015fd4:	f7fc fc0e 	bl	80127f4 <_printf_i>
 8015fd8:	e7ea      	b.n	8015fb0 <_svfiprintf_r+0x1c0>
 8015fda:	46c0      	nop			; (mov r8, r8)
 8015fdc:	0801766c 	.word	0x0801766c
 8015fe0:	08017672 	.word	0x08017672
 8015fe4:	08017676 	.word	0x08017676
 8015fe8:	08012291 	.word	0x08012291
 8015fec:	08015d2d 	.word	0x08015d2d

08015ff0 <__sfputc_r>:
 8015ff0:	6893      	ldr	r3, [r2, #8]
 8015ff2:	b510      	push	{r4, lr}
 8015ff4:	3b01      	subs	r3, #1
 8015ff6:	6093      	str	r3, [r2, #8]
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	da04      	bge.n	8016006 <__sfputc_r+0x16>
 8015ffc:	6994      	ldr	r4, [r2, #24]
 8015ffe:	42a3      	cmp	r3, r4
 8016000:	db07      	blt.n	8016012 <__sfputc_r+0x22>
 8016002:	290a      	cmp	r1, #10
 8016004:	d005      	beq.n	8016012 <__sfputc_r+0x22>
 8016006:	6813      	ldr	r3, [r2, #0]
 8016008:	1c58      	adds	r0, r3, #1
 801600a:	6010      	str	r0, [r2, #0]
 801600c:	7019      	strb	r1, [r3, #0]
 801600e:	0008      	movs	r0, r1
 8016010:	bd10      	pop	{r4, pc}
 8016012:	f000 f969 	bl	80162e8 <__swbuf_r>
 8016016:	0001      	movs	r1, r0
 8016018:	e7f9      	b.n	801600e <__sfputc_r+0x1e>

0801601a <__sfputs_r>:
 801601a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801601c:	0006      	movs	r6, r0
 801601e:	000f      	movs	r7, r1
 8016020:	0014      	movs	r4, r2
 8016022:	18d5      	adds	r5, r2, r3
 8016024:	42ac      	cmp	r4, r5
 8016026:	d101      	bne.n	801602c <__sfputs_r+0x12>
 8016028:	2000      	movs	r0, #0
 801602a:	e007      	b.n	801603c <__sfputs_r+0x22>
 801602c:	7821      	ldrb	r1, [r4, #0]
 801602e:	003a      	movs	r2, r7
 8016030:	0030      	movs	r0, r6
 8016032:	f7ff ffdd 	bl	8015ff0 <__sfputc_r>
 8016036:	3401      	adds	r4, #1
 8016038:	1c43      	adds	r3, r0, #1
 801603a:	d1f3      	bne.n	8016024 <__sfputs_r+0xa>
 801603c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016040 <_vfiprintf_r>:
 8016040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016042:	b0a1      	sub	sp, #132	; 0x84
 8016044:	0006      	movs	r6, r0
 8016046:	000c      	movs	r4, r1
 8016048:	001f      	movs	r7, r3
 801604a:	9203      	str	r2, [sp, #12]
 801604c:	2800      	cmp	r0, #0
 801604e:	d004      	beq.n	801605a <_vfiprintf_r+0x1a>
 8016050:	6983      	ldr	r3, [r0, #24]
 8016052:	2b00      	cmp	r3, #0
 8016054:	d101      	bne.n	801605a <_vfiprintf_r+0x1a>
 8016056:	f7fb fee5 	bl	8011e24 <__sinit>
 801605a:	4b8e      	ldr	r3, [pc, #568]	; (8016294 <_vfiprintf_r+0x254>)
 801605c:	429c      	cmp	r4, r3
 801605e:	d11c      	bne.n	801609a <_vfiprintf_r+0x5a>
 8016060:	6874      	ldr	r4, [r6, #4]
 8016062:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016064:	07db      	lsls	r3, r3, #31
 8016066:	d405      	bmi.n	8016074 <_vfiprintf_r+0x34>
 8016068:	89a3      	ldrh	r3, [r4, #12]
 801606a:	059b      	lsls	r3, r3, #22
 801606c:	d402      	bmi.n	8016074 <_vfiprintf_r+0x34>
 801606e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016070:	f7fb ffb9 	bl	8011fe6 <__retarget_lock_acquire_recursive>
 8016074:	89a3      	ldrh	r3, [r4, #12]
 8016076:	071b      	lsls	r3, r3, #28
 8016078:	d502      	bpl.n	8016080 <_vfiprintf_r+0x40>
 801607a:	6923      	ldr	r3, [r4, #16]
 801607c:	2b00      	cmp	r3, #0
 801607e:	d11d      	bne.n	80160bc <_vfiprintf_r+0x7c>
 8016080:	0021      	movs	r1, r4
 8016082:	0030      	movs	r0, r6
 8016084:	f000 f994 	bl	80163b0 <__swsetup_r>
 8016088:	2800      	cmp	r0, #0
 801608a:	d017      	beq.n	80160bc <_vfiprintf_r+0x7c>
 801608c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801608e:	07db      	lsls	r3, r3, #31
 8016090:	d50d      	bpl.n	80160ae <_vfiprintf_r+0x6e>
 8016092:	2001      	movs	r0, #1
 8016094:	4240      	negs	r0, r0
 8016096:	b021      	add	sp, #132	; 0x84
 8016098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801609a:	4b7f      	ldr	r3, [pc, #508]	; (8016298 <_vfiprintf_r+0x258>)
 801609c:	429c      	cmp	r4, r3
 801609e:	d101      	bne.n	80160a4 <_vfiprintf_r+0x64>
 80160a0:	68b4      	ldr	r4, [r6, #8]
 80160a2:	e7de      	b.n	8016062 <_vfiprintf_r+0x22>
 80160a4:	4b7d      	ldr	r3, [pc, #500]	; (801629c <_vfiprintf_r+0x25c>)
 80160a6:	429c      	cmp	r4, r3
 80160a8:	d1db      	bne.n	8016062 <_vfiprintf_r+0x22>
 80160aa:	68f4      	ldr	r4, [r6, #12]
 80160ac:	e7d9      	b.n	8016062 <_vfiprintf_r+0x22>
 80160ae:	89a3      	ldrh	r3, [r4, #12]
 80160b0:	059b      	lsls	r3, r3, #22
 80160b2:	d4ee      	bmi.n	8016092 <_vfiprintf_r+0x52>
 80160b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80160b6:	f7fb ff97 	bl	8011fe8 <__retarget_lock_release_recursive>
 80160ba:	e7ea      	b.n	8016092 <_vfiprintf_r+0x52>
 80160bc:	2300      	movs	r3, #0
 80160be:	ad08      	add	r5, sp, #32
 80160c0:	616b      	str	r3, [r5, #20]
 80160c2:	3320      	adds	r3, #32
 80160c4:	766b      	strb	r3, [r5, #25]
 80160c6:	3310      	adds	r3, #16
 80160c8:	76ab      	strb	r3, [r5, #26]
 80160ca:	9707      	str	r7, [sp, #28]
 80160cc:	9f03      	ldr	r7, [sp, #12]
 80160ce:	783b      	ldrb	r3, [r7, #0]
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	d001      	beq.n	80160d8 <_vfiprintf_r+0x98>
 80160d4:	2b25      	cmp	r3, #37	; 0x25
 80160d6:	d14e      	bne.n	8016176 <_vfiprintf_r+0x136>
 80160d8:	9b03      	ldr	r3, [sp, #12]
 80160da:	1afb      	subs	r3, r7, r3
 80160dc:	9305      	str	r3, [sp, #20]
 80160de:	9b03      	ldr	r3, [sp, #12]
 80160e0:	429f      	cmp	r7, r3
 80160e2:	d00d      	beq.n	8016100 <_vfiprintf_r+0xc0>
 80160e4:	9b05      	ldr	r3, [sp, #20]
 80160e6:	0021      	movs	r1, r4
 80160e8:	0030      	movs	r0, r6
 80160ea:	9a03      	ldr	r2, [sp, #12]
 80160ec:	f7ff ff95 	bl	801601a <__sfputs_r>
 80160f0:	1c43      	adds	r3, r0, #1
 80160f2:	d100      	bne.n	80160f6 <_vfiprintf_r+0xb6>
 80160f4:	e0b5      	b.n	8016262 <_vfiprintf_r+0x222>
 80160f6:	696a      	ldr	r2, [r5, #20]
 80160f8:	9b05      	ldr	r3, [sp, #20]
 80160fa:	4694      	mov	ip, r2
 80160fc:	4463      	add	r3, ip
 80160fe:	616b      	str	r3, [r5, #20]
 8016100:	783b      	ldrb	r3, [r7, #0]
 8016102:	2b00      	cmp	r3, #0
 8016104:	d100      	bne.n	8016108 <_vfiprintf_r+0xc8>
 8016106:	e0ac      	b.n	8016262 <_vfiprintf_r+0x222>
 8016108:	2201      	movs	r2, #1
 801610a:	1c7b      	adds	r3, r7, #1
 801610c:	9303      	str	r3, [sp, #12]
 801610e:	2300      	movs	r3, #0
 8016110:	4252      	negs	r2, r2
 8016112:	606a      	str	r2, [r5, #4]
 8016114:	a904      	add	r1, sp, #16
 8016116:	3254      	adds	r2, #84	; 0x54
 8016118:	1852      	adds	r2, r2, r1
 801611a:	602b      	str	r3, [r5, #0]
 801611c:	60eb      	str	r3, [r5, #12]
 801611e:	60ab      	str	r3, [r5, #8]
 8016120:	7013      	strb	r3, [r2, #0]
 8016122:	65ab      	str	r3, [r5, #88]	; 0x58
 8016124:	9b03      	ldr	r3, [sp, #12]
 8016126:	2205      	movs	r2, #5
 8016128:	7819      	ldrb	r1, [r3, #0]
 801612a:	485d      	ldr	r0, [pc, #372]	; (80162a0 <_vfiprintf_r+0x260>)
 801612c:	f7ff f8a2 	bl	8015274 <memchr>
 8016130:	9b03      	ldr	r3, [sp, #12]
 8016132:	1c5f      	adds	r7, r3, #1
 8016134:	2800      	cmp	r0, #0
 8016136:	d120      	bne.n	801617a <_vfiprintf_r+0x13a>
 8016138:	682a      	ldr	r2, [r5, #0]
 801613a:	06d3      	lsls	r3, r2, #27
 801613c:	d504      	bpl.n	8016148 <_vfiprintf_r+0x108>
 801613e:	2353      	movs	r3, #83	; 0x53
 8016140:	a904      	add	r1, sp, #16
 8016142:	185b      	adds	r3, r3, r1
 8016144:	2120      	movs	r1, #32
 8016146:	7019      	strb	r1, [r3, #0]
 8016148:	0713      	lsls	r3, r2, #28
 801614a:	d504      	bpl.n	8016156 <_vfiprintf_r+0x116>
 801614c:	2353      	movs	r3, #83	; 0x53
 801614e:	a904      	add	r1, sp, #16
 8016150:	185b      	adds	r3, r3, r1
 8016152:	212b      	movs	r1, #43	; 0x2b
 8016154:	7019      	strb	r1, [r3, #0]
 8016156:	9b03      	ldr	r3, [sp, #12]
 8016158:	781b      	ldrb	r3, [r3, #0]
 801615a:	2b2a      	cmp	r3, #42	; 0x2a
 801615c:	d016      	beq.n	801618c <_vfiprintf_r+0x14c>
 801615e:	2100      	movs	r1, #0
 8016160:	68eb      	ldr	r3, [r5, #12]
 8016162:	9f03      	ldr	r7, [sp, #12]
 8016164:	783a      	ldrb	r2, [r7, #0]
 8016166:	1c78      	adds	r0, r7, #1
 8016168:	3a30      	subs	r2, #48	; 0x30
 801616a:	4684      	mov	ip, r0
 801616c:	2a09      	cmp	r2, #9
 801616e:	d94f      	bls.n	8016210 <_vfiprintf_r+0x1d0>
 8016170:	2900      	cmp	r1, #0
 8016172:	d111      	bne.n	8016198 <_vfiprintf_r+0x158>
 8016174:	e017      	b.n	80161a6 <_vfiprintf_r+0x166>
 8016176:	3701      	adds	r7, #1
 8016178:	e7a9      	b.n	80160ce <_vfiprintf_r+0x8e>
 801617a:	4b49      	ldr	r3, [pc, #292]	; (80162a0 <_vfiprintf_r+0x260>)
 801617c:	682a      	ldr	r2, [r5, #0]
 801617e:	1ac0      	subs	r0, r0, r3
 8016180:	2301      	movs	r3, #1
 8016182:	4083      	lsls	r3, r0
 8016184:	4313      	orrs	r3, r2
 8016186:	602b      	str	r3, [r5, #0]
 8016188:	9703      	str	r7, [sp, #12]
 801618a:	e7cb      	b.n	8016124 <_vfiprintf_r+0xe4>
 801618c:	9b07      	ldr	r3, [sp, #28]
 801618e:	1d19      	adds	r1, r3, #4
 8016190:	681b      	ldr	r3, [r3, #0]
 8016192:	9107      	str	r1, [sp, #28]
 8016194:	2b00      	cmp	r3, #0
 8016196:	db01      	blt.n	801619c <_vfiprintf_r+0x15c>
 8016198:	930b      	str	r3, [sp, #44]	; 0x2c
 801619a:	e004      	b.n	80161a6 <_vfiprintf_r+0x166>
 801619c:	425b      	negs	r3, r3
 801619e:	60eb      	str	r3, [r5, #12]
 80161a0:	2302      	movs	r3, #2
 80161a2:	4313      	orrs	r3, r2
 80161a4:	602b      	str	r3, [r5, #0]
 80161a6:	783b      	ldrb	r3, [r7, #0]
 80161a8:	2b2e      	cmp	r3, #46	; 0x2e
 80161aa:	d10a      	bne.n	80161c2 <_vfiprintf_r+0x182>
 80161ac:	787b      	ldrb	r3, [r7, #1]
 80161ae:	2b2a      	cmp	r3, #42	; 0x2a
 80161b0:	d137      	bne.n	8016222 <_vfiprintf_r+0x1e2>
 80161b2:	9b07      	ldr	r3, [sp, #28]
 80161b4:	3702      	adds	r7, #2
 80161b6:	1d1a      	adds	r2, r3, #4
 80161b8:	681b      	ldr	r3, [r3, #0]
 80161ba:	9207      	str	r2, [sp, #28]
 80161bc:	2b00      	cmp	r3, #0
 80161be:	db2d      	blt.n	801621c <_vfiprintf_r+0x1dc>
 80161c0:	9309      	str	r3, [sp, #36]	; 0x24
 80161c2:	2203      	movs	r2, #3
 80161c4:	7839      	ldrb	r1, [r7, #0]
 80161c6:	4837      	ldr	r0, [pc, #220]	; (80162a4 <_vfiprintf_r+0x264>)
 80161c8:	f7ff f854 	bl	8015274 <memchr>
 80161cc:	2800      	cmp	r0, #0
 80161ce:	d007      	beq.n	80161e0 <_vfiprintf_r+0x1a0>
 80161d0:	4b34      	ldr	r3, [pc, #208]	; (80162a4 <_vfiprintf_r+0x264>)
 80161d2:	682a      	ldr	r2, [r5, #0]
 80161d4:	1ac0      	subs	r0, r0, r3
 80161d6:	2340      	movs	r3, #64	; 0x40
 80161d8:	4083      	lsls	r3, r0
 80161da:	4313      	orrs	r3, r2
 80161dc:	3701      	adds	r7, #1
 80161de:	602b      	str	r3, [r5, #0]
 80161e0:	7839      	ldrb	r1, [r7, #0]
 80161e2:	1c7b      	adds	r3, r7, #1
 80161e4:	2206      	movs	r2, #6
 80161e6:	4830      	ldr	r0, [pc, #192]	; (80162a8 <_vfiprintf_r+0x268>)
 80161e8:	9303      	str	r3, [sp, #12]
 80161ea:	7629      	strb	r1, [r5, #24]
 80161ec:	f7ff f842 	bl	8015274 <memchr>
 80161f0:	2800      	cmp	r0, #0
 80161f2:	d045      	beq.n	8016280 <_vfiprintf_r+0x240>
 80161f4:	4b2d      	ldr	r3, [pc, #180]	; (80162ac <_vfiprintf_r+0x26c>)
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d127      	bne.n	801624a <_vfiprintf_r+0x20a>
 80161fa:	2207      	movs	r2, #7
 80161fc:	9b07      	ldr	r3, [sp, #28]
 80161fe:	3307      	adds	r3, #7
 8016200:	4393      	bics	r3, r2
 8016202:	3308      	adds	r3, #8
 8016204:	9307      	str	r3, [sp, #28]
 8016206:	696b      	ldr	r3, [r5, #20]
 8016208:	9a04      	ldr	r2, [sp, #16]
 801620a:	189b      	adds	r3, r3, r2
 801620c:	616b      	str	r3, [r5, #20]
 801620e:	e75d      	b.n	80160cc <_vfiprintf_r+0x8c>
 8016210:	210a      	movs	r1, #10
 8016212:	434b      	muls	r3, r1
 8016214:	4667      	mov	r7, ip
 8016216:	189b      	adds	r3, r3, r2
 8016218:	3909      	subs	r1, #9
 801621a:	e7a3      	b.n	8016164 <_vfiprintf_r+0x124>
 801621c:	2301      	movs	r3, #1
 801621e:	425b      	negs	r3, r3
 8016220:	e7ce      	b.n	80161c0 <_vfiprintf_r+0x180>
 8016222:	2300      	movs	r3, #0
 8016224:	001a      	movs	r2, r3
 8016226:	3701      	adds	r7, #1
 8016228:	606b      	str	r3, [r5, #4]
 801622a:	7839      	ldrb	r1, [r7, #0]
 801622c:	1c78      	adds	r0, r7, #1
 801622e:	3930      	subs	r1, #48	; 0x30
 8016230:	4684      	mov	ip, r0
 8016232:	2909      	cmp	r1, #9
 8016234:	d903      	bls.n	801623e <_vfiprintf_r+0x1fe>
 8016236:	2b00      	cmp	r3, #0
 8016238:	d0c3      	beq.n	80161c2 <_vfiprintf_r+0x182>
 801623a:	9209      	str	r2, [sp, #36]	; 0x24
 801623c:	e7c1      	b.n	80161c2 <_vfiprintf_r+0x182>
 801623e:	230a      	movs	r3, #10
 8016240:	435a      	muls	r2, r3
 8016242:	4667      	mov	r7, ip
 8016244:	1852      	adds	r2, r2, r1
 8016246:	3b09      	subs	r3, #9
 8016248:	e7ef      	b.n	801622a <_vfiprintf_r+0x1ea>
 801624a:	ab07      	add	r3, sp, #28
 801624c:	9300      	str	r3, [sp, #0]
 801624e:	0022      	movs	r2, r4
 8016250:	0029      	movs	r1, r5
 8016252:	0030      	movs	r0, r6
 8016254:	4b16      	ldr	r3, [pc, #88]	; (80162b0 <_vfiprintf_r+0x270>)
 8016256:	f7fc f81b 	bl	8012290 <_printf_float>
 801625a:	9004      	str	r0, [sp, #16]
 801625c:	9b04      	ldr	r3, [sp, #16]
 801625e:	3301      	adds	r3, #1
 8016260:	d1d1      	bne.n	8016206 <_vfiprintf_r+0x1c6>
 8016262:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016264:	07db      	lsls	r3, r3, #31
 8016266:	d405      	bmi.n	8016274 <_vfiprintf_r+0x234>
 8016268:	89a3      	ldrh	r3, [r4, #12]
 801626a:	059b      	lsls	r3, r3, #22
 801626c:	d402      	bmi.n	8016274 <_vfiprintf_r+0x234>
 801626e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016270:	f7fb feba 	bl	8011fe8 <__retarget_lock_release_recursive>
 8016274:	89a3      	ldrh	r3, [r4, #12]
 8016276:	065b      	lsls	r3, r3, #25
 8016278:	d500      	bpl.n	801627c <_vfiprintf_r+0x23c>
 801627a:	e70a      	b.n	8016092 <_vfiprintf_r+0x52>
 801627c:	980d      	ldr	r0, [sp, #52]	; 0x34
 801627e:	e70a      	b.n	8016096 <_vfiprintf_r+0x56>
 8016280:	ab07      	add	r3, sp, #28
 8016282:	9300      	str	r3, [sp, #0]
 8016284:	0022      	movs	r2, r4
 8016286:	0029      	movs	r1, r5
 8016288:	0030      	movs	r0, r6
 801628a:	4b09      	ldr	r3, [pc, #36]	; (80162b0 <_vfiprintf_r+0x270>)
 801628c:	f7fc fab2 	bl	80127f4 <_printf_i>
 8016290:	e7e3      	b.n	801625a <_vfiprintf_r+0x21a>
 8016292:	46c0      	nop			; (mov r8, r8)
 8016294:	08017180 	.word	0x08017180
 8016298:	080171a0 	.word	0x080171a0
 801629c:	08017160 	.word	0x08017160
 80162a0:	0801766c 	.word	0x0801766c
 80162a4:	08017672 	.word	0x08017672
 80162a8:	08017676 	.word	0x08017676
 80162ac:	08012291 	.word	0x08012291
 80162b0:	0801601b 	.word	0x0801601b

080162b4 <_read_r>:
 80162b4:	b570      	push	{r4, r5, r6, lr}
 80162b6:	0004      	movs	r4, r0
 80162b8:	0008      	movs	r0, r1
 80162ba:	0011      	movs	r1, r2
 80162bc:	001a      	movs	r2, r3
 80162be:	2300      	movs	r3, #0
 80162c0:	4d05      	ldr	r5, [pc, #20]	; (80162d8 <_read_r+0x24>)
 80162c2:	602b      	str	r3, [r5, #0]
 80162c4:	f7ed fc46 	bl	8003b54 <_read>
 80162c8:	1c43      	adds	r3, r0, #1
 80162ca:	d103      	bne.n	80162d4 <_read_r+0x20>
 80162cc:	682b      	ldr	r3, [r5, #0]
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	d000      	beq.n	80162d4 <_read_r+0x20>
 80162d2:	6023      	str	r3, [r4, #0]
 80162d4:	bd70      	pop	{r4, r5, r6, pc}
 80162d6:	46c0      	nop			; (mov r8, r8)
 80162d8:	20002d98 	.word	0x20002d98

080162dc <nan>:
 80162dc:	2000      	movs	r0, #0
 80162de:	4901      	ldr	r1, [pc, #4]	; (80162e4 <nan+0x8>)
 80162e0:	4770      	bx	lr
 80162e2:	46c0      	nop			; (mov r8, r8)
 80162e4:	7ff80000 	.word	0x7ff80000

080162e8 <__swbuf_r>:
 80162e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80162ea:	0005      	movs	r5, r0
 80162ec:	000e      	movs	r6, r1
 80162ee:	0014      	movs	r4, r2
 80162f0:	2800      	cmp	r0, #0
 80162f2:	d004      	beq.n	80162fe <__swbuf_r+0x16>
 80162f4:	6983      	ldr	r3, [r0, #24]
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	d101      	bne.n	80162fe <__swbuf_r+0x16>
 80162fa:	f7fb fd93 	bl	8011e24 <__sinit>
 80162fe:	4b22      	ldr	r3, [pc, #136]	; (8016388 <__swbuf_r+0xa0>)
 8016300:	429c      	cmp	r4, r3
 8016302:	d12e      	bne.n	8016362 <__swbuf_r+0x7a>
 8016304:	686c      	ldr	r4, [r5, #4]
 8016306:	69a3      	ldr	r3, [r4, #24]
 8016308:	60a3      	str	r3, [r4, #8]
 801630a:	89a3      	ldrh	r3, [r4, #12]
 801630c:	071b      	lsls	r3, r3, #28
 801630e:	d532      	bpl.n	8016376 <__swbuf_r+0x8e>
 8016310:	6923      	ldr	r3, [r4, #16]
 8016312:	2b00      	cmp	r3, #0
 8016314:	d02f      	beq.n	8016376 <__swbuf_r+0x8e>
 8016316:	6823      	ldr	r3, [r4, #0]
 8016318:	6922      	ldr	r2, [r4, #16]
 801631a:	b2f7      	uxtb	r7, r6
 801631c:	1a98      	subs	r0, r3, r2
 801631e:	6963      	ldr	r3, [r4, #20]
 8016320:	b2f6      	uxtb	r6, r6
 8016322:	4283      	cmp	r3, r0
 8016324:	dc05      	bgt.n	8016332 <__swbuf_r+0x4a>
 8016326:	0021      	movs	r1, r4
 8016328:	0028      	movs	r0, r5
 801632a:	f7fe fbab 	bl	8014a84 <_fflush_r>
 801632e:	2800      	cmp	r0, #0
 8016330:	d127      	bne.n	8016382 <__swbuf_r+0x9a>
 8016332:	68a3      	ldr	r3, [r4, #8]
 8016334:	3001      	adds	r0, #1
 8016336:	3b01      	subs	r3, #1
 8016338:	60a3      	str	r3, [r4, #8]
 801633a:	6823      	ldr	r3, [r4, #0]
 801633c:	1c5a      	adds	r2, r3, #1
 801633e:	6022      	str	r2, [r4, #0]
 8016340:	701f      	strb	r7, [r3, #0]
 8016342:	6963      	ldr	r3, [r4, #20]
 8016344:	4283      	cmp	r3, r0
 8016346:	d004      	beq.n	8016352 <__swbuf_r+0x6a>
 8016348:	89a3      	ldrh	r3, [r4, #12]
 801634a:	07db      	lsls	r3, r3, #31
 801634c:	d507      	bpl.n	801635e <__swbuf_r+0x76>
 801634e:	2e0a      	cmp	r6, #10
 8016350:	d105      	bne.n	801635e <__swbuf_r+0x76>
 8016352:	0021      	movs	r1, r4
 8016354:	0028      	movs	r0, r5
 8016356:	f7fe fb95 	bl	8014a84 <_fflush_r>
 801635a:	2800      	cmp	r0, #0
 801635c:	d111      	bne.n	8016382 <__swbuf_r+0x9a>
 801635e:	0030      	movs	r0, r6
 8016360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016362:	4b0a      	ldr	r3, [pc, #40]	; (801638c <__swbuf_r+0xa4>)
 8016364:	429c      	cmp	r4, r3
 8016366:	d101      	bne.n	801636c <__swbuf_r+0x84>
 8016368:	68ac      	ldr	r4, [r5, #8]
 801636a:	e7cc      	b.n	8016306 <__swbuf_r+0x1e>
 801636c:	4b08      	ldr	r3, [pc, #32]	; (8016390 <__swbuf_r+0xa8>)
 801636e:	429c      	cmp	r4, r3
 8016370:	d1c9      	bne.n	8016306 <__swbuf_r+0x1e>
 8016372:	68ec      	ldr	r4, [r5, #12]
 8016374:	e7c7      	b.n	8016306 <__swbuf_r+0x1e>
 8016376:	0021      	movs	r1, r4
 8016378:	0028      	movs	r0, r5
 801637a:	f000 f819 	bl	80163b0 <__swsetup_r>
 801637e:	2800      	cmp	r0, #0
 8016380:	d0c9      	beq.n	8016316 <__swbuf_r+0x2e>
 8016382:	2601      	movs	r6, #1
 8016384:	4276      	negs	r6, r6
 8016386:	e7ea      	b.n	801635e <__swbuf_r+0x76>
 8016388:	08017180 	.word	0x08017180
 801638c:	080171a0 	.word	0x080171a0
 8016390:	08017160 	.word	0x08017160

08016394 <__ascii_wctomb>:
 8016394:	0003      	movs	r3, r0
 8016396:	1e08      	subs	r0, r1, #0
 8016398:	d005      	beq.n	80163a6 <__ascii_wctomb+0x12>
 801639a:	2aff      	cmp	r2, #255	; 0xff
 801639c:	d904      	bls.n	80163a8 <__ascii_wctomb+0x14>
 801639e:	228a      	movs	r2, #138	; 0x8a
 80163a0:	2001      	movs	r0, #1
 80163a2:	601a      	str	r2, [r3, #0]
 80163a4:	4240      	negs	r0, r0
 80163a6:	4770      	bx	lr
 80163a8:	2001      	movs	r0, #1
 80163aa:	700a      	strb	r2, [r1, #0]
 80163ac:	e7fb      	b.n	80163a6 <__ascii_wctomb+0x12>
	...

080163b0 <__swsetup_r>:
 80163b0:	4b37      	ldr	r3, [pc, #220]	; (8016490 <__swsetup_r+0xe0>)
 80163b2:	b570      	push	{r4, r5, r6, lr}
 80163b4:	681d      	ldr	r5, [r3, #0]
 80163b6:	0006      	movs	r6, r0
 80163b8:	000c      	movs	r4, r1
 80163ba:	2d00      	cmp	r5, #0
 80163bc:	d005      	beq.n	80163ca <__swsetup_r+0x1a>
 80163be:	69ab      	ldr	r3, [r5, #24]
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d102      	bne.n	80163ca <__swsetup_r+0x1a>
 80163c4:	0028      	movs	r0, r5
 80163c6:	f7fb fd2d 	bl	8011e24 <__sinit>
 80163ca:	4b32      	ldr	r3, [pc, #200]	; (8016494 <__swsetup_r+0xe4>)
 80163cc:	429c      	cmp	r4, r3
 80163ce:	d10f      	bne.n	80163f0 <__swsetup_r+0x40>
 80163d0:	686c      	ldr	r4, [r5, #4]
 80163d2:	230c      	movs	r3, #12
 80163d4:	5ee2      	ldrsh	r2, [r4, r3]
 80163d6:	b293      	uxth	r3, r2
 80163d8:	0711      	lsls	r1, r2, #28
 80163da:	d42d      	bmi.n	8016438 <__swsetup_r+0x88>
 80163dc:	06d9      	lsls	r1, r3, #27
 80163de:	d411      	bmi.n	8016404 <__swsetup_r+0x54>
 80163e0:	2309      	movs	r3, #9
 80163e2:	2001      	movs	r0, #1
 80163e4:	6033      	str	r3, [r6, #0]
 80163e6:	3337      	adds	r3, #55	; 0x37
 80163e8:	4313      	orrs	r3, r2
 80163ea:	81a3      	strh	r3, [r4, #12]
 80163ec:	4240      	negs	r0, r0
 80163ee:	bd70      	pop	{r4, r5, r6, pc}
 80163f0:	4b29      	ldr	r3, [pc, #164]	; (8016498 <__swsetup_r+0xe8>)
 80163f2:	429c      	cmp	r4, r3
 80163f4:	d101      	bne.n	80163fa <__swsetup_r+0x4a>
 80163f6:	68ac      	ldr	r4, [r5, #8]
 80163f8:	e7eb      	b.n	80163d2 <__swsetup_r+0x22>
 80163fa:	4b28      	ldr	r3, [pc, #160]	; (801649c <__swsetup_r+0xec>)
 80163fc:	429c      	cmp	r4, r3
 80163fe:	d1e8      	bne.n	80163d2 <__swsetup_r+0x22>
 8016400:	68ec      	ldr	r4, [r5, #12]
 8016402:	e7e6      	b.n	80163d2 <__swsetup_r+0x22>
 8016404:	075b      	lsls	r3, r3, #29
 8016406:	d513      	bpl.n	8016430 <__swsetup_r+0x80>
 8016408:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801640a:	2900      	cmp	r1, #0
 801640c:	d008      	beq.n	8016420 <__swsetup_r+0x70>
 801640e:	0023      	movs	r3, r4
 8016410:	3344      	adds	r3, #68	; 0x44
 8016412:	4299      	cmp	r1, r3
 8016414:	d002      	beq.n	801641c <__swsetup_r+0x6c>
 8016416:	0030      	movs	r0, r6
 8016418:	f7ff fc3e 	bl	8015c98 <_free_r>
 801641c:	2300      	movs	r3, #0
 801641e:	6363      	str	r3, [r4, #52]	; 0x34
 8016420:	2224      	movs	r2, #36	; 0x24
 8016422:	89a3      	ldrh	r3, [r4, #12]
 8016424:	4393      	bics	r3, r2
 8016426:	81a3      	strh	r3, [r4, #12]
 8016428:	2300      	movs	r3, #0
 801642a:	6063      	str	r3, [r4, #4]
 801642c:	6923      	ldr	r3, [r4, #16]
 801642e:	6023      	str	r3, [r4, #0]
 8016430:	2308      	movs	r3, #8
 8016432:	89a2      	ldrh	r2, [r4, #12]
 8016434:	4313      	orrs	r3, r2
 8016436:	81a3      	strh	r3, [r4, #12]
 8016438:	6923      	ldr	r3, [r4, #16]
 801643a:	2b00      	cmp	r3, #0
 801643c:	d10b      	bne.n	8016456 <__swsetup_r+0xa6>
 801643e:	21a0      	movs	r1, #160	; 0xa0
 8016440:	2280      	movs	r2, #128	; 0x80
 8016442:	89a3      	ldrh	r3, [r4, #12]
 8016444:	0089      	lsls	r1, r1, #2
 8016446:	0092      	lsls	r2, r2, #2
 8016448:	400b      	ands	r3, r1
 801644a:	4293      	cmp	r3, r2
 801644c:	d003      	beq.n	8016456 <__swsetup_r+0xa6>
 801644e:	0021      	movs	r1, r4
 8016450:	0030      	movs	r0, r6
 8016452:	f000 f855 	bl	8016500 <__smakebuf_r>
 8016456:	220c      	movs	r2, #12
 8016458:	5ea3      	ldrsh	r3, [r4, r2]
 801645a:	2001      	movs	r0, #1
 801645c:	001a      	movs	r2, r3
 801645e:	b299      	uxth	r1, r3
 8016460:	4002      	ands	r2, r0
 8016462:	4203      	tst	r3, r0
 8016464:	d00f      	beq.n	8016486 <__swsetup_r+0xd6>
 8016466:	2200      	movs	r2, #0
 8016468:	60a2      	str	r2, [r4, #8]
 801646a:	6962      	ldr	r2, [r4, #20]
 801646c:	4252      	negs	r2, r2
 801646e:	61a2      	str	r2, [r4, #24]
 8016470:	2000      	movs	r0, #0
 8016472:	6922      	ldr	r2, [r4, #16]
 8016474:	4282      	cmp	r2, r0
 8016476:	d1ba      	bne.n	80163ee <__swsetup_r+0x3e>
 8016478:	060a      	lsls	r2, r1, #24
 801647a:	d5b8      	bpl.n	80163ee <__swsetup_r+0x3e>
 801647c:	2240      	movs	r2, #64	; 0x40
 801647e:	4313      	orrs	r3, r2
 8016480:	81a3      	strh	r3, [r4, #12]
 8016482:	3801      	subs	r0, #1
 8016484:	e7b3      	b.n	80163ee <__swsetup_r+0x3e>
 8016486:	0788      	lsls	r0, r1, #30
 8016488:	d400      	bmi.n	801648c <__swsetup_r+0xdc>
 801648a:	6962      	ldr	r2, [r4, #20]
 801648c:	60a2      	str	r2, [r4, #8]
 801648e:	e7ef      	b.n	8016470 <__swsetup_r+0xc0>
 8016490:	20000014 	.word	0x20000014
 8016494:	08017180 	.word	0x08017180
 8016498:	080171a0 	.word	0x080171a0
 801649c:	08017160 	.word	0x08017160

080164a0 <abort>:
 80164a0:	2006      	movs	r0, #6
 80164a2:	b510      	push	{r4, lr}
 80164a4:	f000 f8dc 	bl	8016660 <raise>
 80164a8:	2001      	movs	r0, #1
 80164aa:	f7ed fb47 	bl	8003b3c <_exit>
	...

080164b0 <__swhatbuf_r>:
 80164b0:	b570      	push	{r4, r5, r6, lr}
 80164b2:	000e      	movs	r6, r1
 80164b4:	001d      	movs	r5, r3
 80164b6:	230e      	movs	r3, #14
 80164b8:	5ec9      	ldrsh	r1, [r1, r3]
 80164ba:	0014      	movs	r4, r2
 80164bc:	b096      	sub	sp, #88	; 0x58
 80164be:	2900      	cmp	r1, #0
 80164c0:	da08      	bge.n	80164d4 <__swhatbuf_r+0x24>
 80164c2:	220c      	movs	r2, #12
 80164c4:	5eb3      	ldrsh	r3, [r6, r2]
 80164c6:	2200      	movs	r2, #0
 80164c8:	602a      	str	r2, [r5, #0]
 80164ca:	061b      	lsls	r3, r3, #24
 80164cc:	d411      	bmi.n	80164f2 <__swhatbuf_r+0x42>
 80164ce:	2380      	movs	r3, #128	; 0x80
 80164d0:	00db      	lsls	r3, r3, #3
 80164d2:	e00f      	b.n	80164f4 <__swhatbuf_r+0x44>
 80164d4:	466a      	mov	r2, sp
 80164d6:	f000 f8e3 	bl	80166a0 <_fstat_r>
 80164da:	2800      	cmp	r0, #0
 80164dc:	dbf1      	blt.n	80164c2 <__swhatbuf_r+0x12>
 80164de:	23f0      	movs	r3, #240	; 0xf0
 80164e0:	9901      	ldr	r1, [sp, #4]
 80164e2:	021b      	lsls	r3, r3, #8
 80164e4:	4019      	ands	r1, r3
 80164e6:	4b05      	ldr	r3, [pc, #20]	; (80164fc <__swhatbuf_r+0x4c>)
 80164e8:	18c9      	adds	r1, r1, r3
 80164ea:	424b      	negs	r3, r1
 80164ec:	4159      	adcs	r1, r3
 80164ee:	6029      	str	r1, [r5, #0]
 80164f0:	e7ed      	b.n	80164ce <__swhatbuf_r+0x1e>
 80164f2:	2340      	movs	r3, #64	; 0x40
 80164f4:	2000      	movs	r0, #0
 80164f6:	6023      	str	r3, [r4, #0]
 80164f8:	b016      	add	sp, #88	; 0x58
 80164fa:	bd70      	pop	{r4, r5, r6, pc}
 80164fc:	ffffe000 	.word	0xffffe000

08016500 <__smakebuf_r>:
 8016500:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016502:	2602      	movs	r6, #2
 8016504:	898b      	ldrh	r3, [r1, #12]
 8016506:	0005      	movs	r5, r0
 8016508:	000c      	movs	r4, r1
 801650a:	4233      	tst	r3, r6
 801650c:	d006      	beq.n	801651c <__smakebuf_r+0x1c>
 801650e:	0023      	movs	r3, r4
 8016510:	3347      	adds	r3, #71	; 0x47
 8016512:	6023      	str	r3, [r4, #0]
 8016514:	6123      	str	r3, [r4, #16]
 8016516:	2301      	movs	r3, #1
 8016518:	6163      	str	r3, [r4, #20]
 801651a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 801651c:	466a      	mov	r2, sp
 801651e:	ab01      	add	r3, sp, #4
 8016520:	f7ff ffc6 	bl	80164b0 <__swhatbuf_r>
 8016524:	9900      	ldr	r1, [sp, #0]
 8016526:	0007      	movs	r7, r0
 8016528:	0028      	movs	r0, r5
 801652a:	f7fb fd91 	bl	8012050 <_malloc_r>
 801652e:	2800      	cmp	r0, #0
 8016530:	d108      	bne.n	8016544 <__smakebuf_r+0x44>
 8016532:	220c      	movs	r2, #12
 8016534:	5ea3      	ldrsh	r3, [r4, r2]
 8016536:	059a      	lsls	r2, r3, #22
 8016538:	d4ef      	bmi.n	801651a <__smakebuf_r+0x1a>
 801653a:	2203      	movs	r2, #3
 801653c:	4393      	bics	r3, r2
 801653e:	431e      	orrs	r6, r3
 8016540:	81a6      	strh	r6, [r4, #12]
 8016542:	e7e4      	b.n	801650e <__smakebuf_r+0xe>
 8016544:	4b0f      	ldr	r3, [pc, #60]	; (8016584 <__smakebuf_r+0x84>)
 8016546:	62ab      	str	r3, [r5, #40]	; 0x28
 8016548:	2380      	movs	r3, #128	; 0x80
 801654a:	89a2      	ldrh	r2, [r4, #12]
 801654c:	6020      	str	r0, [r4, #0]
 801654e:	4313      	orrs	r3, r2
 8016550:	81a3      	strh	r3, [r4, #12]
 8016552:	9b00      	ldr	r3, [sp, #0]
 8016554:	6120      	str	r0, [r4, #16]
 8016556:	6163      	str	r3, [r4, #20]
 8016558:	9b01      	ldr	r3, [sp, #4]
 801655a:	2b00      	cmp	r3, #0
 801655c:	d00d      	beq.n	801657a <__smakebuf_r+0x7a>
 801655e:	0028      	movs	r0, r5
 8016560:	230e      	movs	r3, #14
 8016562:	5ee1      	ldrsh	r1, [r4, r3]
 8016564:	f000 f8ae 	bl	80166c4 <_isatty_r>
 8016568:	2800      	cmp	r0, #0
 801656a:	d006      	beq.n	801657a <__smakebuf_r+0x7a>
 801656c:	2203      	movs	r2, #3
 801656e:	89a3      	ldrh	r3, [r4, #12]
 8016570:	4393      	bics	r3, r2
 8016572:	001a      	movs	r2, r3
 8016574:	2301      	movs	r3, #1
 8016576:	4313      	orrs	r3, r2
 8016578:	81a3      	strh	r3, [r4, #12]
 801657a:	89a0      	ldrh	r0, [r4, #12]
 801657c:	4307      	orrs	r7, r0
 801657e:	81a7      	strh	r7, [r4, #12]
 8016580:	e7cb      	b.n	801651a <__smakebuf_r+0x1a>
 8016582:	46c0      	nop			; (mov r8, r8)
 8016584:	08011da9 	.word	0x08011da9

08016588 <memmove>:
 8016588:	b510      	push	{r4, lr}
 801658a:	4288      	cmp	r0, r1
 801658c:	d902      	bls.n	8016594 <memmove+0xc>
 801658e:	188b      	adds	r3, r1, r2
 8016590:	4298      	cmp	r0, r3
 8016592:	d303      	bcc.n	801659c <memmove+0x14>
 8016594:	2300      	movs	r3, #0
 8016596:	e007      	b.n	80165a8 <memmove+0x20>
 8016598:	5c8b      	ldrb	r3, [r1, r2]
 801659a:	5483      	strb	r3, [r0, r2]
 801659c:	3a01      	subs	r2, #1
 801659e:	d2fb      	bcs.n	8016598 <memmove+0x10>
 80165a0:	bd10      	pop	{r4, pc}
 80165a2:	5ccc      	ldrb	r4, [r1, r3]
 80165a4:	54c4      	strb	r4, [r0, r3]
 80165a6:	3301      	adds	r3, #1
 80165a8:	429a      	cmp	r2, r3
 80165aa:	d1fa      	bne.n	80165a2 <memmove+0x1a>
 80165ac:	e7f8      	b.n	80165a0 <memmove+0x18>

080165ae <_realloc_r>:
 80165ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80165b0:	0007      	movs	r7, r0
 80165b2:	000e      	movs	r6, r1
 80165b4:	0014      	movs	r4, r2
 80165b6:	2900      	cmp	r1, #0
 80165b8:	d105      	bne.n	80165c6 <_realloc_r+0x18>
 80165ba:	0011      	movs	r1, r2
 80165bc:	f7fb fd48 	bl	8012050 <_malloc_r>
 80165c0:	0005      	movs	r5, r0
 80165c2:	0028      	movs	r0, r5
 80165c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80165c6:	2a00      	cmp	r2, #0
 80165c8:	d103      	bne.n	80165d2 <_realloc_r+0x24>
 80165ca:	f7ff fb65 	bl	8015c98 <_free_r>
 80165ce:	0025      	movs	r5, r4
 80165d0:	e7f7      	b.n	80165c2 <_realloc_r+0x14>
 80165d2:	f000 f889 	bl	80166e8 <_malloc_usable_size_r>
 80165d6:	9001      	str	r0, [sp, #4]
 80165d8:	4284      	cmp	r4, r0
 80165da:	d803      	bhi.n	80165e4 <_realloc_r+0x36>
 80165dc:	0035      	movs	r5, r6
 80165de:	0843      	lsrs	r3, r0, #1
 80165e0:	42a3      	cmp	r3, r4
 80165e2:	d3ee      	bcc.n	80165c2 <_realloc_r+0x14>
 80165e4:	0021      	movs	r1, r4
 80165e6:	0038      	movs	r0, r7
 80165e8:	f7fb fd32 	bl	8012050 <_malloc_r>
 80165ec:	1e05      	subs	r5, r0, #0
 80165ee:	d0e8      	beq.n	80165c2 <_realloc_r+0x14>
 80165f0:	9b01      	ldr	r3, [sp, #4]
 80165f2:	0022      	movs	r2, r4
 80165f4:	429c      	cmp	r4, r3
 80165f6:	d900      	bls.n	80165fa <_realloc_r+0x4c>
 80165f8:	001a      	movs	r2, r3
 80165fa:	0031      	movs	r1, r6
 80165fc:	0028      	movs	r0, r5
 80165fe:	f7fb fcf4 	bl	8011fea <memcpy>
 8016602:	0031      	movs	r1, r6
 8016604:	0038      	movs	r0, r7
 8016606:	f7ff fb47 	bl	8015c98 <_free_r>
 801660a:	e7da      	b.n	80165c2 <_realloc_r+0x14>

0801660c <_raise_r>:
 801660c:	b570      	push	{r4, r5, r6, lr}
 801660e:	0004      	movs	r4, r0
 8016610:	000d      	movs	r5, r1
 8016612:	291f      	cmp	r1, #31
 8016614:	d904      	bls.n	8016620 <_raise_r+0x14>
 8016616:	2316      	movs	r3, #22
 8016618:	6003      	str	r3, [r0, #0]
 801661a:	2001      	movs	r0, #1
 801661c:	4240      	negs	r0, r0
 801661e:	bd70      	pop	{r4, r5, r6, pc}
 8016620:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8016622:	2b00      	cmp	r3, #0
 8016624:	d004      	beq.n	8016630 <_raise_r+0x24>
 8016626:	008a      	lsls	r2, r1, #2
 8016628:	189b      	adds	r3, r3, r2
 801662a:	681a      	ldr	r2, [r3, #0]
 801662c:	2a00      	cmp	r2, #0
 801662e:	d108      	bne.n	8016642 <_raise_r+0x36>
 8016630:	0020      	movs	r0, r4
 8016632:	f000 f831 	bl	8016698 <_getpid_r>
 8016636:	002a      	movs	r2, r5
 8016638:	0001      	movs	r1, r0
 801663a:	0020      	movs	r0, r4
 801663c:	f000 f81a 	bl	8016674 <_kill_r>
 8016640:	e7ed      	b.n	801661e <_raise_r+0x12>
 8016642:	2000      	movs	r0, #0
 8016644:	2a01      	cmp	r2, #1
 8016646:	d0ea      	beq.n	801661e <_raise_r+0x12>
 8016648:	1c51      	adds	r1, r2, #1
 801664a:	d103      	bne.n	8016654 <_raise_r+0x48>
 801664c:	2316      	movs	r3, #22
 801664e:	3001      	adds	r0, #1
 8016650:	6023      	str	r3, [r4, #0]
 8016652:	e7e4      	b.n	801661e <_raise_r+0x12>
 8016654:	2400      	movs	r4, #0
 8016656:	0028      	movs	r0, r5
 8016658:	601c      	str	r4, [r3, #0]
 801665a:	4790      	blx	r2
 801665c:	0020      	movs	r0, r4
 801665e:	e7de      	b.n	801661e <_raise_r+0x12>

08016660 <raise>:
 8016660:	b510      	push	{r4, lr}
 8016662:	4b03      	ldr	r3, [pc, #12]	; (8016670 <raise+0x10>)
 8016664:	0001      	movs	r1, r0
 8016666:	6818      	ldr	r0, [r3, #0]
 8016668:	f7ff ffd0 	bl	801660c <_raise_r>
 801666c:	bd10      	pop	{r4, pc}
 801666e:	46c0      	nop			; (mov r8, r8)
 8016670:	20000014 	.word	0x20000014

08016674 <_kill_r>:
 8016674:	2300      	movs	r3, #0
 8016676:	b570      	push	{r4, r5, r6, lr}
 8016678:	4d06      	ldr	r5, [pc, #24]	; (8016694 <_kill_r+0x20>)
 801667a:	0004      	movs	r4, r0
 801667c:	0008      	movs	r0, r1
 801667e:	0011      	movs	r1, r2
 8016680:	602b      	str	r3, [r5, #0]
 8016682:	f7ed fa4b 	bl	8003b1c <_kill>
 8016686:	1c43      	adds	r3, r0, #1
 8016688:	d103      	bne.n	8016692 <_kill_r+0x1e>
 801668a:	682b      	ldr	r3, [r5, #0]
 801668c:	2b00      	cmp	r3, #0
 801668e:	d000      	beq.n	8016692 <_kill_r+0x1e>
 8016690:	6023      	str	r3, [r4, #0]
 8016692:	bd70      	pop	{r4, r5, r6, pc}
 8016694:	20002d98 	.word	0x20002d98

08016698 <_getpid_r>:
 8016698:	b510      	push	{r4, lr}
 801669a:	f7ed fa39 	bl	8003b10 <_getpid>
 801669e:	bd10      	pop	{r4, pc}

080166a0 <_fstat_r>:
 80166a0:	2300      	movs	r3, #0
 80166a2:	b570      	push	{r4, r5, r6, lr}
 80166a4:	4d06      	ldr	r5, [pc, #24]	; (80166c0 <_fstat_r+0x20>)
 80166a6:	0004      	movs	r4, r0
 80166a8:	0008      	movs	r0, r1
 80166aa:	0011      	movs	r1, r2
 80166ac:	602b      	str	r3, [r5, #0]
 80166ae:	f7ed fa94 	bl	8003bda <_fstat>
 80166b2:	1c43      	adds	r3, r0, #1
 80166b4:	d103      	bne.n	80166be <_fstat_r+0x1e>
 80166b6:	682b      	ldr	r3, [r5, #0]
 80166b8:	2b00      	cmp	r3, #0
 80166ba:	d000      	beq.n	80166be <_fstat_r+0x1e>
 80166bc:	6023      	str	r3, [r4, #0]
 80166be:	bd70      	pop	{r4, r5, r6, pc}
 80166c0:	20002d98 	.word	0x20002d98

080166c4 <_isatty_r>:
 80166c4:	2300      	movs	r3, #0
 80166c6:	b570      	push	{r4, r5, r6, lr}
 80166c8:	4d06      	ldr	r5, [pc, #24]	; (80166e4 <_isatty_r+0x20>)
 80166ca:	0004      	movs	r4, r0
 80166cc:	0008      	movs	r0, r1
 80166ce:	602b      	str	r3, [r5, #0]
 80166d0:	f7ed fa91 	bl	8003bf6 <_isatty>
 80166d4:	1c43      	adds	r3, r0, #1
 80166d6:	d103      	bne.n	80166e0 <_isatty_r+0x1c>
 80166d8:	682b      	ldr	r3, [r5, #0]
 80166da:	2b00      	cmp	r3, #0
 80166dc:	d000      	beq.n	80166e0 <_isatty_r+0x1c>
 80166de:	6023      	str	r3, [r4, #0]
 80166e0:	bd70      	pop	{r4, r5, r6, pc}
 80166e2:	46c0      	nop			; (mov r8, r8)
 80166e4:	20002d98 	.word	0x20002d98

080166e8 <_malloc_usable_size_r>:
 80166e8:	1f0b      	subs	r3, r1, #4
 80166ea:	681b      	ldr	r3, [r3, #0]
 80166ec:	1f18      	subs	r0, r3, #4
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	da01      	bge.n	80166f6 <_malloc_usable_size_r+0xe>
 80166f2:	580b      	ldr	r3, [r1, r0]
 80166f4:	18c0      	adds	r0, r0, r3
 80166f6:	4770      	bx	lr

080166f8 <_init>:
 80166f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166fa:	46c0      	nop			; (mov r8, r8)
 80166fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80166fe:	bc08      	pop	{r3}
 8016700:	469e      	mov	lr, r3
 8016702:	4770      	bx	lr

08016704 <_fini>:
 8016704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016706:	46c0      	nop			; (mov r8, r8)
 8016708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801670a:	bc08      	pop	{r3}
 801670c:	469e      	mov	lr, r3
 801670e:	4770      	bx	lr
